{"version":3,"file":"raid_sim_action-a290d9e8.chunk.js","sources":["../../../node_modules/@protobuf-ts/runtime/build/es2015/json-typings.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/base64.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/protobufjs-utf8.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/goog-varint.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/pb-long.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-reader.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/assert.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-writer.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-format-contract.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/json-format-contract.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/message-type-contract.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/lower-camel-case.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-info.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/oneof.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-type-check.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-long-convert.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-reader.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-writer.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-scalar-default.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-reader.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-writer.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-merge-partial.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-equals.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/message-type.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-create.js","../../../ui/core/proto/common.ts","../../../ui/core/proto/deathknight.ts","../../../ui/core/proto/warrior.ts","../../../ui/core/proto/warlock.ts","../../../ui/core/proto/shaman.ts","../../../ui/core/proto/rogue.ts","../../../ui/core/proto/priest.ts","../../../ui/core/proto/paladin.ts","../../../ui/core/proto/mage.ts","../../../ui/core/proto/hunter.ts","../../../ui/core/proto/druid.ts","../../../ui/core/proto/api.ts","../../../ui/core/proto/ui.ts","../../../ui/core/constants/other.ts","../../../ui/core/utils.ts","../../../ui/core/proto_utils/gems.ts","../../../ui/core/proto_utils/utils.ts","../../../ui/core/proto_utils/action_id.ts","../../../ui/core/proto_utils/equipped_item.ts","../../../ui/core/proto_utils/stats.ts","../../../ui/core/proto_utils/gear.ts","../../../ui/core/proto_utils/names.ts","../../../ui/core/proto_utils/logs_parser.ts","../../../ui/core/components/component.ts","../../../ui/core/typed_event.ts","../../../ui/core/components/input.ts","../../../ui/core/talents/talents_picker.ts","../../../ui/core/talents/druid.ts","../../../ui/core/talents/hunter.ts","../../../ui/core/talents/mage.ts","../../../ui/core/talents/paladin.ts","../../../ui/core/talents/priest.ts","../../../ui/core/talents/rogue.ts","../../../ui/core/talents/shaman.ts","../../../ui/core/talents/warlock.ts","../../../ui/core/talents/warrior.ts","../../../ui/core/talents/deathknight.ts","../../../ui/core/css_utils.ts","../../../ui/core/components/close_button.ts","../../../ui/core/components/popup.ts","../../../ui/core/talents/glyphs_picker.ts","../../../ui/core/constants/mechanics.ts","../../../ui/core/talents/factory.ts","../../../ui/core/player.ts","../../../ui/core/party.ts","../../../ui/core/proto_utils/sim_result.ts","../../../ui/core/components/raid_sim_action.ts"],"sourcesContent":["/**\n * Get the type of a JSON value.\n * Distinguishes between array, null and object.\n */\nexport function typeofJsonValue(value) {\n    let t = typeof value;\n    if (t == \"object\") {\n        if (Array.isArray(value))\n            return \"array\";\n        if (value === null)\n            return \"null\";\n    }\n    return t;\n}\n/**\n * Is this a JSON object (instead of an array or null)?\n */\nexport function isJsonObject(value) {\n    return value !== null && typeof value == \"object\" && !Array.isArray(value);\n}\n","// lookup table from base64 character to byte\nlet encTable = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decTable = [];\nfor (let i = 0; i < encTable.length; i++)\n    decTable[encTable[i].charCodeAt(0)] = i;\n// support base64url variants\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\n/**\n * Decodes a base64 string to a byte array.\n *\n * - ignores white-space, including line breaks and tabs\n * - allows inner padding (can decode concatenated base64 strings)\n * - does not require padding\n * - understands base64url encoding:\n *   \"-\" instead of \"+\",\n *   \"_\" instead of \"/\",\n *   no padding\n */\nexport function base64decode(base64Str) {\n    // estimate byte size, not accounting for inner padding and whitespace\n    let es = base64Str.length * 3 / 4;\n    // if (es % 3 !== 0)\n    // throw new Error('invalid base64 string');\n    if (base64Str[base64Str.length - 2] == '=')\n        es -= 2;\n    else if (base64Str[base64Str.length - 1] == '=')\n        es -= 1;\n    let bytes = new Uint8Array(es), bytePos = 0, // position in byte array\n    groupPos = 0, // position in base64 group\n    b, // current byte\n    p = 0 // previous byte\n    ;\n    for (let i = 0; i < base64Str.length; i++) {\n        b = decTable[base64Str.charCodeAt(i)];\n        if (b === undefined) {\n            // noinspection FallThroughInSwitchStatementJS\n            switch (base64Str[i]) {\n                case '=':\n                    groupPos = 0; // reset state when padding found\n                case '\\n':\n                case '\\r':\n                case '\\t':\n                case ' ':\n                    continue; // skip white-space, and padding\n                default:\n                    throw Error(`invalid base64 string.`);\n            }\n        }\n        switch (groupPos) {\n            case 0:\n                p = b;\n                groupPos = 1;\n                break;\n            case 1:\n                bytes[bytePos++] = p << 2 | (b & 48) >> 4;\n                p = b;\n                groupPos = 2;\n                break;\n            case 2:\n                bytes[bytePos++] = (p & 15) << 4 | (b & 60) >> 2;\n                p = b;\n                groupPos = 3;\n                break;\n            case 3:\n                bytes[bytePos++] = (p & 3) << 6 | b;\n                groupPos = 0;\n                break;\n        }\n    }\n    if (groupPos == 1)\n        throw Error(`invalid base64 string.`);\n    return bytes.subarray(0, bytePos);\n}\n/**\n * Encodes a byte array to a base64 string.\n * Adds padding at the end.\n * Does not insert newlines.\n */\nexport function base64encode(bytes) {\n    let base64 = '', groupPos = 0, // position in base64 group\n    b, // current byte\n    p = 0; // carry over from previous byte\n    for (let i = 0; i < bytes.length; i++) {\n        b = bytes[i];\n        switch (groupPos) {\n            case 0:\n                base64 += encTable[b >> 2];\n                p = (b & 3) << 4;\n                groupPos = 1;\n                break;\n            case 1:\n                base64 += encTable[p | b >> 4];\n                p = (b & 15) << 2;\n                groupPos = 2;\n                break;\n            case 2:\n                base64 += encTable[p | b >> 6];\n                base64 += encTable[b & 63];\n                groupPos = 0;\n                break;\n        }\n    }\n    // padding required?\n    if (groupPos) {\n        base64 += encTable[p];\n        base64 += '=';\n        if (groupPos == 1)\n            base64 += '=';\n    }\n    return base64;\n}\n","// Copyright (c) 2016, Daniel Wirtz  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n// * Neither the name of its author, nor the names of its contributors\n//   may be used to endorse or promote products derived from this software\n//   without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nconst fromCharCodes = (chunk) => String.fromCharCode.apply(String, chunk);\n/**\n * Reads UTF8 bytes as a string.\n *\n * See [protobufjs / utf8](https://github.com/protobufjs/protobuf.js/blob/9893e35b854621cce64af4bf6be2cff4fb892796/lib/utf8/index.js#L40)\n *\n * Copyright (c) 2016, Daniel Wirtz\n */\nexport function utf8read(bytes) {\n    if (bytes.length < 1)\n        return \"\";\n    let pos = 0, // position in bytes\n    parts = [], chunk = [], i = 0, // char offset\n    t; // temporary\n    let len = bytes.length;\n    while (pos < len) {\n        t = bytes[pos++];\n        if (t < 128)\n            chunk[i++] = t;\n        else if (t > 191 && t < 224)\n            chunk[i++] = (t & 31) << 6 | bytes[pos++] & 63;\n        else if (t > 239 && t < 365) {\n            t = ((t & 7) << 18 | (bytes[pos++] & 63) << 12 | (bytes[pos++] & 63) << 6 | bytes[pos++] & 63) - 0x10000;\n            chunk[i++] = 0xD800 + (t >> 10);\n            chunk[i++] = 0xDC00 + (t & 1023);\n        }\n        else\n            chunk[i++] = (t & 15) << 12 | (bytes[pos++] & 63) << 6 | bytes[pos++] & 63;\n        if (i > 8191) {\n            parts.push(fromCharCodes(chunk));\n            i = 0;\n        }\n    }\n    if (parts.length) {\n        if (i)\n            parts.push(fromCharCodes(chunk.slice(0, i)));\n        return parts.join(\"\");\n    }\n    return fromCharCodes(chunk.slice(0, i));\n}\n","// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [0]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nexport function varint64read() {\n    let lowBits = 0;\n    let highBits = 0;\n    for (let shift = 0; shift < 28; shift += 7) {\n        let b = this.buf[this.pos++];\n        lowBits |= (b & 0x7F) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    let middleByte = this.buf[this.pos++];\n    // last four bits of the first 32 bit number\n    lowBits |= (middleByte & 0x0F) << 28;\n    // 3 upper bits are part of the next 32 bit number\n    highBits = (middleByte & 0x70) >> 4;\n    if ((middleByte & 0x80) == 0) {\n        this.assertBounds();\n        return [lowBits, highBits];\n    }\n    for (let shift = 3; shift <= 31; shift += 7) {\n        let b = this.buf[this.pos++];\n        highBits |= (b & 0x7F) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    throw new Error('invalid varint');\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nexport function varint64write(lo, hi, bytes) {\n    for (let i = 0; i < 28; i = i + 7) {\n        const shift = lo >>> i;\n        const hasNext = !((shift >>> 7) == 0 && hi == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    const splitBits = ((lo >>> 28) & 0x0F) | ((hi & 0x07) << 4);\n    const hasMoreBits = !((hi >> 3) == 0);\n    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xFF);\n    if (!hasMoreBits) {\n        return;\n    }\n    for (let i = 3; i < 31; i = i + 7) {\n        const shift = hi >>> i;\n        const hasNext = !((shift >>> 7) == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    bytes.push((hi >>> 31) & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = (1 << 16) * (1 << 16);\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Returns tuple:\n * [0]: minus sign?\n * [1]: low bits\n * [2]: high bits\n *\n * Copyright 2008 Google Inc.\n */\nexport function int64fromString(dec) {\n    // Check for minus sign.\n    let minus = dec[0] == '-';\n    if (minus)\n        dec = dec.slice(1);\n    // Work 6 decimal digits at a time, acting like we're converting base 1e6\n    // digits to binary. This is safe to do with floating point math because\n    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n    const base = 1e6;\n    let lowBits = 0;\n    let highBits = 0;\n    function add1e6digit(begin, end) {\n        // Note: Number('') is 0.\n        const digit1e6 = Number(dec.slice(begin, end));\n        highBits *= base;\n        lowBits = lowBits * base + digit1e6;\n        // Carry bits from lowBits to\n        if (lowBits >= TWO_PWR_32_DBL) {\n            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);\n            lowBits = lowBits % TWO_PWR_32_DBL;\n        }\n    }\n    add1e6digit(-24, -18);\n    add1e6digit(-18, -12);\n    add1e6digit(-12, -6);\n    add1e6digit(-6);\n    return [minus, lowBits, highBits];\n}\n/**\n * Format 64 bit integer value (as two JS numbers) to decimal string.\n *\n * Copyright 2008 Google Inc.\n */\nexport function int64toString(bitsLow, bitsHigh) {\n    // Skip the expensive conversion if the number is small enough to use the\n    // built-in conversions.\n    if (bitsHigh <= 0x1FFFFF) {\n        return '' + (TWO_PWR_32_DBL * bitsHigh + bitsLow);\n    }\n    // What this code is doing is essentially converting the input number from\n    // base-2 to base-1e7, which allows us to represent the 64-bit range with\n    // only 3 (very large) digits. Those digits are then trivial to convert to\n    // a base-10 string.\n    // The magic numbers used here are -\n    // 2^24 = 16777216 = (1,6777216) in base-1e7.\n    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n    // Split 32:32 representation into 16:24:24 representation so our\n    // intermediate digits don't overflow.\n    let low = bitsLow & 0xFFFFFF;\n    let mid = (((bitsLow >>> 24) | (bitsHigh << 8)) >>> 0) & 0xFFFFFF;\n    let high = (bitsHigh >> 16) & 0xFFFF;\n    // Assemble our three base-1e7 digits, ignoring carries. The maximum\n    // value in a digit at this step is representable as a 48-bit integer, which\n    // can be stored in a 64-bit floating point number.\n    let digitA = low + (mid * 6777216) + (high * 6710656);\n    let digitB = mid + (high * 8147497);\n    let digitC = (high * 2);\n    // Apply carries from A to B and from B to C.\n    let base = 10000000;\n    if (digitA >= base) {\n        digitB += Math.floor(digitA / base);\n        digitA %= base;\n    }\n    if (digitB >= base) {\n        digitC += Math.floor(digitB / base);\n        digitB %= base;\n    }\n    // Convert base-1e7 digits to base-10, with optional leading zeroes.\n    function decimalFrom1e7(digit1e7, needLeadingZeros) {\n        let partial = digit1e7 ? String(digit1e7) : '';\n        if (needLeadingZeros) {\n            return '0000000'.slice(partial.length) + partial;\n        }\n        return partial;\n    }\n    return decimalFrom1e7(digitC, /*needLeadingZeros=*/ 0) +\n        decimalFrom1e7(digitB, /*needLeadingZeros=*/ digitC) +\n        // If the final 1e7 digit didn't need leading zeros, we would have\n        // returned via the trivial code path at the top.\n        decimalFrom1e7(digitA, /*needLeadingZeros=*/ 1);\n}\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nexport function varint32write(value, bytes) {\n    if (value >= 0) {\n        // write value as varint 32\n        while (value > 0x7f) {\n            bytes.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        bytes.push(value);\n    }\n    else {\n        for (let i = 0; i < 9; i++) {\n            bytes.push(value & 127 | 128);\n            value = value >> 7;\n        }\n        bytes.push(1);\n    }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nexport function varint32read() {\n    let b = this.buf[this.pos++];\n    let result = b & 0x7F;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 7;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 14;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 21;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    // Extract only last 4 bits\n    b = this.buf[this.pos++];\n    result |= (b & 0x0F) << 28;\n    for (let readBytes = 5; ((b & 0x80) !== 0) && readBytes < 10; readBytes++)\n        b = this.buf[this.pos++];\n    if ((b & 0x80) != 0)\n        throw new Error('invalid varint');\n    this.assertBounds();\n    // Result can have 32 bits, convert it to unsigned\n    return result >>> 0;\n}\n","import { int64fromString, int64toString } from \"./goog-varint\";\nfunction detectBi() {\n    const dv = new DataView(new ArrayBuffer(8));\n    const ok = globalThis.BigInt !== undefined\n        && typeof dv.getBigInt64 === \"function\"\n        && typeof dv.getBigUint64 === \"function\"\n        && typeof dv.setBigInt64 === \"function\"\n        && typeof dv.setBigUint64 === \"function\";\n    return ok ? {\n        MIN: BigInt(\"-9223372036854775808\"),\n        MAX: BigInt(\"9223372036854775807\"),\n        UMIN: BigInt(\"0\"),\n        UMAX: BigInt(\"18446744073709551615\"),\n        C: BigInt,\n        V: dv,\n    } : undefined;\n}\nconst BI = detectBi();\nfunction assertBi(bi) {\n    if (!bi)\n        throw new Error(\"BigInt unavailable, see https://github.com/timostamm/protobuf-ts/blob/v1.0.8/MANUAL.md#bigint-support\");\n}\n// used to validate from(string) input (when bigint is unavailable)\nconst RE_DECIMAL_STR = /^-?[0-9]+$/;\n// constants for binary math\nconst TWO_PWR_32_DBL = (1 << 16) * (1 << 16);\n// base class for PbLong and PbULong provides shared code\nclass SharedPbLong {\n    /**\n     * Create a new instance with the given bits.\n     */\n    constructor(lo, hi) {\n        this.lo = lo | 0;\n        this.hi = hi | 0;\n    }\n    /**\n     * Is this instance equal to 0?\n     */\n    isZero() {\n        return this.lo == 0 && this.hi == 0;\n    }\n    /**\n     * Convert to a native number.\n     */\n    toNumber() {\n        let result = this.hi * TWO_PWR_32_DBL + (this.lo >>> 0);\n        if (!Number.isSafeInteger(result))\n            throw new Error(\"cannot convert to safe number\");\n        return result;\n    }\n}\n/**\n * 64-bit unsigned integer as two 32-bit values.\n * Converts between `string`, `number` and `bigint` representations.\n */\nexport class PbULong extends SharedPbLong {\n    /**\n     * Create instance from a `string`, `number` or `bigint`.\n     */\n    static from(value) {\n        if (BI)\n            // noinspection FallThroughInSwitchStatementJS\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    if (value == \"\")\n                        throw new Error('string is no integer');\n                    value = BI.C(value);\n                case \"number\":\n                    if (value === 0)\n                        return this.ZERO;\n                    value = BI.C(value);\n                case \"bigint\":\n                    if (!value)\n                        return this.ZERO;\n                    if (value < BI.UMIN)\n                        throw new Error('signed value for ulong');\n                    if (value > BI.UMAX)\n                        throw new Error('ulong too large');\n                    BI.V.setBigUint64(0, value, true);\n                    return new PbULong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));\n            }\n        else\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    value = value.trim();\n                    if (!RE_DECIMAL_STR.test(value))\n                        throw new Error('string is no integer');\n                    let [minus, lo, hi] = int64fromString(value);\n                    if (minus)\n                        throw new Error('signed value');\n                    return new PbULong(lo, hi);\n                case \"number\":\n                    if (value == 0)\n                        return this.ZERO;\n                    if (!Number.isSafeInteger(value))\n                        throw new Error('number is no integer');\n                    if (value < 0)\n                        throw new Error('signed value for ulong');\n                    return new PbULong(value, value / TWO_PWR_32_DBL);\n            }\n        throw new Error('unknown value ' + typeof value);\n    }\n    /**\n     * Convert to decimal string.\n     */\n    toString() {\n        return BI ? this.toBigInt().toString() : int64toString(this.lo, this.hi);\n    }\n    /**\n     * Convert to native bigint.\n     */\n    toBigInt() {\n        assertBi(BI);\n        BI.V.setInt32(0, this.lo, true);\n        BI.V.setInt32(4, this.hi, true);\n        return BI.V.getBigUint64(0, true);\n    }\n}\n/**\n * ulong 0 singleton.\n */\nPbULong.ZERO = new PbULong(0, 0);\n/**\n * 64-bit signed integer as two 32-bit values.\n * Converts between `string`, `number` and `bigint` representations.\n */\nexport class PbLong extends SharedPbLong {\n    /**\n     * Create instance from a `string`, `number` or `bigint`.\n     */\n    static from(value) {\n        if (BI)\n            // noinspection FallThroughInSwitchStatementJS\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    if (value == \"\")\n                        throw new Error('string is no integer');\n                    value = BI.C(value);\n                case \"number\":\n                    if (value === 0)\n                        return this.ZERO;\n                    value = BI.C(value);\n                case \"bigint\":\n                    if (!value)\n                        return this.ZERO;\n                    if (value < BI.MIN)\n                        throw new Error('ulong too small');\n                    if (value > BI.MAX)\n                        throw new Error('ulong too large');\n                    BI.V.setBigInt64(0, value, true);\n                    return new PbLong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));\n            }\n        else\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    value = value.trim();\n                    if (!RE_DECIMAL_STR.test(value))\n                        throw new Error('string is no integer');\n                    let [minus, lo, hi] = int64fromString(value);\n                    let pbl = new PbLong(lo, hi);\n                    return minus ? pbl.negate() : pbl;\n                case \"number\":\n                    if (value == 0)\n                        return this.ZERO;\n                    if (!Number.isSafeInteger(value))\n                        throw new Error('number is no integer');\n                    return value > 0\n                        ? new PbLong(value, value / TWO_PWR_32_DBL)\n                        : new PbLong(-value, -value / TWO_PWR_32_DBL).negate();\n            }\n        throw new Error('unknown value ' + typeof value);\n    }\n    /**\n     * Do we have a minus sign?\n     */\n    isNegative() {\n        return (this.hi & 0x80000000) !== 0;\n    }\n    /**\n     * Negate two's complement.\n     * Invert all the bits and add one to the result.\n     */\n    negate() {\n        let hi = ~this.hi, lo = this.lo;\n        if (lo)\n            lo = ~lo + 1;\n        else\n            hi += 1;\n        return new PbLong(lo, hi);\n    }\n    /**\n     * Convert to decimal string.\n     */\n    toString() {\n        if (BI)\n            return this.toBigInt().toString();\n        if (this.isNegative()) {\n            let n = this.negate();\n            return '-' + int64toString(n.lo, n.hi);\n        }\n        return int64toString(this.lo, this.hi);\n    }\n    /**\n     * Convert to native bigint.\n     */\n    toBigInt() {\n        assertBi(BI);\n        BI.V.setInt32(0, this.lo, true);\n        BI.V.setInt32(4, this.hi, true);\n        return BI.V.getBigInt64(0, true);\n    }\n}\n/**\n * long 0 singleton.\n */\nPbLong.ZERO = new PbLong(0, 0);\n","import { WireType } from \"./binary-format-contract\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { utf8read } from \"./protobufjs-utf8\";\nimport { varint32read, varint64read } from \"./goog-varint\";\nexport class BinaryReader {\n    constructor(buf) {\n        this.varint64 = varint64read; // dirty cast for `this`\n        /**\n         * Read a `uint32` field, an unsigned 32 bit varint.\n         */\n        this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`\n        this.buf = buf;\n        this.len = buf.length;\n        this.pos = 0;\n        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n    /**\n     * Reads a tag - field number and wire type.\n     */\n    tag() {\n        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;\n        if (fieldNo <= 0 || wireType < 0 || wireType > 5)\n            throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n        return [fieldNo, wireType];\n    }\n    /**\n     * Skip one element on the wire and return the skipped data.\n     * Supports WireType.StartGroup since v2.0.0-alpha.23.\n     */\n    skip(wireType) {\n        let start = this.pos;\n        // noinspection FallThroughInSwitchStatementJS\n        switch (wireType) {\n            case WireType.Varint:\n                while (this.buf[this.pos++] & 0x80) {\n                    // ignore\n                }\n                break;\n            case WireType.Bit64:\n                this.pos += 4;\n            case WireType.Bit32:\n                this.pos += 4;\n                break;\n            case WireType.LengthDelimited:\n                let len = this.uint32();\n                this.pos += len;\n                break;\n            case WireType.StartGroup:\n                // From descriptor.proto: Group type is deprecated, not supported in proto3.\n                // But we must still be able to parse and treat as unknown.\n                let t;\n                while ((t = this.tag()[1]) !== WireType.EndGroup) {\n                    this.skip(t);\n                }\n                break;\n            default:\n                throw new Error(\"cant skip wire type \" + wireType);\n        }\n        this.assertBounds();\n        return this.buf.subarray(start, this.pos);\n    }\n    /**\n     * Throws error if position in byte array is out of range.\n     */\n    assertBounds() {\n        if (this.pos > this.len)\n            throw new RangeError(\"premature EOF\");\n    }\n    /**\n     * Read a `int32` field, a signed 32 bit varint.\n     */\n    int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32() {\n        let zze = this.uint32();\n        // decode zigzag\n        return (zze >>> 1) ^ -(zze & 1);\n    }\n    /**\n     * Read a `int64` field, a signed 64-bit varint.\n     */\n    int64() {\n        return new PbLong(...this.varint64());\n    }\n    /**\n     * Read a `uint64` field, an unsigned 64-bit varint.\n     */\n    uint64() {\n        return new PbULong(...this.varint64());\n    }\n    /**\n     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64() {\n        let [lo, hi] = this.varint64();\n        // decode zig zag\n        let s = -(lo & 1);\n        lo = ((lo >>> 1 | (hi & 1) << 31) ^ s);\n        hi = (hi >>> 1 ^ s);\n        return new PbLong(lo, hi);\n    }\n    /**\n     * Read a `bool` field, a variant.\n     */\n    bool() {\n        let [lo, hi] = this.varint64();\n        return lo !== 0 || hi !== 0;\n    }\n    /**\n     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32() {\n        return this.view.getUint32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32() {\n        return this.view.getInt32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64() {\n        return new PbULong(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64() {\n        return new PbLong(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `float` field, 32-bit floating point number.\n     */\n    float() {\n        return this.view.getFloat32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `double` field, a 64-bit floating point number.\n     */\n    double() {\n        return this.view.getFloat64((this.pos += 8) - 8, true);\n    }\n    /**\n     * Read a `bytes` field, length-delimited arbitrary data.\n     */\n    bytes() {\n        let len = this.uint32();\n        let start = this.pos;\n        this.pos += len;\n        this.assertBounds();\n        return this.buf.subarray(start, start + len);\n    }\n    /**\n     * Read a `string` field, length-delimited data converted to UTF-8 text.\n     */\n    string() {\n        return utf8read(this.bytes());\n    }\n}\n","/**\n * assert that condition is true or throw error (with message)\n */\nexport function assert(condition, msg) {\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\n/**\n * assert that value cannot exist = type `never`. throw runtime error if it does.\n */\nexport function assertNever(value, msg) {\n    throw new Error(msg !== null && msg !== void 0 ? msg : 'Unexpected object: ' + value);\n}\nconst FLOAT32_MAX = 3.4028234663852886e+38, FLOAT32_MIN = -3.4028234663852886e+38, UINT32_MAX = 0xFFFFFFFF, INT32_MAX = 0X7FFFFFFF, INT32_MIN = -0X80000000;\nexport function assertInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid int 32: ' + typeof arg);\n    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)\n        throw new Error('invalid int 32: ' + arg);\n}\nexport function assertUInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid uint 32: ' + typeof arg);\n    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)\n        throw new Error('invalid uint 32: ' + arg);\n}\nexport function assertFloat32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid float 32: ' + typeof arg);\n    if (!Number.isFinite(arg))\n        return;\n    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)\n        throw new Error('invalid float 32: ' + arg);\n}\n","import { PbLong, PbULong } from \"./pb-long\";\nimport { varint32write, varint64write } from \"./goog-varint\";\nimport { assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\nexport class BinaryWriter {\n    constructor(textEncoder) {\n        /**\n         * Previous fork states.\n         */\n        this.stack = [];\n        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\n        this.chunks = [];\n        this.buf = [];\n    }\n    /**\n     * Return all bytes written and reset this writer.\n     */\n    finish() {\n        this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n        let len = 0;\n        for (let i = 0; i < this.chunks.length; i++)\n            len += this.chunks[i].length;\n        let bytes = new Uint8Array(len);\n        let offset = 0;\n        for (let i = 0; i < this.chunks.length; i++) {\n            bytes.set(this.chunks[i], offset);\n            offset += this.chunks[i].length;\n        }\n        this.chunks = [];\n        return bytes;\n    }\n    /**\n     * Start a new fork for length-delimited data like a message\n     * or a packed repeated field.\n     *\n     * Must be joined later with `join()`.\n     */\n    fork() {\n        this.stack.push({ chunks: this.chunks, buf: this.buf });\n        this.chunks = [];\n        this.buf = [];\n        return this;\n    }\n    /**\n     * Join the last fork. Write its length and bytes, then\n     * return to the previous state.\n     */\n    join() {\n        // get chunk of fork\n        let chunk = this.finish();\n        // restore previous state\n        let prev = this.stack.pop();\n        if (!prev)\n            throw new Error('invalid state, fork stack empty');\n        this.chunks = prev.chunks;\n        this.buf = prev.buf;\n        // write length of chunk as varint\n        this.uint32(chunk.byteLength);\n        return this.raw(chunk);\n    }\n    /**\n     * Writes a tag (field number and wire type).\n     *\n     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n     *\n     * Generated code should compute the tag ahead of time and call `uint32()`.\n     */\n    tag(fieldNo, type) {\n        return this.uint32((fieldNo << 3 | type) >>> 0);\n    }\n    /**\n     * Write a chunk of raw bytes.\n     */\n    raw(chunk) {\n        if (this.buf.length) {\n            this.chunks.push(new Uint8Array(this.buf));\n            this.buf = [];\n        }\n        this.chunks.push(chunk);\n        return this;\n    }\n    /**\n     * Write a `uint32` value, an unsigned 32 bit varint.\n     */\n    uint32(value) {\n        assertUInt32(value);\n        // write value as varint 32, inlined for speed\n        while (value > 0x7f) {\n            this.buf.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        this.buf.push(value);\n        return this;\n    }\n    /**\n     * Write a `int32` value, a signed 32 bit varint.\n     */\n    int32(value) {\n        assertInt32(value);\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `bool` value, a variant.\n     */\n    bool(value) {\n        this.buf.push(value ? 1 : 0);\n        return this;\n    }\n    /**\n     * Write a `bytes` value, length-delimited arbitrary data.\n     */\n    bytes(value) {\n        this.uint32(value.byteLength); // write length of chunk as varint\n        return this.raw(value);\n    }\n    /**\n     * Write a `string` value, length-delimited data converted to UTF-8 text.\n     */\n    string(value) {\n        let chunk = this.textEncoder.encode(value);\n        this.uint32(chunk.byteLength); // write length of chunk as varint\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `float` value, 32-bit floating point number.\n     */\n    float(value) {\n        assertFloat32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setFloat32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `double` value, a 64-bit floating point number.\n     */\n    double(value) {\n        let chunk = new Uint8Array(8);\n        new DataView(chunk.buffer).setFloat64(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32(value) {\n        assertUInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setUint32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32(value) {\n        assertInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setInt32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32(value) {\n        assertInt32(value);\n        // zigzag encode\n        value = ((value << 1) ^ (value >> 31)) >>> 0;\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64(value) {\n        let chunk = new Uint8Array(8);\n        let view = new DataView(chunk.buffer);\n        let long = PbLong.from(value);\n        view.setInt32(0, long.lo, true);\n        view.setInt32(4, long.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64(value) {\n        let chunk = new Uint8Array(8);\n        let view = new DataView(chunk.buffer);\n        let long = PbULong.from(value);\n        view.setInt32(0, long.lo, true);\n        view.setInt32(4, long.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `int64` value, a signed 64-bit varint.\n     */\n    int64(value) {\n        let long = PbLong.from(value);\n        varint64write(long.lo, long.hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64(value) {\n        let long = PbLong.from(value), \n        // zigzag encode\n        sign = long.hi >> 31, lo = (long.lo << 1) ^ sign, hi = ((long.hi << 1) | (long.lo >>> 31)) ^ sign;\n        varint64write(lo, hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `uint64` value, an unsigned 64-bit varint.\n     */\n    uint64(value) {\n        let long = PbULong.from(value);\n        varint64write(long.lo, long.hi, this.buf);\n        return this;\n    }\n}\n","import { BinaryReader } from \"./binary-reader\";\nimport { BinaryWriter } from \"./binary-writer\";\n/**\n * This handler implements the default behaviour for unknown fields.\n * When reading data, unknown fields are stored on the message, in a\n * symbol property.\n * When writing data, the symbol property is queried and unknown fields\n * are serialized into the output again.\n */\nexport var UnknownFieldHandler;\n(function (UnknownFieldHandler) {\n    /**\n     * The symbol used to store unknown fields for a message.\n     * The property must conform to `UnknownFieldContainer`.\n     */\n    UnknownFieldHandler.symbol = Symbol(\"protobuf-ts/unknown\");\n    /**\n     * Store an unknown field during binary read directly on the message.\n     * This method is compatible with `BinaryReadOptions.readUnknownField`.\n     */\n    UnknownFieldHandler.onRead = (typeName, message, fieldNo, wireType, data) => {\n        let container = is(message) ? message[UnknownFieldHandler.symbol] : message[UnknownFieldHandler.symbol] = [];\n        container.push({ no: fieldNo, wireType, data });\n    };\n    /**\n     * Write unknown fields stored for the message to the writer.\n     * This method is compatible with `BinaryWriteOptions.writeUnknownFields`.\n     */\n    UnknownFieldHandler.onWrite = (typeName, message, writer) => {\n        for (let { no, wireType, data } of UnknownFieldHandler.list(message))\n            writer.tag(no, wireType).raw(data);\n    };\n    /**\n     * List unknown fields stored for the message.\n     * Note that there may be multiples fields with the same number.\n     */\n    UnknownFieldHandler.list = (message, fieldNo) => {\n        if (is(message)) {\n            let all = message[UnknownFieldHandler.symbol];\n            return fieldNo ? all.filter(uf => uf.no == fieldNo) : all;\n        }\n        return [];\n    };\n    /**\n     * Returns the last unknown field by field number.\n     */\n    UnknownFieldHandler.last = (message, fieldNo) => UnknownFieldHandler.list(message, fieldNo).slice(-1)[0];\n    const is = (message) => message && Array.isArray(message[UnknownFieldHandler.symbol]);\n})(UnknownFieldHandler || (UnknownFieldHandler = {}));\n/**\n * Make options for writing binary data form partial options.\n */\nexport function binaryWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;\n}\n/**\n * Make options for reading binary data form partial options.\n */\nexport function binaryReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;\n}\nconst defaultsRead = {\n    readUnknownField: true,\n    readerFactory: bytes => new BinaryReader(bytes),\n}, defaultsWrite = {\n    writeUnknownFields: true,\n    writerFactory: () => new BinaryWriter(),\n};\n/**\n * Merges binary write or read options. Later values override earlier values.\n */\nexport function mergeBinaryOptions(a, b) {\n    return Object.assign(Object.assign({}, a), b);\n}\n/**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */\nexport var WireType;\n(function (WireType) {\n    /**\n     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n     */\n    WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n    /**\n     * Used for fixed64, sfixed64, double.\n     * Always 8 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n    /**\n     * Used for string, bytes, embedded messages, packed repeated fields\n     *\n     * Only repeated numeric types (types which use the varint, 32-bit,\n     * or 64-bit wire types) can be packed. In proto3, such fields are\n     * packed by default.\n     */\n    WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n    /**\n     * Used for fixed32, sfixed32, float.\n     * Always 4 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));\n","const defaultsWrite = {\n    emitDefaultValues: false,\n    enumAsInteger: false,\n    useProtoFieldName: false,\n    prettySpaces: 0,\n}, defaultsRead = {\n    ignoreUnknownFields: false,\n};\n/**\n * Make options for reading JSON data from partial options.\n */\nexport function jsonReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;\n}\n/**\n * Make options for writing JSON data from partial options.\n */\nexport function jsonWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;\n}\n/**\n * Merges JSON write or read options. Later values override earlier values. Type registries are merged.\n */\nexport function mergeJsonOptions(a, b) {\n    var _a, _b;\n    let c = Object.assign(Object.assign({}, a), b);\n    c.typeRegistry = [...((_a = a === null || a === void 0 ? void 0 : a.typeRegistry) !== null && _a !== void 0 ? _a : []), ...((_b = b === null || b === void 0 ? void 0 : b.typeRegistry) !== null && _b !== void 0 ? _b : [])];\n    return c;\n}\n","/**\n * The symbol used as a key on message objects to store the message type.\n *\n * Note that this is an experimental feature - it is here to stay, but\n * implementation details may change without notice.\n */\nexport const MESSAGE_TYPE = Symbol(\"protobuf-ts/message-type\");\n","/**\n * Converts snake_case to lowerCamelCase.\n *\n * Should behave like protoc:\n * https://github.com/protocolbuffers/protobuf/blob/e8ae137c96444ea313485ed1118c5e43b2099cf1/src/google/protobuf/compiler/java/java_helpers.cc#L118\n */\nexport function lowerCamelCase(snakeCase) {\n    let capNext = false;\n    const sb = [];\n    for (let i = 0; i < snakeCase.length; i++) {\n        let next = snakeCase.charAt(i);\n        if (next == '_') {\n            capNext = true;\n        }\n        else if (/\\d/.test(next)) {\n            sb.push(next);\n            capNext = true;\n        }\n        else if (capNext) {\n            sb.push(next.toUpperCase());\n            capNext = false;\n        }\n        else if (i == 0) {\n            sb.push(next.toLowerCase());\n        }\n        else {\n            sb.push(next);\n        }\n    }\n    return sb.join('');\n}\n","import { lowerCamelCase } from \"./lower-camel-case\";\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */\nexport var ScalarType;\n(function (ScalarType) {\n    // 0 is reserved for errors.\n    // Order is weird for historical reasons.\n    ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n    ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n    ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n    ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n    ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n    ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n    // Tag-delimited aggregate.\n    // Group type is deprecated and not supported in proto3. However, Proto3\n    // implementations should still be able to parse the group wire format and\n    // treat group fields as unknown fields.\n    // TYPE_GROUP = 10,\n    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n    // New in version 2.\n    ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n    ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n    // TYPE_ENUM = 14,\n    ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n    ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n/**\n * JavaScript representation of 64 bit integral types. Equivalent to the\n * field option \"jstype\".\n *\n * By default, protobuf-ts represents 64 bit types as `bigint`.\n *\n * You can change the default behaviour by enabling the plugin parameter\n * `long_type_string`, which will represent 64 bit types as `string`.\n *\n * Alternatively, you can change the behaviour for individual fields\n * with the field option \"jstype\":\n *\n * ```protobuf\n * uint64 my_field = 1 [jstype = JS_STRING];\n * uint64 other_field = 2 [jstype = JS_NUMBER];\n * ```\n */\nexport var LongType;\n(function (LongType) {\n    /**\n     * Use JavaScript `bigint`.\n     *\n     * Field option `[jstype = JS_NORMAL]`.\n     */\n    LongType[LongType[\"BIGINT\"] = 0] = \"BIGINT\";\n    /**\n     * Use JavaScript `string`.\n     *\n     * Field option `[jstype = JS_STRING]`.\n     */\n    LongType[LongType[\"STRING\"] = 1] = \"STRING\";\n    /**\n     * Use JavaScript `number`.\n     *\n     * Large values will loose precision.\n     *\n     * Field option `[jstype = JS_NUMBER]`.\n     */\n    LongType[LongType[\"NUMBER\"] = 2] = \"NUMBER\";\n})(LongType || (LongType = {}));\n/**\n * Protobuf 2.1.0 introduced packed repeated fields.\n * Setting the field option `[packed = true]` enables packing.\n *\n * In proto3, all repeated fields are packed by default.\n * Setting the field option `[packed = false]` disables packing.\n *\n * Packed repeated fields are encoded with a single tag,\n * then a length-delimiter, then the element values.\n *\n * Unpacked repeated fields are encoded with a tag and\n * value for each element.\n *\n * `bytes` and `string` cannot be packed.\n */\nexport var RepeatType;\n(function (RepeatType) {\n    /**\n     * The field is not repeated.\n     */\n    RepeatType[RepeatType[\"NO\"] = 0] = \"NO\";\n    /**\n     * The field is repeated and should be packed.\n     * Invalid for `bytes` and `string`, they cannot be packed.\n     */\n    RepeatType[RepeatType[\"PACKED\"] = 1] = \"PACKED\";\n    /**\n     * The field is repeated but should not be packed.\n     * The only valid repeat type for repeated `bytes` and `string`.\n     */\n    RepeatType[RepeatType[\"UNPACKED\"] = 2] = \"UNPACKED\";\n})(RepeatType || (RepeatType = {}));\n/**\n * Turns PartialFieldInfo into FieldInfo.\n */\nexport function normalizeFieldInfo(field) {\n    var _a, _b, _c, _d;\n    field.localName = (_a = field.localName) !== null && _a !== void 0 ? _a : lowerCamelCase(field.name);\n    field.jsonName = (_b = field.jsonName) !== null && _b !== void 0 ? _b : lowerCamelCase(field.name);\n    field.repeat = (_c = field.repeat) !== null && _c !== void 0 ? _c : RepeatType.NO;\n    field.opt = (_d = field.opt) !== null && _d !== void 0 ? _d : (field.repeat ? false : field.oneof ? false : field.kind == \"message\");\n    return field;\n}\n/**\n * Read custom field options from a generated message type.\n *\n * @deprecated use readFieldOption()\n */\nexport function readFieldOptions(messageType, fieldName, extensionName, extensionType) {\n    var _a;\n    const options = (_a = messageType.fields.find((m, i) => m.localName == fieldName || i == fieldName)) === null || _a === void 0 ? void 0 : _a.options;\n    return options && options[extensionName] ? extensionType.fromJson(options[extensionName]) : undefined;\n}\nexport function readFieldOption(messageType, fieldName, extensionName, extensionType) {\n    var _a;\n    const options = (_a = messageType.fields.find((m, i) => m.localName == fieldName || i == fieldName)) === null || _a === void 0 ? void 0 : _a.options;\n    if (!options) {\n        return undefined;\n    }\n    const optionVal = options[extensionName];\n    if (optionVal === undefined) {\n        return optionVal;\n    }\n    return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\nexport function readMessageOption(messageType, extensionName, extensionType) {\n    const options = messageType.options;\n    const optionVal = options[extensionName];\n    if (optionVal === undefined) {\n        return optionVal;\n    }\n    return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\n","/**\n * Is the given value a valid oneof group?\n *\n * We represent protobuf `oneof` as algebraic data types (ADT) in generated\n * code. But when working with messages of unknown type, the ADT does not\n * help us.\n *\n * This type guard checks if the given object adheres to the ADT rules, which\n * are as follows:\n *\n * 1) Must be an object.\n *\n * 2) Must have a \"oneofKind\" discriminator property.\n *\n * 3) If \"oneofKind\" is `undefined`, no member field is selected. The object\n * must not have any other properties.\n *\n * 4) If \"oneofKind\" is a `string`, the member field with this name is\n * selected.\n *\n * 5) If a member field is selected, the object must have a second property\n * with this name. The property must not be `undefined`.\n *\n * 6) No extra properties are allowed. The object has either one property\n * (no selection) or two properties (selection).\n *\n */\nexport function isOneofGroup(any) {\n    if (typeof any != 'object' || any === null || !any.hasOwnProperty('oneofKind')) {\n        return false;\n    }\n    switch (typeof any.oneofKind) {\n        case \"string\":\n            if (any[any.oneofKind] === undefined)\n                return false;\n            return Object.keys(any).length == 2;\n        case \"undefined\":\n            return Object.keys(any).length == 1;\n        default:\n            return false;\n    }\n}\n/**\n * Returns the value of the given field in a oneof group.\n */\nexport function getOneofValue(oneof, kind) {\n    return oneof[kind];\n}\nexport function setOneofValue(oneof, kind, value) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = kind;\n    if (value !== undefined) {\n        oneof[kind] = value;\n    }\n}\nexport function setUnknownOneofValue(oneof, kind, value) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = kind;\n    if (value !== undefined && kind !== undefined) {\n        oneof[kind] = value;\n    }\n}\n/**\n * Removes the selected field in a oneof group.\n *\n * Note that the recommended way to modify a oneof group is to set\n * a new object:\n *\n * ```ts\n * message.result = { oneofKind: undefined };\n * ```\n */\nexport function clearOneofValue(oneof) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = undefined;\n}\n/**\n * Returns the selected value of the given oneof group.\n *\n * Not that the recommended way to access a oneof group is to check\n * the \"oneofKind\" property and let TypeScript narrow down the union\n * type for you:\n *\n * ```ts\n * if (message.result.oneofKind === \"error\") {\n *   message.result.error; // string\n * }\n * ```\n *\n * In the rare case you just need the value, and do not care about\n * which protobuf field is selected, you can use this function\n * for convenience.\n */\nexport function getSelectedOneofValue(oneof) {\n    if (oneof.oneofKind === undefined) {\n        return undefined;\n    }\n    return oneof[oneof.oneofKind];\n}\n","import { LongType, ScalarType } from \"./reflection-info\";\nimport { isOneofGroup } from \"./oneof\";\n// noinspection JSMethodCanBeStatic\nexport class ReflectionTypeCheck {\n    constructor(info) {\n        var _a;\n        this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];\n    }\n    prepare() {\n        if (this.data)\n            return;\n        const req = [], known = [], oneofs = [];\n        for (let field of this.fields) {\n            if (field.oneof) {\n                if (!oneofs.includes(field.oneof)) {\n                    oneofs.push(field.oneof);\n                    req.push(field.oneof);\n                    known.push(field.oneof);\n                }\n            }\n            else {\n                known.push(field.localName);\n                switch (field.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        if (!field.opt || field.repeat)\n                            req.push(field.localName);\n                        break;\n                    case \"message\":\n                        if (field.repeat)\n                            req.push(field.localName);\n                        break;\n                    case \"map\":\n                        req.push(field.localName);\n                        break;\n                }\n            }\n        }\n        this.data = { req, known, oneofs: Object.values(oneofs) };\n    }\n    /**\n     * Is the argument a valid message as specified by the\n     * reflection information?\n     *\n     * Checks all field types recursively. The `depth`\n     * specifies how deep into the structure the check will be.\n     *\n     * With a depth of 0, only the presence of fields\n     * is checked.\n     *\n     * With a depth of 1 or more, the field types are checked.\n     *\n     * With a depth of 2 or more, the members of map, repeated\n     * and message fields are checked.\n     *\n     * Message fields will be checked recursively with depth - 1.\n     *\n     * The number of map entries / repeated values being checked\n     * is < depth.\n     */\n    is(message, depth, allowExcessProperties = false) {\n        if (depth < 0)\n            return true;\n        if (message === null || message === undefined || typeof message != 'object')\n            return false;\n        this.prepare();\n        let keys = Object.keys(message), data = this.data;\n        // if a required field is missing in arg, this cannot be a T\n        if (keys.length < data.req.length || data.req.some(n => !keys.includes(n)))\n            return false;\n        if (!allowExcessProperties) {\n            // if the arg contains a key we dont know, this is not a literal T\n            if (keys.some(k => !data.known.includes(k)))\n                return false;\n        }\n        // \"With a depth of 0, only the presence and absence of fields is checked.\"\n        // \"With a depth of 1 or more, the field types are checked.\"\n        if (depth < 1) {\n            return true;\n        }\n        // check oneof group\n        for (const name of data.oneofs) {\n            const group = message[name];\n            if (!isOneofGroup(group))\n                return false;\n            if (group.oneofKind === undefined)\n                continue;\n            const field = this.fields.find(f => f.localName === group.oneofKind);\n            if (!field)\n                return false; // we found no field, but have a kind, something is wrong\n            if (!this.field(group[group.oneofKind], field, allowExcessProperties, depth))\n                return false;\n        }\n        // check types\n        for (const field of this.fields) {\n            if (field.oneof !== undefined)\n                continue;\n            if (!this.field(message[field.localName], field, allowExcessProperties, depth))\n                return false;\n        }\n        return true;\n    }\n    field(arg, field, allowExcessProperties, depth) {\n        let repeated = field.repeat;\n        switch (field.kind) {\n            case \"scalar\":\n                if (arg === undefined)\n                    return field.opt;\n                if (repeated)\n                    return this.scalars(arg, field.T, depth, field.L);\n                return this.scalar(arg, field.T, field.L);\n            case \"enum\":\n                if (arg === undefined)\n                    return field.opt;\n                if (repeated)\n                    return this.scalars(arg, ScalarType.INT32, depth);\n                return this.scalar(arg, ScalarType.INT32);\n            case \"message\":\n                if (arg === undefined)\n                    return true;\n                if (repeated)\n                    return this.messages(arg, field.T(), allowExcessProperties, depth);\n                return this.message(arg, field.T(), allowExcessProperties, depth);\n            case \"map\":\n                if (typeof arg != 'object' || arg === null)\n                    return false;\n                if (depth < 2)\n                    return true;\n                if (!this.mapKeys(arg, field.K, depth))\n                    return false;\n                switch (field.V.kind) {\n                    case \"scalar\":\n                        return this.scalars(Object.values(arg), field.V.T, depth, field.V.L);\n                    case \"enum\":\n                        return this.scalars(Object.values(arg), ScalarType.INT32, depth);\n                    case \"message\":\n                        return this.messages(Object.values(arg), field.V.T(), allowExcessProperties, depth);\n                }\n                break;\n        }\n        return true;\n    }\n    message(arg, type, allowExcessProperties, depth) {\n        if (allowExcessProperties) {\n            return type.isAssignable(arg, depth);\n        }\n        return type.is(arg, depth);\n    }\n    messages(arg, type, allowExcessProperties, depth) {\n        if (!Array.isArray(arg))\n            return false;\n        if (depth < 2)\n            return true;\n        if (allowExcessProperties) {\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!type.isAssignable(arg[i], depth - 1))\n                    return false;\n        }\n        else {\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!type.is(arg[i], depth - 1))\n                    return false;\n        }\n        return true;\n    }\n    scalar(arg, type, longType) {\n        let argType = typeof arg;\n        switch (type) {\n            case ScalarType.UINT64:\n            case ScalarType.FIXED64:\n            case ScalarType.INT64:\n            case ScalarType.SFIXED64:\n            case ScalarType.SINT64:\n                switch (longType) {\n                    case LongType.BIGINT:\n                        return argType == \"bigint\";\n                    case LongType.NUMBER:\n                        return argType == \"number\" && !isNaN(arg);\n                    default:\n                        return argType == \"string\";\n                }\n            case ScalarType.BOOL:\n                return argType == 'boolean';\n            case ScalarType.STRING:\n                return argType == 'string';\n            case ScalarType.BYTES:\n                return arg instanceof Uint8Array;\n            case ScalarType.DOUBLE:\n            case ScalarType.FLOAT:\n                return argType == 'number' && !isNaN(arg);\n            default:\n                // case ScalarType.UINT32:\n                // case ScalarType.FIXED32:\n                // case ScalarType.INT32:\n                // case ScalarType.SINT32:\n                // case ScalarType.SFIXED32:\n                return argType == 'number' && Number.isInteger(arg);\n        }\n    }\n    scalars(arg, type, depth, longType) {\n        if (!Array.isArray(arg))\n            return false;\n        if (depth < 2)\n            return true;\n        if (Array.isArray(arg))\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!this.scalar(arg[i], type, longType))\n                    return false;\n        return true;\n    }\n    mapKeys(map, type, depth) {\n        let keys = Object.keys(map);\n        switch (type) {\n            case ScalarType.INT32:\n            case ScalarType.FIXED32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n            case ScalarType.UINT32:\n                return this.scalars(keys.slice(0, depth).map(k => parseInt(k)), type, depth);\n            case ScalarType.BOOL:\n                return this.scalars(keys.slice(0, depth).map(k => k == 'true' ? true : k == 'false' ? false : k), type, depth);\n            default:\n                return this.scalars(keys, type, depth, LongType.STRING);\n        }\n    }\n}\n","import { LongType } from \"./reflection-info\";\n/**\n * Utility method to convert a PbLong or PbUlong to a JavaScript\n * representation during runtime.\n *\n * Works with generated field information, `undefined` is equivalent\n * to `STRING`.\n */\nexport function reflectionLongConvert(long, type) {\n    switch (type) {\n        case LongType.BIGINT:\n            return long.toBigInt();\n        case LongType.NUMBER:\n            return long.toNumber();\n        default:\n            // case undefined:\n            // case LongType.STRING:\n            return long.toString();\n    }\n}\n","import { isJsonObject, typeofJsonValue } from \"./json-typings\";\nimport { base64decode } from \"./base64\";\nimport { LongType, ScalarType } from \"./reflection-info\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\n/**\n * Reads proto3 messages in canonical JSON format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n */\nexport class ReflectionJsonReader {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        var _a;\n        if (this.fMap === undefined) {\n            this.fMap = {};\n            const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];\n            for (const field of fieldsInput) {\n                this.fMap[field.name] = field;\n                this.fMap[field.jsonName] = field;\n                this.fMap[field.localName] = field;\n            }\n        }\n    }\n    // Cannot parse JSON <type of jsonValue> for <type name>#<fieldName>.\n    assert(condition, fieldName, jsonValue) {\n        if (!condition) {\n            let what = typeofJsonValue(jsonValue);\n            if (what == \"number\" || what == \"boolean\")\n                what = jsonValue.toString();\n            throw new Error(`Cannot parse JSON ${what} for ${this.info.typeName}#${fieldName}`);\n        }\n    }\n    /**\n     * Reads a message from canonical JSON format into the target message.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    read(input, message, options) {\n        this.prepare();\n        const oneofsHandled = [];\n        for (const [jsonKey, jsonValue] of Object.entries(input)) {\n            const field = this.fMap[jsonKey];\n            if (!field) {\n                if (!options.ignoreUnknownFields)\n                    throw new Error(`Found unknown field while reading ${this.info.typeName} from JSON format. JSON key: ${jsonKey}`);\n                continue;\n            }\n            const localName = field.localName;\n            // handle oneof ADT\n            let target; // this will be the target for the field value, whether it is member of a oneof or not\n            if (field.oneof) {\n                // since json objects are unordered by specification, it is not possible to take the last of multiple oneofs\n                if (oneofsHandled.includes(field.oneof))\n                    throw new Error(`Multiple members of the oneof group \"${field.oneof}\" of ${this.info.typeName} are present in JSON.`);\n                oneofsHandled.push(field.oneof);\n                target = message[field.oneof] = {\n                    oneofKind: localName\n                };\n            }\n            else {\n                target = message;\n            }\n            // we have handled oneof above. we just have read the value into `target`.\n            if (field.kind == 'map') {\n                if (jsonValue === null) {\n                    continue;\n                }\n                // check input\n                this.assert(isJsonObject(jsonValue), field.name, jsonValue);\n                // our target to put map entries into\n                const fieldObj = target[localName];\n                // read entries\n                for (const [jsonObjKey, jsonObjValue] of Object.entries(jsonValue)) {\n                    this.assert(jsonObjValue !== null, field.name + \" map value\", null);\n                    // read value\n                    let val;\n                    switch (field.V.kind) {\n                        case \"message\":\n                            val = field.V.T().internalJsonRead(jsonObjValue, options);\n                            break;\n                        case \"enum\":\n                            val = this.enum(field.V.T(), jsonObjValue, field.name);\n                            break;\n                        case \"scalar\":\n                            val = this.scalar(jsonObjValue, field.V.T, field.V.L, field.name);\n                            break;\n                    }\n                    this.assert(val !== undefined, field.name + \" map value\", jsonObjValue);\n                    // read key\n                    let key = jsonObjKey;\n                    if (field.K == ScalarType.BOOL)\n                        key = key == \"true\" ? true : key == \"false\" ? false : key;\n                    key = this.scalar(key, field.K, LongType.STRING, field.name).toString();\n                    fieldObj[key] = val;\n                }\n            }\n            else if (field.repeat) {\n                if (jsonValue === null)\n                    continue;\n                // check input\n                this.assert(Array.isArray(jsonValue), field.name, jsonValue);\n                // our target to put array entries into\n                const fieldArr = target[localName];\n                // read array entries\n                for (const jsonItem of jsonValue) {\n                    this.assert(jsonItem !== null, field.name, null);\n                    let val;\n                    switch (field.kind) {\n                        case \"message\":\n                            val = field.T().internalJsonRead(jsonItem, options);\n                            break;\n                        case \"enum\":\n                            val = this.enum(field.T(), jsonItem, field.name);\n                            break;\n                        case \"scalar\":\n                            val = this.scalar(jsonItem, field.T, field.L, field.name);\n                            break;\n                    }\n                    this.assert(val !== undefined, field.name, jsonValue);\n                    fieldArr.push(val);\n                }\n            }\n            else {\n                switch (field.kind) {\n                    case \"message\":\n                        if (jsonValue === null && field.T().typeName != 'google.protobuf.Value') {\n                            this.assert(field.oneof === undefined, field.name + \" (oneof member)\", null);\n                            continue;\n                        }\n                        target[localName] = field.T().internalJsonRead(jsonValue, options, target[localName]);\n                        break;\n                    case \"enum\":\n                        target[localName] = this.enum(field.T(), jsonValue, field.name);\n                        break;\n                    case \"scalar\":\n                        target[localName] = this.scalar(jsonValue, field.T, field.L, field.name);\n                        break;\n                }\n            }\n        }\n    }\n    /**\n     * google.protobuf.NullValue accepts only JSON `null`.\n     */\n    enum(type, json, fieldName) {\n        if (type[0] == 'google.protobuf.NullValue')\n            assert(json === null, `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} only accepts null.`);\n        if (json === null)\n            // we require 0 to be default value for all enums\n            return 0;\n        switch (typeof json) {\n            case \"number\":\n                assert(Number.isInteger(json), `Unable to parse field ${this.info.typeName}#${fieldName}, enum can only be integral number, got ${json}.`);\n                return json;\n            case \"string\":\n                let localEnumName = json;\n                if (type[2] && json.substring(0, type[2].length) === type[2])\n                    // lookup without the shared prefix\n                    localEnumName = json.substring(type[2].length);\n                let enumNumber = type[1][localEnumName];\n                assert(typeof enumNumber == \"number\", `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} has no value for \"${json}\".`);\n                return enumNumber;\n        }\n        assert(false, `Unable to parse field ${this.info.typeName}#${fieldName}, cannot parse enum value from ${typeof json}\".`);\n    }\n    scalar(json, type, longType, fieldName) {\n        let e;\n        try {\n            switch (type) {\n                // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n                // Either numbers or strings are accepted. Exponent notation is also accepted.\n                case ScalarType.DOUBLE:\n                case ScalarType.FLOAT:\n                    if (json === null)\n                        return .0;\n                    if (json === \"NaN\")\n                        return Number.NaN;\n                    if (json === \"Infinity\")\n                        return Number.POSITIVE_INFINITY;\n                    if (json === \"-Infinity\")\n                        return Number.NEGATIVE_INFINITY;\n                    if (json === \"\") {\n                        e = \"empty string\";\n                        break;\n                    }\n                    if (typeof json == \"string\" && json.trim().length !== json.length) {\n                        e = \"extra whitespace\";\n                        break;\n                    }\n                    if (typeof json != \"string\" && typeof json != \"number\") {\n                        break;\n                    }\n                    let float = Number(json);\n                    if (Number.isNaN(float)) {\n                        e = \"not a number\";\n                        break;\n                    }\n                    if (!Number.isFinite(float)) {\n                        // infinity and -infinity are handled by string representation above, so this is an error\n                        e = \"too large or small\";\n                        break;\n                    }\n                    if (type == ScalarType.FLOAT)\n                        assertFloat32(float);\n                    return float;\n                // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n                case ScalarType.INT32:\n                case ScalarType.FIXED32:\n                case ScalarType.SFIXED32:\n                case ScalarType.SINT32:\n                case ScalarType.UINT32:\n                    if (json === null)\n                        return 0;\n                    let int32;\n                    if (typeof json == \"number\")\n                        int32 = json;\n                    else if (json === \"\")\n                        e = \"empty string\";\n                    else if (typeof json == \"string\") {\n                        if (json.trim().length !== json.length)\n                            e = \"extra whitespace\";\n                        else\n                            int32 = Number(json);\n                    }\n                    if (int32 === undefined)\n                        break;\n                    if (type == ScalarType.UINT32)\n                        assertUInt32(int32);\n                    else\n                        assertInt32(int32);\n                    return int32;\n                // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\n                case ScalarType.INT64:\n                case ScalarType.SFIXED64:\n                case ScalarType.SINT64:\n                    if (json === null)\n                        return reflectionLongConvert(PbLong.ZERO, longType);\n                    if (typeof json != \"number\" && typeof json != \"string\")\n                        break;\n                    return reflectionLongConvert(PbLong.from(json), longType);\n                case ScalarType.FIXED64:\n                case ScalarType.UINT64:\n                    if (json === null)\n                        return reflectionLongConvert(PbULong.ZERO, longType);\n                    if (typeof json != \"number\" && typeof json != \"string\")\n                        break;\n                    return reflectionLongConvert(PbULong.from(json), longType);\n                // bool:\n                case ScalarType.BOOL:\n                    if (json === null)\n                        return false;\n                    if (typeof json !== \"boolean\")\n                        break;\n                    return json;\n                // string:\n                case ScalarType.STRING:\n                    if (json === null)\n                        return \"\";\n                    if (typeof json !== \"string\") {\n                        e = \"extra whitespace\";\n                        break;\n                    }\n                    try {\n                        encodeURIComponent(json);\n                    }\n                    catch (e) {\n                        e = \"invalid UTF8\";\n                        break;\n                    }\n                    return json;\n                // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n                // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n                case ScalarType.BYTES:\n                    if (json === null || json === \"\")\n                        return new Uint8Array(0);\n                    if (typeof json !== 'string')\n                        break;\n                    return base64decode(json);\n            }\n        }\n        catch (error) {\n            e = error.message;\n        }\n        this.assert(false, fieldName + (e ? \" - \" + e : \"\"), json);\n    }\n}\n","import { base64encode } from \"./base64\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { ScalarType } from \"./reflection-info\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\n/**\n * Writes proto3 messages in canonical JSON format using reflection\n * information.\n *\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n */\nexport class ReflectionJsonWriter {\n    constructor(info) {\n        var _a;\n        this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];\n    }\n    /**\n     * Converts the message to a JSON object, based on the field descriptors.\n     */\n    write(message, options) {\n        const json = {}, source = message;\n        for (const field of this.fields.filter(f => !f.oneof)) {\n            let jsonValue = this.field(field, source[field.localName], options);\n            if (jsonValue !== undefined)\n                json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n        }\n        // flatten all oneof`s\n        for (const field of this.fields) {\n            if (!field.oneof)\n                continue;\n            const group = source[field.oneof];\n            if (group.oneofKind !== field.localName)\n                // if field is not selected, skip\n                continue;\n            let jsonValue = undefined;\n            if (field.kind == 'scalar' || field.kind == 'enum')\n                // for a selected oneof member, we must emit the default value\n                jsonValue = this.field(field, group[field.localName], {\n                    enumAsInteger: options.enumAsInteger,\n                    useProtoFieldName: options.useProtoFieldName,\n                    emitDefaultValues: true\n                });\n            else\n                jsonValue = this.field(field, group[field.localName], options);\n            assert(jsonValue !== undefined);\n            json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n        }\n        return json;\n    }\n    field(field, value, options) {\n        let jsonValue = undefined;\n        if (field.kind == 'map') {\n            assert(typeof value == \"object\" && value !== null);\n            const jsonObj = {};\n            switch (field.V.kind) {\n                case \"scalar\":\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        const val = this.scalar(field.V.T, entryValue, field.name, false, true);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n                case \"message\":\n                    const messageType = field.V.T();\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        const val = this.message(messageType, entryValue, field.name, options);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n                case \"enum\":\n                    const enumInfo = field.V.T();\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        assert(entryValue === undefined || typeof entryValue == 'number');\n                        const val = this.enum(enumInfo, entryValue, field.name, false, true, options.enumAsInteger);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n            }\n            if (options.emitDefaultValues || Object.keys(jsonObj).length > 0)\n                jsonValue = jsonObj;\n        }\n        else if (field.repeat) {\n            assert(Array.isArray(value));\n            const jsonArr = [];\n            switch (field.kind) {\n                case \"scalar\":\n                    for (let i = 0; i < value.length; i++) {\n                        const val = this.scalar(field.T, value[i], field.name, field.opt, true);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n                case \"enum\":\n                    const enumInfo = field.T();\n                    for (let i = 0; i < value.length; i++) {\n                        assert(value[i] === undefined || typeof value[i] == 'number');\n                        const val = this.enum(enumInfo, value[i], field.name, field.opt, true, options.enumAsInteger);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n                case \"message\":\n                    const messageType = field.T();\n                    for (let i = 0; i < value.length; i++) {\n                        const val = this.message(messageType, value[i], field.name, options);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n            }\n            // add converted array to json output\n            if (options.emitDefaultValues || jsonArr.length > 0 || options.emitDefaultValues)\n                jsonValue = jsonArr;\n        }\n        else {\n            switch (field.kind) {\n                case \"scalar\":\n                    jsonValue = this.scalar(field.T, value, field.name, field.opt, options.emitDefaultValues);\n                    break;\n                case \"enum\":\n                    jsonValue = this.enum(field.T(), value, field.name, field.opt, options.emitDefaultValues, options.enumAsInteger);\n                    break;\n                case \"message\":\n                    jsonValue = this.message(field.T(), value, field.name, options);\n                    break;\n            }\n        }\n        return jsonValue;\n    }\n    /**\n     * Returns `null` for google.protobuf.NullValue.\n     */\n    enum(type, value, fieldName, optional, emitDefaultValues, enumAsInteger) {\n        if (type[0] == 'google.protobuf.NullValue')\n            return null;\n        if (value === undefined) {\n            assert(optional);\n            return undefined;\n        }\n        if (value === 0 && !emitDefaultValues && !optional)\n            // we require 0 to be default value for all enums\n            return undefined;\n        assert(typeof value == 'number');\n        assert(Number.isInteger(value));\n        if (enumAsInteger || !type[1].hasOwnProperty(value))\n            // if we don't now the enum value, just return the number\n            return value;\n        if (type[2])\n            // restore the dropped prefix\n            return type[2] + type[1][value];\n        return type[1][value];\n    }\n    message(type, value, fieldName, options) {\n        if (value === undefined)\n            return options.emitDefaultValues ? null : undefined;\n        return type.internalJsonWrite(value, options);\n    }\n    scalar(type, value, fieldName, optional, emitDefaultValues) {\n        if (value === undefined) {\n            assert(optional);\n            return undefined;\n        }\n        const ed = emitDefaultValues || optional;\n        // noinspection FallThroughInSwitchStatementJS\n        switch (type) {\n            // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n            case ScalarType.INT32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assertInt32(value);\n                return value;\n            case ScalarType.FIXED32:\n            case ScalarType.UINT32:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assertUInt32(value);\n                return value;\n            // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n            // Either numbers or strings are accepted. Exponent notation is also accepted.\n            case ScalarType.FLOAT:\n                assertFloat32(value);\n            case ScalarType.DOUBLE:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assert(typeof value == 'number');\n                if (Number.isNaN(value))\n                    return 'NaN';\n                if (value === Number.POSITIVE_INFINITY)\n                    return 'Infinity';\n                if (value === Number.NEGATIVE_INFINITY)\n                    return '-Infinity';\n                return value;\n            // string:\n            case ScalarType.STRING:\n                if (value === \"\")\n                    return ed ? '' : undefined;\n                assert(typeof value == 'string');\n                return value;\n            // bool:\n            case ScalarType.BOOL:\n                if (value === false)\n                    return ed ? false : undefined;\n                assert(typeof value == 'boolean');\n                return value;\n            // JSON value will be a decimal string. Either numbers or strings are accepted.\n            case ScalarType.UINT64:\n            case ScalarType.FIXED64:\n                assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');\n                let ulong = PbULong.from(value);\n                if (ulong.isZero() && !ed)\n                    return undefined;\n                return ulong.toString();\n            // JSON value will be a decimal string. Either numbers or strings are accepted.\n            case ScalarType.INT64:\n            case ScalarType.SFIXED64:\n            case ScalarType.SINT64:\n                assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');\n                let long = PbLong.from(value);\n                if (long.isZero() && !ed)\n                    return undefined;\n                return long.toString();\n            // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n            // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n            case ScalarType.BYTES:\n                assert(value instanceof Uint8Array);\n                if (!value.byteLength)\n                    return ed ? \"\" : undefined;\n                return base64encode(value);\n        }\n    }\n}\n","import { LongType, ScalarType } from \"./reflection-info\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\nimport { PbLong, PbULong } from \"./pb-long\";\n/**\n * Creates the default value for a scalar type.\n */\nexport function reflectionScalarDefault(type, longType = LongType.STRING) {\n    switch (type) {\n        case ScalarType.BOOL:\n            return false;\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n            return reflectionLongConvert(PbULong.ZERO, longType);\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            return reflectionLongConvert(PbLong.ZERO, longType);\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            return 0.0;\n        case ScalarType.BYTES:\n            return new Uint8Array(0);\n        case ScalarType.STRING:\n            return \"\";\n        default:\n            // case ScalarType.INT32:\n            // case ScalarType.UINT32:\n            // case ScalarType.SINT32:\n            // case ScalarType.FIXED32:\n            // case ScalarType.SFIXED32:\n            return 0;\n    }\n}\n","import { UnknownFieldHandler, WireType } from \"./binary-format-contract\";\nimport { LongType, ScalarType } from \"./reflection-info\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\nimport { reflectionScalarDefault } from \"./reflection-scalar-default\";\n/**\n * Reads proto3 messages in binary format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/encoding\n */\nexport class ReflectionBinaryReader {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        var _a;\n        if (!this.fieldNoToField) {\n            const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];\n            this.fieldNoToField = new Map(fieldsInput.map(field => [field.no, field]));\n        }\n    }\n    /**\n     * Reads a message from binary format into the target message.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    read(reader, message, options, length) {\n        this.prepare();\n        const end = length === undefined ? reader.len : reader.pos + length;\n        while (reader.pos < end) {\n            // read the tag and find the field\n            const [fieldNo, wireType] = reader.tag(), field = this.fieldNoToField.get(fieldNo);\n            if (!field) {\n                let u = options.readUnknownField;\n                if (u == \"throw\")\n                    throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.info.typeName}`);\n                let d = reader.skip(wireType);\n                if (u !== false)\n                    (u === true ? UnknownFieldHandler.onRead : u)(this.info.typeName, message, fieldNo, wireType, d);\n                continue;\n            }\n            // target object for the field we are reading\n            let target = message, repeated = field.repeat, localName = field.localName;\n            // if field is member of oneof ADT, use ADT as target\n            if (field.oneof) {\n                target = target[field.oneof];\n                // if other oneof member selected, set new ADT\n                if (target.oneofKind !== localName)\n                    target = message[field.oneof] = {\n                        oneofKind: localName\n                    };\n            }\n            // we have handled oneof above, we just have read the value into `target[localName]`\n            switch (field.kind) {\n                case \"scalar\":\n                case \"enum\":\n                    let T = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                    let L = field.kind == \"scalar\" ? field.L : undefined;\n                    if (repeated) {\n                        let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                        if (wireType == WireType.LengthDelimited && T != ScalarType.STRING && T != ScalarType.BYTES) {\n                            let e = reader.uint32() + reader.pos;\n                            while (reader.pos < e)\n                                arr.push(this.scalar(reader, T, L));\n                        }\n                        else\n                            arr.push(this.scalar(reader, T, L));\n                    }\n                    else\n                        target[localName] = this.scalar(reader, T, L);\n                    break;\n                case \"message\":\n                    if (repeated) {\n                        let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                        let msg = field.T().internalBinaryRead(reader, reader.uint32(), options);\n                        arr.push(msg);\n                    }\n                    else\n                        target[localName] = field.T().internalBinaryRead(reader, reader.uint32(), options, target[localName]);\n                    break;\n                case \"map\":\n                    let [mapKey, mapVal] = this.mapEntry(field, reader, options);\n                    // safe to assume presence of map object, oneof cannot contain repeated values\n                    target[localName][mapKey] = mapVal;\n                    break;\n            }\n        }\n    }\n    /**\n     * Read a map field, expecting key field = 1, value field = 2\n     */\n    mapEntry(field, reader, options) {\n        let length = reader.uint32();\n        let end = reader.pos + length;\n        let key = undefined; // javascript only allows number or string for object properties\n        let val = undefined;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case 1:\n                    if (field.K == ScalarType.BOOL)\n                        key = reader.bool().toString();\n                    else\n                        // long types are read as string, number types are okay as number\n                        key = this.scalar(reader, field.K, LongType.STRING);\n                    break;\n                case 2:\n                    switch (field.V.kind) {\n                        case \"scalar\":\n                            val = this.scalar(reader, field.V.T, field.V.L);\n                            break;\n                        case \"enum\":\n                            val = reader.int32();\n                            break;\n                        case \"message\":\n                            val = field.V.T().internalBinaryRead(reader, reader.uint32(), options);\n                            break;\n                    }\n                    break;\n                default:\n                    throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) in map entry for ${this.info.typeName}#${field.name}`);\n            }\n        }\n        if (key === undefined) {\n            let keyRaw = reflectionScalarDefault(field.K);\n            key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;\n        }\n        if (val === undefined)\n            switch (field.V.kind) {\n                case \"scalar\":\n                    val = reflectionScalarDefault(field.V.T, field.V.L);\n                    break;\n                case \"enum\":\n                    val = 0;\n                    break;\n                case \"message\":\n                    val = field.V.T().create();\n                    break;\n            }\n        return [key, val];\n    }\n    scalar(reader, type, longType) {\n        switch (type) {\n            case ScalarType.INT32:\n                return reader.int32();\n            case ScalarType.STRING:\n                return reader.string();\n            case ScalarType.BOOL:\n                return reader.bool();\n            case ScalarType.DOUBLE:\n                return reader.double();\n            case ScalarType.FLOAT:\n                return reader.float();\n            case ScalarType.INT64:\n                return reflectionLongConvert(reader.int64(), longType);\n            case ScalarType.UINT64:\n                return reflectionLongConvert(reader.uint64(), longType);\n            case ScalarType.FIXED64:\n                return reflectionLongConvert(reader.fixed64(), longType);\n            case ScalarType.FIXED32:\n                return reader.fixed32();\n            case ScalarType.BYTES:\n                return reader.bytes();\n            case ScalarType.UINT32:\n                return reader.uint32();\n            case ScalarType.SFIXED32:\n                return reader.sfixed32();\n            case ScalarType.SFIXED64:\n                return reflectionLongConvert(reader.sfixed64(), longType);\n            case ScalarType.SINT32:\n                return reader.sint32();\n            case ScalarType.SINT64:\n                return reflectionLongConvert(reader.sint64(), longType);\n        }\n    }\n}\n","import { UnknownFieldHandler, WireType } from \"./binary-format-contract\";\nimport { RepeatType, ScalarType } from \"./reflection-info\";\nimport { assert } from \"./assert\";\nimport { PbLong, PbULong } from \"./pb-long\";\n/**\n * Writes proto3 messages in binary format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/encoding\n */\nexport class ReflectionBinaryWriter {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        if (!this.fields) {\n            const fieldsInput = this.info.fields ? this.info.fields.concat() : [];\n            this.fields = fieldsInput.sort((a, b) => a.no - b.no);\n        }\n    }\n    /**\n     * Writes the message to binary format.\n     */\n    write(message, writer, options) {\n        this.prepare();\n        for (const field of this.fields) {\n            let value, // this will be our field value, whether it is member of a oneof or not\n            emitDefault, // whether we emit the default value (only true for oneof members)\n            repeated = field.repeat, localName = field.localName;\n            // handle oneof ADT\n            if (field.oneof) {\n                const group = message[field.oneof];\n                if (group.oneofKind !== localName)\n                    continue; // if field is not selected, skip\n                value = group[localName];\n                emitDefault = true;\n            }\n            else {\n                value = message[localName];\n                emitDefault = false;\n            }\n            // we have handled oneof above. we just have to honor `emitDefault`.\n            switch (field.kind) {\n                case \"scalar\":\n                case \"enum\":\n                    let T = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                    if (repeated) {\n                        assert(Array.isArray(value));\n                        if (repeated == RepeatType.PACKED)\n                            this.packed(writer, T, field.no, value);\n                        else\n                            for (const item of value)\n                                this.scalar(writer, T, field.no, item, true);\n                    }\n                    else if (value === undefined)\n                        assert(field.opt);\n                    else\n                        this.scalar(writer, T, field.no, value, emitDefault || field.opt);\n                    break;\n                case \"message\":\n                    if (repeated) {\n                        assert(Array.isArray(value));\n                        for (const item of value)\n                            this.message(writer, options, field.T(), field.no, item);\n                    }\n                    else {\n                        this.message(writer, options, field.T(), field.no, value);\n                    }\n                    break;\n                case \"map\":\n                    assert(typeof value == 'object' && value !== null);\n                    for (const [key, val] of Object.entries(value))\n                        this.mapEntry(writer, options, field, key, val);\n                    break;\n            }\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u === true ? UnknownFieldHandler.onWrite : u)(this.info.typeName, message, writer);\n    }\n    mapEntry(writer, options, field, key, value) {\n        writer.tag(field.no, WireType.LengthDelimited);\n        writer.fork();\n        // javascript only allows number or string for object properties\n        // we convert from our representation to the protobuf type\n        let keyValue = key;\n        switch (field.K) {\n            case ScalarType.INT32:\n            case ScalarType.FIXED32:\n            case ScalarType.UINT32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n                keyValue = Number.parseInt(key);\n                break;\n            case ScalarType.BOOL:\n                assert(key == 'true' || key == 'false');\n                keyValue = key == 'true';\n                break;\n        }\n        // write key, expecting key field number = 1\n        this.scalar(writer, field.K, 1, keyValue, true);\n        // write value, expecting value field number = 2\n        switch (field.V.kind) {\n            case 'scalar':\n                this.scalar(writer, field.V.T, 2, value, true);\n                break;\n            case 'enum':\n                this.scalar(writer, ScalarType.INT32, 2, value, true);\n                break;\n            case 'message':\n                this.message(writer, options, field.V.T(), 2, value);\n                break;\n        }\n        writer.join();\n    }\n    message(writer, options, handler, fieldNo, value) {\n        if (value === undefined)\n            return;\n        handler.internalBinaryWrite(value, writer.tag(fieldNo, WireType.LengthDelimited).fork(), options);\n        writer.join();\n    }\n    /**\n     * Write a single scalar value.\n     */\n    scalar(writer, type, fieldNo, value, emitDefault) {\n        let [wireType, method, isDefault] = this.scalarInfo(type, value);\n        if (!isDefault || emitDefault) {\n            writer.tag(fieldNo, wireType);\n            writer[method](value);\n        }\n    }\n    /**\n     * Write an array of scalar values in packed format.\n     */\n    packed(writer, type, fieldNo, value) {\n        if (!value.length)\n            return;\n        assert(type !== ScalarType.BYTES && type !== ScalarType.STRING);\n        // write tag\n        writer.tag(fieldNo, WireType.LengthDelimited);\n        // begin length-delimited\n        writer.fork();\n        // write values without tags\n        let [, method,] = this.scalarInfo(type);\n        for (let i = 0; i < value.length; i++)\n            writer[method](value[i]);\n        // end length delimited\n        writer.join();\n    }\n    /**\n     * Get information for writing a scalar value.\n     *\n     * Returns tuple:\n     * [0]: appropriate WireType\n     * [1]: name of the appropriate method of IBinaryWriter\n     * [2]: whether the given value is a default value\n     *\n     * If argument `value` is omitted, [2] is always false.\n     */\n    scalarInfo(type, value) {\n        let t = WireType.Varint;\n        let m;\n        let i = value === undefined;\n        let d = value === 0;\n        switch (type) {\n            case ScalarType.INT32:\n                m = \"int32\";\n                break;\n            case ScalarType.STRING:\n                d = i || !value.length;\n                t = WireType.LengthDelimited;\n                m = \"string\";\n                break;\n            case ScalarType.BOOL:\n                d = value === false;\n                m = \"bool\";\n                break;\n            case ScalarType.UINT32:\n                m = \"uint32\";\n                break;\n            case ScalarType.DOUBLE:\n                t = WireType.Bit64;\n                m = \"double\";\n                break;\n            case ScalarType.FLOAT:\n                t = WireType.Bit32;\n                m = \"float\";\n                break;\n            case ScalarType.INT64:\n                d = i || PbLong.from(value).isZero();\n                m = \"int64\";\n                break;\n            case ScalarType.UINT64:\n                d = i || PbULong.from(value).isZero();\n                m = \"uint64\";\n                break;\n            case ScalarType.FIXED64:\n                d = i || PbULong.from(value).isZero();\n                t = WireType.Bit64;\n                m = \"fixed64\";\n                break;\n            case ScalarType.BYTES:\n                d = i || !value.byteLength;\n                t = WireType.LengthDelimited;\n                m = \"bytes\";\n                break;\n            case ScalarType.FIXED32:\n                t = WireType.Bit32;\n                m = \"fixed32\";\n                break;\n            case ScalarType.SFIXED32:\n                t = WireType.Bit32;\n                m = \"sfixed32\";\n                break;\n            case ScalarType.SFIXED64:\n                d = i || PbLong.from(value).isZero();\n                t = WireType.Bit64;\n                m = \"sfixed64\";\n                break;\n            case ScalarType.SINT32:\n                m = \"sint32\";\n                break;\n            case ScalarType.SINT64:\n                d = i || PbLong.from(value).isZero();\n                m = \"sint64\";\n                break;\n        }\n        return [t, m, i || d];\n    }\n}\n","/**\n * Copy partial data into the target message.\n *\n * Replaces fields in the target with the fields from the\n * (partial) source.\n *\n * Omitted fields are not replaced.\n * Copies all values.\n * A default value in the source will replace a value in the target.\n *\n * Message fields are recursively merged (by calling `mergePartial()`\n * of the responsible message handler). Map and repeated fields\n * are simply overwritten, not appended or merged.\n */\nexport function reflectionMergePartial(info, target, source) {\n    let fieldValue, // the field value we are working with\n    input = source, output; // where we want our field value to go\n    for (let field of info.fields) {\n        let name = field.localName;\n        if (field.oneof) {\n            const group = input[field.oneof]; // this is the oneof`s group in the source\n            if (group === undefined) { // the user is free to omit\n                continue; // we skip this field, and all other members too\n            }\n            fieldValue = group[name]; // our value comes from the the oneof group of the source\n            output = target[field.oneof]; // and our output is the oneof group of the target\n            output.oneofKind = group.oneofKind; // always update discriminator\n            if (fieldValue === undefined) {\n                delete output[name]; // remove any existing value\n                continue; // skip further work on field\n            }\n        }\n        else {\n            fieldValue = input[name]; // we are using the source directly\n            output = target; // we want our field value to go directly into the target\n            if (fieldValue === undefined) {\n                continue; // skip further work on field, existing value is used as is\n            }\n        }\n        // now we just work with `fieldValue` and `output` to merge the value\n        switch (field.kind) {\n            case \"scalar\":\n            case \"enum\":\n                if (field.repeat)\n                    output[name] = fieldValue.concat(); // elements are not reference types\n                else\n                    output[name] = fieldValue; // not a reference type\n                break;\n            case \"message\":\n                let T = field.T();\n                if (field.repeat)\n                    for (let i = 0; i < fieldValue.length; i++)\n                        output[name][i] = T.create(fieldValue[i]);\n                else if (output[name] === undefined)\n                    output[name] = T.create(fieldValue); // nothing to merge with\n                else\n                    T.mergePartial(output[name], fieldValue);\n                break;\n            case \"map\":\n                // Map and repeated fields are simply overwritten, not appended or merged\n                switch (field.V.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        Object.assign(output[name], fieldValue); // elements are not reference types\n                        break;\n                    case \"message\":\n                        let T = field.V.T();\n                        for (let k of Object.keys(fieldValue))\n                            output[name][k] = T.create(fieldValue[k]);\n                        break;\n                }\n                break;\n        }\n    }\n}\n","import { ScalarType } from \"./reflection-info\";\n/**\n * Determines whether two message of the same type have the same field values.\n * Checks for deep equality, traversing repeated fields, oneof groups, maps\n * and messages recursively.\n * Will also return true if both messages are `undefined`.\n */\nexport function reflectionEquals(info, a, b) {\n    if (a === b)\n        return true;\n    if (!a || !b)\n        return false;\n    for (let field of info.fields) {\n        let localName = field.localName;\n        let val_a = field.oneof ? a[field.oneof][localName] : a[localName];\n        let val_b = field.oneof ? b[field.oneof][localName] : b[localName];\n        switch (field.kind) {\n            case \"enum\":\n            case \"scalar\":\n                let t = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                if (!(field.repeat\n                    ? repeatedPrimitiveEq(t, val_a, val_b)\n                    : primitiveEq(t, val_a, val_b)))\n                    return false;\n                break;\n            case \"map\":\n                if (!(field.V.kind == \"message\"\n                    ? repeatedMsgEq(field.V.T(), objectValues(val_a), objectValues(val_b))\n                    : repeatedPrimitiveEq(field.V.kind == \"enum\" ? ScalarType.INT32 : field.V.T, objectValues(val_a), objectValues(val_b))))\n                    return false;\n                break;\n            case \"message\":\n                let T = field.T();\n                if (!(field.repeat\n                    ? repeatedMsgEq(T, val_a, val_b)\n                    : T.equals(val_a, val_b)))\n                    return false;\n                break;\n        }\n    }\n    return true;\n}\nconst objectValues = Object.values;\nfunction primitiveEq(type, a, b) {\n    if (a === b)\n        return true;\n    if (type !== ScalarType.BYTES)\n        return false;\n    let ba = a;\n    let bb = b;\n    if (ba.length !== bb.length)\n        return false;\n    for (let i = 0; i < ba.length; i++)\n        if (ba[i] != bb[i])\n            return false;\n    return true;\n}\nfunction repeatedPrimitiveEq(type, a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!primitiveEq(type, a[i], b[i]))\n            return false;\n    return true;\n}\nfunction repeatedMsgEq(type, a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!type.equals(a[i], b[i]))\n            return false;\n    return true;\n}\n","import { normalizeFieldInfo } from \"./reflection-info\";\nimport { ReflectionTypeCheck } from \"./reflection-type-check\";\nimport { ReflectionJsonReader } from \"./reflection-json-reader\";\nimport { ReflectionJsonWriter } from \"./reflection-json-writer\";\nimport { ReflectionBinaryReader } from \"./reflection-binary-reader\";\nimport { ReflectionBinaryWriter } from \"./reflection-binary-writer\";\nimport { reflectionCreate } from \"./reflection-create\";\nimport { reflectionMergePartial } from \"./reflection-merge-partial\";\nimport { typeofJsonValue } from \"./json-typings\";\nimport { jsonReadOptions, jsonWriteOptions, } from \"./json-format-contract\";\nimport { binaryReadOptions, binaryWriteOptions } from \"./binary-format-contract\";\nimport { reflectionEquals } from \"./reflection-equals\";\n/**\n * This standard message type provides reflection-based\n * operations to work with a message.\n */\nexport class MessageType {\n    constructor(name, fields, options) {\n        this.defaultCheckDepth = 16;\n        this.typeName = name;\n        this.fields = fields.map(normalizeFieldInfo);\n        this.options = options !== null && options !== void 0 ? options : {};\n        this.refTypeCheck = new ReflectionTypeCheck(this);\n        this.refJsonReader = new ReflectionJsonReader(this);\n        this.refJsonWriter = new ReflectionJsonWriter(this);\n        this.refBinReader = new ReflectionBinaryReader(this);\n        this.refBinWriter = new ReflectionBinaryWriter(this);\n    }\n    create(value) {\n        let message = reflectionCreate(this);\n        if (value !== undefined) {\n            reflectionMergePartial(this, message, value);\n        }\n        return message;\n    }\n    /**\n     * Clone the message.\n     *\n     * Unknown fields are discarded.\n     */\n    clone(message) {\n        let copy = this.create();\n        reflectionMergePartial(this, copy, message);\n        return copy;\n    }\n    /**\n     * Determines whether two message of the same type have the same field values.\n     * Checks for deep equality, traversing repeated fields, oneof groups, maps\n     * and messages recursively.\n     * Will also return true if both messages are `undefined`.\n     */\n    equals(a, b) {\n        return reflectionEquals(this, a, b);\n    }\n    /**\n     * Is the given value assignable to our message type\n     * and contains no [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?\n     */\n    is(arg, depth = this.defaultCheckDepth) {\n        return this.refTypeCheck.is(arg, depth, false);\n    }\n    /**\n     * Is the given value assignable to our message type,\n     * regardless of [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?\n     */\n    isAssignable(arg, depth = this.defaultCheckDepth) {\n        return this.refTypeCheck.is(arg, depth, true);\n    }\n    /**\n     * Copy partial data into the target message.\n     *\n     * See MessageCreator.merge() for details.\n     */\n    mergePartial(target, source) {\n        reflectionMergePartial(this, target, source);\n    }\n    /**\n     * Create a new message from binary format.\n     */\n    fromBinary(data, options) {\n        let opt = binaryReadOptions(options);\n        return this.internalBinaryRead(opt.readerFactory(data), data.byteLength, opt);\n    }\n    /**\n     * Read a new message from a JSON value.\n     */\n    fromJson(json, options) {\n        return this.internalJsonRead(json, jsonReadOptions(options));\n    }\n    /**\n     * Read a new message from a JSON string.\n     * This is equivalent to `T.fromJson(JSON.parse(json))`.\n     */\n    fromJsonString(json, options) {\n        let value = JSON.parse(json);\n        return this.fromJson(value, options);\n    }\n    /**\n     * Write the message to canonical JSON value.\n     */\n    toJson(message, options) {\n        return this.internalJsonWrite(message, jsonWriteOptions(options));\n    }\n    /**\n     * Convert the message to canonical JSON string.\n     * This is equivalent to `JSON.stringify(T.toJson(t))`\n     */\n    toJsonString(message, options) {\n        var _a;\n        let value = this.toJson(message, options);\n        return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\n    }\n    /**\n     * Write the message to binary format.\n     */\n    toBinary(message, options) {\n        let opt = binaryWriteOptions(options);\n        return this.internalBinaryWrite(message, opt.writerFactory(), opt).finish();\n    }\n    /**\n     * This is an internal method. If you just want to read a message from\n     * JSON, use `fromJson()` or `fromJsonString()`.\n     *\n     * Reads JSON value and merges the fields into the target\n     * according to protobuf rules. If the target is omitted,\n     * a new instance is created first.\n     */\n    internalJsonRead(json, options, target) {\n        if (json !== null && typeof json == \"object\" && !Array.isArray(json)) {\n            let message = target !== null && target !== void 0 ? target : this.create();\n            this.refJsonReader.read(json, message, options);\n            return message;\n        }\n        throw new Error(`Unable to parse message ${this.typeName} from JSON ${typeofJsonValue(json)}.`);\n    }\n    /**\n     * This is an internal method. If you just want to write a message\n     * to JSON, use `toJson()` or `toJsonString().\n     *\n     * Writes JSON value and returns it.\n     */\n    internalJsonWrite(message, options) {\n        return this.refJsonWriter.write(message, options);\n    }\n    /**\n     * This is an internal method. If you just want to write a message\n     * in binary format, use `toBinary()`.\n     *\n     * Serializes the message in binary format and appends it to the given\n     * writer. Returns passed writer.\n     */\n    internalBinaryWrite(message, writer, options) {\n        this.refBinWriter.write(message, writer, options);\n        return writer;\n    }\n    /**\n     * This is an internal method. If you just want to read a message from\n     * binary data, use `fromBinary()`.\n     *\n     * Reads data from binary format and merges the fields into\n     * the target according to protobuf rules. If the target is\n     * omitted, a new instance is created first.\n     */\n    internalBinaryRead(reader, length, options, target) {\n        let message = target !== null && target !== void 0 ? target : this.create();\n        this.refBinReader.read(reader, message, options, length);\n        return message;\n    }\n}\n","import { reflectionScalarDefault } from \"./reflection-scalar-default\";\nimport { MESSAGE_TYPE } from './message-type-contract';\n/**\n * Creates an instance of the generic message, using the field\n * information.\n */\nexport function reflectionCreate(type) {\n    const msg = {};\n    Object.defineProperty(msg, MESSAGE_TYPE, { enumerable: false, value: type });\n    for (let field of type.fields) {\n        let name = field.localName;\n        if (field.opt)\n            continue;\n        if (field.oneof)\n            msg[field.oneof] = { oneofKind: undefined };\n        else if (field.repeat)\n            msg[name] = [];\n        else\n            switch (field.kind) {\n                case \"scalar\":\n                    msg[name] = reflectionScalarDefault(field.T, field.L);\n                    break;\n                case \"enum\":\n                    // we require 0 to be default value for all enums\n                    msg[name] = 0;\n                    break;\n                case \"map\":\n                    msg[name] = {};\n                    break;\n            }\n    }\n    return msg;\n}\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"common.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * Buffs that affect the entire raid.\n *\n * @generated from protobuf message proto.RaidBuffs\n */\nexport interface RaidBuffs {\n    /**\n     * +Stats\n     *\n     * @generated from protobuf field: proto.TristateEffect gift_of_the_wild = 1;\n     */\n    giftOfTheWild: TristateEffect;\n    /**\n     * +Stam\n     *\n     * @generated from protobuf field: proto.TristateEffect power_word_fortitude = 2;\n     */\n    powerWordFortitude: TristateEffect;\n    /**\n     * +Health\n     *\n     * @generated from protobuf field: proto.TristateEffect commanding_shout = 3;\n     */\n    commandingShout: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect blood_pact = 4;\n     */\n    bloodPact: TristateEffect;\n    /**\n     * + Agi and Str\n     *\n     * @generated from protobuf field: bool horn_of_winter = 5;\n     */\n    hornOfWinter: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect strength_of_earth_totem = 6;\n     */\n    strengthOfEarthTotem: TristateEffect; // none, normal, 15% improved\n    /**\n     * +Intell and/or Spi\n     *\n     * @generated from protobuf field: bool arcane_brilliance = 7;\n     */\n    arcaneBrilliance: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect fel_intelligence = 8;\n     */\n    felIntelligence: TristateEffect;\n    /**\n     * @generated from protobuf field: bool divine_spirit = 9;\n     */\n    divineSpirit: boolean;\n    /**\n     * +AP\n     *\n     * @generated from protobuf field: proto.TristateEffect battle_shout = 10;\n     */\n    battleShout: TristateEffect;\n    /**\n     * 10% AP\n     *\n     * @generated from protobuf field: bool trueshot_aura = 11;\n     */\n    trueshotAura: boolean;\n    /**\n     * @generated from protobuf field: bool unleashed_rage = 12;\n     */\n    unleashedRage: boolean;\n    /**\n     * @generated from protobuf field: bool abominations_might = 13;\n     */\n    abominationsMight: boolean;\n    /**\n     * 5% phy crit\n     *\n     * @generated from protobuf field: proto.TristateEffect leader_of_the_pack = 14;\n     */\n    leaderOfThePack: TristateEffect;\n    /**\n     * @generated from protobuf field: bool rampage = 15;\n     */\n    rampage: boolean;\n    /**\n     * 20% Melee Haste\n     *\n     * @generated from protobuf field: bool icy_talons = 16;\n     */\n    icyTalons: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect windfury_totem = 17;\n     */\n    windfuryTotem: TristateEffect; // none, 16%, 20%\n    /**\n     * +Spell Power\n     *\n     * @generated from protobuf field: bool totem_of_wrath = 18;\n     */\n    totemOfWrath: boolean; // shouldn't stack with demonic pact (does in beta right now)\n    /**\n     * @generated from protobuf field: bool flametongue_totem = 19;\n     */\n    flametongueTotem: boolean;\n    /**\n     * @generated from protobuf field: int32 demonic_pact = 20;\n     */\n    demonicPact: number; // SP buff, variable : 10% of demonology warlock's own SP\n    /**\n     * +5% Spell Crit and/or +3% Haste\n     *\n     * @generated from protobuf field: bool swift_retribution = 21;\n     */\n    swiftRetribution: boolean; // haste only\n    /**\n     * @generated from protobuf field: proto.TristateEffect moonkin_aura = 22;\n     */\n    moonkinAura: TristateEffect; // both crit and haste\n    /**\n     * @generated from protobuf field: bool elemental_oath = 23;\n     */\n    elementalOath: boolean; // crit only\n    /**\n     * 5% spell haste\n     *\n     * @generated from protobuf field: bool wrath_of_air_totem = 24;\n     */\n    wrathOfAirTotem: boolean;\n    /**\n     * 3% dmg\n     *\n     * @generated from protobuf field: bool ferocious_inspiration = 25;\n     */\n    ferociousInspiration: boolean;\n    /**\n     * @generated from protobuf field: bool sanctified_retribution = 26;\n     */\n    sanctifiedRetribution: boolean;\n    /**\n     * @generated from protobuf field: bool arcane_empowerment = 27;\n     */\n    arcaneEmpowerment: boolean;\n    /**\n     * mp5\n     *\n     * @generated from protobuf field: proto.TristateEffect mana_spring_totem = 28;\n     */\n    manaSpringTotem: TristateEffect;\n    /**\n     * Miscellaneous\n     *\n     * @generated from protobuf field: bool bloodlust = 29;\n     */\n    bloodlust: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect thorns = 30;\n     */\n    thorns: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect devotion_aura = 31;\n     */\n    devotionAura: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect stoneskin_totem = 42;\n     */\n    stoneskinTotem: TristateEffect;\n    /**\n     * @generated from protobuf field: bool retribution_aura = 32;\n     */\n    retributionAura: boolean;\n    /**\n     * @generated from protobuf field: bool shadow_protection = 33;\n     */\n    shadowProtection: boolean;\n    /**\n     * Drums\n     *\n     * @generated from protobuf field: bool drums_of_forgotten_kings = 34;\n     */\n    drumsOfForgottenKings: boolean;\n    /**\n     * @generated from protobuf field: bool drums_of_the_wild = 35;\n     */\n    drumsOfTheWild: boolean;\n    /**\n     * Scroll\n     *\n     * @generated from protobuf field: bool scroll_of_protection = 36;\n     */\n    scrollOfProtection: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_stamina = 37;\n     */\n    scrollOfStamina: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_strength = 38;\n     */\n    scrollOfStrength: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_agility = 39;\n     */\n    scrollOfAgility: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_intellect = 40;\n     */\n    scrollOfIntellect: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_spirit = 41;\n     */\n    scrollOfSpirit: boolean;\n}\n/**\n * Buffs that affect a single party.\n *\n * @generated from protobuf message proto.PartyBuffs\n */\nexport interface PartyBuffs {\n    /**\n     * Item Buffs\n     *\n     * @generated from protobuf field: int32 atiesh_mage = 1;\n     */\n    atieshMage: number;\n    /**\n     * @generated from protobuf field: int32 atiesh_warlock = 2;\n     */\n    atieshWarlock: number;\n    /**\n     * @generated from protobuf field: bool braided_eternium_chain = 3;\n     */\n    braidedEterniumChain: boolean;\n    /**\n     * @generated from protobuf field: bool eye_of_the_night = 4;\n     */\n    eyeOfTheNight: boolean;\n    /**\n     * @generated from protobuf field: bool chain_of_the_twilight_owl = 5;\n     */\n    chainOfTheTwilightOwl: boolean;\n    /**\n     * Group buffs\n     *\n     * @generated from protobuf field: int32 mana_tide_totems = 6;\n     */\n    manaTideTotems: number;\n    /**\n     * @generated from protobuf field: bool heroic_presence = 7;\n     */\n    heroicPresence: boolean;\n}\n/**\n * These are usually individual actions taken by other Characters.\n *\n * @generated from protobuf message proto.IndividualBuffs\n */\nexport interface IndividualBuffs {\n    /**\n     * 10% Stats\n     *\n     * @generated from protobuf field: bool blessing_of_kings = 1;\n     */\n    blessingOfKings: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect blessing_of_wisdom = 2;\n     */\n    blessingOfWisdom: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect blessing_of_might = 3;\n     */\n    blessingOfMight: TristateEffect;\n    /**\n     * @generated from protobuf field: bool blessing_of_sanctuary = 4;\n     */\n    blessingOfSanctuary: boolean;\n    /**\n     * @generated from protobuf field: bool vigilance = 5;\n     */\n    vigilance: boolean;\n    /**\n     * @generated from protobuf field: bool renewed_hope = 6;\n     */\n    renewedHope: boolean; // Only used in individual sims \n    //   as the class that provides these would cast them in raid sim\n    /**\n     * How many of each of these buffs the player will be receiving.\n     *\n     * @generated from protobuf field: int32 hymn_of_hope = 7;\n     */\n    hymnOfHope: number;\n    /**\n     * @generated from protobuf field: int32 hand_of_salvation = 8;\n     */\n    handOfSalvation: number;\n    /**\n     * @generated from protobuf field: int32 rapture = 9;\n     */\n    rapture: number;\n    /**\n     * @generated from protobuf field: int32 innervates = 10;\n     */\n    innervates: number;\n    /**\n     * @generated from protobuf field: int32 power_infusions = 11;\n     */\n    powerInfusions: number;\n    /**\n     * @generated from protobuf field: int32 unholy_frenzy = 12;\n     */\n    unholyFrenzy: number;\n    /**\n     * @generated from protobuf field: int32 revitalize_rejuvination = 13;\n     */\n    revitalizeRejuvination: number;\n    /**\n     * @generated from protobuf field: int32 revitalize_wild_growth = 21;\n     */\n    revitalizeWildGrowth: number;\n    /**\n     * @generated from protobuf field: int32 tricks_of_the_trades = 19;\n     */\n    tricksOfTheTrades: number;\n    /**\n     * Technically a debuff, but only used by individual sims.\n     *\n     * @generated from protobuf field: int32 shattering_throws = 20;\n     */\n    shatteringThrows: number;\n    /**\n     * @generated from protobuf field: bool vampiric_touch = 14;\n     */\n    vampiricTouch: boolean;\n    /**\n     * @generated from protobuf field: bool hunting_party = 15;\n     */\n    huntingParty: boolean;\n    /**\n     * @generated from protobuf field: bool judgements_of_the_wise = 16;\n     */\n    judgementsOfTheWise: boolean;\n    /**\n     * @generated from protobuf field: bool improved_soul_leech = 17;\n     */\n    improvedSoulLeech: boolean;\n    /**\n     * @generated from protobuf field: bool enduring_winter = 18;\n     */\n    enduringWinter: boolean;\n    /**\n     * @generated from protobuf field: bool focus_magic = 22;\n     */\n    focusMagic: boolean;\n}\n/**\n * @generated from protobuf message proto.Consumes\n */\nexport interface Consumes {\n    /**\n     * @generated from protobuf field: proto.Flask flask = 1;\n     */\n    flask: Flask;\n    /**\n     * @generated from protobuf field: proto.BattleElixir battle_elixir = 2;\n     */\n    battleElixir: BattleElixir;\n    /**\n     * @generated from protobuf field: proto.GuardianElixir guardian_elixir = 3;\n     */\n    guardianElixir: GuardianElixir;\n    /**\n     * @generated from protobuf field: proto.Food food = 6;\n     */\n    food: Food;\n    /**\n     * @generated from protobuf field: proto.PetFood pet_food = 7;\n     */\n    petFood: PetFood;\n    /**\n     * @generated from protobuf field: int32 pet_scroll_of_agility = 8;\n     */\n    petScrollOfAgility: number;\n    /**\n     * @generated from protobuf field: int32 pet_scroll_of_strength = 9;\n     */\n    petScrollOfStrength: number;\n    /**\n     * @generated from protobuf field: proto.Potions default_potion = 10;\n     */\n    defaultPotion: Potions;\n    /**\n     * @generated from protobuf field: proto.Potions prepop_potion = 11;\n     */\n    prepopPotion: Potions;\n    /**\n     * @generated from protobuf field: proto.Conjured default_conjured = 12;\n     */\n    defaultConjured: Conjured;\n    /**\n     * @generated from protobuf field: proto.Conjured starting_conjured = 13;\n     */\n    startingConjured: Conjured;\n    /**\n     * @generated from protobuf field: int32 num_starting_conjured = 14;\n     */\n    numStartingConjured: number;\n    /**\n     * @generated from protobuf field: bool thermal_sapper = 15;\n     */\n    thermalSapper: boolean;\n    /**\n     * @generated from protobuf field: bool explosive_decoy = 16;\n     */\n    explosiveDecoy: boolean;\n    /**\n     * @generated from protobuf field: proto.Explosive filler_explosive = 17;\n     */\n    fillerExplosive: Explosive;\n}\n/**\n * @generated from protobuf message proto.Debuffs\n */\nexport interface Debuffs {\n    /**\n     * @generated from protobuf field: bool judgement_of_wisdom = 1;\n     */\n    judgementOfWisdom: boolean;\n    /**\n     * @generated from protobuf field: bool judgement_of_light = 2;\n     */\n    judgementOfLight: boolean;\n    /**\n     * @generated from protobuf field: bool misery = 3;\n     */\n    misery: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect faerie_fire = 4;\n     */\n    faerieFire: TristateEffect;\n    /**\n     * 13% bonus spell damage\n     *\n     * @generated from protobuf field: bool curse_of_elements = 5;\n     */\n    curseOfElements: boolean;\n    /**\n     * @generated from protobuf field: bool ebon_plaguebringer = 6;\n     */\n    ebonPlaguebringer: boolean;\n    /**\n     * @generated from protobuf field: bool earth_and_moon = 7;\n     */\n    earthAndMoon: boolean;\n    /**\n     * +3% to crit against target\n     *\n     * @generated from protobuf field: bool heart_of_the_crusader = 8;\n     */\n    heartOfTheCrusader: boolean;\n    /**\n     * @generated from protobuf field: bool master_poisoner = 9;\n     */\n    masterPoisoner: boolean;\n    /**\n     * @generated from protobuf field: bool totem_of_wrath = 10;\n     */\n    totemOfWrath: boolean;\n    /**\n     * 5% spell crit\n     *\n     * @generated from protobuf field: bool shadow_mastery = 11;\n     */\n    shadowMastery: boolean;\n    /**\n     * @generated from protobuf field: bool improved_scorch = 12;\n     */\n    improvedScorch: boolean;\n    /**\n     * @generated from protobuf field: bool winters_chill = 13;\n     */\n    wintersChill: boolean;\n    /**\n     * @generated from protobuf field: bool blood_frenzy = 14;\n     */\n    bloodFrenzy: boolean;\n    /**\n     * @generated from protobuf field: bool savage_combat = 15;\n     */\n    savageCombat: boolean;\n    /**\n     * TODO: validate these\n     *\n     * @generated from protobuf field: bool gift_of_arthas = 16;\n     */\n    giftOfArthas: boolean;\n    /**\n     * Bleed %\n     *\n     * @generated from protobuf field: bool mangle = 17;\n     */\n    mangle: boolean;\n    /**\n     * @generated from protobuf field: bool trauma = 18;\n     */\n    trauma: boolean;\n    /**\n     * @generated from protobuf field: bool stampede = 19;\n     */\n    stampede: boolean;\n    /**\n     * Major armor\n     *\n     * @generated from protobuf field: bool expose_armor = 20;\n     */\n    exposeArmor: boolean;\n    /**\n     * @generated from protobuf field: bool sunder_armor = 21;\n     */\n    sunderArmor: boolean;\n    /**\n     * @generated from protobuf field: bool acid_spit = 22;\n     */\n    acidSpit: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect curse_of_weakness = 23;\n     */\n    curseOfWeakness: TristateEffect;\n    /**\n     * @generated from protobuf field: bool sting = 24;\n     */\n    sting: boolean;\n    /**\n     * @generated from protobuf field: bool spore_cloud = 37;\n     */\n    sporeCloud: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect demoralizing_roar = 25;\n     */\n    demoralizingRoar: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect demoralizing_shout = 26;\n     */\n    demoralizingShout: TristateEffect;\n    /**\n     * @generated from protobuf field: bool vindication = 36;\n     */\n    vindication: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect thunder_clap = 27;\n     */\n    thunderClap: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect frost_fever = 28;\n     */\n    frostFever: TristateEffect;\n    /**\n     * @generated from protobuf field: bool infected_wounds = 29;\n     */\n    infectedWounds: boolean;\n    /**\n     * @generated from protobuf field: bool judgements_of_the_just = 30;\n     */\n    judgementsOfTheJust: boolean;\n    /**\n     * @generated from protobuf field: bool insect_swarm = 31;\n     */\n    insectSwarm: boolean;\n    /**\n     * @generated from protobuf field: bool scorpid_sting = 32;\n     */\n    scorpidSting: boolean;\n    /**\n     * @generated from protobuf field: bool shadow_embrace = 33;\n     */\n    shadowEmbrace: boolean;\n    /**\n     * @generated from protobuf field: bool screech = 34;\n     */\n    screech: boolean;\n    /**\n     * 1 = normal, 2 = talented, 3 = talented+glyphed\n     *\n     * @generated from protobuf field: int32 hunters_mark = 35;\n     */\n    huntersMark: number;\n}\n/**\n * @generated from protobuf message proto.Target\n */\nexport interface Target {\n    /**\n     * The in-game NPC ID.\n     *\n     * @generated from protobuf field: int32 id = 14;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 15;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: int32 level = 4;\n     */\n    level: number;\n    /**\n     * @generated from protobuf field: proto.MobType mob_type = 3;\n     */\n    mobType: MobType;\n    /**\n     * @generated from protobuf field: repeated double stats = 5;\n     */\n    stats: number[];\n    /**\n     * Auto attack parameters.\n     *\n     * @generated from protobuf field: double min_base_damage = 7;\n     */\n    minBaseDamage: number;\n    /**\n     * @generated from protobuf field: double swing_speed = 8;\n     */\n    swingSpeed: number;\n    /**\n     * @generated from protobuf field: bool dual_wield = 9;\n     */\n    dualWield: boolean;\n    /**\n     * @generated from protobuf field: bool dual_wield_penalty = 10;\n     */\n    dualWieldPenalty: boolean;\n    /**\n     * @generated from protobuf field: bool parry_haste = 12;\n     */\n    parryHaste: boolean;\n    /**\n     * @generated from protobuf field: bool tight_enemy_damage = 17;\n     */\n    tightEnemyDamage: boolean; // Patchwerk special\n    /**\n     * @generated from protobuf field: bool suppress_dodge = 16;\n     */\n    suppressDodge: boolean; // Sunwell Radiance\n    /**\n     * @generated from protobuf field: proto.SpellSchool spell_school = 13;\n     */\n    spellSchool: SpellSchool; // Allows elemental attacks.\n    /**\n     * Index in Raid.tanks indicating the player tanking this mob.\n     * -1 or invalid index indicates not being tanked.\n     *\n     * @generated from protobuf field: int32 tank_index = 6;\n     */\n    tankIndex: number;\n}\n/**\n * @generated from protobuf message proto.Encounter\n */\nexport interface Encounter {\n    /**\n     * @generated from protobuf field: double duration = 1;\n     */\n    duration: number;\n    /**\n     * Variation in the duration\n     *\n     * @generated from protobuf field: double duration_variation = 2;\n     */\n    durationVariation: number;\n    /**\n     * The ratio of the encounter duration, between 0 and 1, for which the targets\n     * will be in execute range (<= 20%) for the purposes of Warrior Execute, Mage Molten\n     * Fury, etc.\n     *\n     * @generated from protobuf field: double execute_proportion_20 = 3;\n     */\n    executeProportion20: number;\n    /**\n     * Key for Affliction warlock Drain Soul\n     *\n     * @generated from protobuf field: double execute_proportion_25 = 7;\n     */\n    executeProportion25: number;\n    /**\n     * Same as execute_proportion but for 35%.\n     *\n     * @generated from protobuf field: double execute_proportion_35 = 4;\n     */\n    executeProportion35: number;\n    /**\n     * If set, will use the targets health value instead of a duration for fight length.\n     *\n     * @generated from protobuf field: bool use_health = 5;\n     */\n    useHealth: boolean;\n    /**\n     * If type != Simple or Custom, then this may be empty.\n     *\n     * @generated from protobuf field: repeated proto.Target targets = 6;\n     */\n    targets: Target[];\n}\n/**\n * @generated from protobuf message proto.ItemSpec\n */\nexport interface ItemSpec {\n    /**\n     * @generated from protobuf field: int32 id = 2;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: int32 enchant = 3;\n     */\n    enchant: number;\n    /**\n     * @generated from protobuf field: repeated int32 gems = 4;\n     */\n    gems: number[];\n}\n/**\n * @generated from protobuf message proto.EquipmentSpec\n */\nexport interface EquipmentSpec {\n    /**\n     * @generated from protobuf field: repeated proto.ItemSpec items = 1;\n     */\n    items: ItemSpec[];\n}\n/**\n * @generated from protobuf message proto.Item\n */\nexport interface Item {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * This is unused by most items. For most items we set id to the\n     * wowhead/in-game ID directly. For random enchant items though we need to\n     * use unique hardcoded IDs so this field holds the wowhead ID instead.\n     *\n     * @generated from protobuf field: int32 wowhead_id = 16;\n     */\n    wowheadId: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * Classes that are allowed to use the item. Empty indicates no special class restrictions.\n     *\n     * @generated from protobuf field: repeated proto.Class class_allowlist = 15;\n     */\n    classAllowlist: Class[];\n    /**\n     * @generated from protobuf field: proto.ItemType type = 3;\n     */\n    type: ItemType;\n    /**\n     * @generated from protobuf field: proto.ArmorType armor_type = 4;\n     */\n    armorType: ArmorType;\n    /**\n     * @generated from protobuf field: proto.WeaponType weapon_type = 5;\n     */\n    weaponType: WeaponType;\n    /**\n     * @generated from protobuf field: proto.HandType hand_type = 6;\n     */\n    handType: HandType;\n    /**\n     * @generated from protobuf field: proto.RangedWeaponType ranged_weapon_type = 7;\n     */\n    rangedWeaponType: RangedWeaponType;\n    /**\n     * @generated from protobuf field: repeated double stats = 8;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: repeated proto.GemColor gem_sockets = 9;\n     */\n    gemSockets: GemColor[];\n    /**\n     * @generated from protobuf field: repeated double socketBonus = 10;\n     */\n    socketBonus: number[];\n    /**\n     * Weapon stats, needed for computing proper EP for melee weapons\n     *\n     * @generated from protobuf field: double weapon_damage_min = 17;\n     */\n    weaponDamageMin: number;\n    /**\n     * @generated from protobuf field: double weapon_damage_max = 18;\n     */\n    weaponDamageMax: number;\n    /**\n     * @generated from protobuf field: double weapon_speed = 19;\n     */\n    weaponSpeed: number;\n    /**\n     * @generated from protobuf field: int32 phase = 11;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: proto.ItemQuality quality = 12;\n     */\n    quality: ItemQuality;\n    /**\n     * @generated from protobuf field: bool unique = 13;\n     */\n    unique: boolean;\n    /**\n     * @generated from protobuf field: int32 ilvl = 20;\n     */\n    ilvl: number;\n    /**\n     * @generated from protobuf field: proto.Profession required_profession = 21;\n     */\n    requiredProfession: Profession;\n    /**\n     * @generated from protobuf field: bool heroic = 22;\n     */\n    heroic: boolean;\n}\n/**\n * @generated from protobuf message proto.Enchant\n */\nexport interface Enchant {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number; // ID of the enchant \"item\".\n    /**\n     * @generated from protobuf field: int32 effect_id = 2;\n     */\n    effectId: number; // ID of the effect (for the item tooltip UI)\n    /**\n     * @generated from protobuf field: string name = 3;\n     */\n    name: string;\n    /**\n     * If true, then id is the ID of the enchant spell instead of the formula item.\n     * This is used by enchants for which a formula doesn't exist (its taught by a trainer).\n     *\n     * @generated from protobuf field: bool is_spell_id = 10;\n     */\n    isSpellId: boolean;\n    /**\n     * @generated from protobuf field: proto.ItemType type = 4;\n     */\n    type: ItemType; // Which type of item this enchant can be applied to.\n    /**\n     * @generated from protobuf field: proto.EnchantType enchant_type = 9;\n     */\n    enchantType: EnchantType;\n    /**\n     * @generated from protobuf field: repeated double stats = 7;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: proto.ItemQuality quality = 8;\n     */\n    quality: ItemQuality;\n    /**\n     * @generated from protobuf field: int32 phase = 11;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: proto.Profession required_profession = 13;\n     */\n    requiredProfession: Profession;\n    /**\n     * Classes that are allowed to use the enchant. Empty indicates no special class restrictions.\n     *\n     * @generated from protobuf field: repeated proto.Class class_allowlist = 12;\n     */\n    classAllowlist: Class[];\n}\n/**\n * @generated from protobuf message proto.Gem\n */\nexport interface Gem {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: repeated double stats = 3;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: proto.GemColor color = 4;\n     */\n    color: GemColor;\n    /**\n     * @generated from protobuf field: int32 phase = 5;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: proto.ItemQuality quality = 6;\n     */\n    quality: ItemQuality;\n    /**\n     * @generated from protobuf field: bool unique = 7;\n     */\n    unique: boolean;\n    /**\n     * @generated from protobuf field: proto.Profession required_profession = 8;\n     */\n    requiredProfession: Profession;\n}\n/**\n * @generated from protobuf message proto.RaidTarget\n */\nexport interface RaidTarget {\n    /**\n     * Raid index of the player to target. A value of -1 indicates no target.\n     *\n     * @generated from protobuf field: int32 target_index = 1;\n     */\n    targetIndex: number;\n}\n/**\n * @generated from protobuf message proto.ActionID\n */\nexport interface ActionID {\n    /**\n     * @generated from protobuf oneof: raw_id\n     */\n    rawId: {\n        oneofKind: \"spellId\";\n        /**\n         * @generated from protobuf field: int32 spell_id = 1;\n         */\n        spellId: number;\n    } | {\n        oneofKind: \"itemId\";\n        /**\n         * @generated from protobuf field: int32 item_id = 2;\n         */\n        itemId: number;\n    } | {\n        oneofKind: \"otherId\";\n        /**\n         * @generated from protobuf field: proto.OtherAction other_id = 3;\n         */\n        otherId: OtherAction;\n    } | {\n        oneofKind: undefined;\n    };\n    /**\n     * Distinguishes between different versions of the same action.\n     * Currently the only use for this is Shaman Lightning Overload.\n     *\n     * @generated from protobuf field: int32 tag = 4;\n     */\n    tag: number;\n}\n/**\n * @generated from protobuf message proto.Glyphs\n */\nexport interface Glyphs {\n    /**\n     * @generated from protobuf field: int32 major1 = 1;\n     */\n    major1: number;\n    /**\n     * @generated from protobuf field: int32 major2 = 2;\n     */\n    major2: number;\n    /**\n     * @generated from protobuf field: int32 major3 = 3;\n     */\n    major3: number;\n    /**\n     * @generated from protobuf field: int32 minor1 = 4;\n     */\n    minor1: number;\n    /**\n     * @generated from protobuf field: int32 minor2 = 5;\n     */\n    minor2: number;\n    /**\n     * @generated from protobuf field: int32 minor3 = 6;\n     */\n    minor3: number;\n}\n/**\n * Custom options for a particular cooldown.\n *\n * @generated from protobuf message proto.Cooldown\n */\nexport interface Cooldown {\n    /**\n     * Identifies the cooldown to which these settings will apply.\n     *\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * Fixed times at which to use this cooldown. Each value corresponds to a usage,\n     * e.g. first value is the first usage, second value is the second usage.\n     * Any usages after the specified timings will occur as soon as possible, subject\n     * to the ShouldActivate() condition.\n     *\n     * @generated from protobuf field: repeated double timings = 2;\n     */\n    timings: number[];\n}\n/**\n * @generated from protobuf message proto.Cooldowns\n */\nexport interface Cooldowns {\n    /**\n     * @generated from protobuf field: repeated proto.Cooldown cooldowns = 1;\n     */\n    cooldowns: Cooldown[];\n    /**\n     * % HP threshold, below which defensive cooldowns can be used.\n     *\n     * @generated from protobuf field: double hp_percent_for_defensives = 2;\n     */\n    hpPercentForDefensives: number;\n}\n/**\n * @generated from protobuf message proto.HealingModel\n */\nexport interface HealingModel {\n    /**\n     * Healing per second to apply.\n     *\n     * @generated from protobuf field: double hps = 1;\n     */\n    hps: number;\n    /**\n     * How often healing is applied.\n     *\n     * @generated from protobuf field: double cadence_seconds = 2;\n     */\n    cadenceSeconds: number;\n    /**\n     * @generated from protobuf field: double inspiration_uptime = 3;\n     */\n    inspirationUptime: number;\n}\n/**\n * @generated from protobuf message proto.CustomRotation\n */\nexport interface CustomRotation {\n    /**\n     * @generated from protobuf field: repeated proto.CustomSpell spells = 1;\n     */\n    spells: CustomSpell[];\n}\n/**\n * @generated from protobuf message proto.CustomSpell\n */\nexport interface CustomSpell {\n    /**\n     * This should usually be a spec-specific enum value.\n     *\n     * @generated from protobuf field: int32 spell = 1;\n     */\n    spell: number;\n}\n/**\n * @generated from protobuf enum proto.Spec\n */\nexport enum Spec {\n    /**\n     * @generated from protobuf enum value: SpecBalanceDruid = 0;\n     */\n    SpecBalanceDruid = 0,\n    /**\n     * @generated from protobuf enum value: SpecElementalShaman = 1;\n     */\n    SpecElementalShaman = 1,\n    /**\n     * @generated from protobuf enum value: SpecEnhancementShaman = 9;\n     */\n    SpecEnhancementShaman = 9,\n    /**\n     * @generated from protobuf enum value: SpecFeralDruid = 12;\n     */\n    SpecFeralDruid = 12,\n    /**\n     * @generated from protobuf enum value: SpecFeralTankDruid = 14;\n     */\n    SpecFeralTankDruid = 14,\n    /**\n     * @generated from protobuf enum value: SpecHunter = 8;\n     */\n    SpecHunter = 8,\n    /**\n     * @generated from protobuf enum value: SpecMage = 2;\n     */\n    SpecMage = 2,\n    /**\n     * @generated from protobuf enum value: SpecProtectionPaladin = 13;\n     */\n    SpecProtectionPaladin = 13,\n    /**\n     * @generated from protobuf enum value: SpecRetributionPaladin = 3;\n     */\n    SpecRetributionPaladin = 3,\n    /**\n     * @generated from protobuf enum value: SpecRogue = 7;\n     */\n    SpecRogue = 7,\n    /**\n     * @generated from protobuf enum value: SpecHealingPriest = 17;\n     */\n    SpecHealingPriest = 17,\n    /**\n     * @generated from protobuf enum value: SpecShadowPriest = 4;\n     */\n    SpecShadowPriest = 4,\n    /**\n     * @generated from protobuf enum value: SpecSmitePriest = 10;\n     */\n    SpecSmitePriest = 10,\n    /**\n     * @generated from protobuf enum value: SpecWarlock = 5;\n     */\n    SpecWarlock = 5,\n    /**\n     * @generated from protobuf enum value: SpecWarrior = 6;\n     */\n    SpecWarrior = 6,\n    /**\n     * @generated from protobuf enum value: SpecProtectionWarrior = 11;\n     */\n    SpecProtectionWarrior = 11,\n    /**\n     * @generated from protobuf enum value: SpecDeathknight = 15;\n     */\n    SpecDeathknight = 15,\n    /**\n     * @generated from protobuf enum value: SpecTankDeathknight = 16;\n     */\n    SpecTankDeathknight = 16\n}\n/**\n * @generated from protobuf enum proto.Race\n */\nexport enum Race {\n    /**\n     * @generated from protobuf enum value: RaceUnknown = 0;\n     */\n    RaceUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RaceBloodElf = 1;\n     */\n    RaceBloodElf = 1,\n    /**\n     * @generated from protobuf enum value: RaceDraenei = 2;\n     */\n    RaceDraenei = 2,\n    /**\n     * @generated from protobuf enum value: RaceDwarf = 3;\n     */\n    RaceDwarf = 3,\n    /**\n     * @generated from protobuf enum value: RaceGnome = 4;\n     */\n    RaceGnome = 4,\n    /**\n     * @generated from protobuf enum value: RaceHuman = 5;\n     */\n    RaceHuman = 5,\n    /**\n     * @generated from protobuf enum value: RaceNightElf = 6;\n     */\n    RaceNightElf = 6,\n    /**\n     * @generated from protobuf enum value: RaceOrc = 7;\n     */\n    RaceOrc = 7,\n    /**\n     * @generated from protobuf enum value: RaceTauren = 8;\n     */\n    RaceTauren = 8,\n    /**\n     * @generated from protobuf enum value: RaceTroll = 9;\n     */\n    RaceTroll = 9,\n    /**\n     * @generated from protobuf enum value: RaceUndead = 10;\n     */\n    RaceUndead = 10\n}\n/**\n * @generated from protobuf enum proto.Faction\n */\nexport enum Faction {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Alliance = 1;\n     */\n    Alliance = 1,\n    /**\n     * @generated from protobuf enum value: Horde = 2;\n     */\n    Horde = 2\n}\n/**\n * @generated from protobuf enum proto.ShattrathFaction\n */\nexport enum ShattrathFaction {\n    /**\n     * @generated from protobuf enum value: ShattrathFactionAldor = 0;\n     */\n    ShattrathFactionAldor = 0,\n    /**\n     * @generated from protobuf enum value: ShattrathFactionScryer = 1;\n     */\n    ShattrathFactionScryer = 1\n}\n/**\n * @generated from protobuf enum proto.Class\n */\nexport enum Class {\n    /**\n     * @generated from protobuf enum value: ClassUnknown = 0;\n     */\n    ClassUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ClassDruid = 1;\n     */\n    ClassDruid = 1,\n    /**\n     * @generated from protobuf enum value: ClassHunter = 2;\n     */\n    ClassHunter = 2,\n    /**\n     * @generated from protobuf enum value: ClassMage = 3;\n     */\n    ClassMage = 3,\n    /**\n     * @generated from protobuf enum value: ClassPaladin = 4;\n     */\n    ClassPaladin = 4,\n    /**\n     * @generated from protobuf enum value: ClassPriest = 5;\n     */\n    ClassPriest = 5,\n    /**\n     * @generated from protobuf enum value: ClassRogue = 6;\n     */\n    ClassRogue = 6,\n    /**\n     * @generated from protobuf enum value: ClassShaman = 7;\n     */\n    ClassShaman = 7,\n    /**\n     * @generated from protobuf enum value: ClassWarlock = 8;\n     */\n    ClassWarlock = 8,\n    /**\n     * @generated from protobuf enum value: ClassWarrior = 9;\n     */\n    ClassWarrior = 9,\n    /**\n     * @generated from protobuf enum value: ClassDeathknight = 10;\n     */\n    ClassDeathknight = 10\n}\n/**\n * @generated from protobuf enum proto.Profession\n */\nexport enum Profession {\n    /**\n     * @generated from protobuf enum value: ProfessionUnknown = 0;\n     */\n    ProfessionUnknown = 0,\n    /**\n     * @generated from protobuf enum value: Alchemy = 1;\n     */\n    Alchemy = 1,\n    /**\n     * @generated from protobuf enum value: Blacksmithing = 2;\n     */\n    Blacksmithing = 2,\n    /**\n     * @generated from protobuf enum value: Enchanting = 3;\n     */\n    Enchanting = 3,\n    /**\n     * @generated from protobuf enum value: Engineering = 4;\n     */\n    Engineering = 4,\n    /**\n     * @generated from protobuf enum value: Herbalism = 5;\n     */\n    Herbalism = 5,\n    /**\n     * @generated from protobuf enum value: Inscription = 6;\n     */\n    Inscription = 6,\n    /**\n     * @generated from protobuf enum value: Jewelcrafting = 7;\n     */\n    Jewelcrafting = 7,\n    /**\n     * @generated from protobuf enum value: Leatherworking = 8;\n     */\n    Leatherworking = 8,\n    /**\n     * @generated from protobuf enum value: Mining = 9;\n     */\n    Mining = 9,\n    /**\n     * @generated from protobuf enum value: Skinning = 10;\n     */\n    Skinning = 10,\n    /**\n     * @generated from protobuf enum value: Tailoring = 11;\n     */\n    Tailoring = 11\n}\n/**\n * @generated from protobuf enum proto.Stat\n */\nexport enum Stat {\n    /**\n     * @generated from protobuf enum value: StatStrength = 0;\n     */\n    StatStrength = 0,\n    /**\n     * @generated from protobuf enum value: StatAgility = 1;\n     */\n    StatAgility = 1,\n    /**\n     * @generated from protobuf enum value: StatStamina = 2;\n     */\n    StatStamina = 2,\n    /**\n     * @generated from protobuf enum value: StatIntellect = 3;\n     */\n    StatIntellect = 3,\n    /**\n     * @generated from protobuf enum value: StatSpirit = 4;\n     */\n    StatSpirit = 4,\n    /**\n     * @generated from protobuf enum value: StatSpellPower = 5;\n     */\n    StatSpellPower = 5,\n    /**\n     * @generated from protobuf enum value: StatMP5 = 6;\n     */\n    StatMP5 = 6,\n    /**\n     * @generated from protobuf enum value: StatSpellHit = 7;\n     */\n    StatSpellHit = 7,\n    /**\n     * @generated from protobuf enum value: StatSpellCrit = 8;\n     */\n    StatSpellCrit = 8,\n    /**\n     * @generated from protobuf enum value: StatSpellHaste = 9;\n     */\n    StatSpellHaste = 9,\n    /**\n     * @generated from protobuf enum value: StatSpellPenetration = 10;\n     */\n    StatSpellPenetration = 10,\n    /**\n     * @generated from protobuf enum value: StatAttackPower = 11;\n     */\n    StatAttackPower = 11,\n    /**\n     * @generated from protobuf enum value: StatMeleeHit = 12;\n     */\n    StatMeleeHit = 12,\n    /**\n     * @generated from protobuf enum value: StatMeleeCrit = 13;\n     */\n    StatMeleeCrit = 13,\n    /**\n     * @generated from protobuf enum value: StatMeleeHaste = 14;\n     */\n    StatMeleeHaste = 14,\n    /**\n     * @generated from protobuf enum value: StatArmorPenetration = 15;\n     */\n    StatArmorPenetration = 15,\n    /**\n     * @generated from protobuf enum value: StatExpertise = 16;\n     */\n    StatExpertise = 16,\n    /**\n     * @generated from protobuf enum value: StatMana = 17;\n     */\n    StatMana = 17,\n    /**\n     * @generated from protobuf enum value: StatEnergy = 18;\n     */\n    StatEnergy = 18,\n    /**\n     * @generated from protobuf enum value: StatRage = 19;\n     */\n    StatRage = 19,\n    /**\n     * @generated from protobuf enum value: StatArmor = 20;\n     */\n    StatArmor = 20,\n    /**\n     * @generated from protobuf enum value: StatRangedAttackPower = 21;\n     */\n    StatRangedAttackPower = 21,\n    /**\n     * @generated from protobuf enum value: StatDefense = 22;\n     */\n    StatDefense = 22,\n    /**\n     * @generated from protobuf enum value: StatBlock = 23;\n     */\n    StatBlock = 23,\n    /**\n     * @generated from protobuf enum value: StatBlockValue = 24;\n     */\n    StatBlockValue = 24,\n    /**\n     * @generated from protobuf enum value: StatDodge = 25;\n     */\n    StatDodge = 25,\n    /**\n     * @generated from protobuf enum value: StatParry = 26;\n     */\n    StatParry = 26,\n    /**\n     * @generated from protobuf enum value: StatResilience = 27;\n     */\n    StatResilience = 27,\n    /**\n     * @generated from protobuf enum value: StatHealth = 28;\n     */\n    StatHealth = 28,\n    /**\n     * @generated from protobuf enum value: StatArcaneResistance = 29;\n     */\n    StatArcaneResistance = 29,\n    /**\n     * @generated from protobuf enum value: StatFireResistance = 30;\n     */\n    StatFireResistance = 30,\n    /**\n     * @generated from protobuf enum value: StatFrostResistance = 31;\n     */\n    StatFrostResistance = 31,\n    /**\n     * @generated from protobuf enum value: StatNatureResistance = 32;\n     */\n    StatNatureResistance = 32,\n    /**\n     * @generated from protobuf enum value: StatShadowResistance = 33;\n     */\n    StatShadowResistance = 33\n}\n/**\n * @generated from protobuf enum proto.ItemType\n */\nexport enum ItemType {\n    /**\n     * @generated from protobuf enum value: ItemTypeUnknown = 0;\n     */\n    ItemTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ItemTypeHead = 1;\n     */\n    ItemTypeHead = 1,\n    /**\n     * @generated from protobuf enum value: ItemTypeNeck = 2;\n     */\n    ItemTypeNeck = 2,\n    /**\n     * @generated from protobuf enum value: ItemTypeShoulder = 3;\n     */\n    ItemTypeShoulder = 3,\n    /**\n     * @generated from protobuf enum value: ItemTypeBack = 4;\n     */\n    ItemTypeBack = 4,\n    /**\n     * @generated from protobuf enum value: ItemTypeChest = 5;\n     */\n    ItemTypeChest = 5,\n    /**\n     * @generated from protobuf enum value: ItemTypeWrist = 6;\n     */\n    ItemTypeWrist = 6,\n    /**\n     * @generated from protobuf enum value: ItemTypeHands = 7;\n     */\n    ItemTypeHands = 7,\n    /**\n     * @generated from protobuf enum value: ItemTypeWaist = 8;\n     */\n    ItemTypeWaist = 8,\n    /**\n     * @generated from protobuf enum value: ItemTypeLegs = 9;\n     */\n    ItemTypeLegs = 9,\n    /**\n     * @generated from protobuf enum value: ItemTypeFeet = 10;\n     */\n    ItemTypeFeet = 10,\n    /**\n     * @generated from protobuf enum value: ItemTypeFinger = 11;\n     */\n    ItemTypeFinger = 11,\n    /**\n     * @generated from protobuf enum value: ItemTypeTrinket = 12;\n     */\n    ItemTypeTrinket = 12,\n    /**\n     * @generated from protobuf enum value: ItemTypeWeapon = 13;\n     */\n    ItemTypeWeapon = 13,\n    /**\n     * @generated from protobuf enum value: ItemTypeRanged = 14;\n     */\n    ItemTypeRanged = 14\n}\n/**\n * @generated from protobuf enum proto.ArmorType\n */\nexport enum ArmorType {\n    /**\n     * @generated from protobuf enum value: ArmorTypeUnknown = 0;\n     */\n    ArmorTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ArmorTypeCloth = 1;\n     */\n    ArmorTypeCloth = 1,\n    /**\n     * @generated from protobuf enum value: ArmorTypeLeather = 2;\n     */\n    ArmorTypeLeather = 2,\n    /**\n     * @generated from protobuf enum value: ArmorTypeMail = 3;\n     */\n    ArmorTypeMail = 3,\n    /**\n     * @generated from protobuf enum value: ArmorTypePlate = 4;\n     */\n    ArmorTypePlate = 4\n}\n/**\n * @generated from protobuf enum proto.WeaponType\n */\nexport enum WeaponType {\n    /**\n     * @generated from protobuf enum value: WeaponTypeUnknown = 0;\n     */\n    WeaponTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: WeaponTypeAxe = 1;\n     */\n    WeaponTypeAxe = 1,\n    /**\n     * @generated from protobuf enum value: WeaponTypeDagger = 2;\n     */\n    WeaponTypeDagger = 2,\n    /**\n     * @generated from protobuf enum value: WeaponTypeFist = 3;\n     */\n    WeaponTypeFist = 3,\n    /**\n     * @generated from protobuf enum value: WeaponTypeMace = 4;\n     */\n    WeaponTypeMace = 4,\n    /**\n     * @generated from protobuf enum value: WeaponTypeOffHand = 5;\n     */\n    WeaponTypeOffHand = 5,\n    /**\n     * @generated from protobuf enum value: WeaponTypePolearm = 6;\n     */\n    WeaponTypePolearm = 6,\n    /**\n     * @generated from protobuf enum value: WeaponTypeShield = 7;\n     */\n    WeaponTypeShield = 7,\n    /**\n     * @generated from protobuf enum value: WeaponTypeStaff = 8;\n     */\n    WeaponTypeStaff = 8,\n    /**\n     * @generated from protobuf enum value: WeaponTypeSword = 9;\n     */\n    WeaponTypeSword = 9\n}\n/**\n * @generated from protobuf enum proto.HandType\n */\nexport enum HandType {\n    /**\n     * @generated from protobuf enum value: HandTypeUnknown = 0;\n     */\n    HandTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: HandTypeMainHand = 1;\n     */\n    HandTypeMainHand = 1,\n    /**\n     * @generated from protobuf enum value: HandTypeOneHand = 2;\n     */\n    HandTypeOneHand = 2,\n    /**\n     * @generated from protobuf enum value: HandTypeOffHand = 3;\n     */\n    HandTypeOffHand = 3,\n    /**\n     * @generated from protobuf enum value: HandTypeTwoHand = 4;\n     */\n    HandTypeTwoHand = 4\n}\n/**\n * @generated from protobuf enum proto.RangedWeaponType\n */\nexport enum RangedWeaponType {\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeUnknown = 0;\n     */\n    RangedWeaponTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeBow = 1;\n     */\n    RangedWeaponTypeBow = 1,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeCrossbow = 2;\n     */\n    RangedWeaponTypeCrossbow = 2,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeGun = 3;\n     */\n    RangedWeaponTypeGun = 3,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeIdol = 4;\n     */\n    RangedWeaponTypeIdol = 4,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeLibram = 5;\n     */\n    RangedWeaponTypeLibram = 5,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeThrown = 6;\n     */\n    RangedWeaponTypeThrown = 6,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeTotem = 7;\n     */\n    RangedWeaponTypeTotem = 7,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeWand = 8;\n     */\n    RangedWeaponTypeWand = 8,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeSigil = 9;\n     */\n    RangedWeaponTypeSigil = 9\n}\n/**\n * All slots on the gear menu where a single item can be worn.\n *\n * @generated from protobuf enum proto.ItemSlot\n */\nexport enum ItemSlot {\n    /**\n     * @generated from protobuf enum value: ItemSlotHead = 0;\n     */\n    ItemSlotHead = 0,\n    /**\n     * @generated from protobuf enum value: ItemSlotNeck = 1;\n     */\n    ItemSlotNeck = 1,\n    /**\n     * @generated from protobuf enum value: ItemSlotShoulder = 2;\n     */\n    ItemSlotShoulder = 2,\n    /**\n     * @generated from protobuf enum value: ItemSlotBack = 3;\n     */\n    ItemSlotBack = 3,\n    /**\n     * @generated from protobuf enum value: ItemSlotChest = 4;\n     */\n    ItemSlotChest = 4,\n    /**\n     * @generated from protobuf enum value: ItemSlotWrist = 5;\n     */\n    ItemSlotWrist = 5,\n    /**\n     * @generated from protobuf enum value: ItemSlotHands = 6;\n     */\n    ItemSlotHands = 6,\n    /**\n     * @generated from protobuf enum value: ItemSlotWaist = 7;\n     */\n    ItemSlotWaist = 7,\n    /**\n     * @generated from protobuf enum value: ItemSlotLegs = 8;\n     */\n    ItemSlotLegs = 8,\n    /**\n     * @generated from protobuf enum value: ItemSlotFeet = 9;\n     */\n    ItemSlotFeet = 9,\n    /**\n     * @generated from protobuf enum value: ItemSlotFinger1 = 10;\n     */\n    ItemSlotFinger1 = 10,\n    /**\n     * @generated from protobuf enum value: ItemSlotFinger2 = 11;\n     */\n    ItemSlotFinger2 = 11,\n    /**\n     * @generated from protobuf enum value: ItemSlotTrinket1 = 12;\n     */\n    ItemSlotTrinket1 = 12,\n    /**\n     * @generated from protobuf enum value: ItemSlotTrinket2 = 13;\n     */\n    ItemSlotTrinket2 = 13,\n    /**\n     * can be 1h or 2h\n     *\n     * @generated from protobuf enum value: ItemSlotMainHand = 14;\n     */\n    ItemSlotMainHand = 14,\n    /**\n     * @generated from protobuf enum value: ItemSlotOffHand = 15;\n     */\n    ItemSlotOffHand = 15,\n    /**\n     * @generated from protobuf enum value: ItemSlotRanged = 16;\n     */\n    ItemSlotRanged = 16\n}\n/**\n * @generated from protobuf enum proto.ItemQuality\n */\nexport enum ItemQuality {\n    /**\n     * @generated from protobuf enum value: ItemQualityJunk = 0;\n     */\n    ItemQualityJunk = 0,\n    /**\n     * @generated from protobuf enum value: ItemQualityCommon = 1;\n     */\n    ItemQualityCommon = 1,\n    /**\n     * @generated from protobuf enum value: ItemQualityUncommon = 2;\n     */\n    ItemQualityUncommon = 2,\n    /**\n     * @generated from protobuf enum value: ItemQualityRare = 3;\n     */\n    ItemQualityRare = 3,\n    /**\n     * @generated from protobuf enum value: ItemQualityEpic = 4;\n     */\n    ItemQualityEpic = 4,\n    /**\n     * @generated from protobuf enum value: ItemQualityLegendary = 5;\n     */\n    ItemQualityLegendary = 5\n}\n/**\n * @generated from protobuf enum proto.GemColor\n */\nexport enum GemColor {\n    /**\n     * @generated from protobuf enum value: GemColorUnknown = 0;\n     */\n    GemColorUnknown = 0,\n    /**\n     * @generated from protobuf enum value: GemColorMeta = 1;\n     */\n    GemColorMeta = 1,\n    /**\n     * @generated from protobuf enum value: GemColorRed = 2;\n     */\n    GemColorRed = 2,\n    /**\n     * @generated from protobuf enum value: GemColorBlue = 3;\n     */\n    GemColorBlue = 3,\n    /**\n     * @generated from protobuf enum value: GemColorYellow = 4;\n     */\n    GemColorYellow = 4,\n    /**\n     * @generated from protobuf enum value: GemColorGreen = 5;\n     */\n    GemColorGreen = 5,\n    /**\n     * @generated from protobuf enum value: GemColorOrange = 6;\n     */\n    GemColorOrange = 6,\n    /**\n     * @generated from protobuf enum value: GemColorPurple = 7;\n     */\n    GemColorPurple = 7,\n    /**\n     * @generated from protobuf enum value: GemColorPrismatic = 8;\n     */\n    GemColorPrismatic = 8\n}\n/**\n * @generated from protobuf enum proto.SpellSchool\n */\nexport enum SpellSchool {\n    /**\n     * @generated from protobuf enum value: SpellSchoolPhysical = 0;\n     */\n    SpellSchoolPhysical = 0,\n    /**\n     * @generated from protobuf enum value: SpellSchoolArcane = 1;\n     */\n    SpellSchoolArcane = 1,\n    /**\n     * @generated from protobuf enum value: SpellSchoolFire = 2;\n     */\n    SpellSchoolFire = 2,\n    /**\n     * @generated from protobuf enum value: SpellSchoolFrost = 3;\n     */\n    SpellSchoolFrost = 3,\n    /**\n     * @generated from protobuf enum value: SpellSchoolHoly = 4;\n     */\n    SpellSchoolHoly = 4,\n    /**\n     * @generated from protobuf enum value: SpellSchoolNature = 5;\n     */\n    SpellSchoolNature = 5,\n    /**\n     * @generated from protobuf enum value: SpellSchoolShadow = 6;\n     */\n    SpellSchoolShadow = 6\n}\n/**\n * @generated from protobuf enum proto.TristateEffect\n */\nexport enum TristateEffect {\n    /**\n     * @generated from protobuf enum value: TristateEffectMissing = 0;\n     */\n    TristateEffectMissing = 0,\n    /**\n     * @generated from protobuf enum value: TristateEffectRegular = 1;\n     */\n    TristateEffectRegular = 1,\n    /**\n     * @generated from protobuf enum value: TristateEffectImproved = 2;\n     */\n    TristateEffectImproved = 2\n}\n/**\n * @generated from protobuf enum proto.Explosive\n */\nexport enum Explosive {\n    /**\n     * @generated from protobuf enum value: ExplosiveUnknown = 0;\n     */\n    ExplosiveUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ExplosiveSaroniteBomb = 1;\n     */\n    ExplosiveSaroniteBomb = 1,\n    /**\n     * @generated from protobuf enum value: ExplosiveCobaltFragBomb = 2;\n     */\n    ExplosiveCobaltFragBomb = 2\n}\n/**\n * @generated from protobuf enum proto.Potions\n */\nexport enum Potions {\n    /**\n     * @generated from protobuf enum value: UnknownPotion = 0;\n     */\n    UnknownPotion = 0,\n    /**\n     * @generated from protobuf enum value: RunicHealingPotion = 1;\n     */\n    RunicHealingPotion = 1,\n    /**\n     * @generated from protobuf enum value: RunicManaPotion = 2;\n     */\n    RunicManaPotion = 2,\n    /**\n     * @generated from protobuf enum value: IndestructiblePotion = 3;\n     */\n    IndestructiblePotion = 3,\n    /**\n     * @generated from protobuf enum value: PotionOfSpeed = 4;\n     */\n    PotionOfSpeed = 4,\n    /**\n     * @generated from protobuf enum value: PotionOfWildMagic = 5;\n     */\n    PotionOfWildMagic = 5,\n    /**\n     * @generated from protobuf enum value: DestructionPotion = 6;\n     */\n    DestructionPotion = 6,\n    /**\n     * @generated from protobuf enum value: SuperManaPotion = 7;\n     */\n    SuperManaPotion = 7,\n    /**\n     * @generated from protobuf enum value: HastePotion = 8;\n     */\n    HastePotion = 8,\n    /**\n     * @generated from protobuf enum value: MightyRagePotion = 9;\n     */\n    MightyRagePotion = 9,\n    /**\n     * @generated from protobuf enum value: FelManaPotion = 10;\n     */\n    FelManaPotion = 10,\n    /**\n     * @generated from protobuf enum value: InsaneStrengthPotion = 11;\n     */\n    InsaneStrengthPotion = 11,\n    /**\n     * @generated from protobuf enum value: IronshieldPotion = 12;\n     */\n    IronshieldPotion = 12,\n    /**\n     * @generated from protobuf enum value: HeroicPotion = 13;\n     */\n    HeroicPotion = 13\n}\n/**\n * @generated from protobuf enum proto.Conjured\n */\nexport enum Conjured {\n    /**\n     * @generated from protobuf enum value: ConjuredUnknown = 0;\n     */\n    ConjuredUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ConjuredDarkRune = 1;\n     */\n    ConjuredDarkRune = 1,\n    /**\n     * @generated from protobuf enum value: ConjuredFlameCap = 2;\n     */\n    ConjuredFlameCap = 2,\n    /**\n     * @generated from protobuf enum value: ConjuredHealthstone = 5;\n     */\n    ConjuredHealthstone = 5,\n    /**\n     * @generated from protobuf enum value: ConjuredRogueThistleTea = 4;\n     */\n    ConjuredRogueThistleTea = 4\n}\n/**\n * @generated from protobuf enum proto.Flask\n */\nexport enum Flask {\n    /**\n     * @generated from protobuf enum value: FlaskUnknown = 0;\n     */\n    FlaskUnknown = 0,\n    /**\n     * @generated from protobuf enum value: FlaskOfTheFrostWyrm = 1;\n     */\n    FlaskOfTheFrostWyrm = 1,\n    /**\n     * @generated from protobuf enum value: FlaskOfEndlessRage = 2;\n     */\n    FlaskOfEndlessRage = 2,\n    /**\n     * @generated from protobuf enum value: FlaskOfPureMojo = 3;\n     */\n    FlaskOfPureMojo = 3,\n    /**\n     * @generated from protobuf enum value: FlaskOfStoneblood = 4;\n     */\n    FlaskOfStoneblood = 4,\n    /**\n     * @generated from protobuf enum value: LesserFlaskOfToughness = 5;\n     */\n    LesserFlaskOfToughness = 5,\n    /**\n     * @generated from protobuf enum value: LesserFlaskOfResistance = 6;\n     */\n    LesserFlaskOfResistance = 6,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: FlaskOfBlindingLight = 7;\n     */\n    FlaskOfBlindingLight = 7,\n    /**\n     * @generated from protobuf enum value: FlaskOfMightyRestoration = 8;\n     */\n    FlaskOfMightyRestoration = 8,\n    /**\n     * @generated from protobuf enum value: FlaskOfPureDeath = 9;\n     */\n    FlaskOfPureDeath = 9,\n    /**\n     * @generated from protobuf enum value: FlaskOfRelentlessAssault = 10;\n     */\n    FlaskOfRelentlessAssault = 10,\n    /**\n     * @generated from protobuf enum value: FlaskOfSupremePower = 11;\n     */\n    FlaskOfSupremePower = 11,\n    /**\n     * @generated from protobuf enum value: FlaskOfFortification = 12;\n     */\n    FlaskOfFortification = 12,\n    /**\n     * @generated from protobuf enum value: FlaskOfChromaticWonder = 13;\n     */\n    FlaskOfChromaticWonder = 13\n}\n/**\n * @generated from protobuf enum proto.BattleElixir\n */\nexport enum BattleElixir {\n    /**\n     * @generated from protobuf enum value: BattleElixirUnknown = 0;\n     */\n    BattleElixirUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ElixirOfAccuracy = 1;\n     */\n    ElixirOfAccuracy = 1,\n    /**\n     * @generated from protobuf enum value: ElixirOfArmorPiercing = 2;\n     */\n    ElixirOfArmorPiercing = 2,\n    /**\n     * @generated from protobuf enum value: ElixirOfDeadlyStrikes = 3;\n     */\n    ElixirOfDeadlyStrikes = 3,\n    /**\n     * @generated from protobuf enum value: ElixirOfExpertise = 4;\n     */\n    ElixirOfExpertise = 4,\n    /**\n     * @generated from protobuf enum value: ElixirOfLightningSpeed = 5;\n     */\n    ElixirOfLightningSpeed = 5,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyAgility = 6;\n     */\n    ElixirOfMightyAgility = 6,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyStrength = 7;\n     */\n    ElixirOfMightyStrength = 7,\n    /**\n     * @generated from protobuf enum value: GurusElixir = 8;\n     */\n    GurusElixir = 8,\n    /**\n     * @generated from protobuf enum value: SpellpowerElixir = 9;\n     */\n    SpellpowerElixir = 9,\n    /**\n     * @generated from protobuf enum value: WrathElixir = 10;\n     */\n    WrathElixir = 10,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: AdeptsElixir = 11;\n     */\n    AdeptsElixir = 11,\n    /**\n     * @generated from protobuf enum value: ElixirOfDemonslaying = 12;\n     */\n    ElixirOfDemonslaying = 12,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorAgility = 13;\n     */\n    ElixirOfMajorAgility = 13,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorFirePower = 14;\n     */\n    ElixirOfMajorFirePower = 14,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorFrostPower = 15;\n     */\n    ElixirOfMajorFrostPower = 15,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorShadowPower = 16;\n     */\n    ElixirOfMajorShadowPower = 16,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorStrength = 17;\n     */\n    ElixirOfMajorStrength = 17,\n    /**\n     * @generated from protobuf enum value: ElixirOfMastery = 18;\n     */\n    ElixirOfMastery = 18,\n    /**\n     * @generated from protobuf enum value: ElixirOfTheMongoose = 19;\n     */\n    ElixirOfTheMongoose = 19,\n    /**\n     * @generated from protobuf enum value: FelStrengthElixir = 20;\n     */\n    FelStrengthElixir = 20,\n    /**\n     * @generated from protobuf enum value: GreaterArcaneElixir = 21;\n     */\n    GreaterArcaneElixir = 21\n}\n/**\n * @generated from protobuf enum proto.GuardianElixir\n */\nexport enum GuardianElixir {\n    /**\n     * @generated from protobuf enum value: GuardianElixirUnknown = 0;\n     */\n    GuardianElixirUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyDefense = 1;\n     */\n    ElixirOfMightyDefense = 1,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyFortitude = 2;\n     */\n    ElixirOfMightyFortitude = 2,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyMageblood = 3;\n     */\n    ElixirOfMightyMageblood = 3,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyThoughts = 4;\n     */\n    ElixirOfMightyThoughts = 4,\n    /**\n     * @generated from protobuf enum value: ElixirOfProtection = 5;\n     */\n    ElixirOfProtection = 5,\n    /**\n     * @generated from protobuf enum value: ElixirOfSpirit = 6;\n     */\n    ElixirOfSpirit = 6,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: GiftOfArthas = 7;\n     */\n    GiftOfArthas = 7,\n    /**\n     * @generated from protobuf enum value: ElixirOfDraenicWisdom = 8;\n     */\n    ElixirOfDraenicWisdom = 8,\n    /**\n     * @generated from protobuf enum value: ElixirOfIronskin = 9;\n     */\n    ElixirOfIronskin = 9,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorDefense = 10;\n     */\n    ElixirOfMajorDefense = 10,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorFortitude = 11;\n     */\n    ElixirOfMajorFortitude = 11,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorMageblood = 12;\n     */\n    ElixirOfMajorMageblood = 12\n}\n/**\n * @generated from protobuf enum proto.Food\n */\nexport enum Food {\n    /**\n     * @generated from protobuf enum value: FoodUnknown = 0;\n     */\n    FoodUnknown = 0,\n    /**\n     * @generated from protobuf enum value: FoodFishFeast = 1;\n     */\n    FoodFishFeast = 1,\n    /**\n     * @generated from protobuf enum value: FoodGreatFeast = 2;\n     */\n    FoodGreatFeast = 2,\n    /**\n     * @generated from protobuf enum value: FoodBlackenedDragonfin = 3;\n     */\n    FoodBlackenedDragonfin = 3,\n    /**\n     * @generated from protobuf enum value: FoodHeartyRhino = 4;\n     */\n    FoodHeartyRhino = 4,\n    /**\n     * @generated from protobuf enum value: FoodMegaMammothMeal = 5;\n     */\n    FoodMegaMammothMeal = 5,\n    /**\n     * @generated from protobuf enum value: FoodSpicedWormBurger = 6;\n     */\n    FoodSpicedWormBurger = 6,\n    /**\n     * @generated from protobuf enum value: FoodRhinoliciousWormsteak = 7;\n     */\n    FoodRhinoliciousWormsteak = 7,\n    /**\n     * @generated from protobuf enum value: FoodImperialMantaSteak = 8;\n     */\n    FoodImperialMantaSteak = 8,\n    /**\n     * @generated from protobuf enum value: FoodSnapperExtreme = 9;\n     */\n    FoodSnapperExtreme = 9,\n    /**\n     * @generated from protobuf enum value: FoodMightyRhinoDogs = 10;\n     */\n    FoodMightyRhinoDogs = 10,\n    /**\n     * @generated from protobuf enum value: FoodFirecrackerSalmon = 11;\n     */\n    FoodFirecrackerSalmon = 11,\n    /**\n     * @generated from protobuf enum value: FoodCuttlesteak = 12;\n     */\n    FoodCuttlesteak = 12,\n    /**\n     * @generated from protobuf enum value: FoodDragonfinFilet = 13;\n     */\n    FoodDragonfinFilet = 13,\n    /**\n     * TBC Foods\n     *\n     * @generated from protobuf enum value: FoodBlackenedBasilisk = 14;\n     */\n    FoodBlackenedBasilisk = 14,\n    /**\n     * @generated from protobuf enum value: FoodGrilledMudfish = 15;\n     */\n    FoodGrilledMudfish = 15,\n    /**\n     * @generated from protobuf enum value: FoodRavagerDog = 16;\n     */\n    FoodRavagerDog = 16,\n    /**\n     * @generated from protobuf enum value: FoodRoastedClefthoof = 17;\n     */\n    FoodRoastedClefthoof = 17,\n    /**\n     * @generated from protobuf enum value: FoodSkullfishSoup = 18;\n     */\n    FoodSkullfishSoup = 18,\n    /**\n     * @generated from protobuf enum value: FoodSpicyHotTalbuk = 19;\n     */\n    FoodSpicyHotTalbuk = 19,\n    /**\n     * @generated from protobuf enum value: FoodFishermansFeast = 20;\n     */\n    FoodFishermansFeast = 20\n}\n/**\n * @generated from protobuf enum proto.PetFood\n */\nexport enum PetFood {\n    /**\n     * @generated from protobuf enum value: PetFoodUnknown = 0;\n     */\n    PetFoodUnknown = 0,\n    /**\n     * @generated from protobuf enum value: PetFoodSpicedMammothTreats = 1;\n     */\n    PetFoodSpicedMammothTreats = 1,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: PetFoodKiblersBits = 2;\n     */\n    PetFoodKiblersBits = 2\n}\n/**\n * @generated from protobuf enum proto.MobType\n */\nexport enum MobType {\n    /**\n     * @generated from protobuf enum value: MobTypeUnknown = 0;\n     */\n    MobTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: MobTypeBeast = 1;\n     */\n    MobTypeBeast = 1,\n    /**\n     * @generated from protobuf enum value: MobTypeDemon = 2;\n     */\n    MobTypeDemon = 2,\n    /**\n     * @generated from protobuf enum value: MobTypeDragonkin = 3;\n     */\n    MobTypeDragonkin = 3,\n    /**\n     * @generated from protobuf enum value: MobTypeElemental = 4;\n     */\n    MobTypeElemental = 4,\n    /**\n     * @generated from protobuf enum value: MobTypeGiant = 5;\n     */\n    MobTypeGiant = 5,\n    /**\n     * @generated from protobuf enum value: MobTypeHumanoid = 6;\n     */\n    MobTypeHumanoid = 6,\n    /**\n     * @generated from protobuf enum value: MobTypeMechanical = 7;\n     */\n    MobTypeMechanical = 7,\n    /**\n     * @generated from protobuf enum value: MobTypeUndead = 8;\n     */\n    MobTypeUndead = 8\n}\n/**\n * Extra enum for describing which items are eligible for an enchant, when\n * ItemType alone is not enough.\n *\n * @generated from protobuf enum proto.EnchantType\n */\nexport enum EnchantType {\n    /**\n     * @generated from protobuf enum value: EnchantTypeNormal = 0;\n     */\n    EnchantTypeNormal = 0,\n    /**\n     * @generated from protobuf enum value: EnchantTypeTwoHand = 1;\n     */\n    EnchantTypeTwoHand = 1,\n    /**\n     * @generated from protobuf enum value: EnchantTypeShield = 2;\n     */\n    EnchantTypeShield = 2,\n    /**\n     * @generated from protobuf enum value: EnchantTypeKit = 3;\n     */\n    EnchantTypeKit = 3\n}\n/**\n * ID for actions that aren't spells or items.\n *\n * @generated from protobuf enum proto.OtherAction\n */\nexport enum OtherAction {\n    /**\n     * @generated from protobuf enum value: OtherActionNone = 0;\n     */\n    OtherActionNone = 0,\n    /**\n     * @generated from protobuf enum value: OtherActionWait = 1;\n     */\n    OtherActionWait = 1,\n    /**\n     * @generated from protobuf enum value: OtherActionManaRegen = 2;\n     */\n    OtherActionManaRegen = 2,\n    /**\n     * @generated from protobuf enum value: OtherActionEnergyRegen = 5;\n     */\n    OtherActionEnergyRegen = 5,\n    /**\n     * @generated from protobuf enum value: OtherActionFocusRegen = 6;\n     */\n    OtherActionFocusRegen = 6,\n    /**\n     * For threat generated from mana gains.\n     *\n     * @generated from protobuf enum value: OtherActionManaGain = 10;\n     */\n    OtherActionManaGain = 10,\n    /**\n     * For threat generated from rage gains.\n     *\n     * @generated from protobuf enum value: OtherActionRageGain = 11;\n     */\n    OtherActionRageGain = 11,\n    /**\n     * A white hit, can be main hand or off hand.\n     *\n     * @generated from protobuf enum value: OtherActionAttack = 3;\n     */\n    OtherActionAttack = 3,\n    /**\n     * Default shoot action using a wand/bow/gun.\n     *\n     * @generated from protobuf enum value: OtherActionShoot = 4;\n     */\n    OtherActionShoot = 4,\n    /**\n     * Represents a grouping of all pet actions. Only used by the UI.\n     *\n     * @generated from protobuf enum value: OtherActionPet = 7;\n     */\n    OtherActionPet = 7,\n    /**\n     * Refund of a resource like Energy or Rage, when the ability didn't land.\n     *\n     * @generated from protobuf enum value: OtherActionRefund = 8;\n     */\n    OtherActionRefund = 8,\n    /**\n     * Indicates damage taken; used for rage gen.\n     *\n     * @generated from protobuf enum value: OtherActionDamageTaken = 9;\n     */\n    OtherActionDamageTaken = 9,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionHealingModel = 12;\n     */\n    OtherActionHealingModel = 12,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionBloodRuneGain = 13;\n     */\n    OtherActionBloodRuneGain = 13,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionFrostRuneGain = 14;\n     */\n    OtherActionFrostRuneGain = 14,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionUnholyRuneGain = 15;\n     */\n    OtherActionUnholyRuneGain = 15,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionDeathRuneGain = 16;\n     */\n    OtherActionDeathRuneGain = 16\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidBuffs$Type extends MessageType<RaidBuffs> {\n    constructor() {\n        super(\"proto.RaidBuffs\", [\n            { no: 1, name: \"gift_of_the_wild\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 2, name: \"power_word_fortitude\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 3, name: \"commanding_shout\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 4, name: \"blood_pact\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 5, name: \"horn_of_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"strength_of_earth_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 7, name: \"arcane_brilliance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"fel_intelligence\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 9, name: \"divine_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"battle_shout\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 11, name: \"trueshot_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"unleashed_rage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"abominations_might\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"leader_of_the_pack\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 15, name: \"rampage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"icy_talons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"windfury_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 18, name: \"totem_of_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"flametongue_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"demonic_pact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"swift_retribution\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"moonkin_aura\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 23, name: \"elemental_oath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"wrath_of_air_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"ferocious_inspiration\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"sanctified_retribution\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"arcane_empowerment\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"mana_spring_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 29, name: \"bloodlust\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"thorns\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 31, name: \"devotion_aura\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 42, name: \"stoneskin_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 32, name: \"retribution_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"shadow_protection\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"drums_of_forgotten_kings\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"drums_of_the_wild\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"scroll_of_protection\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"scroll_of_stamina\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"scroll_of_strength\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"scroll_of_agility\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 40, name: \"scroll_of_intellect\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 41, name: \"scroll_of_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RaidBuffs>): RaidBuffs {\n        const message = { giftOfTheWild: 0, powerWordFortitude: 0, commandingShout: 0, bloodPact: 0, hornOfWinter: false, strengthOfEarthTotem: 0, arcaneBrilliance: false, felIntelligence: 0, divineSpirit: false, battleShout: 0, trueshotAura: false, unleashedRage: false, abominationsMight: false, leaderOfThePack: 0, rampage: false, icyTalons: false, windfuryTotem: 0, totemOfWrath: false, flametongueTotem: false, demonicPact: 0, swiftRetribution: false, moonkinAura: 0, elementalOath: false, wrathOfAirTotem: false, ferociousInspiration: false, sanctifiedRetribution: false, arcaneEmpowerment: false, manaSpringTotem: 0, bloodlust: false, thorns: 0, devotionAura: 0, stoneskinTotem: 0, retributionAura: false, shadowProtection: false, drumsOfForgottenKings: false, drumsOfTheWild: false, scrollOfProtection: false, scrollOfStamina: false, scrollOfStrength: false, scrollOfAgility: false, scrollOfIntellect: false, scrollOfSpirit: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidBuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidBuffs): RaidBuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.TristateEffect gift_of_the_wild */ 1:\n                    message.giftOfTheWild = reader.int32();\n                    break;\n                case /* proto.TristateEffect power_word_fortitude */ 2:\n                    message.powerWordFortitude = reader.int32();\n                    break;\n                case /* proto.TristateEffect commanding_shout */ 3:\n                    message.commandingShout = reader.int32();\n                    break;\n                case /* proto.TristateEffect blood_pact */ 4:\n                    message.bloodPact = reader.int32();\n                    break;\n                case /* bool horn_of_winter */ 5:\n                    message.hornOfWinter = reader.bool();\n                    break;\n                case /* proto.TristateEffect strength_of_earth_totem */ 6:\n                    message.strengthOfEarthTotem = reader.int32();\n                    break;\n                case /* bool arcane_brilliance */ 7:\n                    message.arcaneBrilliance = reader.bool();\n                    break;\n                case /* proto.TristateEffect fel_intelligence */ 8:\n                    message.felIntelligence = reader.int32();\n                    break;\n                case /* bool divine_spirit */ 9:\n                    message.divineSpirit = reader.bool();\n                    break;\n                case /* proto.TristateEffect battle_shout */ 10:\n                    message.battleShout = reader.int32();\n                    break;\n                case /* bool trueshot_aura */ 11:\n                    message.trueshotAura = reader.bool();\n                    break;\n                case /* bool unleashed_rage */ 12:\n                    message.unleashedRage = reader.bool();\n                    break;\n                case /* bool abominations_might */ 13:\n                    message.abominationsMight = reader.bool();\n                    break;\n                case /* proto.TristateEffect leader_of_the_pack */ 14:\n                    message.leaderOfThePack = reader.int32();\n                    break;\n                case /* bool rampage */ 15:\n                    message.rampage = reader.bool();\n                    break;\n                case /* bool icy_talons */ 16:\n                    message.icyTalons = reader.bool();\n                    break;\n                case /* proto.TristateEffect windfury_totem */ 17:\n                    message.windfuryTotem = reader.int32();\n                    break;\n                case /* bool totem_of_wrath */ 18:\n                    message.totemOfWrath = reader.bool();\n                    break;\n                case /* bool flametongue_totem */ 19:\n                    message.flametongueTotem = reader.bool();\n                    break;\n                case /* int32 demonic_pact */ 20:\n                    message.demonicPact = reader.int32();\n                    break;\n                case /* bool swift_retribution */ 21:\n                    message.swiftRetribution = reader.bool();\n                    break;\n                case /* proto.TristateEffect moonkin_aura */ 22:\n                    message.moonkinAura = reader.int32();\n                    break;\n                case /* bool elemental_oath */ 23:\n                    message.elementalOath = reader.bool();\n                    break;\n                case /* bool wrath_of_air_totem */ 24:\n                    message.wrathOfAirTotem = reader.bool();\n                    break;\n                case /* bool ferocious_inspiration */ 25:\n                    message.ferociousInspiration = reader.bool();\n                    break;\n                case /* bool sanctified_retribution */ 26:\n                    message.sanctifiedRetribution = reader.bool();\n                    break;\n                case /* bool arcane_empowerment */ 27:\n                    message.arcaneEmpowerment = reader.bool();\n                    break;\n                case /* proto.TristateEffect mana_spring_totem */ 28:\n                    message.manaSpringTotem = reader.int32();\n                    break;\n                case /* bool bloodlust */ 29:\n                    message.bloodlust = reader.bool();\n                    break;\n                case /* proto.TristateEffect thorns */ 30:\n                    message.thorns = reader.int32();\n                    break;\n                case /* proto.TristateEffect devotion_aura */ 31:\n                    message.devotionAura = reader.int32();\n                    break;\n                case /* proto.TristateEffect stoneskin_totem */ 42:\n                    message.stoneskinTotem = reader.int32();\n                    break;\n                case /* bool retribution_aura */ 32:\n                    message.retributionAura = reader.bool();\n                    break;\n                case /* bool shadow_protection */ 33:\n                    message.shadowProtection = reader.bool();\n                    break;\n                case /* bool drums_of_forgotten_kings */ 34:\n                    message.drumsOfForgottenKings = reader.bool();\n                    break;\n                case /* bool drums_of_the_wild */ 35:\n                    message.drumsOfTheWild = reader.bool();\n                    break;\n                case /* bool scroll_of_protection */ 36:\n                    message.scrollOfProtection = reader.bool();\n                    break;\n                case /* bool scroll_of_stamina */ 37:\n                    message.scrollOfStamina = reader.bool();\n                    break;\n                case /* bool scroll_of_strength */ 38:\n                    message.scrollOfStrength = reader.bool();\n                    break;\n                case /* bool scroll_of_agility */ 39:\n                    message.scrollOfAgility = reader.bool();\n                    break;\n                case /* bool scroll_of_intellect */ 40:\n                    message.scrollOfIntellect = reader.bool();\n                    break;\n                case /* bool scroll_of_spirit */ 41:\n                    message.scrollOfSpirit = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidBuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.TristateEffect gift_of_the_wild = 1; */\n        if (message.giftOfTheWild !== 0)\n            writer.tag(1, WireType.Varint).int32(message.giftOfTheWild);\n        /* proto.TristateEffect power_word_fortitude = 2; */\n        if (message.powerWordFortitude !== 0)\n            writer.tag(2, WireType.Varint).int32(message.powerWordFortitude);\n        /* proto.TristateEffect commanding_shout = 3; */\n        if (message.commandingShout !== 0)\n            writer.tag(3, WireType.Varint).int32(message.commandingShout);\n        /* proto.TristateEffect blood_pact = 4; */\n        if (message.bloodPact !== 0)\n            writer.tag(4, WireType.Varint).int32(message.bloodPact);\n        /* bool horn_of_winter = 5; */\n        if (message.hornOfWinter !== false)\n            writer.tag(5, WireType.Varint).bool(message.hornOfWinter);\n        /* proto.TristateEffect strength_of_earth_totem = 6; */\n        if (message.strengthOfEarthTotem !== 0)\n            writer.tag(6, WireType.Varint).int32(message.strengthOfEarthTotem);\n        /* bool arcane_brilliance = 7; */\n        if (message.arcaneBrilliance !== false)\n            writer.tag(7, WireType.Varint).bool(message.arcaneBrilliance);\n        /* proto.TristateEffect fel_intelligence = 8; */\n        if (message.felIntelligence !== 0)\n            writer.tag(8, WireType.Varint).int32(message.felIntelligence);\n        /* bool divine_spirit = 9; */\n        if (message.divineSpirit !== false)\n            writer.tag(9, WireType.Varint).bool(message.divineSpirit);\n        /* proto.TristateEffect battle_shout = 10; */\n        if (message.battleShout !== 0)\n            writer.tag(10, WireType.Varint).int32(message.battleShout);\n        /* bool trueshot_aura = 11; */\n        if (message.trueshotAura !== false)\n            writer.tag(11, WireType.Varint).bool(message.trueshotAura);\n        /* bool unleashed_rage = 12; */\n        if (message.unleashedRage !== false)\n            writer.tag(12, WireType.Varint).bool(message.unleashedRage);\n        /* bool abominations_might = 13; */\n        if (message.abominationsMight !== false)\n            writer.tag(13, WireType.Varint).bool(message.abominationsMight);\n        /* proto.TristateEffect leader_of_the_pack = 14; */\n        if (message.leaderOfThePack !== 0)\n            writer.tag(14, WireType.Varint).int32(message.leaderOfThePack);\n        /* bool rampage = 15; */\n        if (message.rampage !== false)\n            writer.tag(15, WireType.Varint).bool(message.rampage);\n        /* bool icy_talons = 16; */\n        if (message.icyTalons !== false)\n            writer.tag(16, WireType.Varint).bool(message.icyTalons);\n        /* proto.TristateEffect windfury_totem = 17; */\n        if (message.windfuryTotem !== 0)\n            writer.tag(17, WireType.Varint).int32(message.windfuryTotem);\n        /* bool totem_of_wrath = 18; */\n        if (message.totemOfWrath !== false)\n            writer.tag(18, WireType.Varint).bool(message.totemOfWrath);\n        /* bool flametongue_totem = 19; */\n        if (message.flametongueTotem !== false)\n            writer.tag(19, WireType.Varint).bool(message.flametongueTotem);\n        /* int32 demonic_pact = 20; */\n        if (message.demonicPact !== 0)\n            writer.tag(20, WireType.Varint).int32(message.demonicPact);\n        /* bool swift_retribution = 21; */\n        if (message.swiftRetribution !== false)\n            writer.tag(21, WireType.Varint).bool(message.swiftRetribution);\n        /* proto.TristateEffect moonkin_aura = 22; */\n        if (message.moonkinAura !== 0)\n            writer.tag(22, WireType.Varint).int32(message.moonkinAura);\n        /* bool elemental_oath = 23; */\n        if (message.elementalOath !== false)\n            writer.tag(23, WireType.Varint).bool(message.elementalOath);\n        /* bool wrath_of_air_totem = 24; */\n        if (message.wrathOfAirTotem !== false)\n            writer.tag(24, WireType.Varint).bool(message.wrathOfAirTotem);\n        /* bool ferocious_inspiration = 25; */\n        if (message.ferociousInspiration !== false)\n            writer.tag(25, WireType.Varint).bool(message.ferociousInspiration);\n        /* bool sanctified_retribution = 26; */\n        if (message.sanctifiedRetribution !== false)\n            writer.tag(26, WireType.Varint).bool(message.sanctifiedRetribution);\n        /* bool arcane_empowerment = 27; */\n        if (message.arcaneEmpowerment !== false)\n            writer.tag(27, WireType.Varint).bool(message.arcaneEmpowerment);\n        /* proto.TristateEffect mana_spring_totem = 28; */\n        if (message.manaSpringTotem !== 0)\n            writer.tag(28, WireType.Varint).int32(message.manaSpringTotem);\n        /* bool bloodlust = 29; */\n        if (message.bloodlust !== false)\n            writer.tag(29, WireType.Varint).bool(message.bloodlust);\n        /* proto.TristateEffect thorns = 30; */\n        if (message.thorns !== 0)\n            writer.tag(30, WireType.Varint).int32(message.thorns);\n        /* proto.TristateEffect devotion_aura = 31; */\n        if (message.devotionAura !== 0)\n            writer.tag(31, WireType.Varint).int32(message.devotionAura);\n        /* proto.TristateEffect stoneskin_totem = 42; */\n        if (message.stoneskinTotem !== 0)\n            writer.tag(42, WireType.Varint).int32(message.stoneskinTotem);\n        /* bool retribution_aura = 32; */\n        if (message.retributionAura !== false)\n            writer.tag(32, WireType.Varint).bool(message.retributionAura);\n        /* bool shadow_protection = 33; */\n        if (message.shadowProtection !== false)\n            writer.tag(33, WireType.Varint).bool(message.shadowProtection);\n        /* bool drums_of_forgotten_kings = 34; */\n        if (message.drumsOfForgottenKings !== false)\n            writer.tag(34, WireType.Varint).bool(message.drumsOfForgottenKings);\n        /* bool drums_of_the_wild = 35; */\n        if (message.drumsOfTheWild !== false)\n            writer.tag(35, WireType.Varint).bool(message.drumsOfTheWild);\n        /* bool scroll_of_protection = 36; */\n        if (message.scrollOfProtection !== false)\n            writer.tag(36, WireType.Varint).bool(message.scrollOfProtection);\n        /* bool scroll_of_stamina = 37; */\n        if (message.scrollOfStamina !== false)\n            writer.tag(37, WireType.Varint).bool(message.scrollOfStamina);\n        /* bool scroll_of_strength = 38; */\n        if (message.scrollOfStrength !== false)\n            writer.tag(38, WireType.Varint).bool(message.scrollOfStrength);\n        /* bool scroll_of_agility = 39; */\n        if (message.scrollOfAgility !== false)\n            writer.tag(39, WireType.Varint).bool(message.scrollOfAgility);\n        /* bool scroll_of_intellect = 40; */\n        if (message.scrollOfIntellect !== false)\n            writer.tag(40, WireType.Varint).bool(message.scrollOfIntellect);\n        /* bool scroll_of_spirit = 41; */\n        if (message.scrollOfSpirit !== false)\n            writer.tag(41, WireType.Varint).bool(message.scrollOfSpirit);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidBuffs\n */\nexport const RaidBuffs = new RaidBuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PartyBuffs$Type extends MessageType<PartyBuffs> {\n    constructor() {\n        super(\"proto.PartyBuffs\", [\n            { no: 1, name: \"atiesh_mage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"atiesh_warlock\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"braided_eternium_chain\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"eye_of_the_night\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"chain_of_the_twilight_owl\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"mana_tide_totems\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"heroic_presence\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PartyBuffs>): PartyBuffs {\n        const message = { atieshMage: 0, atieshWarlock: 0, braidedEterniumChain: false, eyeOfTheNight: false, chainOfTheTwilightOwl: false, manaTideTotems: 0, heroicPresence: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PartyBuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartyBuffs): PartyBuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 atiesh_mage */ 1:\n                    message.atieshMage = reader.int32();\n                    break;\n                case /* int32 atiesh_warlock */ 2:\n                    message.atieshWarlock = reader.int32();\n                    break;\n                case /* bool braided_eternium_chain */ 3:\n                    message.braidedEterniumChain = reader.bool();\n                    break;\n                case /* bool eye_of_the_night */ 4:\n                    message.eyeOfTheNight = reader.bool();\n                    break;\n                case /* bool chain_of_the_twilight_owl */ 5:\n                    message.chainOfTheTwilightOwl = reader.bool();\n                    break;\n                case /* int32 mana_tide_totems */ 6:\n                    message.manaTideTotems = reader.int32();\n                    break;\n                case /* bool heroic_presence */ 7:\n                    message.heroicPresence = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PartyBuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 atiesh_mage = 1; */\n        if (message.atieshMage !== 0)\n            writer.tag(1, WireType.Varint).int32(message.atieshMage);\n        /* int32 atiesh_warlock = 2; */\n        if (message.atieshWarlock !== 0)\n            writer.tag(2, WireType.Varint).int32(message.atieshWarlock);\n        /* bool braided_eternium_chain = 3; */\n        if (message.braidedEterniumChain !== false)\n            writer.tag(3, WireType.Varint).bool(message.braidedEterniumChain);\n        /* bool eye_of_the_night = 4; */\n        if (message.eyeOfTheNight !== false)\n            writer.tag(4, WireType.Varint).bool(message.eyeOfTheNight);\n        /* bool chain_of_the_twilight_owl = 5; */\n        if (message.chainOfTheTwilightOwl !== false)\n            writer.tag(5, WireType.Varint).bool(message.chainOfTheTwilightOwl);\n        /* int32 mana_tide_totems = 6; */\n        if (message.manaTideTotems !== 0)\n            writer.tag(6, WireType.Varint).int32(message.manaTideTotems);\n        /* bool heroic_presence = 7; */\n        if (message.heroicPresence !== false)\n            writer.tag(7, WireType.Varint).bool(message.heroicPresence);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PartyBuffs\n */\nexport const PartyBuffs = new PartyBuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IndividualBuffs$Type extends MessageType<IndividualBuffs> {\n    constructor() {\n        super(\"proto.IndividualBuffs\", [\n            { no: 1, name: \"blessing_of_kings\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"blessing_of_wisdom\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 3, name: \"blessing_of_might\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 4, name: \"blessing_of_sanctuary\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"vigilance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"renewed_hope\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"hymn_of_hope\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"hand_of_salvation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"rapture\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"innervates\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"power_infusions\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"unholy_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"revitalize_rejuvination\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"revitalize_wild_growth\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"tricks_of_the_trades\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"shattering_throws\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"vampiric_touch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"hunting_party\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"judgements_of_the_wise\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"improved_soul_leech\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"enduring_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"focus_magic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<IndividualBuffs>): IndividualBuffs {\n        const message = { blessingOfKings: false, blessingOfWisdom: 0, blessingOfMight: 0, blessingOfSanctuary: false, vigilance: false, renewedHope: false, hymnOfHope: 0, handOfSalvation: 0, rapture: 0, innervates: 0, powerInfusions: 0, unholyFrenzy: 0, revitalizeRejuvination: 0, revitalizeWildGrowth: 0, tricksOfTheTrades: 0, shatteringThrows: 0, vampiricTouch: false, huntingParty: false, judgementsOfTheWise: false, improvedSoulLeech: false, enduringWinter: false, focusMagic: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<IndividualBuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndividualBuffs): IndividualBuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool blessing_of_kings */ 1:\n                    message.blessingOfKings = reader.bool();\n                    break;\n                case /* proto.TristateEffect blessing_of_wisdom */ 2:\n                    message.blessingOfWisdom = reader.int32();\n                    break;\n                case /* proto.TristateEffect blessing_of_might */ 3:\n                    message.blessingOfMight = reader.int32();\n                    break;\n                case /* bool blessing_of_sanctuary */ 4:\n                    message.blessingOfSanctuary = reader.bool();\n                    break;\n                case /* bool vigilance */ 5:\n                    message.vigilance = reader.bool();\n                    break;\n                case /* bool renewed_hope */ 6:\n                    message.renewedHope = reader.bool();\n                    break;\n                case /* int32 hymn_of_hope */ 7:\n                    message.hymnOfHope = reader.int32();\n                    break;\n                case /* int32 hand_of_salvation */ 8:\n                    message.handOfSalvation = reader.int32();\n                    break;\n                case /* int32 rapture */ 9:\n                    message.rapture = reader.int32();\n                    break;\n                case /* int32 innervates */ 10:\n                    message.innervates = reader.int32();\n                    break;\n                case /* int32 power_infusions */ 11:\n                    message.powerInfusions = reader.int32();\n                    break;\n                case /* int32 unholy_frenzy */ 12:\n                    message.unholyFrenzy = reader.int32();\n                    break;\n                case /* int32 revitalize_rejuvination */ 13:\n                    message.revitalizeRejuvination = reader.int32();\n                    break;\n                case /* int32 revitalize_wild_growth */ 21:\n                    message.revitalizeWildGrowth = reader.int32();\n                    break;\n                case /* int32 tricks_of_the_trades */ 19:\n                    message.tricksOfTheTrades = reader.int32();\n                    break;\n                case /* int32 shattering_throws */ 20:\n                    message.shatteringThrows = reader.int32();\n                    break;\n                case /* bool vampiric_touch */ 14:\n                    message.vampiricTouch = reader.bool();\n                    break;\n                case /* bool hunting_party */ 15:\n                    message.huntingParty = reader.bool();\n                    break;\n                case /* bool judgements_of_the_wise */ 16:\n                    message.judgementsOfTheWise = reader.bool();\n                    break;\n                case /* bool improved_soul_leech */ 17:\n                    message.improvedSoulLeech = reader.bool();\n                    break;\n                case /* bool enduring_winter */ 18:\n                    message.enduringWinter = reader.bool();\n                    break;\n                case /* bool focus_magic */ 22:\n                    message.focusMagic = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: IndividualBuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool blessing_of_kings = 1; */\n        if (message.blessingOfKings !== false)\n            writer.tag(1, WireType.Varint).bool(message.blessingOfKings);\n        /* proto.TristateEffect blessing_of_wisdom = 2; */\n        if (message.blessingOfWisdom !== 0)\n            writer.tag(2, WireType.Varint).int32(message.blessingOfWisdom);\n        /* proto.TristateEffect blessing_of_might = 3; */\n        if (message.blessingOfMight !== 0)\n            writer.tag(3, WireType.Varint).int32(message.blessingOfMight);\n        /* bool blessing_of_sanctuary = 4; */\n        if (message.blessingOfSanctuary !== false)\n            writer.tag(4, WireType.Varint).bool(message.blessingOfSanctuary);\n        /* bool vigilance = 5; */\n        if (message.vigilance !== false)\n            writer.tag(5, WireType.Varint).bool(message.vigilance);\n        /* bool renewed_hope = 6; */\n        if (message.renewedHope !== false)\n            writer.tag(6, WireType.Varint).bool(message.renewedHope);\n        /* int32 hymn_of_hope = 7; */\n        if (message.hymnOfHope !== 0)\n            writer.tag(7, WireType.Varint).int32(message.hymnOfHope);\n        /* int32 hand_of_salvation = 8; */\n        if (message.handOfSalvation !== 0)\n            writer.tag(8, WireType.Varint).int32(message.handOfSalvation);\n        /* int32 rapture = 9; */\n        if (message.rapture !== 0)\n            writer.tag(9, WireType.Varint).int32(message.rapture);\n        /* int32 innervates = 10; */\n        if (message.innervates !== 0)\n            writer.tag(10, WireType.Varint).int32(message.innervates);\n        /* int32 power_infusions = 11; */\n        if (message.powerInfusions !== 0)\n            writer.tag(11, WireType.Varint).int32(message.powerInfusions);\n        /* int32 unholy_frenzy = 12; */\n        if (message.unholyFrenzy !== 0)\n            writer.tag(12, WireType.Varint).int32(message.unholyFrenzy);\n        /* int32 revitalize_rejuvination = 13; */\n        if (message.revitalizeRejuvination !== 0)\n            writer.tag(13, WireType.Varint).int32(message.revitalizeRejuvination);\n        /* int32 revitalize_wild_growth = 21; */\n        if (message.revitalizeWildGrowth !== 0)\n            writer.tag(21, WireType.Varint).int32(message.revitalizeWildGrowth);\n        /* int32 tricks_of_the_trades = 19; */\n        if (message.tricksOfTheTrades !== 0)\n            writer.tag(19, WireType.Varint).int32(message.tricksOfTheTrades);\n        /* int32 shattering_throws = 20; */\n        if (message.shatteringThrows !== 0)\n            writer.tag(20, WireType.Varint).int32(message.shatteringThrows);\n        /* bool vampiric_touch = 14; */\n        if (message.vampiricTouch !== false)\n            writer.tag(14, WireType.Varint).bool(message.vampiricTouch);\n        /* bool hunting_party = 15; */\n        if (message.huntingParty !== false)\n            writer.tag(15, WireType.Varint).bool(message.huntingParty);\n        /* bool judgements_of_the_wise = 16; */\n        if (message.judgementsOfTheWise !== false)\n            writer.tag(16, WireType.Varint).bool(message.judgementsOfTheWise);\n        /* bool improved_soul_leech = 17; */\n        if (message.improvedSoulLeech !== false)\n            writer.tag(17, WireType.Varint).bool(message.improvedSoulLeech);\n        /* bool enduring_winter = 18; */\n        if (message.enduringWinter !== false)\n            writer.tag(18, WireType.Varint).bool(message.enduringWinter);\n        /* bool focus_magic = 22; */\n        if (message.focusMagic !== false)\n            writer.tag(22, WireType.Varint).bool(message.focusMagic);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.IndividualBuffs\n */\nexport const IndividualBuffs = new IndividualBuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Consumes$Type extends MessageType<Consumes> {\n    constructor() {\n        super(\"proto.Consumes\", [\n            { no: 1, name: \"flask\", kind: \"enum\", T: () => [\"proto.Flask\", Flask] },\n            { no: 2, name: \"battle_elixir\", kind: \"enum\", T: () => [\"proto.BattleElixir\", BattleElixir] },\n            { no: 3, name: \"guardian_elixir\", kind: \"enum\", T: () => [\"proto.GuardianElixir\", GuardianElixir] },\n            { no: 6, name: \"food\", kind: \"enum\", T: () => [\"proto.Food\", Food] },\n            { no: 7, name: \"pet_food\", kind: \"enum\", T: () => [\"proto.PetFood\", PetFood] },\n            { no: 8, name: \"pet_scroll_of_agility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"pet_scroll_of_strength\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"default_potion\", kind: \"enum\", T: () => [\"proto.Potions\", Potions] },\n            { no: 11, name: \"prepop_potion\", kind: \"enum\", T: () => [\"proto.Potions\", Potions] },\n            { no: 12, name: \"default_conjured\", kind: \"enum\", T: () => [\"proto.Conjured\", Conjured] },\n            { no: 13, name: \"starting_conjured\", kind: \"enum\", T: () => [\"proto.Conjured\", Conjured] },\n            { no: 14, name: \"num_starting_conjured\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"thermal_sapper\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"explosive_decoy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"filler_explosive\", kind: \"enum\", T: () => [\"proto.Explosive\", Explosive] }\n        ]);\n    }\n    create(value?: PartialMessage<Consumes>): Consumes {\n        const message = { flask: 0, battleElixir: 0, guardianElixir: 0, food: 0, petFood: 0, petScrollOfAgility: 0, petScrollOfStrength: 0, defaultPotion: 0, prepopPotion: 0, defaultConjured: 0, startingConjured: 0, numStartingConjured: 0, thermalSapper: false, explosiveDecoy: false, fillerExplosive: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Consumes>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Consumes): Consumes {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Flask flask */ 1:\n                    message.flask = reader.int32();\n                    break;\n                case /* proto.BattleElixir battle_elixir */ 2:\n                    message.battleElixir = reader.int32();\n                    break;\n                case /* proto.GuardianElixir guardian_elixir */ 3:\n                    message.guardianElixir = reader.int32();\n                    break;\n                case /* proto.Food food */ 6:\n                    message.food = reader.int32();\n                    break;\n                case /* proto.PetFood pet_food */ 7:\n                    message.petFood = reader.int32();\n                    break;\n                case /* int32 pet_scroll_of_agility */ 8:\n                    message.petScrollOfAgility = reader.int32();\n                    break;\n                case /* int32 pet_scroll_of_strength */ 9:\n                    message.petScrollOfStrength = reader.int32();\n                    break;\n                case /* proto.Potions default_potion */ 10:\n                    message.defaultPotion = reader.int32();\n                    break;\n                case /* proto.Potions prepop_potion */ 11:\n                    message.prepopPotion = reader.int32();\n                    break;\n                case /* proto.Conjured default_conjured */ 12:\n                    message.defaultConjured = reader.int32();\n                    break;\n                case /* proto.Conjured starting_conjured */ 13:\n                    message.startingConjured = reader.int32();\n                    break;\n                case /* int32 num_starting_conjured */ 14:\n                    message.numStartingConjured = reader.int32();\n                    break;\n                case /* bool thermal_sapper */ 15:\n                    message.thermalSapper = reader.bool();\n                    break;\n                case /* bool explosive_decoy */ 16:\n                    message.explosiveDecoy = reader.bool();\n                    break;\n                case /* proto.Explosive filler_explosive */ 17:\n                    message.fillerExplosive = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Consumes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Flask flask = 1; */\n        if (message.flask !== 0)\n            writer.tag(1, WireType.Varint).int32(message.flask);\n        /* proto.BattleElixir battle_elixir = 2; */\n        if (message.battleElixir !== 0)\n            writer.tag(2, WireType.Varint).int32(message.battleElixir);\n        /* proto.GuardianElixir guardian_elixir = 3; */\n        if (message.guardianElixir !== 0)\n            writer.tag(3, WireType.Varint).int32(message.guardianElixir);\n        /* proto.Food food = 6; */\n        if (message.food !== 0)\n            writer.tag(6, WireType.Varint).int32(message.food);\n        /* proto.PetFood pet_food = 7; */\n        if (message.petFood !== 0)\n            writer.tag(7, WireType.Varint).int32(message.petFood);\n        /* int32 pet_scroll_of_agility = 8; */\n        if (message.petScrollOfAgility !== 0)\n            writer.tag(8, WireType.Varint).int32(message.petScrollOfAgility);\n        /* int32 pet_scroll_of_strength = 9; */\n        if (message.petScrollOfStrength !== 0)\n            writer.tag(9, WireType.Varint).int32(message.petScrollOfStrength);\n        /* proto.Potions default_potion = 10; */\n        if (message.defaultPotion !== 0)\n            writer.tag(10, WireType.Varint).int32(message.defaultPotion);\n        /* proto.Potions prepop_potion = 11; */\n        if (message.prepopPotion !== 0)\n            writer.tag(11, WireType.Varint).int32(message.prepopPotion);\n        /* proto.Conjured default_conjured = 12; */\n        if (message.defaultConjured !== 0)\n            writer.tag(12, WireType.Varint).int32(message.defaultConjured);\n        /* proto.Conjured starting_conjured = 13; */\n        if (message.startingConjured !== 0)\n            writer.tag(13, WireType.Varint).int32(message.startingConjured);\n        /* int32 num_starting_conjured = 14; */\n        if (message.numStartingConjured !== 0)\n            writer.tag(14, WireType.Varint).int32(message.numStartingConjured);\n        /* bool thermal_sapper = 15; */\n        if (message.thermalSapper !== false)\n            writer.tag(15, WireType.Varint).bool(message.thermalSapper);\n        /* bool explosive_decoy = 16; */\n        if (message.explosiveDecoy !== false)\n            writer.tag(16, WireType.Varint).bool(message.explosiveDecoy);\n        /* proto.Explosive filler_explosive = 17; */\n        if (message.fillerExplosive !== 0)\n            writer.tag(17, WireType.Varint).int32(message.fillerExplosive);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Consumes\n */\nexport const Consumes = new Consumes$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Debuffs$Type extends MessageType<Debuffs> {\n    constructor() {\n        super(\"proto.Debuffs\", [\n            { no: 1, name: \"judgement_of_wisdom\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"judgement_of_light\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"misery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"faerie_fire\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 5, name: \"curse_of_elements\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"ebon_plaguebringer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"earth_and_moon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"heart_of_the_crusader\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"master_poisoner\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"totem_of_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"shadow_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"improved_scorch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"winters_chill\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"blood_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"savage_combat\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"gift_of_arthas\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"mangle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"trauma\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"stampede\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"expose_armor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"sunder_armor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"acid_spit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"curse_of_weakness\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 24, name: \"sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"spore_cloud\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"demoralizing_roar\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 26, name: \"demoralizing_shout\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 36, name: \"vindication\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"thunder_clap\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 28, name: \"frost_fever\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 29, name: \"infected_wounds\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"judgements_of_the_just\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"insect_swarm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 32, name: \"scorpid_sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"shadow_embrace\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"screech\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"hunters_mark\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Debuffs>): Debuffs {\n        const message = { judgementOfWisdom: false, judgementOfLight: false, misery: false, faerieFire: 0, curseOfElements: false, ebonPlaguebringer: false, earthAndMoon: false, heartOfTheCrusader: false, masterPoisoner: false, totemOfWrath: false, shadowMastery: false, improvedScorch: false, wintersChill: false, bloodFrenzy: false, savageCombat: false, giftOfArthas: false, mangle: false, trauma: false, stampede: false, exposeArmor: false, sunderArmor: false, acidSpit: false, curseOfWeakness: 0, sting: false, sporeCloud: false, demoralizingRoar: 0, demoralizingShout: 0, vindication: false, thunderClap: 0, frostFever: 0, infectedWounds: false, judgementsOfTheJust: false, insectSwarm: false, scorpidSting: false, shadowEmbrace: false, screech: false, huntersMark: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Debuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Debuffs): Debuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool judgement_of_wisdom */ 1:\n                    message.judgementOfWisdom = reader.bool();\n                    break;\n                case /* bool judgement_of_light */ 2:\n                    message.judgementOfLight = reader.bool();\n                    break;\n                case /* bool misery */ 3:\n                    message.misery = reader.bool();\n                    break;\n                case /* proto.TristateEffect faerie_fire */ 4:\n                    message.faerieFire = reader.int32();\n                    break;\n                case /* bool curse_of_elements */ 5:\n                    message.curseOfElements = reader.bool();\n                    break;\n                case /* bool ebon_plaguebringer */ 6:\n                    message.ebonPlaguebringer = reader.bool();\n                    break;\n                case /* bool earth_and_moon */ 7:\n                    message.earthAndMoon = reader.bool();\n                    break;\n                case /* bool heart_of_the_crusader */ 8:\n                    message.heartOfTheCrusader = reader.bool();\n                    break;\n                case /* bool master_poisoner */ 9:\n                    message.masterPoisoner = reader.bool();\n                    break;\n                case /* bool totem_of_wrath */ 10:\n                    message.totemOfWrath = reader.bool();\n                    break;\n                case /* bool shadow_mastery */ 11:\n                    message.shadowMastery = reader.bool();\n                    break;\n                case /* bool improved_scorch */ 12:\n                    message.improvedScorch = reader.bool();\n                    break;\n                case /* bool winters_chill */ 13:\n                    message.wintersChill = reader.bool();\n                    break;\n                case /* bool blood_frenzy */ 14:\n                    message.bloodFrenzy = reader.bool();\n                    break;\n                case /* bool savage_combat */ 15:\n                    message.savageCombat = reader.bool();\n                    break;\n                case /* bool gift_of_arthas */ 16:\n                    message.giftOfArthas = reader.bool();\n                    break;\n                case /* bool mangle */ 17:\n                    message.mangle = reader.bool();\n                    break;\n                case /* bool trauma */ 18:\n                    message.trauma = reader.bool();\n                    break;\n                case /* bool stampede */ 19:\n                    message.stampede = reader.bool();\n                    break;\n                case /* bool expose_armor */ 20:\n                    message.exposeArmor = reader.bool();\n                    break;\n                case /* bool sunder_armor */ 21:\n                    message.sunderArmor = reader.bool();\n                    break;\n                case /* bool acid_spit */ 22:\n                    message.acidSpit = reader.bool();\n                    break;\n                case /* proto.TristateEffect curse_of_weakness */ 23:\n                    message.curseOfWeakness = reader.int32();\n                    break;\n                case /* bool sting */ 24:\n                    message.sting = reader.bool();\n                    break;\n                case /* bool spore_cloud */ 37:\n                    message.sporeCloud = reader.bool();\n                    break;\n                case /* proto.TristateEffect demoralizing_roar */ 25:\n                    message.demoralizingRoar = reader.int32();\n                    break;\n                case /* proto.TristateEffect demoralizing_shout */ 26:\n                    message.demoralizingShout = reader.int32();\n                    break;\n                case /* bool vindication */ 36:\n                    message.vindication = reader.bool();\n                    break;\n                case /* proto.TristateEffect thunder_clap */ 27:\n                    message.thunderClap = reader.int32();\n                    break;\n                case /* proto.TristateEffect frost_fever */ 28:\n                    message.frostFever = reader.int32();\n                    break;\n                case /* bool infected_wounds */ 29:\n                    message.infectedWounds = reader.bool();\n                    break;\n                case /* bool judgements_of_the_just */ 30:\n                    message.judgementsOfTheJust = reader.bool();\n                    break;\n                case /* bool insect_swarm */ 31:\n                    message.insectSwarm = reader.bool();\n                    break;\n                case /* bool scorpid_sting */ 32:\n                    message.scorpidSting = reader.bool();\n                    break;\n                case /* bool shadow_embrace */ 33:\n                    message.shadowEmbrace = reader.bool();\n                    break;\n                case /* bool screech */ 34:\n                    message.screech = reader.bool();\n                    break;\n                case /* int32 hunters_mark */ 35:\n                    message.huntersMark = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Debuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool judgement_of_wisdom = 1; */\n        if (message.judgementOfWisdom !== false)\n            writer.tag(1, WireType.Varint).bool(message.judgementOfWisdom);\n        /* bool judgement_of_light = 2; */\n        if (message.judgementOfLight !== false)\n            writer.tag(2, WireType.Varint).bool(message.judgementOfLight);\n        /* bool misery = 3; */\n        if (message.misery !== false)\n            writer.tag(3, WireType.Varint).bool(message.misery);\n        /* proto.TristateEffect faerie_fire = 4; */\n        if (message.faerieFire !== 0)\n            writer.tag(4, WireType.Varint).int32(message.faerieFire);\n        /* bool curse_of_elements = 5; */\n        if (message.curseOfElements !== false)\n            writer.tag(5, WireType.Varint).bool(message.curseOfElements);\n        /* bool ebon_plaguebringer = 6; */\n        if (message.ebonPlaguebringer !== false)\n            writer.tag(6, WireType.Varint).bool(message.ebonPlaguebringer);\n        /* bool earth_and_moon = 7; */\n        if (message.earthAndMoon !== false)\n            writer.tag(7, WireType.Varint).bool(message.earthAndMoon);\n        /* bool heart_of_the_crusader = 8; */\n        if (message.heartOfTheCrusader !== false)\n            writer.tag(8, WireType.Varint).bool(message.heartOfTheCrusader);\n        /* bool master_poisoner = 9; */\n        if (message.masterPoisoner !== false)\n            writer.tag(9, WireType.Varint).bool(message.masterPoisoner);\n        /* bool totem_of_wrath = 10; */\n        if (message.totemOfWrath !== false)\n            writer.tag(10, WireType.Varint).bool(message.totemOfWrath);\n        /* bool shadow_mastery = 11; */\n        if (message.shadowMastery !== false)\n            writer.tag(11, WireType.Varint).bool(message.shadowMastery);\n        /* bool improved_scorch = 12; */\n        if (message.improvedScorch !== false)\n            writer.tag(12, WireType.Varint).bool(message.improvedScorch);\n        /* bool winters_chill = 13; */\n        if (message.wintersChill !== false)\n            writer.tag(13, WireType.Varint).bool(message.wintersChill);\n        /* bool blood_frenzy = 14; */\n        if (message.bloodFrenzy !== false)\n            writer.tag(14, WireType.Varint).bool(message.bloodFrenzy);\n        /* bool savage_combat = 15; */\n        if (message.savageCombat !== false)\n            writer.tag(15, WireType.Varint).bool(message.savageCombat);\n        /* bool gift_of_arthas = 16; */\n        if (message.giftOfArthas !== false)\n            writer.tag(16, WireType.Varint).bool(message.giftOfArthas);\n        /* bool mangle = 17; */\n        if (message.mangle !== false)\n            writer.tag(17, WireType.Varint).bool(message.mangle);\n        /* bool trauma = 18; */\n        if (message.trauma !== false)\n            writer.tag(18, WireType.Varint).bool(message.trauma);\n        /* bool stampede = 19; */\n        if (message.stampede !== false)\n            writer.tag(19, WireType.Varint).bool(message.stampede);\n        /* bool expose_armor = 20; */\n        if (message.exposeArmor !== false)\n            writer.tag(20, WireType.Varint).bool(message.exposeArmor);\n        /* bool sunder_armor = 21; */\n        if (message.sunderArmor !== false)\n            writer.tag(21, WireType.Varint).bool(message.sunderArmor);\n        /* bool acid_spit = 22; */\n        if (message.acidSpit !== false)\n            writer.tag(22, WireType.Varint).bool(message.acidSpit);\n        /* proto.TristateEffect curse_of_weakness = 23; */\n        if (message.curseOfWeakness !== 0)\n            writer.tag(23, WireType.Varint).int32(message.curseOfWeakness);\n        /* bool sting = 24; */\n        if (message.sting !== false)\n            writer.tag(24, WireType.Varint).bool(message.sting);\n        /* bool spore_cloud = 37; */\n        if (message.sporeCloud !== false)\n            writer.tag(37, WireType.Varint).bool(message.sporeCloud);\n        /* proto.TristateEffect demoralizing_roar = 25; */\n        if (message.demoralizingRoar !== 0)\n            writer.tag(25, WireType.Varint).int32(message.demoralizingRoar);\n        /* proto.TristateEffect demoralizing_shout = 26; */\n        if (message.demoralizingShout !== 0)\n            writer.tag(26, WireType.Varint).int32(message.demoralizingShout);\n        /* bool vindication = 36; */\n        if (message.vindication !== false)\n            writer.tag(36, WireType.Varint).bool(message.vindication);\n        /* proto.TristateEffect thunder_clap = 27; */\n        if (message.thunderClap !== 0)\n            writer.tag(27, WireType.Varint).int32(message.thunderClap);\n        /* proto.TristateEffect frost_fever = 28; */\n        if (message.frostFever !== 0)\n            writer.tag(28, WireType.Varint).int32(message.frostFever);\n        /* bool infected_wounds = 29; */\n        if (message.infectedWounds !== false)\n            writer.tag(29, WireType.Varint).bool(message.infectedWounds);\n        /* bool judgements_of_the_just = 30; */\n        if (message.judgementsOfTheJust !== false)\n            writer.tag(30, WireType.Varint).bool(message.judgementsOfTheJust);\n        /* bool insect_swarm = 31; */\n        if (message.insectSwarm !== false)\n            writer.tag(31, WireType.Varint).bool(message.insectSwarm);\n        /* bool scorpid_sting = 32; */\n        if (message.scorpidSting !== false)\n            writer.tag(32, WireType.Varint).bool(message.scorpidSting);\n        /* bool shadow_embrace = 33; */\n        if (message.shadowEmbrace !== false)\n            writer.tag(33, WireType.Varint).bool(message.shadowEmbrace);\n        /* bool screech = 34; */\n        if (message.screech !== false)\n            writer.tag(34, WireType.Varint).bool(message.screech);\n        /* int32 hunters_mark = 35; */\n        if (message.huntersMark !== 0)\n            writer.tag(35, WireType.Varint).int32(message.huntersMark);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Debuffs\n */\nexport const Debuffs = new Debuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Target$Type extends MessageType<Target> {\n    constructor() {\n        super(\"proto.Target\", [\n            { no: 14, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"level\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"mob_type\", kind: \"enum\", T: () => [\"proto.MobType\", MobType] },\n            { no: 5, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"min_base_damage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"swing_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"dual_wield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"dual_wield_penalty\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"parry_haste\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"tight_enemy_damage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"suppress_dodge\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"spell_school\", kind: \"enum\", T: () => [\"proto.SpellSchool\", SpellSchool] },\n            { no: 6, name: \"tank_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Target>): Target {\n        const message = { id: 0, name: \"\", level: 0, mobType: 0, stats: [], minBaseDamage: 0, swingSpeed: 0, dualWield: false, dualWieldPenalty: false, parryHaste: false, tightEnemyDamage: false, suppressDodge: false, spellSchool: 0, tankIndex: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Target>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Target): Target {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 14:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 15:\n                    message.name = reader.string();\n                    break;\n                case /* int32 level */ 4:\n                    message.level = reader.int32();\n                    break;\n                case /* proto.MobType mob_type */ 3:\n                    message.mobType = reader.int32();\n                    break;\n                case /* repeated double stats */ 5:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* double min_base_damage */ 7:\n                    message.minBaseDamage = reader.double();\n                    break;\n                case /* double swing_speed */ 8:\n                    message.swingSpeed = reader.double();\n                    break;\n                case /* bool dual_wield */ 9:\n                    message.dualWield = reader.bool();\n                    break;\n                case /* bool dual_wield_penalty */ 10:\n                    message.dualWieldPenalty = reader.bool();\n                    break;\n                case /* bool parry_haste */ 12:\n                    message.parryHaste = reader.bool();\n                    break;\n                case /* bool tight_enemy_damage */ 17:\n                    message.tightEnemyDamage = reader.bool();\n                    break;\n                case /* bool suppress_dodge */ 16:\n                    message.suppressDodge = reader.bool();\n                    break;\n                case /* proto.SpellSchool spell_school */ 13:\n                    message.spellSchool = reader.int32();\n                    break;\n                case /* int32 tank_index */ 6:\n                    message.tankIndex = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Target, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 14; */\n        if (message.id !== 0)\n            writer.tag(14, WireType.Varint).int32(message.id);\n        /* string name = 15; */\n        if (message.name !== \"\")\n            writer.tag(15, WireType.LengthDelimited).string(message.name);\n        /* int32 level = 4; */\n        if (message.level !== 0)\n            writer.tag(4, WireType.Varint).int32(message.level);\n        /* proto.MobType mob_type = 3; */\n        if (message.mobType !== 0)\n            writer.tag(3, WireType.Varint).int32(message.mobType);\n        /* repeated double stats = 5; */\n        if (message.stats.length) {\n            writer.tag(5, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* double min_base_damage = 7; */\n        if (message.minBaseDamage !== 0)\n            writer.tag(7, WireType.Bit64).double(message.minBaseDamage);\n        /* double swing_speed = 8; */\n        if (message.swingSpeed !== 0)\n            writer.tag(8, WireType.Bit64).double(message.swingSpeed);\n        /* bool dual_wield = 9; */\n        if (message.dualWield !== false)\n            writer.tag(9, WireType.Varint).bool(message.dualWield);\n        /* bool dual_wield_penalty = 10; */\n        if (message.dualWieldPenalty !== false)\n            writer.tag(10, WireType.Varint).bool(message.dualWieldPenalty);\n        /* bool parry_haste = 12; */\n        if (message.parryHaste !== false)\n            writer.tag(12, WireType.Varint).bool(message.parryHaste);\n        /* bool tight_enemy_damage = 17; */\n        if (message.tightEnemyDamage !== false)\n            writer.tag(17, WireType.Varint).bool(message.tightEnemyDamage);\n        /* bool suppress_dodge = 16; */\n        if (message.suppressDodge !== false)\n            writer.tag(16, WireType.Varint).bool(message.suppressDodge);\n        /* proto.SpellSchool spell_school = 13; */\n        if (message.spellSchool !== 0)\n            writer.tag(13, WireType.Varint).int32(message.spellSchool);\n        /* int32 tank_index = 6; */\n        if (message.tankIndex !== 0)\n            writer.tag(6, WireType.Varint).int32(message.tankIndex);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Target\n */\nexport const Target = new Target$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Encounter$Type extends MessageType<Encounter> {\n    constructor() {\n        super(\"proto.Encounter\", [\n            { no: 1, name: \"duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"duration_variation\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"execute_proportion_20\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"execute_proportion_25\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"execute_proportion_35\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_health\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Target }\n        ]);\n    }\n    create(value?: PartialMessage<Encounter>): Encounter {\n        const message = { duration: 0, durationVariation: 0, executeProportion20: 0, executeProportion25: 0, executeProportion35: 0, useHealth: false, targets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Encounter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Encounter): Encounter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double duration */ 1:\n                    message.duration = reader.double();\n                    break;\n                case /* double duration_variation */ 2:\n                    message.durationVariation = reader.double();\n                    break;\n                case /* double execute_proportion_20 */ 3:\n                    message.executeProportion20 = reader.double();\n                    break;\n                case /* double execute_proportion_25 */ 7:\n                    message.executeProportion25 = reader.double();\n                    break;\n                case /* double execute_proportion_35 */ 4:\n                    message.executeProportion35 = reader.double();\n                    break;\n                case /* bool use_health */ 5:\n                    message.useHealth = reader.bool();\n                    break;\n                case /* repeated proto.Target targets */ 6:\n                    message.targets.push(Target.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Encounter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double duration = 1; */\n        if (message.duration !== 0)\n            writer.tag(1, WireType.Bit64).double(message.duration);\n        /* double duration_variation = 2; */\n        if (message.durationVariation !== 0)\n            writer.tag(2, WireType.Bit64).double(message.durationVariation);\n        /* double execute_proportion_20 = 3; */\n        if (message.executeProportion20 !== 0)\n            writer.tag(3, WireType.Bit64).double(message.executeProportion20);\n        /* double execute_proportion_25 = 7; */\n        if (message.executeProportion25 !== 0)\n            writer.tag(7, WireType.Bit64).double(message.executeProportion25);\n        /* double execute_proportion_35 = 4; */\n        if (message.executeProportion35 !== 0)\n            writer.tag(4, WireType.Bit64).double(message.executeProportion35);\n        /* bool use_health = 5; */\n        if (message.useHealth !== false)\n            writer.tag(5, WireType.Varint).bool(message.useHealth);\n        /* repeated proto.Target targets = 6; */\n        for (let i = 0; i < message.targets.length; i++)\n            Target.internalBinaryWrite(message.targets[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Encounter\n */\nexport const Encounter = new Encounter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ItemSpec$Type extends MessageType<ItemSpec> {\n    constructor() {\n        super(\"proto.ItemSpec\", [\n            { no: 2, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"enchant\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"gems\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ItemSpec>): ItemSpec {\n        const message = { id: 0, enchant: 0, gems: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ItemSpec>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemSpec): ItemSpec {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 2:\n                    message.id = reader.int32();\n                    break;\n                case /* int32 enchant */ 3:\n                    message.enchant = reader.int32();\n                    break;\n                case /* repeated int32 gems */ 4:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.gems.push(reader.int32());\n                    else\n                        message.gems.push(reader.int32());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ItemSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 2; */\n        if (message.id !== 0)\n            writer.tag(2, WireType.Varint).int32(message.id);\n        /* int32 enchant = 3; */\n        if (message.enchant !== 0)\n            writer.tag(3, WireType.Varint).int32(message.enchant);\n        /* repeated int32 gems = 4; */\n        if (message.gems.length) {\n            writer.tag(4, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.gems.length; i++)\n                writer.int32(message.gems[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ItemSpec\n */\nexport const ItemSpec = new ItemSpec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EquipmentSpec$Type extends MessageType<EquipmentSpec> {\n    constructor() {\n        super(\"proto.EquipmentSpec\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemSpec }\n        ]);\n    }\n    create(value?: PartialMessage<EquipmentSpec>): EquipmentSpec {\n        const message = { items: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EquipmentSpec>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentSpec): EquipmentSpec {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.ItemSpec items */ 1:\n                    message.items.push(ItemSpec.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EquipmentSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.ItemSpec items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            ItemSpec.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EquipmentSpec\n */\nexport const EquipmentSpec = new EquipmentSpec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Item$Type extends MessageType<Item> {\n    constructor() {\n        super(\"proto.Item\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"wowhead_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 15, name: \"class_allowlist\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Class\", Class] },\n            { no: 3, name: \"type\", kind: \"enum\", T: () => [\"proto.ItemType\", ItemType] },\n            { no: 4, name: \"armor_type\", kind: \"enum\", T: () => [\"proto.ArmorType\", ArmorType] },\n            { no: 5, name: \"weapon_type\", kind: \"enum\", T: () => [\"proto.WeaponType\", WeaponType] },\n            { no: 6, name: \"hand_type\", kind: \"enum\", T: () => [\"proto.HandType\", HandType] },\n            { no: 7, name: \"ranged_weapon_type\", kind: \"enum\", T: () => [\"proto.RangedWeaponType\", RangedWeaponType] },\n            { no: 8, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"gem_sockets\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.GemColor\", GemColor] },\n            { no: 10, name: \"socketBonus\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 17, name: \"weapon_damage_min\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 18, name: \"weapon_damage_max\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 19, name: \"weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 11, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"quality\", kind: \"enum\", T: () => [\"proto.ItemQuality\", ItemQuality] },\n            { no: 13, name: \"unique\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"ilvl\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"required_profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 22, name: \"heroic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Item>): Item {\n        const message = { id: 0, wowheadId: 0, name: \"\", classAllowlist: [], type: 0, armorType: 0, weaponType: 0, handType: 0, rangedWeaponType: 0, stats: [], gemSockets: [], socketBonus: [], weaponDamageMin: 0, weaponDamageMax: 0, weaponSpeed: 0, phase: 0, quality: 0, unique: false, ilvl: 0, requiredProfession: 0, heroic: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Item>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Item): Item {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* int32 wowhead_id */ 16:\n                    message.wowheadId = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* repeated proto.Class class_allowlist */ 15:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.classAllowlist.push(reader.int32());\n                    else\n                        message.classAllowlist.push(reader.int32());\n                    break;\n                case /* proto.ItemType type */ 3:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.ArmorType armor_type */ 4:\n                    message.armorType = reader.int32();\n                    break;\n                case /* proto.WeaponType weapon_type */ 5:\n                    message.weaponType = reader.int32();\n                    break;\n                case /* proto.HandType hand_type */ 6:\n                    message.handType = reader.int32();\n                    break;\n                case /* proto.RangedWeaponType ranged_weapon_type */ 7:\n                    message.rangedWeaponType = reader.int32();\n                    break;\n                case /* repeated double stats */ 8:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* repeated proto.GemColor gem_sockets */ 9:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.gemSockets.push(reader.int32());\n                    else\n                        message.gemSockets.push(reader.int32());\n                    break;\n                case /* repeated double socketBonus */ 10:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.socketBonus.push(reader.double());\n                    else\n                        message.socketBonus.push(reader.double());\n                    break;\n                case /* double weapon_damage_min */ 17:\n                    message.weaponDamageMin = reader.double();\n                    break;\n                case /* double weapon_damage_max */ 18:\n                    message.weaponDamageMax = reader.double();\n                    break;\n                case /* double weapon_speed */ 19:\n                    message.weaponSpeed = reader.double();\n                    break;\n                case /* int32 phase */ 11:\n                    message.phase = reader.int32();\n                    break;\n                case /* proto.ItemQuality quality */ 12:\n                    message.quality = reader.int32();\n                    break;\n                case /* bool unique */ 13:\n                    message.unique = reader.bool();\n                    break;\n                case /* int32 ilvl */ 20:\n                    message.ilvl = reader.int32();\n                    break;\n                case /* proto.Profession required_profession */ 21:\n                    message.requiredProfession = reader.int32();\n                    break;\n                case /* bool heroic */ 22:\n                    message.heroic = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* int32 wowhead_id = 16; */\n        if (message.wowheadId !== 0)\n            writer.tag(16, WireType.Varint).int32(message.wowheadId);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* repeated proto.Class class_allowlist = 15; */\n        if (message.classAllowlist.length) {\n            writer.tag(15, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.classAllowlist.length; i++)\n                writer.int32(message.classAllowlist[i]);\n            writer.join();\n        }\n        /* proto.ItemType type = 3; */\n        if (message.type !== 0)\n            writer.tag(3, WireType.Varint).int32(message.type);\n        /* proto.ArmorType armor_type = 4; */\n        if (message.armorType !== 0)\n            writer.tag(4, WireType.Varint).int32(message.armorType);\n        /* proto.WeaponType weapon_type = 5; */\n        if (message.weaponType !== 0)\n            writer.tag(5, WireType.Varint).int32(message.weaponType);\n        /* proto.HandType hand_type = 6; */\n        if (message.handType !== 0)\n            writer.tag(6, WireType.Varint).int32(message.handType);\n        /* proto.RangedWeaponType ranged_weapon_type = 7; */\n        if (message.rangedWeaponType !== 0)\n            writer.tag(7, WireType.Varint).int32(message.rangedWeaponType);\n        /* repeated double stats = 8; */\n        if (message.stats.length) {\n            writer.tag(8, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* repeated proto.GemColor gem_sockets = 9; */\n        if (message.gemSockets.length) {\n            writer.tag(9, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.gemSockets.length; i++)\n                writer.int32(message.gemSockets[i]);\n            writer.join();\n        }\n        /* repeated double socketBonus = 10; */\n        if (message.socketBonus.length) {\n            writer.tag(10, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.socketBonus.length; i++)\n                writer.double(message.socketBonus[i]);\n            writer.join();\n        }\n        /* double weapon_damage_min = 17; */\n        if (message.weaponDamageMin !== 0)\n            writer.tag(17, WireType.Bit64).double(message.weaponDamageMin);\n        /* double weapon_damage_max = 18; */\n        if (message.weaponDamageMax !== 0)\n            writer.tag(18, WireType.Bit64).double(message.weaponDamageMax);\n        /* double weapon_speed = 19; */\n        if (message.weaponSpeed !== 0)\n            writer.tag(19, WireType.Bit64).double(message.weaponSpeed);\n        /* int32 phase = 11; */\n        if (message.phase !== 0)\n            writer.tag(11, WireType.Varint).int32(message.phase);\n        /* proto.ItemQuality quality = 12; */\n        if (message.quality !== 0)\n            writer.tag(12, WireType.Varint).int32(message.quality);\n        /* bool unique = 13; */\n        if (message.unique !== false)\n            writer.tag(13, WireType.Varint).bool(message.unique);\n        /* int32 ilvl = 20; */\n        if (message.ilvl !== 0)\n            writer.tag(20, WireType.Varint).int32(message.ilvl);\n        /* proto.Profession required_profession = 21; */\n        if (message.requiredProfession !== 0)\n            writer.tag(21, WireType.Varint).int32(message.requiredProfession);\n        /* bool heroic = 22; */\n        if (message.heroic !== false)\n            writer.tag(22, WireType.Varint).bool(message.heroic);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Item\n */\nexport const Item = new Item$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Enchant$Type extends MessageType<Enchant> {\n    constructor() {\n        super(\"proto.Enchant\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"effect_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 10, name: \"is_spell_id\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"type\", kind: \"enum\", T: () => [\"proto.ItemType\", ItemType] },\n            { no: 9, name: \"enchant_type\", kind: \"enum\", T: () => [\"proto.EnchantType\", EnchantType] },\n            { no: 7, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"quality\", kind: \"enum\", T: () => [\"proto.ItemQuality\", ItemQuality] },\n            { no: 11, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"required_profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 12, name: \"class_allowlist\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Class\", Class] }\n        ]);\n    }\n    create(value?: PartialMessage<Enchant>): Enchant {\n        const message = { id: 0, effectId: 0, name: \"\", isSpellId: false, type: 0, enchantType: 0, stats: [], quality: 0, phase: 0, requiredProfession: 0, classAllowlist: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Enchant>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Enchant): Enchant {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* int32 effect_id */ 2:\n                    message.effectId = reader.int32();\n                    break;\n                case /* string name */ 3:\n                    message.name = reader.string();\n                    break;\n                case /* bool is_spell_id */ 10:\n                    message.isSpellId = reader.bool();\n                    break;\n                case /* proto.ItemType type */ 4:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.EnchantType enchant_type */ 9:\n                    message.enchantType = reader.int32();\n                    break;\n                case /* repeated double stats */ 7:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* proto.ItemQuality quality */ 8:\n                    message.quality = reader.int32();\n                    break;\n                case /* int32 phase */ 11:\n                    message.phase = reader.int32();\n                    break;\n                case /* proto.Profession required_profession */ 13:\n                    message.requiredProfession = reader.int32();\n                    break;\n                case /* repeated proto.Class class_allowlist */ 12:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.classAllowlist.push(reader.int32());\n                    else\n                        message.classAllowlist.push(reader.int32());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Enchant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* int32 effect_id = 2; */\n        if (message.effectId !== 0)\n            writer.tag(2, WireType.Varint).int32(message.effectId);\n        /* string name = 3; */\n        if (message.name !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.name);\n        /* bool is_spell_id = 10; */\n        if (message.isSpellId !== false)\n            writer.tag(10, WireType.Varint).bool(message.isSpellId);\n        /* proto.ItemType type = 4; */\n        if (message.type !== 0)\n            writer.tag(4, WireType.Varint).int32(message.type);\n        /* proto.EnchantType enchant_type = 9; */\n        if (message.enchantType !== 0)\n            writer.tag(9, WireType.Varint).int32(message.enchantType);\n        /* repeated double stats = 7; */\n        if (message.stats.length) {\n            writer.tag(7, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* proto.ItemQuality quality = 8; */\n        if (message.quality !== 0)\n            writer.tag(8, WireType.Varint).int32(message.quality);\n        /* int32 phase = 11; */\n        if (message.phase !== 0)\n            writer.tag(11, WireType.Varint).int32(message.phase);\n        /* proto.Profession required_profession = 13; */\n        if (message.requiredProfession !== 0)\n            writer.tag(13, WireType.Varint).int32(message.requiredProfession);\n        /* repeated proto.Class class_allowlist = 12; */\n        if (message.classAllowlist.length) {\n            writer.tag(12, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.classAllowlist.length; i++)\n                writer.int32(message.classAllowlist[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Enchant\n */\nexport const Enchant = new Enchant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Gem$Type extends MessageType<Gem> {\n    constructor() {\n        super(\"proto.Gem\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"color\", kind: \"enum\", T: () => [\"proto.GemColor\", GemColor] },\n            { no: 5, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"quality\", kind: \"enum\", T: () => [\"proto.ItemQuality\", ItemQuality] },\n            { no: 7, name: \"unique\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"required_profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] }\n        ]);\n    }\n    create(value?: PartialMessage<Gem>): Gem {\n        const message = { id: 0, name: \"\", stats: [], color: 0, phase: 0, quality: 0, unique: false, requiredProfession: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Gem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Gem): Gem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* repeated double stats */ 3:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* proto.GemColor color */ 4:\n                    message.color = reader.int32();\n                    break;\n                case /* int32 phase */ 5:\n                    message.phase = reader.int32();\n                    break;\n                case /* proto.ItemQuality quality */ 6:\n                    message.quality = reader.int32();\n                    break;\n                case /* bool unique */ 7:\n                    message.unique = reader.bool();\n                    break;\n                case /* proto.Profession required_profession */ 8:\n                    message.requiredProfession = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Gem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* repeated double stats = 3; */\n        if (message.stats.length) {\n            writer.tag(3, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* proto.GemColor color = 4; */\n        if (message.color !== 0)\n            writer.tag(4, WireType.Varint).int32(message.color);\n        /* int32 phase = 5; */\n        if (message.phase !== 0)\n            writer.tag(5, WireType.Varint).int32(message.phase);\n        /* proto.ItemQuality quality = 6; */\n        if (message.quality !== 0)\n            writer.tag(6, WireType.Varint).int32(message.quality);\n        /* bool unique = 7; */\n        if (message.unique !== false)\n            writer.tag(7, WireType.Varint).bool(message.unique);\n        /* proto.Profession required_profession = 8; */\n        if (message.requiredProfession !== 0)\n            writer.tag(8, WireType.Varint).int32(message.requiredProfession);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Gem\n */\nexport const Gem = new Gem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidTarget$Type extends MessageType<RaidTarget> {\n    constructor() {\n        super(\"proto.RaidTarget\", [\n            { no: 1, name: \"target_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RaidTarget>): RaidTarget {\n        const message = { targetIndex: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidTarget>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidTarget): RaidTarget {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 target_index */ 1:\n                    message.targetIndex = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidTarget, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 target_index = 1; */\n        if (message.targetIndex !== 0)\n            writer.tag(1, WireType.Varint).int32(message.targetIndex);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidTarget\n */\nexport const RaidTarget = new RaidTarget$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ActionID$Type extends MessageType<ActionID> {\n    constructor() {\n        super(\"proto.ActionID\", [\n            { no: 1, name: \"spell_id\", kind: \"scalar\", oneof: \"rawId\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"item_id\", kind: \"scalar\", oneof: \"rawId\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"other_id\", kind: \"enum\", oneof: \"rawId\", T: () => [\"proto.OtherAction\", OtherAction] },\n            { no: 4, name: \"tag\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ActionID>): ActionID {\n        const message = { rawId: { oneofKind: undefined }, tag: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ActionID>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionID): ActionID {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 spell_id */ 1:\n                    message.rawId = {\n                        oneofKind: \"spellId\",\n                        spellId: reader.int32()\n                    };\n                    break;\n                case /* int32 item_id */ 2:\n                    message.rawId = {\n                        oneofKind: \"itemId\",\n                        itemId: reader.int32()\n                    };\n                    break;\n                case /* proto.OtherAction other_id */ 3:\n                    message.rawId = {\n                        oneofKind: \"otherId\",\n                        otherId: reader.int32()\n                    };\n                    break;\n                case /* int32 tag */ 4:\n                    message.tag = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ActionID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 spell_id = 1; */\n        if (message.rawId.oneofKind === \"spellId\")\n            writer.tag(1, WireType.Varint).int32(message.rawId.spellId);\n        /* int32 item_id = 2; */\n        if (message.rawId.oneofKind === \"itemId\")\n            writer.tag(2, WireType.Varint).int32(message.rawId.itemId);\n        /* proto.OtherAction other_id = 3; */\n        if (message.rawId.oneofKind === \"otherId\")\n            writer.tag(3, WireType.Varint).int32(message.rawId.otherId);\n        /* int32 tag = 4; */\n        if (message.tag !== 0)\n            writer.tag(4, WireType.Varint).int32(message.tag);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ActionID\n */\nexport const ActionID = new ActionID$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Glyphs$Type extends MessageType<Glyphs> {\n    constructor() {\n        super(\"proto.Glyphs\", [\n            { no: 1, name: \"major1\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"major2\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"major3\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"minor1\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"minor2\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"minor3\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Glyphs>): Glyphs {\n        const message = { major1: 0, major2: 0, major3: 0, minor1: 0, minor2: 0, minor3: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Glyphs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Glyphs): Glyphs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 major1 */ 1:\n                    message.major1 = reader.int32();\n                    break;\n                case /* int32 major2 */ 2:\n                    message.major2 = reader.int32();\n                    break;\n                case /* int32 major3 */ 3:\n                    message.major3 = reader.int32();\n                    break;\n                case /* int32 minor1 */ 4:\n                    message.minor1 = reader.int32();\n                    break;\n                case /* int32 minor2 */ 5:\n                    message.minor2 = reader.int32();\n                    break;\n                case /* int32 minor3 */ 6:\n                    message.minor3 = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Glyphs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 major1 = 1; */\n        if (message.major1 !== 0)\n            writer.tag(1, WireType.Varint).int32(message.major1);\n        /* int32 major2 = 2; */\n        if (message.major2 !== 0)\n            writer.tag(2, WireType.Varint).int32(message.major2);\n        /* int32 major3 = 3; */\n        if (message.major3 !== 0)\n            writer.tag(3, WireType.Varint).int32(message.major3);\n        /* int32 minor1 = 4; */\n        if (message.minor1 !== 0)\n            writer.tag(4, WireType.Varint).int32(message.minor1);\n        /* int32 minor2 = 5; */\n        if (message.minor2 !== 0)\n            writer.tag(5, WireType.Varint).int32(message.minor2);\n        /* int32 minor3 = 6; */\n        if (message.minor3 !== 0)\n            writer.tag(6, WireType.Varint).int32(message.minor3);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Glyphs\n */\nexport const Glyphs = new Glyphs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Cooldown$Type extends MessageType<Cooldown> {\n    constructor() {\n        super(\"proto.Cooldown\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"timings\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Cooldown>): Cooldown {\n        const message = { timings: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Cooldown>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cooldown): Cooldown {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* repeated double timings */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.timings.push(reader.double());\n                    else\n                        message.timings.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Cooldown, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated double timings = 2; */\n        if (message.timings.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.timings.length; i++)\n                writer.double(message.timings[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Cooldown\n */\nexport const Cooldown = new Cooldown$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Cooldowns$Type extends MessageType<Cooldowns> {\n    constructor() {\n        super(\"proto.Cooldowns\", [\n            { no: 1, name: \"cooldowns\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Cooldown },\n            { no: 2, name: \"hp_percent_for_defensives\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Cooldowns>): Cooldowns {\n        const message = { cooldowns: [], hpPercentForDefensives: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Cooldowns>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cooldowns): Cooldowns {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Cooldown cooldowns */ 1:\n                    message.cooldowns.push(Cooldown.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* double hp_percent_for_defensives */ 2:\n                    message.hpPercentForDefensives = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Cooldowns, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Cooldown cooldowns = 1; */\n        for (let i = 0; i < message.cooldowns.length; i++)\n            Cooldown.internalBinaryWrite(message.cooldowns[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double hp_percent_for_defensives = 2; */\n        if (message.hpPercentForDefensives !== 0)\n            writer.tag(2, WireType.Bit64).double(message.hpPercentForDefensives);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Cooldowns\n */\nexport const Cooldowns = new Cooldowns$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealingModel$Type extends MessageType<HealingModel> {\n    constructor() {\n        super(\"proto.HealingModel\", [\n            { no: 1, name: \"hps\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"cadence_seconds\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"inspiration_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HealingModel>): HealingModel {\n        const message = { hps: 0, cadenceSeconds: 0, inspirationUptime: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HealingModel>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealingModel): HealingModel {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double hps */ 1:\n                    message.hps = reader.double();\n                    break;\n                case /* double cadence_seconds */ 2:\n                    message.cadenceSeconds = reader.double();\n                    break;\n                case /* double inspiration_uptime */ 3:\n                    message.inspirationUptime = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HealingModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double hps = 1; */\n        if (message.hps !== 0)\n            writer.tag(1, WireType.Bit64).double(message.hps);\n        /* double cadence_seconds = 2; */\n        if (message.cadenceSeconds !== 0)\n            writer.tag(2, WireType.Bit64).double(message.cadenceSeconds);\n        /* double inspiration_uptime = 3; */\n        if (message.inspirationUptime !== 0)\n            writer.tag(3, WireType.Bit64).double(message.inspirationUptime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HealingModel\n */\nexport const HealingModel = new HealingModel$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CustomRotation$Type extends MessageType<CustomRotation> {\n    constructor() {\n        super(\"proto.CustomRotation\", [\n            { no: 1, name: \"spells\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => CustomSpell }\n        ]);\n    }\n    create(value?: PartialMessage<CustomRotation>): CustomRotation {\n        const message = { spells: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CustomRotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomRotation): CustomRotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.CustomSpell spells */ 1:\n                    message.spells.push(CustomSpell.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CustomRotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.CustomSpell spells = 1; */\n        for (let i = 0; i < message.spells.length; i++)\n            CustomSpell.internalBinaryWrite(message.spells[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CustomRotation\n */\nexport const CustomRotation = new CustomRotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CustomSpell$Type extends MessageType<CustomSpell> {\n    constructor() {\n        super(\"proto.CustomSpell\", [\n            { no: 1, name: \"spell\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<CustomSpell>): CustomSpell {\n        const message = { spell: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CustomSpell>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomSpell): CustomSpell {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 spell */ 1:\n                    message.spell = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CustomSpell, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 spell = 1; */\n        if (message.spell !== 0)\n            writer.tag(1, WireType.Varint).int32(message.spell);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CustomSpell\n */\nexport const CustomSpell = new CustomSpell$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"deathknight.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidTarget } from \"./common\";\nimport { CustomRotation } from \"./common\";\n/**\n * @generated from protobuf message proto.DeathknightTalents\n */\nexport interface DeathknightTalents {\n    /**\n     * Blood\n     *\n     * @generated from protobuf field: int32 butchery = 1;\n     */\n    butchery: number;\n    /**\n     * @generated from protobuf field: int32 subversion = 2;\n     */\n    subversion: number;\n    /**\n     * @generated from protobuf field: int32 blade_barrier = 3;\n     */\n    bladeBarrier: number;\n    /**\n     * @generated from protobuf field: int32 bladed_armor = 4;\n     */\n    bladedArmor: number;\n    /**\n     * @generated from protobuf field: int32 scent_of_blood = 5;\n     */\n    scentOfBlood: number;\n    /**\n     * @generated from protobuf field: int32 two_handed_weapon_specialization = 6;\n     */\n    twoHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: bool rune_tap = 7;\n     */\n    runeTap: boolean;\n    /**\n     * @generated from protobuf field: int32 dark_conviction = 8;\n     */\n    darkConviction: number;\n    /**\n     * @generated from protobuf field: int32 death_rune_mastery = 9;\n     */\n    deathRuneMastery: number;\n    /**\n     * @generated from protobuf field: int32 improved_rune_tap = 10;\n     */\n    improvedRuneTap: number;\n    /**\n     * @generated from protobuf field: int32 spell_deflection = 11;\n     */\n    spellDeflection: number;\n    /**\n     * @generated from protobuf field: int32 vendetta = 12;\n     */\n    vendetta: number;\n    /**\n     * @generated from protobuf field: int32 bloody_strikes = 13;\n     */\n    bloodyStrikes: number;\n    /**\n     * @generated from protobuf field: int32 veteran_of_the_third_war = 14;\n     */\n    veteranOfTheThirdWar: number;\n    /**\n     * @generated from protobuf field: bool mark_of_blood = 15;\n     */\n    markOfBlood: boolean;\n    /**\n     * @generated from protobuf field: int32 bloody_vengeance = 16;\n     */\n    bloodyVengeance: number;\n    /**\n     * @generated from protobuf field: int32 abominations_might = 17;\n     */\n    abominationsMight: number;\n    /**\n     * @generated from protobuf field: int32 bloodworms = 18;\n     */\n    bloodworms: number;\n    /**\n     * @generated from protobuf field: bool hysteria = 19;\n     */\n    hysteria: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_blood_presence = 20;\n     */\n    improvedBloodPresence: number;\n    /**\n     * @generated from protobuf field: int32 improved_death_strike = 21;\n     */\n    improvedDeathStrike: number;\n    /**\n     * @generated from protobuf field: int32 sudden_doom = 22;\n     */\n    suddenDoom: number;\n    /**\n     * @generated from protobuf field: bool vampiric_blood = 23;\n     */\n    vampiricBlood: boolean;\n    /**\n     * @generated from protobuf field: int32 will_of_the_necropolis = 24;\n     */\n    willOfTheNecropolis: number;\n    /**\n     * @generated from protobuf field: bool heart_strike = 25;\n     */\n    heartStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 might_of_mograine = 26;\n     */\n    mightOfMograine: number;\n    /**\n     * @generated from protobuf field: int32 blood_gorged = 27;\n     */\n    bloodGorged: number;\n    /**\n     * @generated from protobuf field: bool dancing_rune_weapon = 28;\n     */\n    dancingRuneWeapon: boolean;\n    /**\n     * Frost\n     *\n     * @generated from protobuf field: int32 improved_icy_touch = 29;\n     */\n    improvedIcyTouch: number;\n    /**\n     * @generated from protobuf field: int32 runic_power_mastery = 30;\n     */\n    runicPowerMastery: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 31;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 icy_reach = 32;\n     */\n    icyReach: number;\n    /**\n     * @generated from protobuf field: int32 black_ice = 33;\n     */\n    blackIce: number;\n    /**\n     * @generated from protobuf field: int32 nerves_of_cold_steel = 34;\n     */\n    nervesOfColdSteel: number;\n    /**\n     * @generated from protobuf field: int32 icy_talons = 35;\n     */\n    icyTalons: number;\n    /**\n     * @generated from protobuf field: bool lichborne = 36;\n     */\n    lichborne: boolean;\n    /**\n     * @generated from protobuf field: int32 annihilation = 37;\n     */\n    annihilation: number;\n    /**\n     * @generated from protobuf field: int32 killing_machine = 38;\n     */\n    killingMachine: number;\n    /**\n     * @generated from protobuf field: int32 chill_of_the_grave = 39;\n     */\n    chillOfTheGrave: number;\n    /**\n     * @generated from protobuf field: int32 endless_winter = 40;\n     */\n    endlessWinter: number;\n    /**\n     * @generated from protobuf field: int32 frigid_dreadplate = 41;\n     */\n    frigidDreadplate: number;\n    /**\n     * @generated from protobuf field: int32 glacier_rot = 42;\n     */\n    glacierRot: number;\n    /**\n     * @generated from protobuf field: bool deathchill = 43;\n     */\n    deathchill: boolean;\n    /**\n     * @generated from protobuf field: bool improved_icy_talons = 44;\n     */\n    improvedIcyTalons: boolean;\n    /**\n     * @generated from protobuf field: int32 merciless_combat = 45;\n     */\n    mercilessCombat: number;\n    /**\n     * @generated from protobuf field: int32 rime = 46;\n     */\n    rime: number;\n    /**\n     * @generated from protobuf field: int32 chilblains = 47;\n     */\n    chilblains: number;\n    /**\n     * @generated from protobuf field: bool hungering_cold = 48;\n     */\n    hungeringCold: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_frost_presence = 49;\n     */\n    improvedFrostPresence: number;\n    /**\n     * @generated from protobuf field: int32 threat_of_thassarian = 50;\n     */\n    threatOfThassarian: number;\n    /**\n     * @generated from protobuf field: int32 blood_of_the_north = 51;\n     */\n    bloodOfTheNorth: number;\n    /**\n     * @generated from protobuf field: bool unbreakable_armor = 52;\n     */\n    unbreakableArmor: boolean;\n    /**\n     * @generated from protobuf field: int32 acclimation = 53;\n     */\n    acclimation: number;\n    /**\n     * @generated from protobuf field: bool frost_strike = 54;\n     */\n    frostStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 guile_of_gorefiend = 55;\n     */\n    guileOfGorefiend: number;\n    /**\n     * @generated from protobuf field: int32 tundra_stalker = 56;\n     */\n    tundraStalker: number;\n    /**\n     * @generated from protobuf field: bool howling_blast = 57;\n     */\n    howlingBlast: boolean;\n    /**\n     * Unholy\n     *\n     * @generated from protobuf field: int32 vicious_strikes = 58;\n     */\n    viciousStrikes: number;\n    /**\n     * @generated from protobuf field: int32 virulence = 59;\n     */\n    virulence: number;\n    /**\n     * @generated from protobuf field: int32 anticipation = 60;\n     */\n    anticipation: number;\n    /**\n     * @generated from protobuf field: int32 epidemic = 61;\n     */\n    epidemic: number;\n    /**\n     * @generated from protobuf field: int32 morbidity = 62;\n     */\n    morbidity: number;\n    /**\n     * @generated from protobuf field: int32 unholy_command = 63;\n     */\n    unholyCommand: number;\n    /**\n     * @generated from protobuf field: int32 ravenous_dead = 64;\n     */\n    ravenousDead: number;\n    /**\n     * @generated from protobuf field: int32 outbreak = 65;\n     */\n    outbreak: number;\n    /**\n     * @generated from protobuf field: int32 necrosis = 66;\n     */\n    necrosis: number;\n    /**\n     * @generated from protobuf field: bool corpse_explosion = 67;\n     */\n    corpseExplosion: boolean;\n    /**\n     * @generated from protobuf field: int32 on_a_pale_horse = 68;\n     */\n    onAPaleHorse: number;\n    /**\n     * @generated from protobuf field: int32 blood_caked_blade = 69;\n     */\n    bloodCakedBlade: number;\n    /**\n     * @generated from protobuf field: int32 night_of_the_dead = 70;\n     */\n    nightOfTheDead: number;\n    /**\n     * @generated from protobuf field: bool unholy_blight = 71;\n     */\n    unholyBlight: boolean;\n    /**\n     * @generated from protobuf field: int32 impurity = 72;\n     */\n    impurity: number;\n    /**\n     * @generated from protobuf field: int32 dirge = 73;\n     */\n    dirge: number;\n    /**\n     * @generated from protobuf field: int32 desecration = 74;\n     */\n    desecration: number;\n    /**\n     * @generated from protobuf field: int32 magic_suppression = 75;\n     */\n    magicSuppression: number;\n    /**\n     * @generated from protobuf field: int32 reaping = 76;\n     */\n    reaping: number;\n    /**\n     * @generated from protobuf field: bool master_of_ghouls = 77;\n     */\n    masterOfGhouls: boolean;\n    /**\n     * @generated from protobuf field: int32 desolation = 78;\n     */\n    desolation: number;\n    /**\n     * @generated from protobuf field: bool anti_magic_zone = 79;\n     */\n    antiMagicZone: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_unholy_presence = 80;\n     */\n    improvedUnholyPresence: number;\n    /**\n     * @generated from protobuf field: bool ghoul_frenzy = 81;\n     */\n    ghoulFrenzy: boolean;\n    /**\n     * @generated from protobuf field: int32 crypt_fever = 82;\n     */\n    cryptFever: number;\n    /**\n     * @generated from protobuf field: bool bone_shield = 83;\n     */\n    boneShield: boolean;\n    /**\n     * @generated from protobuf field: int32 wandering_plague = 84;\n     */\n    wanderingPlague: number;\n    /**\n     * @generated from protobuf field: int32 ebon_plaguebringer = 85;\n     */\n    ebonPlaguebringer: number;\n    /**\n     * @generated from protobuf field: bool scourge_strike = 86;\n     */\n    scourgeStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 rage_of_rivendare = 87;\n     */\n    rageOfRivendare: number;\n    /**\n     * @generated from protobuf field: bool summon_gargoyle = 88;\n     */\n    summonGargoyle: boolean;\n}\n/**\n * @generated from protobuf message proto.Deathknight\n */\nexport interface Deathknight {\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation rotation = 1;\n     */\n    rotation?: Deathknight_Rotation;\n    /**\n     * @generated from protobuf field: proto.DeathknightTalents talents = 2;\n     */\n    talents?: DeathknightTalents;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Options options = 3;\n     */\n    options?: Deathknight_Options;\n}\n/**\n * @generated from protobuf message proto.Deathknight.Rotation\n */\nexport interface Deathknight_Rotation {\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.FrostRotationType frost_rotation_type = 19;\n     */\n    frostRotationType: Deathknight_Rotation_FrostRotationType;\n    /**\n     * @generated from protobuf field: proto.CustomRotation frost_custom_rotation = 20;\n     */\n    frostCustomRotation?: CustomRotation;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.ArmyOfTheDead army_of_the_dead = 1;\n     */\n    armyOfTheDead: Deathknight_Rotation_ArmyOfTheDead;\n    /**\n     * @generated from protobuf field: bool use_death_and_decay = 2;\n     */\n    useDeathAndDecay: boolean;\n    /**\n     * @generated from protobuf field: bool bt_ghoul_frenzy = 3;\n     */\n    btGhoulFrenzy: boolean;\n    /**\n     * @generated from protobuf field: double disease_refresh_duration = 4;\n     */\n    diseaseRefreshDuration: number;\n    /**\n     * @generated from protobuf field: bool refresh_horn_of_winter = 5;\n     */\n    refreshHornOfWinter: boolean;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.FirstDisease first_disease = 6;\n     */\n    firstDisease: Deathknight_Rotation_FirstDisease;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.DeathAndDecayPrio death_and_decay_prio = 7;\n     */\n    deathAndDecayPrio: Deathknight_Rotation_DeathAndDecayPrio;\n    /**\n     * @generated from protobuf field: bool use_empower_rune_weapon = 8;\n     */\n    useEmpowerRuneWeapon: boolean;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.BloodRuneFiller blood_rune_filler = 9;\n     */\n    bloodRuneFiller: Deathknight_Rotation_BloodRuneFiller;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.Presence starting_presence = 10;\n     */\n    startingPresence: Deathknight_Rotation_Presence;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.BloodTap blood_tap = 11;\n     */\n    bloodTap: Deathknight_Rotation_BloodTap;\n    /**\n     * @generated from protobuf field: double oblit_delay_duration = 12;\n     */\n    oblitDelayDuration: number;\n    /**\n     * @generated from protobuf field: bool use_ams = 13;\n     */\n    useAms: boolean;\n    /**\n     * @generated from protobuf field: double avg_ams_success_rate = 14;\n     */\n    avgAmsSuccessRate: number;\n    /**\n     * @generated from protobuf field: double avg_ams_hit = 15;\n     */\n    avgAmsHit: number;\n    /**\n     * @generated from protobuf field: bool auto_rotation = 16;\n     */\n    autoRotation: boolean;\n    /**\n     * @generated from protobuf field: bool desync_rotation = 17;\n     */\n    desyncRotation: boolean;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.Presence bl_presence = 18;\n     */\n    blPresence: Deathknight_Rotation_Presence;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.Presence presence = 21;\n     */\n    presence: Deathknight_Rotation_Presence;\n    /**\n     * @generated from protobuf field: bool hold_erw_army = 22;\n     */\n    holdErwArmy: boolean;\n    /**\n     * @generated from protobuf field: bool use_gargoyle = 23;\n     */\n    useGargoyle: boolean;\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.ArmyOfTheDead\n */\nexport enum Deathknight_Rotation_ArmyOfTheDead {\n    /**\n     * @generated from protobuf enum value: DoNotUse = 0;\n     */\n    DoNotUse = 0,\n    /**\n     * @generated from protobuf enum value: PreCast = 1;\n     */\n    PreCast = 1,\n    /**\n     * @generated from protobuf enum value: AsMajorCd = 2;\n     */\n    AsMajorCd = 2\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.BloodTap\n */\nexport enum Deathknight_Rotation_BloodTap {\n    /**\n     * @generated from protobuf enum value: GhoulFrenzy = 0;\n     */\n    GhoulFrenzy = 0,\n    /**\n     * @generated from protobuf enum value: IcyTouch = 1;\n     */\n    IcyTouch = 1,\n    /**\n     * @generated from protobuf enum value: BloodStrikeBT = 2;\n     */\n    BloodStrikeBT = 2,\n    /**\n     * @generated from protobuf enum value: BloodBoilBT = 3;\n     */\n    BloodBoilBT = 3\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.DeathAndDecayPrio\n */\nexport enum Deathknight_Rotation_DeathAndDecayPrio {\n    /**\n     * @generated from protobuf enum value: MaxRuneDowntime = 0;\n     */\n    MaxRuneDowntime = 0,\n    /**\n     * @generated from protobuf enum value: MaxDndUptime = 1;\n     */\n    MaxDndUptime = 1\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.FirstDisease\n */\nexport enum Deathknight_Rotation_FirstDisease {\n    /**\n     * @generated from protobuf enum value: FrostFever = 0;\n     */\n    FrostFever = 0,\n    /**\n     * @generated from protobuf enum value: BloodPlague = 1;\n     */\n    BloodPlague = 1\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.BloodRuneFiller\n */\nexport enum Deathknight_Rotation_BloodRuneFiller {\n    /**\n     * @generated from protobuf enum value: BloodStrike = 0;\n     */\n    BloodStrike = 0,\n    /**\n     * @generated from protobuf enum value: BloodBoil = 1;\n     */\n    BloodBoil = 1\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.Presence\n */\nexport enum Deathknight_Rotation_Presence {\n    /**\n     * @generated from protobuf enum value: Blood = 0;\n     */\n    Blood = 0,\n    /**\n     * @generated from protobuf enum value: Unholy = 1;\n     */\n    Unholy = 1,\n    /**\n     * @generated from protobuf enum value: Frost = 2;\n     */\n    Frost = 2\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.FrostRotationType\n */\nexport enum Deathknight_Rotation_FrostRotationType {\n    /**\n     * @generated from protobuf enum value: UnknownType = 0;\n     */\n    UnknownType = 0,\n    /**\n     * @generated from protobuf enum value: SingleTarget = 1;\n     */\n    SingleTarget = 1,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.CustomSpellOption\n */\nexport enum Deathknight_Rotation_CustomSpellOption {\n    /**\n     * @generated from protobuf enum value: CustomNoSpell = 0;\n     */\n    CustomNoSpell = 0,\n    /**\n     * @generated from protobuf enum value: CustomIcyTouch = 1;\n     */\n    CustomIcyTouch = 1,\n    /**\n     * @generated from protobuf enum value: CustomPlagueStrike = 2;\n     */\n    CustomPlagueStrike = 2,\n    /**\n     * @generated from protobuf enum value: CustomPestilence = 3;\n     */\n    CustomPestilence = 3,\n    /**\n     * @generated from protobuf enum value: CustomObliterate = 4;\n     */\n    CustomObliterate = 4,\n    /**\n     * @generated from protobuf enum value: CustomHowlingBlast = 5;\n     */\n    CustomHowlingBlast = 5,\n    /**\n     * @generated from protobuf enum value: CustomHowlingBlastRime = 6;\n     */\n    CustomHowlingBlastRime = 6,\n    /**\n     * @generated from protobuf enum value: CustomBloodBoil = 7;\n     */\n    CustomBloodBoil = 7,\n    /**\n     * @generated from protobuf enum value: CustomBloodStrike = 8;\n     */\n    CustomBloodStrike = 8,\n    /**\n     * @generated from protobuf enum value: CustomDeathAndDecay = 9;\n     */\n    CustomDeathAndDecay = 9,\n    /**\n     * @generated from protobuf enum value: CustomHornOfWinter = 10;\n     */\n    CustomHornOfWinter = 10,\n    /**\n     * @generated from protobuf enum value: CustomUnbreakableArmor = 11;\n     */\n    CustomUnbreakableArmor = 11,\n    /**\n     * @generated from protobuf enum value: CustomBloodTap = 12;\n     */\n    CustomBloodTap = 12,\n    /**\n     * @generated from protobuf enum value: CustomEmpoweredRuneWeapon = 13;\n     */\n    CustomEmpoweredRuneWeapon = 13,\n    /**\n     * @generated from protobuf enum value: CustomFrostStrike = 14;\n     */\n    CustomFrostStrike = 14\n}\n/**\n * @generated from protobuf message proto.Deathknight.Options\n */\nexport interface Deathknight_Options {\n    /**\n     * @generated from protobuf field: double starting_runic_power = 1;\n     */\n    startingRunicPower: number;\n    /**\n     * @generated from protobuf field: double pet_uptime = 2;\n     */\n    petUptime: number;\n    /**\n     * @generated from protobuf field: bool precast_ghoul_frenzy = 3;\n     */\n    precastGhoulFrenzy: boolean;\n    /**\n     * @generated from protobuf field: bool precast_horn_of_winter = 4;\n     */\n    precastHornOfWinter: boolean;\n    /**\n     * @generated from protobuf field: proto.RaidTarget unholy_frenzy_target = 5;\n     */\n    unholyFrenzyTarget?: RaidTarget;\n}\n/**\n * @generated from protobuf message proto.TankDeathknight\n */\nexport interface TankDeathknight {\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Rotation rotation = 1;\n     */\n    rotation?: TankDeathknight_Rotation;\n    /**\n     * @generated from protobuf field: proto.DeathknightTalents talents = 2;\n     */\n    talents?: DeathknightTalents;\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Options options = 3;\n     */\n    options?: TankDeathknight_Options;\n}\n/**\n * @generated from protobuf message proto.TankDeathknight.Rotation\n */\nexport interface TankDeathknight_Rotation {\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Rotation.Presence presence = 4;\n     */\n    presence: TankDeathknight_Rotation_Presence;\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Rotation.Opener opener = 1;\n     */\n    opener: TankDeathknight_Rotation_Opener;\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Rotation.OptimizationSetting optimization_setting = 2;\n     */\n    optimizationSetting: TankDeathknight_Rotation_OptimizationSetting;\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Rotation.BloodSpell blood_spell = 3;\n     */\n    bloodSpell: TankDeathknight_Rotation_BloodSpell;\n}\n/**\n * @generated from protobuf enum proto.TankDeathknight.Rotation.Opener\n */\nexport enum TankDeathknight_Rotation_Opener {\n    /**\n     * @generated from protobuf enum value: Regular = 0;\n     */\n    Regular = 0,\n    /**\n     * @generated from protobuf enum value: Threat = 1;\n     */\n    Threat = 1\n}\n/**\n * @generated from protobuf enum proto.TankDeathknight.Rotation.OptimizationSetting\n */\nexport enum TankDeathknight_Rotation_OptimizationSetting {\n    /**\n     * @generated from protobuf enum value: Hps = 0;\n     */\n    Hps = 0,\n    /**\n     * @generated from protobuf enum value: Tps = 1;\n     */\n    Tps = 1,\n    /**\n     * @generated from protobuf enum value: Dps = 2;\n     */\n    Dps = 2\n}\n/**\n * @generated from protobuf enum proto.TankDeathknight.Rotation.BloodSpell\n */\nexport enum TankDeathknight_Rotation_BloodSpell {\n    /**\n     * @generated from protobuf enum value: BloodStrike = 0;\n     */\n    BloodStrike = 0,\n    /**\n     * @generated from protobuf enum value: BloodBoil = 1;\n     */\n    BloodBoil = 1,\n    /**\n     * @generated from protobuf enum value: HeartStrike = 2;\n     */\n    HeartStrike = 2\n}\n/**\n * @generated from protobuf enum proto.TankDeathknight.Rotation.Presence\n */\nexport enum TankDeathknight_Rotation_Presence {\n    /**\n     * @generated from protobuf enum value: Blood = 0;\n     */\n    Blood = 0,\n    /**\n     * @generated from protobuf enum value: Frost = 1;\n     */\n    Frost = 1,\n    /**\n     * @generated from protobuf enum value: Unholy = 2;\n     */\n    Unholy = 2\n}\n/**\n * @generated from protobuf message proto.TankDeathknight.Options\n */\nexport interface TankDeathknight_Options {\n    /**\n     * @generated from protobuf field: double starting_runic_power = 1;\n     */\n    startingRunicPower: number;\n    /**\n     * @generated from protobuf field: proto.RaidTarget unholy_frenzy_target = 2;\n     */\n    unholyFrenzyTarget?: RaidTarget;\n}\n/**\n * @generated from protobuf enum proto.DeathknightMajorGlyph\n */\nexport enum DeathknightMajorGlyph {\n    /**\n     * @generated from protobuf enum value: DeathknightMajorGlyphNone = 0;\n     */\n    DeathknightMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAntiMagicShell = 43533;\n     */\n    GlyphOfAntiMagicShell = 43533,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodStrike = 43826;\n     */\n    GlyphOfBloodStrike = 43826,\n    /**\n     * @generated from protobuf enum value: GlyphOfBoneShield = 43536;\n     */\n    GlyphOfBoneShield = 43536,\n    /**\n     * @generated from protobuf enum value: GlyphOfChainsOfIce = 43537;\n     */\n    GlyphOfChainsOfIce = 43537,\n    /**\n     * @generated from protobuf enum value: GlyphOfDancingRuneWeapon = 45799;\n     */\n    GlyphOfDancingRuneWeapon = 45799,\n    /**\n     * @generated from protobuf enum value: GlyphOfDarkCommand = 43538;\n     */\n    GlyphOfDarkCommand = 43538,\n    /**\n     * @generated from protobuf enum value: GlyphOfDarkDeath = 45804;\n     */\n    GlyphOfDarkDeath = 45804,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathAndDecay = 43542;\n     */\n    GlyphOfDeathAndDecay = 43542,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathGrip = 43541;\n     */\n    GlyphOfDeathGrip = 43541,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathStrike = 43827;\n     */\n    GlyphOfDeathStrike = 43827,\n    /**\n     * @generated from protobuf enum value: GlyphOfDisease = 45805;\n     */\n    GlyphOfDisease = 45805,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostStrike = 43543;\n     */\n    GlyphOfFrostStrike = 43543,\n    /**\n     * @generated from protobuf enum value: GlyphOfHeartStrike = 43534;\n     */\n    GlyphOfHeartStrike = 43534,\n    /**\n     * @generated from protobuf enum value: GlyphOfHowlingBlast = 45806;\n     */\n    GlyphOfHowlingBlast = 45806,\n    /**\n     * @generated from protobuf enum value: GlyphOfHungeringCold = 45800;\n     */\n    GlyphOfHungeringCold = 45800,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceboundFortitude = 43545;\n     */\n    GlyphOfIceboundFortitude = 43545,\n    /**\n     * @generated from protobuf enum value: GlyphOfIcyTouch = 43546;\n     */\n    GlyphOfIcyTouch = 43546,\n    /**\n     * @generated from protobuf enum value: GlyphOfObliterate = 43547;\n     */\n    GlyphOfObliterate = 43547,\n    /**\n     * @generated from protobuf enum value: GlyphOfPlagueStrike = 43548;\n     */\n    GlyphOfPlagueStrike = 43548,\n    /**\n     * @generated from protobuf enum value: GlyphOfRuneStrike = 43550;\n     */\n    GlyphOfRuneStrike = 43550,\n    /**\n     * @generated from protobuf enum value: GlyphOfRuneTap = 43825;\n     */\n    GlyphOfRuneTap = 43825,\n    /**\n     * @generated from protobuf enum value: GlyphOfScourgeStrike = 43551;\n     */\n    GlyphOfScourgeStrike = 43551,\n    /**\n     * @generated from protobuf enum value: GlyphOfStrangulate = 43552;\n     */\n    GlyphOfStrangulate = 43552,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheGhoul = 43549;\n     */\n    GlyphOfTheGhoul = 43549,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnbreakableArmor = 43553;\n     */\n    GlyphOfUnbreakableArmor = 43553,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnholyBlight = 45803;\n     */\n    GlyphOfUnholyBlight = 45803,\n    /**\n     * @generated from protobuf enum value: GlyphOfVampiricBlood = 43554;\n     */\n    GlyphOfVampiricBlood = 43554\n}\n/**\n * @generated from protobuf enum proto.DeathknightMinorGlyph\n */\nexport enum DeathknightMinorGlyph {\n    /**\n     * @generated from protobuf enum value: DeathknightMinorGlyphNone = 0;\n     */\n    DeathknightMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodTap = 43535;\n     */\n    GlyphOfBloodTap = 43535,\n    /**\n     * @generated from protobuf enum value: GlyphOfCorpseExplosion = 43671;\n     */\n    GlyphOfCorpseExplosion = 43671,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathSEmbrace = 43539;\n     */\n    GlyphOfDeathSEmbrace = 43539,\n    /**\n     * @generated from protobuf enum value: GlyphOfHornOfWinter = 43544;\n     */\n    GlyphOfHornOfWinter = 43544,\n    /**\n     * @generated from protobuf enum value: GlyphOfPestilence = 43672;\n     */\n    GlyphOfPestilence = 43672,\n    /**\n     * @generated from protobuf enum value: GlyphOfRaiseDead = 43673;\n     */\n    GlyphOfRaiseDead = 43673\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass DeathknightTalents$Type extends MessageType<DeathknightTalents> {\n    constructor() {\n        super(\"proto.DeathknightTalents\", [\n            { no: 1, name: \"butchery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"subversion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"blade_barrier\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"bladed_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"scent_of_blood\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"two_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"rune_tap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"dark_conviction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"death_rune_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"improved_rune_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"spell_deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"vendetta\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"bloody_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"veteran_of_the_third_war\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"mark_of_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"bloody_vengeance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"abominations_might\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"bloodworms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"hysteria\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"improved_blood_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"improved_death_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"sudden_doom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"vampiric_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"will_of_the_necropolis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"heart_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"might_of_mograine\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"blood_gorged\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"dancing_rune_weapon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"improved_icy_touch\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"runic_power_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"icy_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"black_ice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"nerves_of_cold_steel\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"icy_talons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"lichborne\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"annihilation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"killing_machine\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"chill_of_the_grave\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"endless_winter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"frigid_dreadplate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"glacier_rot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"deathchill\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 44, name: \"improved_icy_talons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 45, name: \"merciless_combat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"rime\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"chilblains\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"hungering_cold\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"improved_frost_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"threat_of_thassarian\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"blood_of_the_north\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"unbreakable_armor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"acclimation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"frost_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"guile_of_gorefiend\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"tundra_stalker\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"howling_blast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 58, name: \"vicious_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"virulence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"anticipation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"epidemic\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"morbidity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"unholy_command\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"ravenous_dead\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"outbreak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"necrosis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"corpse_explosion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 68, name: \"on_a_pale_horse\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"blood_caked_blade\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"night_of_the_dead\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"unholy_blight\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 72, name: \"impurity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"dirge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"desecration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"magic_suppression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"reaping\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"master_of_ghouls\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 78, name: \"desolation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"anti_magic_zone\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 80, name: \"improved_unholy_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"ghoul_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 82, name: \"crypt_fever\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"bone_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 84, name: \"wandering_plague\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 85, name: \"ebon_plaguebringer\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 86, name: \"scourge_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 87, name: \"rage_of_rivendare\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 88, name: \"summon_gargoyle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DeathknightTalents>): DeathknightTalents {\n        const message = { butchery: 0, subversion: 0, bladeBarrier: 0, bladedArmor: 0, scentOfBlood: 0, twoHandedWeaponSpecialization: 0, runeTap: false, darkConviction: 0, deathRuneMastery: 0, improvedRuneTap: 0, spellDeflection: 0, vendetta: 0, bloodyStrikes: 0, veteranOfTheThirdWar: 0, markOfBlood: false, bloodyVengeance: 0, abominationsMight: 0, bloodworms: 0, hysteria: false, improvedBloodPresence: 0, improvedDeathStrike: 0, suddenDoom: 0, vampiricBlood: false, willOfTheNecropolis: 0, heartStrike: false, mightOfMograine: 0, bloodGorged: 0, dancingRuneWeapon: false, improvedIcyTouch: 0, runicPowerMastery: 0, toughness: 0, icyReach: 0, blackIce: 0, nervesOfColdSteel: 0, icyTalons: 0, lichborne: false, annihilation: 0, killingMachine: 0, chillOfTheGrave: 0, endlessWinter: 0, frigidDreadplate: 0, glacierRot: 0, deathchill: false, improvedIcyTalons: false, mercilessCombat: 0, rime: 0, chilblains: 0, hungeringCold: false, improvedFrostPresence: 0, threatOfThassarian: 0, bloodOfTheNorth: 0, unbreakableArmor: false, acclimation: 0, frostStrike: false, guileOfGorefiend: 0, tundraStalker: 0, howlingBlast: false, viciousStrikes: 0, virulence: 0, anticipation: 0, epidemic: 0, morbidity: 0, unholyCommand: 0, ravenousDead: 0, outbreak: 0, necrosis: 0, corpseExplosion: false, onAPaleHorse: 0, bloodCakedBlade: 0, nightOfTheDead: 0, unholyBlight: false, impurity: 0, dirge: 0, desecration: 0, magicSuppression: 0, reaping: 0, masterOfGhouls: false, desolation: 0, antiMagicZone: false, improvedUnholyPresence: 0, ghoulFrenzy: false, cryptFever: 0, boneShield: false, wanderingPlague: 0, ebonPlaguebringer: 0, scourgeStrike: false, rageOfRivendare: 0, summonGargoyle: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DeathknightTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeathknightTalents): DeathknightTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 butchery */ 1:\n                    message.butchery = reader.int32();\n                    break;\n                case /* int32 subversion */ 2:\n                    message.subversion = reader.int32();\n                    break;\n                case /* int32 blade_barrier */ 3:\n                    message.bladeBarrier = reader.int32();\n                    break;\n                case /* int32 bladed_armor */ 4:\n                    message.bladedArmor = reader.int32();\n                    break;\n                case /* int32 scent_of_blood */ 5:\n                    message.scentOfBlood = reader.int32();\n                    break;\n                case /* int32 two_handed_weapon_specialization */ 6:\n                    message.twoHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* bool rune_tap */ 7:\n                    message.runeTap = reader.bool();\n                    break;\n                case /* int32 dark_conviction */ 8:\n                    message.darkConviction = reader.int32();\n                    break;\n                case /* int32 death_rune_mastery */ 9:\n                    message.deathRuneMastery = reader.int32();\n                    break;\n                case /* int32 improved_rune_tap */ 10:\n                    message.improvedRuneTap = reader.int32();\n                    break;\n                case /* int32 spell_deflection */ 11:\n                    message.spellDeflection = reader.int32();\n                    break;\n                case /* int32 vendetta */ 12:\n                    message.vendetta = reader.int32();\n                    break;\n                case /* int32 bloody_strikes */ 13:\n                    message.bloodyStrikes = reader.int32();\n                    break;\n                case /* int32 veteran_of_the_third_war */ 14:\n                    message.veteranOfTheThirdWar = reader.int32();\n                    break;\n                case /* bool mark_of_blood */ 15:\n                    message.markOfBlood = reader.bool();\n                    break;\n                case /* int32 bloody_vengeance */ 16:\n                    message.bloodyVengeance = reader.int32();\n                    break;\n                case /* int32 abominations_might */ 17:\n                    message.abominationsMight = reader.int32();\n                    break;\n                case /* int32 bloodworms */ 18:\n                    message.bloodworms = reader.int32();\n                    break;\n                case /* bool hysteria */ 19:\n                    message.hysteria = reader.bool();\n                    break;\n                case /* int32 improved_blood_presence */ 20:\n                    message.improvedBloodPresence = reader.int32();\n                    break;\n                case /* int32 improved_death_strike */ 21:\n                    message.improvedDeathStrike = reader.int32();\n                    break;\n                case /* int32 sudden_doom */ 22:\n                    message.suddenDoom = reader.int32();\n                    break;\n                case /* bool vampiric_blood */ 23:\n                    message.vampiricBlood = reader.bool();\n                    break;\n                case /* int32 will_of_the_necropolis */ 24:\n                    message.willOfTheNecropolis = reader.int32();\n                    break;\n                case /* bool heart_strike */ 25:\n                    message.heartStrike = reader.bool();\n                    break;\n                case /* int32 might_of_mograine */ 26:\n                    message.mightOfMograine = reader.int32();\n                    break;\n                case /* int32 blood_gorged */ 27:\n                    message.bloodGorged = reader.int32();\n                    break;\n                case /* bool dancing_rune_weapon */ 28:\n                    message.dancingRuneWeapon = reader.bool();\n                    break;\n                case /* int32 improved_icy_touch */ 29:\n                    message.improvedIcyTouch = reader.int32();\n                    break;\n                case /* int32 runic_power_mastery */ 30:\n                    message.runicPowerMastery = reader.int32();\n                    break;\n                case /* int32 toughness */ 31:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 icy_reach */ 32:\n                    message.icyReach = reader.int32();\n                    break;\n                case /* int32 black_ice */ 33:\n                    message.blackIce = reader.int32();\n                    break;\n                case /* int32 nerves_of_cold_steel */ 34:\n                    message.nervesOfColdSteel = reader.int32();\n                    break;\n                case /* int32 icy_talons */ 35:\n                    message.icyTalons = reader.int32();\n                    break;\n                case /* bool lichborne */ 36:\n                    message.lichborne = reader.bool();\n                    break;\n                case /* int32 annihilation */ 37:\n                    message.annihilation = reader.int32();\n                    break;\n                case /* int32 killing_machine */ 38:\n                    message.killingMachine = reader.int32();\n                    break;\n                case /* int32 chill_of_the_grave */ 39:\n                    message.chillOfTheGrave = reader.int32();\n                    break;\n                case /* int32 endless_winter */ 40:\n                    message.endlessWinter = reader.int32();\n                    break;\n                case /* int32 frigid_dreadplate */ 41:\n                    message.frigidDreadplate = reader.int32();\n                    break;\n                case /* int32 glacier_rot */ 42:\n                    message.glacierRot = reader.int32();\n                    break;\n                case /* bool deathchill */ 43:\n                    message.deathchill = reader.bool();\n                    break;\n                case /* bool improved_icy_talons */ 44:\n                    message.improvedIcyTalons = reader.bool();\n                    break;\n                case /* int32 merciless_combat */ 45:\n                    message.mercilessCombat = reader.int32();\n                    break;\n                case /* int32 rime */ 46:\n                    message.rime = reader.int32();\n                    break;\n                case /* int32 chilblains */ 47:\n                    message.chilblains = reader.int32();\n                    break;\n                case /* bool hungering_cold */ 48:\n                    message.hungeringCold = reader.bool();\n                    break;\n                case /* int32 improved_frost_presence */ 49:\n                    message.improvedFrostPresence = reader.int32();\n                    break;\n                case /* int32 threat_of_thassarian */ 50:\n                    message.threatOfThassarian = reader.int32();\n                    break;\n                case /* int32 blood_of_the_north */ 51:\n                    message.bloodOfTheNorth = reader.int32();\n                    break;\n                case /* bool unbreakable_armor */ 52:\n                    message.unbreakableArmor = reader.bool();\n                    break;\n                case /* int32 acclimation */ 53:\n                    message.acclimation = reader.int32();\n                    break;\n                case /* bool frost_strike */ 54:\n                    message.frostStrike = reader.bool();\n                    break;\n                case /* int32 guile_of_gorefiend */ 55:\n                    message.guileOfGorefiend = reader.int32();\n                    break;\n                case /* int32 tundra_stalker */ 56:\n                    message.tundraStalker = reader.int32();\n                    break;\n                case /* bool howling_blast */ 57:\n                    message.howlingBlast = reader.bool();\n                    break;\n                case /* int32 vicious_strikes */ 58:\n                    message.viciousStrikes = reader.int32();\n                    break;\n                case /* int32 virulence */ 59:\n                    message.virulence = reader.int32();\n                    break;\n                case /* int32 anticipation */ 60:\n                    message.anticipation = reader.int32();\n                    break;\n                case /* int32 epidemic */ 61:\n                    message.epidemic = reader.int32();\n                    break;\n                case /* int32 morbidity */ 62:\n                    message.morbidity = reader.int32();\n                    break;\n                case /* int32 unholy_command */ 63:\n                    message.unholyCommand = reader.int32();\n                    break;\n                case /* int32 ravenous_dead */ 64:\n                    message.ravenousDead = reader.int32();\n                    break;\n                case /* int32 outbreak */ 65:\n                    message.outbreak = reader.int32();\n                    break;\n                case /* int32 necrosis */ 66:\n                    message.necrosis = reader.int32();\n                    break;\n                case /* bool corpse_explosion */ 67:\n                    message.corpseExplosion = reader.bool();\n                    break;\n                case /* int32 on_a_pale_horse */ 68:\n                    message.onAPaleHorse = reader.int32();\n                    break;\n                case /* int32 blood_caked_blade */ 69:\n                    message.bloodCakedBlade = reader.int32();\n                    break;\n                case /* int32 night_of_the_dead */ 70:\n                    message.nightOfTheDead = reader.int32();\n                    break;\n                case /* bool unholy_blight */ 71:\n                    message.unholyBlight = reader.bool();\n                    break;\n                case /* int32 impurity */ 72:\n                    message.impurity = reader.int32();\n                    break;\n                case /* int32 dirge */ 73:\n                    message.dirge = reader.int32();\n                    break;\n                case /* int32 desecration */ 74:\n                    message.desecration = reader.int32();\n                    break;\n                case /* int32 magic_suppression */ 75:\n                    message.magicSuppression = reader.int32();\n                    break;\n                case /* int32 reaping */ 76:\n                    message.reaping = reader.int32();\n                    break;\n                case /* bool master_of_ghouls */ 77:\n                    message.masterOfGhouls = reader.bool();\n                    break;\n                case /* int32 desolation */ 78:\n                    message.desolation = reader.int32();\n                    break;\n                case /* bool anti_magic_zone */ 79:\n                    message.antiMagicZone = reader.bool();\n                    break;\n                case /* int32 improved_unholy_presence */ 80:\n                    message.improvedUnholyPresence = reader.int32();\n                    break;\n                case /* bool ghoul_frenzy */ 81:\n                    message.ghoulFrenzy = reader.bool();\n                    break;\n                case /* int32 crypt_fever */ 82:\n                    message.cryptFever = reader.int32();\n                    break;\n                case /* bool bone_shield */ 83:\n                    message.boneShield = reader.bool();\n                    break;\n                case /* int32 wandering_plague */ 84:\n                    message.wanderingPlague = reader.int32();\n                    break;\n                case /* int32 ebon_plaguebringer */ 85:\n                    message.ebonPlaguebringer = reader.int32();\n                    break;\n                case /* bool scourge_strike */ 86:\n                    message.scourgeStrike = reader.bool();\n                    break;\n                case /* int32 rage_of_rivendare */ 87:\n                    message.rageOfRivendare = reader.int32();\n                    break;\n                case /* bool summon_gargoyle */ 88:\n                    message.summonGargoyle = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DeathknightTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 butchery = 1; */\n        if (message.butchery !== 0)\n            writer.tag(1, WireType.Varint).int32(message.butchery);\n        /* int32 subversion = 2; */\n        if (message.subversion !== 0)\n            writer.tag(2, WireType.Varint).int32(message.subversion);\n        /* int32 blade_barrier = 3; */\n        if (message.bladeBarrier !== 0)\n            writer.tag(3, WireType.Varint).int32(message.bladeBarrier);\n        /* int32 bladed_armor = 4; */\n        if (message.bladedArmor !== 0)\n            writer.tag(4, WireType.Varint).int32(message.bladedArmor);\n        /* int32 scent_of_blood = 5; */\n        if (message.scentOfBlood !== 0)\n            writer.tag(5, WireType.Varint).int32(message.scentOfBlood);\n        /* int32 two_handed_weapon_specialization = 6; */\n        if (message.twoHandedWeaponSpecialization !== 0)\n            writer.tag(6, WireType.Varint).int32(message.twoHandedWeaponSpecialization);\n        /* bool rune_tap = 7; */\n        if (message.runeTap !== false)\n            writer.tag(7, WireType.Varint).bool(message.runeTap);\n        /* int32 dark_conviction = 8; */\n        if (message.darkConviction !== 0)\n            writer.tag(8, WireType.Varint).int32(message.darkConviction);\n        /* int32 death_rune_mastery = 9; */\n        if (message.deathRuneMastery !== 0)\n            writer.tag(9, WireType.Varint).int32(message.deathRuneMastery);\n        /* int32 improved_rune_tap = 10; */\n        if (message.improvedRuneTap !== 0)\n            writer.tag(10, WireType.Varint).int32(message.improvedRuneTap);\n        /* int32 spell_deflection = 11; */\n        if (message.spellDeflection !== 0)\n            writer.tag(11, WireType.Varint).int32(message.spellDeflection);\n        /* int32 vendetta = 12; */\n        if (message.vendetta !== 0)\n            writer.tag(12, WireType.Varint).int32(message.vendetta);\n        /* int32 bloody_strikes = 13; */\n        if (message.bloodyStrikes !== 0)\n            writer.tag(13, WireType.Varint).int32(message.bloodyStrikes);\n        /* int32 veteran_of_the_third_war = 14; */\n        if (message.veteranOfTheThirdWar !== 0)\n            writer.tag(14, WireType.Varint).int32(message.veteranOfTheThirdWar);\n        /* bool mark_of_blood = 15; */\n        if (message.markOfBlood !== false)\n            writer.tag(15, WireType.Varint).bool(message.markOfBlood);\n        /* int32 bloody_vengeance = 16; */\n        if (message.bloodyVengeance !== 0)\n            writer.tag(16, WireType.Varint).int32(message.bloodyVengeance);\n        /* int32 abominations_might = 17; */\n        if (message.abominationsMight !== 0)\n            writer.tag(17, WireType.Varint).int32(message.abominationsMight);\n        /* int32 bloodworms = 18; */\n        if (message.bloodworms !== 0)\n            writer.tag(18, WireType.Varint).int32(message.bloodworms);\n        /* bool hysteria = 19; */\n        if (message.hysteria !== false)\n            writer.tag(19, WireType.Varint).bool(message.hysteria);\n        /* int32 improved_blood_presence = 20; */\n        if (message.improvedBloodPresence !== 0)\n            writer.tag(20, WireType.Varint).int32(message.improvedBloodPresence);\n        /* int32 improved_death_strike = 21; */\n        if (message.improvedDeathStrike !== 0)\n            writer.tag(21, WireType.Varint).int32(message.improvedDeathStrike);\n        /* int32 sudden_doom = 22; */\n        if (message.suddenDoom !== 0)\n            writer.tag(22, WireType.Varint).int32(message.suddenDoom);\n        /* bool vampiric_blood = 23; */\n        if (message.vampiricBlood !== false)\n            writer.tag(23, WireType.Varint).bool(message.vampiricBlood);\n        /* int32 will_of_the_necropolis = 24; */\n        if (message.willOfTheNecropolis !== 0)\n            writer.tag(24, WireType.Varint).int32(message.willOfTheNecropolis);\n        /* bool heart_strike = 25; */\n        if (message.heartStrike !== false)\n            writer.tag(25, WireType.Varint).bool(message.heartStrike);\n        /* int32 might_of_mograine = 26; */\n        if (message.mightOfMograine !== 0)\n            writer.tag(26, WireType.Varint).int32(message.mightOfMograine);\n        /* int32 blood_gorged = 27; */\n        if (message.bloodGorged !== 0)\n            writer.tag(27, WireType.Varint).int32(message.bloodGorged);\n        /* bool dancing_rune_weapon = 28; */\n        if (message.dancingRuneWeapon !== false)\n            writer.tag(28, WireType.Varint).bool(message.dancingRuneWeapon);\n        /* int32 improved_icy_touch = 29; */\n        if (message.improvedIcyTouch !== 0)\n            writer.tag(29, WireType.Varint).int32(message.improvedIcyTouch);\n        /* int32 runic_power_mastery = 30; */\n        if (message.runicPowerMastery !== 0)\n            writer.tag(30, WireType.Varint).int32(message.runicPowerMastery);\n        /* int32 toughness = 31; */\n        if (message.toughness !== 0)\n            writer.tag(31, WireType.Varint).int32(message.toughness);\n        /* int32 icy_reach = 32; */\n        if (message.icyReach !== 0)\n            writer.tag(32, WireType.Varint).int32(message.icyReach);\n        /* int32 black_ice = 33; */\n        if (message.blackIce !== 0)\n            writer.tag(33, WireType.Varint).int32(message.blackIce);\n        /* int32 nerves_of_cold_steel = 34; */\n        if (message.nervesOfColdSteel !== 0)\n            writer.tag(34, WireType.Varint).int32(message.nervesOfColdSteel);\n        /* int32 icy_talons = 35; */\n        if (message.icyTalons !== 0)\n            writer.tag(35, WireType.Varint).int32(message.icyTalons);\n        /* bool lichborne = 36; */\n        if (message.lichborne !== false)\n            writer.tag(36, WireType.Varint).bool(message.lichborne);\n        /* int32 annihilation = 37; */\n        if (message.annihilation !== 0)\n            writer.tag(37, WireType.Varint).int32(message.annihilation);\n        /* int32 killing_machine = 38; */\n        if (message.killingMachine !== 0)\n            writer.tag(38, WireType.Varint).int32(message.killingMachine);\n        /* int32 chill_of_the_grave = 39; */\n        if (message.chillOfTheGrave !== 0)\n            writer.tag(39, WireType.Varint).int32(message.chillOfTheGrave);\n        /* int32 endless_winter = 40; */\n        if (message.endlessWinter !== 0)\n            writer.tag(40, WireType.Varint).int32(message.endlessWinter);\n        /* int32 frigid_dreadplate = 41; */\n        if (message.frigidDreadplate !== 0)\n            writer.tag(41, WireType.Varint).int32(message.frigidDreadplate);\n        /* int32 glacier_rot = 42; */\n        if (message.glacierRot !== 0)\n            writer.tag(42, WireType.Varint).int32(message.glacierRot);\n        /* bool deathchill = 43; */\n        if (message.deathchill !== false)\n            writer.tag(43, WireType.Varint).bool(message.deathchill);\n        /* bool improved_icy_talons = 44; */\n        if (message.improvedIcyTalons !== false)\n            writer.tag(44, WireType.Varint).bool(message.improvedIcyTalons);\n        /* int32 merciless_combat = 45; */\n        if (message.mercilessCombat !== 0)\n            writer.tag(45, WireType.Varint).int32(message.mercilessCombat);\n        /* int32 rime = 46; */\n        if (message.rime !== 0)\n            writer.tag(46, WireType.Varint).int32(message.rime);\n        /* int32 chilblains = 47; */\n        if (message.chilblains !== 0)\n            writer.tag(47, WireType.Varint).int32(message.chilblains);\n        /* bool hungering_cold = 48; */\n        if (message.hungeringCold !== false)\n            writer.tag(48, WireType.Varint).bool(message.hungeringCold);\n        /* int32 improved_frost_presence = 49; */\n        if (message.improvedFrostPresence !== 0)\n            writer.tag(49, WireType.Varint).int32(message.improvedFrostPresence);\n        /* int32 threat_of_thassarian = 50; */\n        if (message.threatOfThassarian !== 0)\n            writer.tag(50, WireType.Varint).int32(message.threatOfThassarian);\n        /* int32 blood_of_the_north = 51; */\n        if (message.bloodOfTheNorth !== 0)\n            writer.tag(51, WireType.Varint).int32(message.bloodOfTheNorth);\n        /* bool unbreakable_armor = 52; */\n        if (message.unbreakableArmor !== false)\n            writer.tag(52, WireType.Varint).bool(message.unbreakableArmor);\n        /* int32 acclimation = 53; */\n        if (message.acclimation !== 0)\n            writer.tag(53, WireType.Varint).int32(message.acclimation);\n        /* bool frost_strike = 54; */\n        if (message.frostStrike !== false)\n            writer.tag(54, WireType.Varint).bool(message.frostStrike);\n        /* int32 guile_of_gorefiend = 55; */\n        if (message.guileOfGorefiend !== 0)\n            writer.tag(55, WireType.Varint).int32(message.guileOfGorefiend);\n        /* int32 tundra_stalker = 56; */\n        if (message.tundraStalker !== 0)\n            writer.tag(56, WireType.Varint).int32(message.tundraStalker);\n        /* bool howling_blast = 57; */\n        if (message.howlingBlast !== false)\n            writer.tag(57, WireType.Varint).bool(message.howlingBlast);\n        /* int32 vicious_strikes = 58; */\n        if (message.viciousStrikes !== 0)\n            writer.tag(58, WireType.Varint).int32(message.viciousStrikes);\n        /* int32 virulence = 59; */\n        if (message.virulence !== 0)\n            writer.tag(59, WireType.Varint).int32(message.virulence);\n        /* int32 anticipation = 60; */\n        if (message.anticipation !== 0)\n            writer.tag(60, WireType.Varint).int32(message.anticipation);\n        /* int32 epidemic = 61; */\n        if (message.epidemic !== 0)\n            writer.tag(61, WireType.Varint).int32(message.epidemic);\n        /* int32 morbidity = 62; */\n        if (message.morbidity !== 0)\n            writer.tag(62, WireType.Varint).int32(message.morbidity);\n        /* int32 unholy_command = 63; */\n        if (message.unholyCommand !== 0)\n            writer.tag(63, WireType.Varint).int32(message.unholyCommand);\n        /* int32 ravenous_dead = 64; */\n        if (message.ravenousDead !== 0)\n            writer.tag(64, WireType.Varint).int32(message.ravenousDead);\n        /* int32 outbreak = 65; */\n        if (message.outbreak !== 0)\n            writer.tag(65, WireType.Varint).int32(message.outbreak);\n        /* int32 necrosis = 66; */\n        if (message.necrosis !== 0)\n            writer.tag(66, WireType.Varint).int32(message.necrosis);\n        /* bool corpse_explosion = 67; */\n        if (message.corpseExplosion !== false)\n            writer.tag(67, WireType.Varint).bool(message.corpseExplosion);\n        /* int32 on_a_pale_horse = 68; */\n        if (message.onAPaleHorse !== 0)\n            writer.tag(68, WireType.Varint).int32(message.onAPaleHorse);\n        /* int32 blood_caked_blade = 69; */\n        if (message.bloodCakedBlade !== 0)\n            writer.tag(69, WireType.Varint).int32(message.bloodCakedBlade);\n        /* int32 night_of_the_dead = 70; */\n        if (message.nightOfTheDead !== 0)\n            writer.tag(70, WireType.Varint).int32(message.nightOfTheDead);\n        /* bool unholy_blight = 71; */\n        if (message.unholyBlight !== false)\n            writer.tag(71, WireType.Varint).bool(message.unholyBlight);\n        /* int32 impurity = 72; */\n        if (message.impurity !== 0)\n            writer.tag(72, WireType.Varint).int32(message.impurity);\n        /* int32 dirge = 73; */\n        if (message.dirge !== 0)\n            writer.tag(73, WireType.Varint).int32(message.dirge);\n        /* int32 desecration = 74; */\n        if (message.desecration !== 0)\n            writer.tag(74, WireType.Varint).int32(message.desecration);\n        /* int32 magic_suppression = 75; */\n        if (message.magicSuppression !== 0)\n            writer.tag(75, WireType.Varint).int32(message.magicSuppression);\n        /* int32 reaping = 76; */\n        if (message.reaping !== 0)\n            writer.tag(76, WireType.Varint).int32(message.reaping);\n        /* bool master_of_ghouls = 77; */\n        if (message.masterOfGhouls !== false)\n            writer.tag(77, WireType.Varint).bool(message.masterOfGhouls);\n        /* int32 desolation = 78; */\n        if (message.desolation !== 0)\n            writer.tag(78, WireType.Varint).int32(message.desolation);\n        /* bool anti_magic_zone = 79; */\n        if (message.antiMagicZone !== false)\n            writer.tag(79, WireType.Varint).bool(message.antiMagicZone);\n        /* int32 improved_unholy_presence = 80; */\n        if (message.improvedUnholyPresence !== 0)\n            writer.tag(80, WireType.Varint).int32(message.improvedUnholyPresence);\n        /* bool ghoul_frenzy = 81; */\n        if (message.ghoulFrenzy !== false)\n            writer.tag(81, WireType.Varint).bool(message.ghoulFrenzy);\n        /* int32 crypt_fever = 82; */\n        if (message.cryptFever !== 0)\n            writer.tag(82, WireType.Varint).int32(message.cryptFever);\n        /* bool bone_shield = 83; */\n        if (message.boneShield !== false)\n            writer.tag(83, WireType.Varint).bool(message.boneShield);\n        /* int32 wandering_plague = 84; */\n        if (message.wanderingPlague !== 0)\n            writer.tag(84, WireType.Varint).int32(message.wanderingPlague);\n        /* int32 ebon_plaguebringer = 85; */\n        if (message.ebonPlaguebringer !== 0)\n            writer.tag(85, WireType.Varint).int32(message.ebonPlaguebringer);\n        /* bool scourge_strike = 86; */\n        if (message.scourgeStrike !== false)\n            writer.tag(86, WireType.Varint).bool(message.scourgeStrike);\n        /* int32 rage_of_rivendare = 87; */\n        if (message.rageOfRivendare !== 0)\n            writer.tag(87, WireType.Varint).int32(message.rageOfRivendare);\n        /* bool summon_gargoyle = 88; */\n        if (message.summonGargoyle !== false)\n            writer.tag(88, WireType.Varint).bool(message.summonGargoyle);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DeathknightTalents\n */\nexport const DeathknightTalents = new DeathknightTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Deathknight$Type extends MessageType<Deathknight> {\n    constructor() {\n        super(\"proto.Deathknight\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Deathknight_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => DeathknightTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Deathknight_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Deathknight>): Deathknight {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Deathknight>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Deathknight): Deathknight {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Deathknight.Rotation rotation */ 1:\n                    message.rotation = Deathknight_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.DeathknightTalents talents */ 2:\n                    message.talents = DeathknightTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.Deathknight.Options options */ 3:\n                    message.options = Deathknight_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Deathknight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Deathknight.Rotation rotation = 1; */\n        if (message.rotation)\n            Deathknight_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DeathknightTalents talents = 2; */\n        if (message.talents)\n            DeathknightTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Deathknight.Options options = 3; */\n        if (message.options)\n            Deathknight_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Deathknight\n */\nexport const Deathknight = new Deathknight$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Deathknight_Rotation$Type extends MessageType<Deathknight_Rotation> {\n    constructor() {\n        super(\"proto.Deathknight.Rotation\", [\n            { no: 19, name: \"frost_rotation_type\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.FrostRotationType\", Deathknight_Rotation_FrostRotationType] },\n            { no: 20, name: \"frost_custom_rotation\", kind: \"message\", T: () => CustomRotation },\n            { no: 1, name: \"army_of_the_dead\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.ArmyOfTheDead\", Deathknight_Rotation_ArmyOfTheDead] },\n            { no: 2, name: \"use_death_and_decay\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"bt_ghoul_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"disease_refresh_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"refresh_horn_of_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"first_disease\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.FirstDisease\", Deathknight_Rotation_FirstDisease] },\n            { no: 7, name: \"death_and_decay_prio\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.DeathAndDecayPrio\", Deathknight_Rotation_DeathAndDecayPrio] },\n            { no: 8, name: \"use_empower_rune_weapon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"blood_rune_filler\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.BloodRuneFiller\", Deathknight_Rotation_BloodRuneFiller] },\n            { no: 10, name: \"starting_presence\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.Presence\", Deathknight_Rotation_Presence] },\n            { no: 11, name: \"blood_tap\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.BloodTap\", Deathknight_Rotation_BloodTap] },\n            { no: 12, name: \"oblit_delay_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"use_ams\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"avg_ams_success_rate\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 15, name: \"avg_ams_hit\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 16, name: \"auto_rotation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"desync_rotation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"bl_presence\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.Presence\", Deathknight_Rotation_Presence] },\n            { no: 21, name: \"presence\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.Presence\", Deathknight_Rotation_Presence] },\n            { no: 22, name: \"hold_erw_army\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"use_gargoyle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Deathknight_Rotation>): Deathknight_Rotation {\n        const message = { frostRotationType: 0, armyOfTheDead: 0, useDeathAndDecay: false, btGhoulFrenzy: false, diseaseRefreshDuration: 0, refreshHornOfWinter: false, firstDisease: 0, deathAndDecayPrio: 0, useEmpowerRuneWeapon: false, bloodRuneFiller: 0, startingPresence: 0, bloodTap: 0, oblitDelayDuration: 0, useAms: false, avgAmsSuccessRate: 0, avgAmsHit: 0, autoRotation: false, desyncRotation: false, blPresence: 0, presence: 0, holdErwArmy: false, useGargoyle: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Deathknight_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Deathknight_Rotation): Deathknight_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Deathknight.Rotation.FrostRotationType frost_rotation_type */ 19:\n                    message.frostRotationType = reader.int32();\n                    break;\n                case /* proto.CustomRotation frost_custom_rotation */ 20:\n                    message.frostCustomRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.frostCustomRotation);\n                    break;\n                case /* proto.Deathknight.Rotation.ArmyOfTheDead army_of_the_dead */ 1:\n                    message.armyOfTheDead = reader.int32();\n                    break;\n                case /* bool use_death_and_decay */ 2:\n                    message.useDeathAndDecay = reader.bool();\n                    break;\n                case /* bool bt_ghoul_frenzy */ 3:\n                    message.btGhoulFrenzy = reader.bool();\n                    break;\n                case /* double disease_refresh_duration */ 4:\n                    message.diseaseRefreshDuration = reader.double();\n                    break;\n                case /* bool refresh_horn_of_winter */ 5:\n                    message.refreshHornOfWinter = reader.bool();\n                    break;\n                case /* proto.Deathknight.Rotation.FirstDisease first_disease */ 6:\n                    message.firstDisease = reader.int32();\n                    break;\n                case /* proto.Deathknight.Rotation.DeathAndDecayPrio death_and_decay_prio */ 7:\n                    message.deathAndDecayPrio = reader.int32();\n                    break;\n                case /* bool use_empower_rune_weapon */ 8:\n                    message.useEmpowerRuneWeapon = reader.bool();\n                    break;\n                case /* proto.Deathknight.Rotation.BloodRuneFiller blood_rune_filler */ 9:\n                    message.bloodRuneFiller = reader.int32();\n                    break;\n                case /* proto.Deathknight.Rotation.Presence starting_presence */ 10:\n                    message.startingPresence = reader.int32();\n                    break;\n                case /* proto.Deathknight.Rotation.BloodTap blood_tap */ 11:\n                    message.bloodTap = reader.int32();\n                    break;\n                case /* double oblit_delay_duration */ 12:\n                    message.oblitDelayDuration = reader.double();\n                    break;\n                case /* bool use_ams */ 13:\n                    message.useAms = reader.bool();\n                    break;\n                case /* double avg_ams_success_rate */ 14:\n                    message.avgAmsSuccessRate = reader.double();\n                    break;\n                case /* double avg_ams_hit */ 15:\n                    message.avgAmsHit = reader.double();\n                    break;\n                case /* bool auto_rotation */ 16:\n                    message.autoRotation = reader.bool();\n                    break;\n                case /* bool desync_rotation */ 17:\n                    message.desyncRotation = reader.bool();\n                    break;\n                case /* proto.Deathknight.Rotation.Presence bl_presence */ 18:\n                    message.blPresence = reader.int32();\n                    break;\n                case /* proto.Deathknight.Rotation.Presence presence */ 21:\n                    message.presence = reader.int32();\n                    break;\n                case /* bool hold_erw_army */ 22:\n                    message.holdErwArmy = reader.bool();\n                    break;\n                case /* bool use_gargoyle */ 23:\n                    message.useGargoyle = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Deathknight_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Deathknight.Rotation.FrostRotationType frost_rotation_type = 19; */\n        if (message.frostRotationType !== 0)\n            writer.tag(19, WireType.Varint).int32(message.frostRotationType);\n        /* proto.CustomRotation frost_custom_rotation = 20; */\n        if (message.frostCustomRotation)\n            CustomRotation.internalBinaryWrite(message.frostCustomRotation, writer.tag(20, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Deathknight.Rotation.ArmyOfTheDead army_of_the_dead = 1; */\n        if (message.armyOfTheDead !== 0)\n            writer.tag(1, WireType.Varint).int32(message.armyOfTheDead);\n        /* bool use_death_and_decay = 2; */\n        if (message.useDeathAndDecay !== false)\n            writer.tag(2, WireType.Varint).bool(message.useDeathAndDecay);\n        /* bool bt_ghoul_frenzy = 3; */\n        if (message.btGhoulFrenzy !== false)\n            writer.tag(3, WireType.Varint).bool(message.btGhoulFrenzy);\n        /* double disease_refresh_duration = 4; */\n        if (message.diseaseRefreshDuration !== 0)\n            writer.tag(4, WireType.Bit64).double(message.diseaseRefreshDuration);\n        /* bool refresh_horn_of_winter = 5; */\n        if (message.refreshHornOfWinter !== false)\n            writer.tag(5, WireType.Varint).bool(message.refreshHornOfWinter);\n        /* proto.Deathknight.Rotation.FirstDisease first_disease = 6; */\n        if (message.firstDisease !== 0)\n            writer.tag(6, WireType.Varint).int32(message.firstDisease);\n        /* proto.Deathknight.Rotation.DeathAndDecayPrio death_and_decay_prio = 7; */\n        if (message.deathAndDecayPrio !== 0)\n            writer.tag(7, WireType.Varint).int32(message.deathAndDecayPrio);\n        /* bool use_empower_rune_weapon = 8; */\n        if (message.useEmpowerRuneWeapon !== false)\n            writer.tag(8, WireType.Varint).bool(message.useEmpowerRuneWeapon);\n        /* proto.Deathknight.Rotation.BloodRuneFiller blood_rune_filler = 9; */\n        if (message.bloodRuneFiller !== 0)\n            writer.tag(9, WireType.Varint).int32(message.bloodRuneFiller);\n        /* proto.Deathknight.Rotation.Presence starting_presence = 10; */\n        if (message.startingPresence !== 0)\n            writer.tag(10, WireType.Varint).int32(message.startingPresence);\n        /* proto.Deathknight.Rotation.BloodTap blood_tap = 11; */\n        if (message.bloodTap !== 0)\n            writer.tag(11, WireType.Varint).int32(message.bloodTap);\n        /* double oblit_delay_duration = 12; */\n        if (message.oblitDelayDuration !== 0)\n            writer.tag(12, WireType.Bit64).double(message.oblitDelayDuration);\n        /* bool use_ams = 13; */\n        if (message.useAms !== false)\n            writer.tag(13, WireType.Varint).bool(message.useAms);\n        /* double avg_ams_success_rate = 14; */\n        if (message.avgAmsSuccessRate !== 0)\n            writer.tag(14, WireType.Bit64).double(message.avgAmsSuccessRate);\n        /* double avg_ams_hit = 15; */\n        if (message.avgAmsHit !== 0)\n            writer.tag(15, WireType.Bit64).double(message.avgAmsHit);\n        /* bool auto_rotation = 16; */\n        if (message.autoRotation !== false)\n            writer.tag(16, WireType.Varint).bool(message.autoRotation);\n        /* bool desync_rotation = 17; */\n        if (message.desyncRotation !== false)\n            writer.tag(17, WireType.Varint).bool(message.desyncRotation);\n        /* proto.Deathknight.Rotation.Presence bl_presence = 18; */\n        if (message.blPresence !== 0)\n            writer.tag(18, WireType.Varint).int32(message.blPresence);\n        /* proto.Deathknight.Rotation.Presence presence = 21; */\n        if (message.presence !== 0)\n            writer.tag(21, WireType.Varint).int32(message.presence);\n        /* bool hold_erw_army = 22; */\n        if (message.holdErwArmy !== false)\n            writer.tag(22, WireType.Varint).bool(message.holdErwArmy);\n        /* bool use_gargoyle = 23; */\n        if (message.useGargoyle !== false)\n            writer.tag(23, WireType.Varint).bool(message.useGargoyle);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Deathknight.Rotation\n */\nexport const Deathknight_Rotation = new Deathknight_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Deathknight_Options$Type extends MessageType<Deathknight_Options> {\n    constructor() {\n        super(\"proto.Deathknight.Options\", [\n            { no: 1, name: \"starting_runic_power\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"pet_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"precast_ghoul_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"precast_horn_of_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"unholy_frenzy_target\", kind: \"message\", T: () => RaidTarget }\n        ]);\n    }\n    create(value?: PartialMessage<Deathknight_Options>): Deathknight_Options {\n        const message = { startingRunicPower: 0, petUptime: 0, precastGhoulFrenzy: false, precastHornOfWinter: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Deathknight_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Deathknight_Options): Deathknight_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_runic_power */ 1:\n                    message.startingRunicPower = reader.double();\n                    break;\n                case /* double pet_uptime */ 2:\n                    message.petUptime = reader.double();\n                    break;\n                case /* bool precast_ghoul_frenzy */ 3:\n                    message.precastGhoulFrenzy = reader.bool();\n                    break;\n                case /* bool precast_horn_of_winter */ 4:\n                    message.precastHornOfWinter = reader.bool();\n                    break;\n                case /* proto.RaidTarget unholy_frenzy_target */ 5:\n                    message.unholyFrenzyTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.unholyFrenzyTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Deathknight_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_runic_power = 1; */\n        if (message.startingRunicPower !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRunicPower);\n        /* double pet_uptime = 2; */\n        if (message.petUptime !== 0)\n            writer.tag(2, WireType.Bit64).double(message.petUptime);\n        /* bool precast_ghoul_frenzy = 3; */\n        if (message.precastGhoulFrenzy !== false)\n            writer.tag(3, WireType.Varint).bool(message.precastGhoulFrenzy);\n        /* bool precast_horn_of_winter = 4; */\n        if (message.precastHornOfWinter !== false)\n            writer.tag(4, WireType.Varint).bool(message.precastHornOfWinter);\n        /* proto.RaidTarget unholy_frenzy_target = 5; */\n        if (message.unholyFrenzyTarget)\n            RaidTarget.internalBinaryWrite(message.unholyFrenzyTarget, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Deathknight.Options\n */\nexport const Deathknight_Options = new Deathknight_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TankDeathknight$Type extends MessageType<TankDeathknight> {\n    constructor() {\n        super(\"proto.TankDeathknight\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => TankDeathknight_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => DeathknightTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => TankDeathknight_Options }\n        ]);\n    }\n    create(value?: PartialMessage<TankDeathknight>): TankDeathknight {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TankDeathknight>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TankDeathknight): TankDeathknight {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.TankDeathknight.Rotation rotation */ 1:\n                    message.rotation = TankDeathknight_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.DeathknightTalents talents */ 2:\n                    message.talents = DeathknightTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.TankDeathknight.Options options */ 3:\n                    message.options = TankDeathknight_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TankDeathknight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.TankDeathknight.Rotation rotation = 1; */\n        if (message.rotation)\n            TankDeathknight_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DeathknightTalents talents = 2; */\n        if (message.talents)\n            DeathknightTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.TankDeathknight.Options options = 3; */\n        if (message.options)\n            TankDeathknight_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TankDeathknight\n */\nexport const TankDeathknight = new TankDeathknight$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TankDeathknight_Rotation$Type extends MessageType<TankDeathknight_Rotation> {\n    constructor() {\n        super(\"proto.TankDeathknight.Rotation\", [\n            { no: 4, name: \"presence\", kind: \"enum\", T: () => [\"proto.TankDeathknight.Rotation.Presence\", TankDeathknight_Rotation_Presence] },\n            { no: 1, name: \"opener\", kind: \"enum\", T: () => [\"proto.TankDeathknight.Rotation.Opener\", TankDeathknight_Rotation_Opener] },\n            { no: 2, name: \"optimization_setting\", kind: \"enum\", T: () => [\"proto.TankDeathknight.Rotation.OptimizationSetting\", TankDeathknight_Rotation_OptimizationSetting] },\n            { no: 3, name: \"blood_spell\", kind: \"enum\", T: () => [\"proto.TankDeathknight.Rotation.BloodSpell\", TankDeathknight_Rotation_BloodSpell] }\n        ]);\n    }\n    create(value?: PartialMessage<TankDeathknight_Rotation>): TankDeathknight_Rotation {\n        const message = { presence: 0, opener: 0, optimizationSetting: 0, bloodSpell: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TankDeathknight_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TankDeathknight_Rotation): TankDeathknight_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.TankDeathknight.Rotation.Presence presence */ 4:\n                    message.presence = reader.int32();\n                    break;\n                case /* proto.TankDeathknight.Rotation.Opener opener */ 1:\n                    message.opener = reader.int32();\n                    break;\n                case /* proto.TankDeathknight.Rotation.OptimizationSetting optimization_setting */ 2:\n                    message.optimizationSetting = reader.int32();\n                    break;\n                case /* proto.TankDeathknight.Rotation.BloodSpell blood_spell */ 3:\n                    message.bloodSpell = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TankDeathknight_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.TankDeathknight.Rotation.Presence presence = 4; */\n        if (message.presence !== 0)\n            writer.tag(4, WireType.Varint).int32(message.presence);\n        /* proto.TankDeathknight.Rotation.Opener opener = 1; */\n        if (message.opener !== 0)\n            writer.tag(1, WireType.Varint).int32(message.opener);\n        /* proto.TankDeathknight.Rotation.OptimizationSetting optimization_setting = 2; */\n        if (message.optimizationSetting !== 0)\n            writer.tag(2, WireType.Varint).int32(message.optimizationSetting);\n        /* proto.TankDeathknight.Rotation.BloodSpell blood_spell = 3; */\n        if (message.bloodSpell !== 0)\n            writer.tag(3, WireType.Varint).int32(message.bloodSpell);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TankDeathknight.Rotation\n */\nexport const TankDeathknight_Rotation = new TankDeathknight_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TankDeathknight_Options$Type extends MessageType<TankDeathknight_Options> {\n    constructor() {\n        super(\"proto.TankDeathknight.Options\", [\n            { no: 1, name: \"starting_runic_power\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"unholy_frenzy_target\", kind: \"message\", T: () => RaidTarget }\n        ]);\n    }\n    create(value?: PartialMessage<TankDeathknight_Options>): TankDeathknight_Options {\n        const message = { startingRunicPower: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TankDeathknight_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TankDeathknight_Options): TankDeathknight_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_runic_power */ 1:\n                    message.startingRunicPower = reader.double();\n                    break;\n                case /* proto.RaidTarget unholy_frenzy_target */ 2:\n                    message.unholyFrenzyTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.unholyFrenzyTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TankDeathknight_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_runic_power = 1; */\n        if (message.startingRunicPower !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRunicPower);\n        /* proto.RaidTarget unholy_frenzy_target = 2; */\n        if (message.unholyFrenzyTarget)\n            RaidTarget.internalBinaryWrite(message.unholyFrenzyTarget, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TankDeathknight.Options\n */\nexport const TankDeathknight_Options = new TankDeathknight_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"warrior.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { CustomRotation } from \"./common\";\n/**\n * @generated from protobuf message proto.WarriorTalents\n */\nexport interface WarriorTalents {\n    /**\n     * Arms\n     *\n     * @generated from protobuf field: int32 improved_heroic_strike = 1;\n     */\n    improvedHeroicStrike: number;\n    /**\n     * @generated from protobuf field: int32 deflection = 2;\n     */\n    deflection: number;\n    /**\n     * @generated from protobuf field: int32 improved_rend = 3;\n     */\n    improvedRend: number;\n    /**\n     * @generated from protobuf field: int32 improved_charge = 4;\n     */\n    improvedCharge: number;\n    /**\n     * @generated from protobuf field: int32 iron_will = 5;\n     */\n    ironWill: number;\n    /**\n     * @generated from protobuf field: int32 tactical_mastery = 6;\n     */\n    tacticalMastery: number;\n    /**\n     * @generated from protobuf field: int32 improved_overpower = 7;\n     */\n    improvedOverpower: number;\n    /**\n     * @generated from protobuf field: bool anger_management = 8;\n     */\n    angerManagement: boolean;\n    /**\n     * @generated from protobuf field: int32 impale = 9;\n     */\n    impale: number;\n    /**\n     * @generated from protobuf field: int32 deep_wounds = 10;\n     */\n    deepWounds: number;\n    /**\n     * @generated from protobuf field: int32 two_handed_weapon_specialization = 11;\n     */\n    twoHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 taste_for_blood = 12;\n     */\n    tasteForBlood: number;\n    /**\n     * @generated from protobuf field: int32 poleaxe_specialization = 13;\n     */\n    poleaxeSpecialization: number;\n    /**\n     * @generated from protobuf field: bool sweeping_strikes = 14;\n     */\n    sweepingStrikes: boolean;\n    /**\n     * @generated from protobuf field: int32 mace_specialization = 15;\n     */\n    maceSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 sword_specialization = 16;\n     */\n    swordSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 weapon_mastery = 17;\n     */\n    weaponMastery: number;\n    /**\n     * @generated from protobuf field: int32 improved_hamstring = 18;\n     */\n    improvedHamstring: number;\n    /**\n     * @generated from protobuf field: int32 trauma = 19;\n     */\n    trauma: number;\n    /**\n     * @generated from protobuf field: int32 second_wind = 20;\n     */\n    secondWind: number;\n    /**\n     * @generated from protobuf field: bool mortal_strike = 21;\n     */\n    mortalStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 strength_of_arms = 22;\n     */\n    strengthOfArms: number;\n    /**\n     * @generated from protobuf field: int32 improved_slam = 23;\n     */\n    improvedSlam: number;\n    /**\n     * @generated from protobuf field: bool juggernaut = 24;\n     */\n    juggernaut: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_mortal_strike = 25;\n     */\n    improvedMortalStrike: number;\n    /**\n     * @generated from protobuf field: int32 unrelenting_assault = 26;\n     */\n    unrelentingAssault: number;\n    /**\n     * @generated from protobuf field: int32 sudden_death = 27;\n     */\n    suddenDeath: number;\n    /**\n     * @generated from protobuf field: bool endless_rage = 28;\n     */\n    endlessRage: boolean;\n    /**\n     * @generated from protobuf field: int32 blood_frenzy = 29;\n     */\n    bloodFrenzy: number;\n    /**\n     * @generated from protobuf field: int32 wrecking_crew = 30;\n     */\n    wreckingCrew: number;\n    /**\n     * @generated from protobuf field: bool bladestorm = 31;\n     */\n    bladestorm: boolean;\n    /**\n     * Fury\n     *\n     * @generated from protobuf field: int32 armored_to_the_teeth = 32;\n     */\n    armoredToTheTeeth: number;\n    /**\n     * @generated from protobuf field: int32 booming_voice = 33;\n     */\n    boomingVoice: number;\n    /**\n     * @generated from protobuf field: int32 cruelty = 34;\n     */\n    cruelty: number;\n    /**\n     * @generated from protobuf field: int32 improved_demoralizing_shout = 35;\n     */\n    improvedDemoralizingShout: number;\n    /**\n     * @generated from protobuf field: int32 unbridled_wrath = 36;\n     */\n    unbridledWrath: number;\n    /**\n     * @generated from protobuf field: int32 improved_cleave = 37;\n     */\n    improvedCleave: number;\n    /**\n     * @generated from protobuf field: bool piercing_howl = 38;\n     */\n    piercingHowl: boolean;\n    /**\n     * @generated from protobuf field: int32 blood_craze = 39;\n     */\n    bloodCraze: number;\n    /**\n     * @generated from protobuf field: int32 commanding_presence = 40;\n     */\n    commandingPresence: number;\n    /**\n     * @generated from protobuf field: int32 dual_wield_specialization = 41;\n     */\n    dualWieldSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 improved_execute = 42;\n     */\n    improvedExecute: number;\n    /**\n     * @generated from protobuf field: int32 enrage = 43;\n     */\n    enrage: number;\n    /**\n     * @generated from protobuf field: int32 precision = 44;\n     */\n    precision: number;\n    /**\n     * @generated from protobuf field: bool death_wish = 45;\n     */\n    deathWish: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_intercept = 46;\n     */\n    improvedIntercept: number;\n    /**\n     * @generated from protobuf field: int32 improved_berserker_rage = 47;\n     */\n    improvedBerserkerRage: number;\n    /**\n     * @generated from protobuf field: int32 flurry = 48;\n     */\n    flurry: number;\n    /**\n     * @generated from protobuf field: int32 intensify_rage = 49;\n     */\n    intensifyRage: number;\n    /**\n     * @generated from protobuf field: bool bloodthirst = 50;\n     */\n    bloodthirst: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_whirlwind = 51;\n     */\n    improvedWhirlwind: number;\n    /**\n     * @generated from protobuf field: int32 furious_attacks = 52;\n     */\n    furiousAttacks: number;\n    /**\n     * @generated from protobuf field: int32 improved_berserker_stance = 53;\n     */\n    improvedBerserkerStance: number;\n    /**\n     * @generated from protobuf field: bool heroic_fury = 54;\n     */\n    heroicFury: boolean;\n    /**\n     * @generated from protobuf field: bool rampage = 55;\n     */\n    rampage: boolean;\n    /**\n     * @generated from protobuf field: int32 bloodsurge = 56;\n     */\n    bloodsurge: number;\n    /**\n     * @generated from protobuf field: int32 unending_fury = 57;\n     */\n    unendingFury: number;\n    /**\n     * @generated from protobuf field: bool titans_grip = 58;\n     */\n    titansGrip: boolean;\n    /**\n     * Protection\n     *\n     * @generated from protobuf field: int32 improved_bloodrage = 59;\n     */\n    improvedBloodrage: number;\n    /**\n     * @generated from protobuf field: int32 shield_specialization = 60;\n     */\n    shieldSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 improved_thunder_clap = 61;\n     */\n    improvedThunderClap: number;\n    /**\n     * @generated from protobuf field: int32 incite = 62;\n     */\n    incite: number;\n    /**\n     * @generated from protobuf field: int32 anticipation = 63;\n     */\n    anticipation: number;\n    /**\n     * @generated from protobuf field: bool last_stand = 64;\n     */\n    lastStand: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_revenge = 65;\n     */\n    improvedRevenge: number;\n    /**\n     * @generated from protobuf field: int32 shield_mastery = 66;\n     */\n    shieldMastery: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 67;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 improved_spell_reflection = 68;\n     */\n    improvedSpellReflection: number;\n    /**\n     * @generated from protobuf field: int32 improved_disarm = 69;\n     */\n    improvedDisarm: number;\n    /**\n     * @generated from protobuf field: int32 puncture = 70;\n     */\n    puncture: number;\n    /**\n     * @generated from protobuf field: int32 improved_disciplines = 71;\n     */\n    improvedDisciplines: number;\n    /**\n     * @generated from protobuf field: bool concussion_blow = 72;\n     */\n    concussionBlow: boolean;\n    /**\n     * @generated from protobuf field: int32 gag_order = 73;\n     */\n    gagOrder: number;\n    /**\n     * @generated from protobuf field: int32 one_handed_weapon_specialization = 74;\n     */\n    oneHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 improved_defensive_stance = 75;\n     */\n    improvedDefensiveStance: number;\n    /**\n     * @generated from protobuf field: bool vigilance = 76;\n     */\n    vigilance: boolean;\n    /**\n     * @generated from protobuf field: int32 focused_rage = 77;\n     */\n    focusedRage: number;\n    /**\n     * @generated from protobuf field: int32 vitality = 78;\n     */\n    vitality: number;\n    /**\n     * @generated from protobuf field: int32 safeguard = 79;\n     */\n    safeguard: number;\n    /**\n     * @generated from protobuf field: bool warbringer = 80;\n     */\n    warbringer: boolean;\n    /**\n     * @generated from protobuf field: bool devastate = 81;\n     */\n    devastate: boolean;\n    /**\n     * @generated from protobuf field: int32 critical_block = 82;\n     */\n    criticalBlock: number;\n    /**\n     * @generated from protobuf field: int32 sword_and_board = 83;\n     */\n    swordAndBoard: number;\n    /**\n     * @generated from protobuf field: int32 damage_shield = 84;\n     */\n    damageShield: number;\n    /**\n     * @generated from protobuf field: bool shockwave = 85;\n     */\n    shockwave: boolean;\n}\n/**\n * @generated from protobuf message proto.Warrior\n */\nexport interface Warrior {\n    /**\n     * @generated from protobuf field: proto.Warrior.Rotation rotation = 1;\n     */\n    rotation?: Warrior_Rotation;\n    /**\n     * @generated from protobuf field: proto.WarriorTalents talents = 2;\n     */\n    talents?: WarriorTalents;\n    /**\n     * @generated from protobuf field: proto.Warrior.Options options = 3;\n     */\n    options?: Warrior_Options;\n}\n/**\n * @generated from protobuf message proto.Warrior.Rotation\n */\nexport interface Warrior_Rotation {\n    /**\n     * @generated from protobuf field: bool use_cleave = 1;\n     */\n    useCleave: boolean;\n    /**\n     * @generated from protobuf field: bool use_rend = 2;\n     */\n    useRend: boolean;\n    /**\n     * @generated from protobuf field: bool use_ms = 18;\n     */\n    useMs: boolean;\n    /**\n     * @generated from protobuf field: bool use_slam = 3;\n     */\n    useSlam: boolean;\n    /**\n     * @generated from protobuf field: bool prioritize_ww = 4;\n     */\n    prioritizeWw: boolean;\n    /**\n     * @generated from protobuf field: proto.Warrior.Rotation.SunderArmor sunderArmor = 5;\n     */\n    sunderArmor: Warrior_Rotation_SunderArmor;\n    /**\n     * @generated from protobuf field: bool maintain_demo_shout = 6;\n     */\n    maintainDemoShout: boolean;\n    /**\n     * @generated from protobuf field: bool maintain_thunder_clap = 7;\n     */\n    maintainThunderClap: boolean;\n    /**\n     * Queue HS or Cleave when over this threshold.\n     *\n     * @generated from protobuf field: double hs_rage_threshold = 8;\n     */\n    hsRageThreshold: number;\n    /**\n     * Use Mortal Strike when over this threshold.\n     *\n     * @generated from protobuf field: double ms_rage_threshold = 9;\n     */\n    msRageThreshold: number;\n    /**\n     * Use Rend when below this threshold.\n     *\n     * @generated from protobuf field: double rend_rage_threshold_below = 10;\n     */\n    rendRageThresholdBelow: number;\n    /**\n     * Use Slam when over this threshold.\n     *\n     * @generated from protobuf field: double slam_rage_threshold = 11;\n     */\n    slamRageThreshold: number;\n    /**\n     * Refresh Rend when remaining duration is less than this threshold.\n     *\n     * @generated from protobuf field: double rend_cd_threshold = 12;\n     */\n    rendCdThreshold: number;\n    /**\n     * @generated from protobuf field: bool use_hs_during_execute = 13;\n     */\n    useHsDuringExecute: boolean;\n    /**\n     * @generated from protobuf field: bool use_bt_during_execute = 14;\n     */\n    useBtDuringExecute: boolean;\n    /**\n     * @generated from protobuf field: bool spam_execute = 15;\n     */\n    spamExecute: boolean;\n    /**\n     * @generated from protobuf field: bool use_ww_during_execute = 16;\n     */\n    useWwDuringExecute: boolean;\n    /**\n     * @generated from protobuf field: bool use_slam_over_execute = 17;\n     */\n    useSlamOverExecute: boolean;\n    /**\n     * @generated from protobuf field: proto.Warrior.Rotation.StanceOption stance_option = 19;\n     */\n    stanceOption: Warrior_Rotation_StanceOption;\n    /**\n     * @generated from protobuf field: double rend_health_threshold_above = 20;\n     */\n    rendHealthThresholdAbove: number;\n}\n/**\n * @generated from protobuf enum proto.Warrior.Rotation.SunderArmor\n */\nexport enum Warrior_Rotation_SunderArmor {\n    /**\n     * @generated from protobuf enum value: SunderArmorNone = 0;\n     */\n    SunderArmorNone = 0,\n    /**\n     * @generated from protobuf enum value: SunderArmorHelpStack = 1;\n     */\n    SunderArmorHelpStack = 1,\n    /**\n     * @generated from protobuf enum value: SunderArmorMaintain = 2;\n     */\n    SunderArmorMaintain = 2\n}\n/**\n * @generated from protobuf enum proto.Warrior.Rotation.StanceOption\n */\nexport enum Warrior_Rotation_StanceOption {\n    /**\n     * @generated from protobuf enum value: DefaultStance = 0;\n     */\n    DefaultStance = 0,\n    /**\n     * @generated from protobuf enum value: BattleStance = 1;\n     */\n    BattleStance = 1,\n    /**\n     * @generated from protobuf enum value: BerserkerStance = 2;\n     */\n    BerserkerStance = 2\n}\n/**\n * @generated from protobuf message proto.Warrior.Options\n */\nexport interface Warrior_Options {\n    /**\n     * @generated from protobuf field: double starting_rage = 1;\n     */\n    startingRage: number;\n    /**\n     * @generated from protobuf field: bool use_recklessness = 2;\n     */\n    useRecklessness: boolean;\n    /**\n     * @generated from protobuf field: bool use_shattering_throw = 4;\n     */\n    useShatteringThrow: boolean;\n    /**\n     * @generated from protobuf field: proto.WarriorShout shout = 3;\n     */\n    shout: WarriorShout;\n}\n/**\n * @generated from protobuf message proto.ProtectionWarrior\n */\nexport interface ProtectionWarrior {\n    /**\n     * @generated from protobuf field: proto.ProtectionWarrior.Rotation rotation = 1;\n     */\n    rotation?: ProtectionWarrior_Rotation;\n    /**\n     * @generated from protobuf field: proto.WarriorTalents talents = 2;\n     */\n    talents?: WarriorTalents;\n    /**\n     * @generated from protobuf field: proto.ProtectionWarrior.Options options = 3;\n     */\n    options?: ProtectionWarrior_Options;\n}\n/**\n * @generated from protobuf message proto.ProtectionWarrior.Rotation\n */\nexport interface ProtectionWarrior_Rotation {\n    /**\n     * @generated from protobuf field: proto.ProtectionWarrior.Rotation.DemoShoutChoice demo_shout_choice = 1;\n     */\n    demoShoutChoice: ProtectionWarrior_Rotation_DemoShoutChoice;\n    /**\n     * @generated from protobuf field: proto.ProtectionWarrior.Rotation.ThunderClapChoice thunder_clap_choice = 2;\n     */\n    thunderClapChoice: ProtectionWarrior_Rotation_ThunderClapChoice;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 3;\n     */\n    customRotation?: CustomRotation;\n    /**\n     * @generated from protobuf field: double hs_rage_threshold = 4;\n     */\n    hsRageThreshold: number;\n    /**\n     * @generated from protobuf field: bool prio_sslam_on_shield_block = 5;\n     */\n    prioSslamOnShieldBlock: boolean;\n}\n/**\n * @generated from protobuf enum proto.ProtectionWarrior.Rotation.DemoShoutChoice\n */\nexport enum ProtectionWarrior_Rotation_DemoShoutChoice {\n    /**\n     * @generated from protobuf enum value: DemoShoutChoiceNone = 0;\n     */\n    DemoShoutChoiceNone = 0,\n    /**\n     * @generated from protobuf enum value: DemoShoutChoiceMaintain = 1;\n     */\n    DemoShoutChoiceMaintain = 1,\n    /**\n     * @generated from protobuf enum value: DemoShoutChoiceFiller = 2;\n     */\n    DemoShoutChoiceFiller = 2\n}\n/**\n * @generated from protobuf enum proto.ProtectionWarrior.Rotation.ThunderClapChoice\n */\nexport enum ProtectionWarrior_Rotation_ThunderClapChoice {\n    /**\n     * @generated from protobuf enum value: ThunderClapChoiceNone = 0;\n     */\n    ThunderClapChoiceNone = 0,\n    /**\n     * @generated from protobuf enum value: ThunderClapChoiceMaintain = 1;\n     */\n    ThunderClapChoiceMaintain = 1,\n    /**\n     * @generated from protobuf enum value: ThunderClapChoiceOnCD = 2;\n     */\n    ThunderClapChoiceOnCD = 2\n}\n/**\n * @generated from protobuf enum proto.ProtectionWarrior.Rotation.SpellOption\n */\nexport enum ProtectionWarrior_Rotation_SpellOption {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: Revenge = 1;\n     */\n    Revenge = 1,\n    /**\n     * @generated from protobuf enum value: ShieldSlam = 2;\n     */\n    ShieldSlam = 2,\n    /**\n     * @generated from protobuf enum value: Devastate = 3;\n     */\n    Devastate = 3,\n    /**\n     * @generated from protobuf enum value: SunderArmor = 4;\n     */\n    SunderArmor = 4,\n    /**\n     * @generated from protobuf enum value: Shout = 5;\n     */\n    Shout = 5,\n    /**\n     * @generated from protobuf enum value: DemoralizingShout = 6;\n     */\n    DemoralizingShout = 6,\n    /**\n     * @generated from protobuf enum value: ThunderClap = 7;\n     */\n    ThunderClap = 7,\n    /**\n     * @generated from protobuf enum value: MortalStrike = 8;\n     */\n    MortalStrike = 8,\n    /**\n     * @generated from protobuf enum value: ConcussionBlow = 9;\n     */\n    ConcussionBlow = 9,\n    /**\n     * @generated from protobuf enum value: Shockwave = 10;\n     */\n    Shockwave = 10\n}\n/**\n * @generated from protobuf message proto.ProtectionWarrior.Options\n */\nexport interface ProtectionWarrior_Options {\n    /**\n     * @generated from protobuf field: double starting_rage = 1;\n     */\n    startingRage: number;\n    /**\n     * @generated from protobuf field: proto.WarriorShout shout = 4;\n     */\n    shout: WarriorShout;\n    /**\n     * @generated from protobuf field: bool precast_shout = 5;\n     */\n    precastShout: boolean;\n    /**\n     * @generated from protobuf field: bool precast_shout_t2 = 6;\n     */\n    precastShoutT2: boolean;\n    /**\n     * @generated from protobuf field: bool precast_shout_sapphire = 7;\n     */\n    precastShoutSapphire: boolean;\n    /**\n     * @generated from protobuf field: bool use_shattering_throw = 8;\n     */\n    useShatteringThrow: boolean;\n}\n/**\n * @generated from protobuf enum proto.WarriorMajorGlyph\n */\nexport enum WarriorMajorGlyph {\n    /**\n     * @generated from protobuf enum value: WarriorMajorGlyphNone = 0;\n     */\n    WarriorMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBarbaricInsults = 43420;\n     */\n    GlyphOfBarbaricInsults = 43420,\n    /**\n     * @generated from protobuf enum value: GlyphOfBladestorm = 45790;\n     */\n    GlyphOfBladestorm = 45790,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlocking = 43425;\n     */\n    GlyphOfBlocking = 43425,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodthirst = 43412;\n     */\n    GlyphOfBloodthirst = 43412,\n    /**\n     * @generated from protobuf enum value: GlyphOfCleaving = 43414;\n     */\n    GlyphOfCleaving = 43414,\n    /**\n     * @generated from protobuf enum value: GlyphOfDevastate = 43415;\n     */\n    GlyphOfDevastate = 43415,\n    /**\n     * @generated from protobuf enum value: GlyphOfEnragedRegeneration = 45794;\n     */\n    GlyphOfEnragedRegeneration = 45794,\n    /**\n     * @generated from protobuf enum value: GlyphOfExecution = 43416;\n     */\n    GlyphOfExecution = 43416,\n    /**\n     * @generated from protobuf enum value: GlyphOfHamstring = 43417;\n     */\n    GlyphOfHamstring = 43417,\n    /**\n     * @generated from protobuf enum value: GlyphOfHeroicStrike = 43418;\n     */\n    GlyphOfHeroicStrike = 43418,\n    /**\n     * @generated from protobuf enum value: GlyphOfIntervene = 43419;\n     */\n    GlyphOfIntervene = 43419,\n    /**\n     * @generated from protobuf enum value: GlyphOfLastStand = 43426;\n     */\n    GlyphOfLastStand = 43426,\n    /**\n     * @generated from protobuf enum value: GlyphOfMortalStrike = 43421;\n     */\n    GlyphOfMortalStrike = 43421,\n    /**\n     * @generated from protobuf enum value: GlyphOfOverpower = 43422;\n     */\n    GlyphOfOverpower = 43422,\n    /**\n     * @generated from protobuf enum value: GlyphOfRapidCharge = 43413;\n     */\n    GlyphOfRapidCharge = 43413,\n    /**\n     * @generated from protobuf enum value: GlyphOfRending = 43423;\n     */\n    GlyphOfRending = 43423,\n    /**\n     * @generated from protobuf enum value: GlyphOfResonatingPower = 43430;\n     */\n    GlyphOfResonatingPower = 43430,\n    /**\n     * @generated from protobuf enum value: GlyphOfRevenge = 43424;\n     */\n    GlyphOfRevenge = 43424,\n    /**\n     * @generated from protobuf enum value: GlyphOfShieldWall = 45797;\n     */\n    GlyphOfShieldWall = 45797,\n    /**\n     * @generated from protobuf enum value: GlyphOfShockwave = 45792;\n     */\n    GlyphOfShockwave = 45792,\n    /**\n     * @generated from protobuf enum value: GlyphOfSpellReflection = 45795;\n     */\n    GlyphOfSpellReflection = 45795,\n    /**\n     * @generated from protobuf enum value: GlyphOfSunderArmor = 43427;\n     */\n    GlyphOfSunderArmor = 43427,\n    /**\n     * @generated from protobuf enum value: GlyphOfSweepingStrikes = 43428;\n     */\n    GlyphOfSweepingStrikes = 43428,\n    /**\n     * @generated from protobuf enum value: GlyphOfTaunt = 43429;\n     */\n    GlyphOfTaunt = 43429,\n    /**\n     * @generated from protobuf enum value: GlyphOfVictoryRush = 43431;\n     */\n    GlyphOfVictoryRush = 43431,\n    /**\n     * @generated from protobuf enum value: GlyphOfVigilance = 45793;\n     */\n    GlyphOfVigilance = 45793,\n    /**\n     * @generated from protobuf enum value: GlyphOfWhirlwind = 43432;\n     */\n    GlyphOfWhirlwind = 43432\n}\n/**\n * @generated from protobuf enum proto.WarriorMinorGlyph\n */\nexport enum WarriorMinorGlyph {\n    /**\n     * @generated from protobuf enum value: WarriorMinorGlyphNone = 0;\n     */\n    WarriorMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBattle = 43395;\n     */\n    GlyphOfBattle = 43395,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodrage = 43396;\n     */\n    GlyphOfBloodrage = 43396,\n    /**\n     * @generated from protobuf enum value: GlyphOfCharge = 43397;\n     */\n    GlyphOfCharge = 43397,\n    /**\n     * @generated from protobuf enum value: GlyphOfCommand = 49084;\n     */\n    GlyphOfCommand = 49084,\n    /**\n     * @generated from protobuf enum value: GlyphOfEnduringVictory = 43400;\n     */\n    GlyphOfEnduringVictory = 43400,\n    /**\n     * @generated from protobuf enum value: GlyphOfMockingBlow = 43398;\n     */\n    GlyphOfMockingBlow = 43398,\n    /**\n     * @generated from protobuf enum value: GlyphOfThunderClap = 43399;\n     */\n    GlyphOfThunderClap = 43399\n}\n/**\n * @generated from protobuf enum proto.WarriorShout\n */\nexport enum WarriorShout {\n    /**\n     * @generated from protobuf enum value: WarriorShoutNone = 0;\n     */\n    WarriorShoutNone = 0,\n    /**\n     * @generated from protobuf enum value: WarriorShoutBattle = 1;\n     */\n    WarriorShoutBattle = 1,\n    /**\n     * @generated from protobuf enum value: WarriorShoutCommanding = 2;\n     */\n    WarriorShoutCommanding = 2\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass WarriorTalents$Type extends MessageType<WarriorTalents> {\n    constructor() {\n        super(\"proto.WarriorTalents\", [\n            { no: 1, name: \"improved_heroic_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"improved_rend\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"improved_charge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"iron_will\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"tactical_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"improved_overpower\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"anger_management\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"impale\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"deep_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"two_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"taste_for_blood\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"poleaxe_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"sweeping_strikes\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"mace_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"sword_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"weapon_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"improved_hamstring\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"trauma\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"second_wind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"mortal_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"strength_of_arms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"improved_slam\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"juggernaut\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"improved_mortal_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"unrelenting_assault\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"sudden_death\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"endless_rage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"blood_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"wrecking_crew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"bladestorm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 32, name: \"armored_to_the_teeth\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"booming_voice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"cruelty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"improved_demoralizing_shout\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"unbridled_wrath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"improved_cleave\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"piercing_howl\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"blood_craze\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"commanding_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"dual_wield_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"improved_execute\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"enrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"death_wish\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 46, name: \"improved_intercept\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"improved_berserker_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"flurry\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"intensify_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"bloodthirst\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"improved_whirlwind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"furious_attacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"improved_berserker_stance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"heroic_fury\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"rampage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"bloodsurge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"unending_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"titans_grip\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 59, name: \"improved_bloodrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"shield_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"improved_thunder_clap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"incite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"anticipation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"last_stand\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 65, name: \"improved_revenge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"shield_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"improved_spell_reflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"improved_disarm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"puncture\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"improved_disciplines\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"concussion_blow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 73, name: \"gag_order\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"one_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"improved_defensive_stance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"vigilance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 77, name: \"focused_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"vitality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"safeguard\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"warbringer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 81, name: \"devastate\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 82, name: \"critical_block\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"sword_and_board\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 84, name: \"damage_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 85, name: \"shockwave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<WarriorTalents>): WarriorTalents {\n        const message = { improvedHeroicStrike: 0, deflection: 0, improvedRend: 0, improvedCharge: 0, ironWill: 0, tacticalMastery: 0, improvedOverpower: 0, angerManagement: false, impale: 0, deepWounds: 0, twoHandedWeaponSpecialization: 0, tasteForBlood: 0, poleaxeSpecialization: 0, sweepingStrikes: false, maceSpecialization: 0, swordSpecialization: 0, weaponMastery: 0, improvedHamstring: 0, trauma: 0, secondWind: 0, mortalStrike: false, strengthOfArms: 0, improvedSlam: 0, juggernaut: false, improvedMortalStrike: 0, unrelentingAssault: 0, suddenDeath: 0, endlessRage: false, bloodFrenzy: 0, wreckingCrew: 0, bladestorm: false, armoredToTheTeeth: 0, boomingVoice: 0, cruelty: 0, improvedDemoralizingShout: 0, unbridledWrath: 0, improvedCleave: 0, piercingHowl: false, bloodCraze: 0, commandingPresence: 0, dualWieldSpecialization: 0, improvedExecute: 0, enrage: 0, precision: 0, deathWish: false, improvedIntercept: 0, improvedBerserkerRage: 0, flurry: 0, intensifyRage: 0, bloodthirst: false, improvedWhirlwind: 0, furiousAttacks: 0, improvedBerserkerStance: 0, heroicFury: false, rampage: false, bloodsurge: 0, unendingFury: 0, titansGrip: false, improvedBloodrage: 0, shieldSpecialization: 0, improvedThunderClap: 0, incite: 0, anticipation: 0, lastStand: false, improvedRevenge: 0, shieldMastery: 0, toughness: 0, improvedSpellReflection: 0, improvedDisarm: 0, puncture: 0, improvedDisciplines: 0, concussionBlow: false, gagOrder: 0, oneHandedWeaponSpecialization: 0, improvedDefensiveStance: 0, vigilance: false, focusedRage: 0, vitality: 0, safeguard: 0, warbringer: false, devastate: false, criticalBlock: 0, swordAndBoard: 0, damageShield: 0, shockwave: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<WarriorTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarriorTalents): WarriorTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_heroic_strike */ 1:\n                    message.improvedHeroicStrike = reader.int32();\n                    break;\n                case /* int32 deflection */ 2:\n                    message.deflection = reader.int32();\n                    break;\n                case /* int32 improved_rend */ 3:\n                    message.improvedRend = reader.int32();\n                    break;\n                case /* int32 improved_charge */ 4:\n                    message.improvedCharge = reader.int32();\n                    break;\n                case /* int32 iron_will */ 5:\n                    message.ironWill = reader.int32();\n                    break;\n                case /* int32 tactical_mastery */ 6:\n                    message.tacticalMastery = reader.int32();\n                    break;\n                case /* int32 improved_overpower */ 7:\n                    message.improvedOverpower = reader.int32();\n                    break;\n                case /* bool anger_management */ 8:\n                    message.angerManagement = reader.bool();\n                    break;\n                case /* int32 impale */ 9:\n                    message.impale = reader.int32();\n                    break;\n                case /* int32 deep_wounds */ 10:\n                    message.deepWounds = reader.int32();\n                    break;\n                case /* int32 two_handed_weapon_specialization */ 11:\n                    message.twoHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* int32 taste_for_blood */ 12:\n                    message.tasteForBlood = reader.int32();\n                    break;\n                case /* int32 poleaxe_specialization */ 13:\n                    message.poleaxeSpecialization = reader.int32();\n                    break;\n                case /* bool sweeping_strikes */ 14:\n                    message.sweepingStrikes = reader.bool();\n                    break;\n                case /* int32 mace_specialization */ 15:\n                    message.maceSpecialization = reader.int32();\n                    break;\n                case /* int32 sword_specialization */ 16:\n                    message.swordSpecialization = reader.int32();\n                    break;\n                case /* int32 weapon_mastery */ 17:\n                    message.weaponMastery = reader.int32();\n                    break;\n                case /* int32 improved_hamstring */ 18:\n                    message.improvedHamstring = reader.int32();\n                    break;\n                case /* int32 trauma */ 19:\n                    message.trauma = reader.int32();\n                    break;\n                case /* int32 second_wind */ 20:\n                    message.secondWind = reader.int32();\n                    break;\n                case /* bool mortal_strike */ 21:\n                    message.mortalStrike = reader.bool();\n                    break;\n                case /* int32 strength_of_arms */ 22:\n                    message.strengthOfArms = reader.int32();\n                    break;\n                case /* int32 improved_slam */ 23:\n                    message.improvedSlam = reader.int32();\n                    break;\n                case /* bool juggernaut */ 24:\n                    message.juggernaut = reader.bool();\n                    break;\n                case /* int32 improved_mortal_strike */ 25:\n                    message.improvedMortalStrike = reader.int32();\n                    break;\n                case /* int32 unrelenting_assault */ 26:\n                    message.unrelentingAssault = reader.int32();\n                    break;\n                case /* int32 sudden_death */ 27:\n                    message.suddenDeath = reader.int32();\n                    break;\n                case /* bool endless_rage */ 28:\n                    message.endlessRage = reader.bool();\n                    break;\n                case /* int32 blood_frenzy */ 29:\n                    message.bloodFrenzy = reader.int32();\n                    break;\n                case /* int32 wrecking_crew */ 30:\n                    message.wreckingCrew = reader.int32();\n                    break;\n                case /* bool bladestorm */ 31:\n                    message.bladestorm = reader.bool();\n                    break;\n                case /* int32 armored_to_the_teeth */ 32:\n                    message.armoredToTheTeeth = reader.int32();\n                    break;\n                case /* int32 booming_voice */ 33:\n                    message.boomingVoice = reader.int32();\n                    break;\n                case /* int32 cruelty */ 34:\n                    message.cruelty = reader.int32();\n                    break;\n                case /* int32 improved_demoralizing_shout */ 35:\n                    message.improvedDemoralizingShout = reader.int32();\n                    break;\n                case /* int32 unbridled_wrath */ 36:\n                    message.unbridledWrath = reader.int32();\n                    break;\n                case /* int32 improved_cleave */ 37:\n                    message.improvedCleave = reader.int32();\n                    break;\n                case /* bool piercing_howl */ 38:\n                    message.piercingHowl = reader.bool();\n                    break;\n                case /* int32 blood_craze */ 39:\n                    message.bloodCraze = reader.int32();\n                    break;\n                case /* int32 commanding_presence */ 40:\n                    message.commandingPresence = reader.int32();\n                    break;\n                case /* int32 dual_wield_specialization */ 41:\n                    message.dualWieldSpecialization = reader.int32();\n                    break;\n                case /* int32 improved_execute */ 42:\n                    message.improvedExecute = reader.int32();\n                    break;\n                case /* int32 enrage */ 43:\n                    message.enrage = reader.int32();\n                    break;\n                case /* int32 precision */ 44:\n                    message.precision = reader.int32();\n                    break;\n                case /* bool death_wish */ 45:\n                    message.deathWish = reader.bool();\n                    break;\n                case /* int32 improved_intercept */ 46:\n                    message.improvedIntercept = reader.int32();\n                    break;\n                case /* int32 improved_berserker_rage */ 47:\n                    message.improvedBerserkerRage = reader.int32();\n                    break;\n                case /* int32 flurry */ 48:\n                    message.flurry = reader.int32();\n                    break;\n                case /* int32 intensify_rage */ 49:\n                    message.intensifyRage = reader.int32();\n                    break;\n                case /* bool bloodthirst */ 50:\n                    message.bloodthirst = reader.bool();\n                    break;\n                case /* int32 improved_whirlwind */ 51:\n                    message.improvedWhirlwind = reader.int32();\n                    break;\n                case /* int32 furious_attacks */ 52:\n                    message.furiousAttacks = reader.int32();\n                    break;\n                case /* int32 improved_berserker_stance */ 53:\n                    message.improvedBerserkerStance = reader.int32();\n                    break;\n                case /* bool heroic_fury */ 54:\n                    message.heroicFury = reader.bool();\n                    break;\n                case /* bool rampage */ 55:\n                    message.rampage = reader.bool();\n                    break;\n                case /* int32 bloodsurge */ 56:\n                    message.bloodsurge = reader.int32();\n                    break;\n                case /* int32 unending_fury */ 57:\n                    message.unendingFury = reader.int32();\n                    break;\n                case /* bool titans_grip */ 58:\n                    message.titansGrip = reader.bool();\n                    break;\n                case /* int32 improved_bloodrage */ 59:\n                    message.improvedBloodrage = reader.int32();\n                    break;\n                case /* int32 shield_specialization */ 60:\n                    message.shieldSpecialization = reader.int32();\n                    break;\n                case /* int32 improved_thunder_clap */ 61:\n                    message.improvedThunderClap = reader.int32();\n                    break;\n                case /* int32 incite */ 62:\n                    message.incite = reader.int32();\n                    break;\n                case /* int32 anticipation */ 63:\n                    message.anticipation = reader.int32();\n                    break;\n                case /* bool last_stand */ 64:\n                    message.lastStand = reader.bool();\n                    break;\n                case /* int32 improved_revenge */ 65:\n                    message.improvedRevenge = reader.int32();\n                    break;\n                case /* int32 shield_mastery */ 66:\n                    message.shieldMastery = reader.int32();\n                    break;\n                case /* int32 toughness */ 67:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 improved_spell_reflection */ 68:\n                    message.improvedSpellReflection = reader.int32();\n                    break;\n                case /* int32 improved_disarm */ 69:\n                    message.improvedDisarm = reader.int32();\n                    break;\n                case /* int32 puncture */ 70:\n                    message.puncture = reader.int32();\n                    break;\n                case /* int32 improved_disciplines */ 71:\n                    message.improvedDisciplines = reader.int32();\n                    break;\n                case /* bool concussion_blow */ 72:\n                    message.concussionBlow = reader.bool();\n                    break;\n                case /* int32 gag_order */ 73:\n                    message.gagOrder = reader.int32();\n                    break;\n                case /* int32 one_handed_weapon_specialization */ 74:\n                    message.oneHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* int32 improved_defensive_stance */ 75:\n                    message.improvedDefensiveStance = reader.int32();\n                    break;\n                case /* bool vigilance */ 76:\n                    message.vigilance = reader.bool();\n                    break;\n                case /* int32 focused_rage */ 77:\n                    message.focusedRage = reader.int32();\n                    break;\n                case /* int32 vitality */ 78:\n                    message.vitality = reader.int32();\n                    break;\n                case /* int32 safeguard */ 79:\n                    message.safeguard = reader.int32();\n                    break;\n                case /* bool warbringer */ 80:\n                    message.warbringer = reader.bool();\n                    break;\n                case /* bool devastate */ 81:\n                    message.devastate = reader.bool();\n                    break;\n                case /* int32 critical_block */ 82:\n                    message.criticalBlock = reader.int32();\n                    break;\n                case /* int32 sword_and_board */ 83:\n                    message.swordAndBoard = reader.int32();\n                    break;\n                case /* int32 damage_shield */ 84:\n                    message.damageShield = reader.int32();\n                    break;\n                case /* bool shockwave */ 85:\n                    message.shockwave = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: WarriorTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_heroic_strike = 1; */\n        if (message.improvedHeroicStrike !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedHeroicStrike);\n        /* int32 deflection = 2; */\n        if (message.deflection !== 0)\n            writer.tag(2, WireType.Varint).int32(message.deflection);\n        /* int32 improved_rend = 3; */\n        if (message.improvedRend !== 0)\n            writer.tag(3, WireType.Varint).int32(message.improvedRend);\n        /* int32 improved_charge = 4; */\n        if (message.improvedCharge !== 0)\n            writer.tag(4, WireType.Varint).int32(message.improvedCharge);\n        /* int32 iron_will = 5; */\n        if (message.ironWill !== 0)\n            writer.tag(5, WireType.Varint).int32(message.ironWill);\n        /* int32 tactical_mastery = 6; */\n        if (message.tacticalMastery !== 0)\n            writer.tag(6, WireType.Varint).int32(message.tacticalMastery);\n        /* int32 improved_overpower = 7; */\n        if (message.improvedOverpower !== 0)\n            writer.tag(7, WireType.Varint).int32(message.improvedOverpower);\n        /* bool anger_management = 8; */\n        if (message.angerManagement !== false)\n            writer.tag(8, WireType.Varint).bool(message.angerManagement);\n        /* int32 impale = 9; */\n        if (message.impale !== 0)\n            writer.tag(9, WireType.Varint).int32(message.impale);\n        /* int32 deep_wounds = 10; */\n        if (message.deepWounds !== 0)\n            writer.tag(10, WireType.Varint).int32(message.deepWounds);\n        /* int32 two_handed_weapon_specialization = 11; */\n        if (message.twoHandedWeaponSpecialization !== 0)\n            writer.tag(11, WireType.Varint).int32(message.twoHandedWeaponSpecialization);\n        /* int32 taste_for_blood = 12; */\n        if (message.tasteForBlood !== 0)\n            writer.tag(12, WireType.Varint).int32(message.tasteForBlood);\n        /* int32 poleaxe_specialization = 13; */\n        if (message.poleaxeSpecialization !== 0)\n            writer.tag(13, WireType.Varint).int32(message.poleaxeSpecialization);\n        /* bool sweeping_strikes = 14; */\n        if (message.sweepingStrikes !== false)\n            writer.tag(14, WireType.Varint).bool(message.sweepingStrikes);\n        /* int32 mace_specialization = 15; */\n        if (message.maceSpecialization !== 0)\n            writer.tag(15, WireType.Varint).int32(message.maceSpecialization);\n        /* int32 sword_specialization = 16; */\n        if (message.swordSpecialization !== 0)\n            writer.tag(16, WireType.Varint).int32(message.swordSpecialization);\n        /* int32 weapon_mastery = 17; */\n        if (message.weaponMastery !== 0)\n            writer.tag(17, WireType.Varint).int32(message.weaponMastery);\n        /* int32 improved_hamstring = 18; */\n        if (message.improvedHamstring !== 0)\n            writer.tag(18, WireType.Varint).int32(message.improvedHamstring);\n        /* int32 trauma = 19; */\n        if (message.trauma !== 0)\n            writer.tag(19, WireType.Varint).int32(message.trauma);\n        /* int32 second_wind = 20; */\n        if (message.secondWind !== 0)\n            writer.tag(20, WireType.Varint).int32(message.secondWind);\n        /* bool mortal_strike = 21; */\n        if (message.mortalStrike !== false)\n            writer.tag(21, WireType.Varint).bool(message.mortalStrike);\n        /* int32 strength_of_arms = 22; */\n        if (message.strengthOfArms !== 0)\n            writer.tag(22, WireType.Varint).int32(message.strengthOfArms);\n        /* int32 improved_slam = 23; */\n        if (message.improvedSlam !== 0)\n            writer.tag(23, WireType.Varint).int32(message.improvedSlam);\n        /* bool juggernaut = 24; */\n        if (message.juggernaut !== false)\n            writer.tag(24, WireType.Varint).bool(message.juggernaut);\n        /* int32 improved_mortal_strike = 25; */\n        if (message.improvedMortalStrike !== 0)\n            writer.tag(25, WireType.Varint).int32(message.improvedMortalStrike);\n        /* int32 unrelenting_assault = 26; */\n        if (message.unrelentingAssault !== 0)\n            writer.tag(26, WireType.Varint).int32(message.unrelentingAssault);\n        /* int32 sudden_death = 27; */\n        if (message.suddenDeath !== 0)\n            writer.tag(27, WireType.Varint).int32(message.suddenDeath);\n        /* bool endless_rage = 28; */\n        if (message.endlessRage !== false)\n            writer.tag(28, WireType.Varint).bool(message.endlessRage);\n        /* int32 blood_frenzy = 29; */\n        if (message.bloodFrenzy !== 0)\n            writer.tag(29, WireType.Varint).int32(message.bloodFrenzy);\n        /* int32 wrecking_crew = 30; */\n        if (message.wreckingCrew !== 0)\n            writer.tag(30, WireType.Varint).int32(message.wreckingCrew);\n        /* bool bladestorm = 31; */\n        if (message.bladestorm !== false)\n            writer.tag(31, WireType.Varint).bool(message.bladestorm);\n        /* int32 armored_to_the_teeth = 32; */\n        if (message.armoredToTheTeeth !== 0)\n            writer.tag(32, WireType.Varint).int32(message.armoredToTheTeeth);\n        /* int32 booming_voice = 33; */\n        if (message.boomingVoice !== 0)\n            writer.tag(33, WireType.Varint).int32(message.boomingVoice);\n        /* int32 cruelty = 34; */\n        if (message.cruelty !== 0)\n            writer.tag(34, WireType.Varint).int32(message.cruelty);\n        /* int32 improved_demoralizing_shout = 35; */\n        if (message.improvedDemoralizingShout !== 0)\n            writer.tag(35, WireType.Varint).int32(message.improvedDemoralizingShout);\n        /* int32 unbridled_wrath = 36; */\n        if (message.unbridledWrath !== 0)\n            writer.tag(36, WireType.Varint).int32(message.unbridledWrath);\n        /* int32 improved_cleave = 37; */\n        if (message.improvedCleave !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedCleave);\n        /* bool piercing_howl = 38; */\n        if (message.piercingHowl !== false)\n            writer.tag(38, WireType.Varint).bool(message.piercingHowl);\n        /* int32 blood_craze = 39; */\n        if (message.bloodCraze !== 0)\n            writer.tag(39, WireType.Varint).int32(message.bloodCraze);\n        /* int32 commanding_presence = 40; */\n        if (message.commandingPresence !== 0)\n            writer.tag(40, WireType.Varint).int32(message.commandingPresence);\n        /* int32 dual_wield_specialization = 41; */\n        if (message.dualWieldSpecialization !== 0)\n            writer.tag(41, WireType.Varint).int32(message.dualWieldSpecialization);\n        /* int32 improved_execute = 42; */\n        if (message.improvedExecute !== 0)\n            writer.tag(42, WireType.Varint).int32(message.improvedExecute);\n        /* int32 enrage = 43; */\n        if (message.enrage !== 0)\n            writer.tag(43, WireType.Varint).int32(message.enrage);\n        /* int32 precision = 44; */\n        if (message.precision !== 0)\n            writer.tag(44, WireType.Varint).int32(message.precision);\n        /* bool death_wish = 45; */\n        if (message.deathWish !== false)\n            writer.tag(45, WireType.Varint).bool(message.deathWish);\n        /* int32 improved_intercept = 46; */\n        if (message.improvedIntercept !== 0)\n            writer.tag(46, WireType.Varint).int32(message.improvedIntercept);\n        /* int32 improved_berserker_rage = 47; */\n        if (message.improvedBerserkerRage !== 0)\n            writer.tag(47, WireType.Varint).int32(message.improvedBerserkerRage);\n        /* int32 flurry = 48; */\n        if (message.flurry !== 0)\n            writer.tag(48, WireType.Varint).int32(message.flurry);\n        /* int32 intensify_rage = 49; */\n        if (message.intensifyRage !== 0)\n            writer.tag(49, WireType.Varint).int32(message.intensifyRage);\n        /* bool bloodthirst = 50; */\n        if (message.bloodthirst !== false)\n            writer.tag(50, WireType.Varint).bool(message.bloodthirst);\n        /* int32 improved_whirlwind = 51; */\n        if (message.improvedWhirlwind !== 0)\n            writer.tag(51, WireType.Varint).int32(message.improvedWhirlwind);\n        /* int32 furious_attacks = 52; */\n        if (message.furiousAttacks !== 0)\n            writer.tag(52, WireType.Varint).int32(message.furiousAttacks);\n        /* int32 improved_berserker_stance = 53; */\n        if (message.improvedBerserkerStance !== 0)\n            writer.tag(53, WireType.Varint).int32(message.improvedBerserkerStance);\n        /* bool heroic_fury = 54; */\n        if (message.heroicFury !== false)\n            writer.tag(54, WireType.Varint).bool(message.heroicFury);\n        /* bool rampage = 55; */\n        if (message.rampage !== false)\n            writer.tag(55, WireType.Varint).bool(message.rampage);\n        /* int32 bloodsurge = 56; */\n        if (message.bloodsurge !== 0)\n            writer.tag(56, WireType.Varint).int32(message.bloodsurge);\n        /* int32 unending_fury = 57; */\n        if (message.unendingFury !== 0)\n            writer.tag(57, WireType.Varint).int32(message.unendingFury);\n        /* bool titans_grip = 58; */\n        if (message.titansGrip !== false)\n            writer.tag(58, WireType.Varint).bool(message.titansGrip);\n        /* int32 improved_bloodrage = 59; */\n        if (message.improvedBloodrage !== 0)\n            writer.tag(59, WireType.Varint).int32(message.improvedBloodrage);\n        /* int32 shield_specialization = 60; */\n        if (message.shieldSpecialization !== 0)\n            writer.tag(60, WireType.Varint).int32(message.shieldSpecialization);\n        /* int32 improved_thunder_clap = 61; */\n        if (message.improvedThunderClap !== 0)\n            writer.tag(61, WireType.Varint).int32(message.improvedThunderClap);\n        /* int32 incite = 62; */\n        if (message.incite !== 0)\n            writer.tag(62, WireType.Varint).int32(message.incite);\n        /* int32 anticipation = 63; */\n        if (message.anticipation !== 0)\n            writer.tag(63, WireType.Varint).int32(message.anticipation);\n        /* bool last_stand = 64; */\n        if (message.lastStand !== false)\n            writer.tag(64, WireType.Varint).bool(message.lastStand);\n        /* int32 improved_revenge = 65; */\n        if (message.improvedRevenge !== 0)\n            writer.tag(65, WireType.Varint).int32(message.improvedRevenge);\n        /* int32 shield_mastery = 66; */\n        if (message.shieldMastery !== 0)\n            writer.tag(66, WireType.Varint).int32(message.shieldMastery);\n        /* int32 toughness = 67; */\n        if (message.toughness !== 0)\n            writer.tag(67, WireType.Varint).int32(message.toughness);\n        /* int32 improved_spell_reflection = 68; */\n        if (message.improvedSpellReflection !== 0)\n            writer.tag(68, WireType.Varint).int32(message.improvedSpellReflection);\n        /* int32 improved_disarm = 69; */\n        if (message.improvedDisarm !== 0)\n            writer.tag(69, WireType.Varint).int32(message.improvedDisarm);\n        /* int32 puncture = 70; */\n        if (message.puncture !== 0)\n            writer.tag(70, WireType.Varint).int32(message.puncture);\n        /* int32 improved_disciplines = 71; */\n        if (message.improvedDisciplines !== 0)\n            writer.tag(71, WireType.Varint).int32(message.improvedDisciplines);\n        /* bool concussion_blow = 72; */\n        if (message.concussionBlow !== false)\n            writer.tag(72, WireType.Varint).bool(message.concussionBlow);\n        /* int32 gag_order = 73; */\n        if (message.gagOrder !== 0)\n            writer.tag(73, WireType.Varint).int32(message.gagOrder);\n        /* int32 one_handed_weapon_specialization = 74; */\n        if (message.oneHandedWeaponSpecialization !== 0)\n            writer.tag(74, WireType.Varint).int32(message.oneHandedWeaponSpecialization);\n        /* int32 improved_defensive_stance = 75; */\n        if (message.improvedDefensiveStance !== 0)\n            writer.tag(75, WireType.Varint).int32(message.improvedDefensiveStance);\n        /* bool vigilance = 76; */\n        if (message.vigilance !== false)\n            writer.tag(76, WireType.Varint).bool(message.vigilance);\n        /* int32 focused_rage = 77; */\n        if (message.focusedRage !== 0)\n            writer.tag(77, WireType.Varint).int32(message.focusedRage);\n        /* int32 vitality = 78; */\n        if (message.vitality !== 0)\n            writer.tag(78, WireType.Varint).int32(message.vitality);\n        /* int32 safeguard = 79; */\n        if (message.safeguard !== 0)\n            writer.tag(79, WireType.Varint).int32(message.safeguard);\n        /* bool warbringer = 80; */\n        if (message.warbringer !== false)\n            writer.tag(80, WireType.Varint).bool(message.warbringer);\n        /* bool devastate = 81; */\n        if (message.devastate !== false)\n            writer.tag(81, WireType.Varint).bool(message.devastate);\n        /* int32 critical_block = 82; */\n        if (message.criticalBlock !== 0)\n            writer.tag(82, WireType.Varint).int32(message.criticalBlock);\n        /* int32 sword_and_board = 83; */\n        if (message.swordAndBoard !== 0)\n            writer.tag(83, WireType.Varint).int32(message.swordAndBoard);\n        /* int32 damage_shield = 84; */\n        if (message.damageShield !== 0)\n            writer.tag(84, WireType.Varint).int32(message.damageShield);\n        /* bool shockwave = 85; */\n        if (message.shockwave !== false)\n            writer.tag(85, WireType.Varint).bool(message.shockwave);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.WarriorTalents\n */\nexport const WarriorTalents = new WarriorTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warrior$Type extends MessageType<Warrior> {\n    constructor() {\n        super(\"proto.Warrior\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Warrior_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => WarriorTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Warrior_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Warrior>): Warrior {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warrior>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warrior): Warrior {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Warrior.Rotation rotation */ 1:\n                    message.rotation = Warrior_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.WarriorTalents talents */ 2:\n                    message.talents = WarriorTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.Warrior.Options options */ 3:\n                    message.options = Warrior_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warrior, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Warrior.Rotation rotation = 1; */\n        if (message.rotation)\n            Warrior_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.WarriorTalents talents = 2; */\n        if (message.talents)\n            WarriorTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Warrior.Options options = 3; */\n        if (message.options)\n            Warrior_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warrior\n */\nexport const Warrior = new Warrior$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warrior_Rotation$Type extends MessageType<Warrior_Rotation> {\n    constructor() {\n        super(\"proto.Warrior.Rotation\", [\n            { no: 1, name: \"use_cleave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"use_rend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"use_ms\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"use_slam\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"prioritize_ww\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"sunderArmor\", kind: \"enum\", T: () => [\"proto.Warrior.Rotation.SunderArmor\", Warrior_Rotation_SunderArmor] },\n            { no: 6, name: \"maintain_demo_shout\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"maintain_thunder_clap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"hs_rage_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"ms_rage_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"rend_rage_threshold_below\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 11, name: \"slam_rage_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"rend_cd_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"use_hs_during_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"use_bt_during_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"spam_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"use_ww_during_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"use_slam_over_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"stance_option\", kind: \"enum\", T: () => [\"proto.Warrior.Rotation.StanceOption\", Warrior_Rotation_StanceOption] },\n            { no: 20, name: \"rend_health_threshold_above\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Warrior_Rotation>): Warrior_Rotation {\n        const message = { useCleave: false, useRend: false, useMs: false, useSlam: false, prioritizeWw: false, sunderArmor: 0, maintainDemoShout: false, maintainThunderClap: false, hsRageThreshold: 0, msRageThreshold: 0, rendRageThresholdBelow: 0, slamRageThreshold: 0, rendCdThreshold: 0, useHsDuringExecute: false, useBtDuringExecute: false, spamExecute: false, useWwDuringExecute: false, useSlamOverExecute: false, stanceOption: 0, rendHealthThresholdAbove: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warrior_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warrior_Rotation): Warrior_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_cleave */ 1:\n                    message.useCleave = reader.bool();\n                    break;\n                case /* bool use_rend */ 2:\n                    message.useRend = reader.bool();\n                    break;\n                case /* bool use_ms */ 18:\n                    message.useMs = reader.bool();\n                    break;\n                case /* bool use_slam */ 3:\n                    message.useSlam = reader.bool();\n                    break;\n                case /* bool prioritize_ww */ 4:\n                    message.prioritizeWw = reader.bool();\n                    break;\n                case /* proto.Warrior.Rotation.SunderArmor sunderArmor */ 5:\n                    message.sunderArmor = reader.int32();\n                    break;\n                case /* bool maintain_demo_shout */ 6:\n                    message.maintainDemoShout = reader.bool();\n                    break;\n                case /* bool maintain_thunder_clap */ 7:\n                    message.maintainThunderClap = reader.bool();\n                    break;\n                case /* double hs_rage_threshold */ 8:\n                    message.hsRageThreshold = reader.double();\n                    break;\n                case /* double ms_rage_threshold */ 9:\n                    message.msRageThreshold = reader.double();\n                    break;\n                case /* double rend_rage_threshold_below */ 10:\n                    message.rendRageThresholdBelow = reader.double();\n                    break;\n                case /* double slam_rage_threshold */ 11:\n                    message.slamRageThreshold = reader.double();\n                    break;\n                case /* double rend_cd_threshold */ 12:\n                    message.rendCdThreshold = reader.double();\n                    break;\n                case /* bool use_hs_during_execute */ 13:\n                    message.useHsDuringExecute = reader.bool();\n                    break;\n                case /* bool use_bt_during_execute */ 14:\n                    message.useBtDuringExecute = reader.bool();\n                    break;\n                case /* bool spam_execute */ 15:\n                    message.spamExecute = reader.bool();\n                    break;\n                case /* bool use_ww_during_execute */ 16:\n                    message.useWwDuringExecute = reader.bool();\n                    break;\n                case /* bool use_slam_over_execute */ 17:\n                    message.useSlamOverExecute = reader.bool();\n                    break;\n                case /* proto.Warrior.Rotation.StanceOption stance_option */ 19:\n                    message.stanceOption = reader.int32();\n                    break;\n                case /* double rend_health_threshold_above */ 20:\n                    message.rendHealthThresholdAbove = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warrior_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_cleave = 1; */\n        if (message.useCleave !== false)\n            writer.tag(1, WireType.Varint).bool(message.useCleave);\n        /* bool use_rend = 2; */\n        if (message.useRend !== false)\n            writer.tag(2, WireType.Varint).bool(message.useRend);\n        /* bool use_ms = 18; */\n        if (message.useMs !== false)\n            writer.tag(18, WireType.Varint).bool(message.useMs);\n        /* bool use_slam = 3; */\n        if (message.useSlam !== false)\n            writer.tag(3, WireType.Varint).bool(message.useSlam);\n        /* bool prioritize_ww = 4; */\n        if (message.prioritizeWw !== false)\n            writer.tag(4, WireType.Varint).bool(message.prioritizeWw);\n        /* proto.Warrior.Rotation.SunderArmor sunderArmor = 5; */\n        if (message.sunderArmor !== 0)\n            writer.tag(5, WireType.Varint).int32(message.sunderArmor);\n        /* bool maintain_demo_shout = 6; */\n        if (message.maintainDemoShout !== false)\n            writer.tag(6, WireType.Varint).bool(message.maintainDemoShout);\n        /* bool maintain_thunder_clap = 7; */\n        if (message.maintainThunderClap !== false)\n            writer.tag(7, WireType.Varint).bool(message.maintainThunderClap);\n        /* double hs_rage_threshold = 8; */\n        if (message.hsRageThreshold !== 0)\n            writer.tag(8, WireType.Bit64).double(message.hsRageThreshold);\n        /* double ms_rage_threshold = 9; */\n        if (message.msRageThreshold !== 0)\n            writer.tag(9, WireType.Bit64).double(message.msRageThreshold);\n        /* double rend_rage_threshold_below = 10; */\n        if (message.rendRageThresholdBelow !== 0)\n            writer.tag(10, WireType.Bit64).double(message.rendRageThresholdBelow);\n        /* double slam_rage_threshold = 11; */\n        if (message.slamRageThreshold !== 0)\n            writer.tag(11, WireType.Bit64).double(message.slamRageThreshold);\n        /* double rend_cd_threshold = 12; */\n        if (message.rendCdThreshold !== 0)\n            writer.tag(12, WireType.Bit64).double(message.rendCdThreshold);\n        /* bool use_hs_during_execute = 13; */\n        if (message.useHsDuringExecute !== false)\n            writer.tag(13, WireType.Varint).bool(message.useHsDuringExecute);\n        /* bool use_bt_during_execute = 14; */\n        if (message.useBtDuringExecute !== false)\n            writer.tag(14, WireType.Varint).bool(message.useBtDuringExecute);\n        /* bool spam_execute = 15; */\n        if (message.spamExecute !== false)\n            writer.tag(15, WireType.Varint).bool(message.spamExecute);\n        /* bool use_ww_during_execute = 16; */\n        if (message.useWwDuringExecute !== false)\n            writer.tag(16, WireType.Varint).bool(message.useWwDuringExecute);\n        /* bool use_slam_over_execute = 17; */\n        if (message.useSlamOverExecute !== false)\n            writer.tag(17, WireType.Varint).bool(message.useSlamOverExecute);\n        /* proto.Warrior.Rotation.StanceOption stance_option = 19; */\n        if (message.stanceOption !== 0)\n            writer.tag(19, WireType.Varint).int32(message.stanceOption);\n        /* double rend_health_threshold_above = 20; */\n        if (message.rendHealthThresholdAbove !== 0)\n            writer.tag(20, WireType.Bit64).double(message.rendHealthThresholdAbove);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warrior.Rotation\n */\nexport const Warrior_Rotation = new Warrior_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warrior_Options$Type extends MessageType<Warrior_Options> {\n    constructor() {\n        super(\"proto.Warrior.Options\", [\n            { no: 1, name: \"starting_rage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"use_recklessness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"use_shattering_throw\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"shout\", kind: \"enum\", T: () => [\"proto.WarriorShout\", WarriorShout] }\n        ]);\n    }\n    create(value?: PartialMessage<Warrior_Options>): Warrior_Options {\n        const message = { startingRage: 0, useRecklessness: false, useShatteringThrow: false, shout: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warrior_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warrior_Options): Warrior_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_rage */ 1:\n                    message.startingRage = reader.double();\n                    break;\n                case /* bool use_recklessness */ 2:\n                    message.useRecklessness = reader.bool();\n                    break;\n                case /* bool use_shattering_throw */ 4:\n                    message.useShatteringThrow = reader.bool();\n                    break;\n                case /* proto.WarriorShout shout */ 3:\n                    message.shout = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warrior_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_rage = 1; */\n        if (message.startingRage !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRage);\n        /* bool use_recklessness = 2; */\n        if (message.useRecklessness !== false)\n            writer.tag(2, WireType.Varint).bool(message.useRecklessness);\n        /* bool use_shattering_throw = 4; */\n        if (message.useShatteringThrow !== false)\n            writer.tag(4, WireType.Varint).bool(message.useShatteringThrow);\n        /* proto.WarriorShout shout = 3; */\n        if (message.shout !== 0)\n            writer.tag(3, WireType.Varint).int32(message.shout);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warrior.Options\n */\nexport const Warrior_Options = new Warrior_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionWarrior$Type extends MessageType<ProtectionWarrior> {\n    constructor() {\n        super(\"proto.ProtectionWarrior\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => ProtectionWarrior_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => WarriorTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => ProtectionWarrior_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionWarrior>): ProtectionWarrior {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionWarrior>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionWarrior): ProtectionWarrior {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ProtectionWarrior.Rotation rotation */ 1:\n                    message.rotation = ProtectionWarrior_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.WarriorTalents talents */ 2:\n                    message.talents = WarriorTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.ProtectionWarrior.Options options */ 3:\n                    message.options = ProtectionWarrior_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionWarrior, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ProtectionWarrior.Rotation rotation = 1; */\n        if (message.rotation)\n            ProtectionWarrior_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.WarriorTalents talents = 2; */\n        if (message.talents)\n            WarriorTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionWarrior.Options options = 3; */\n        if (message.options)\n            ProtectionWarrior_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionWarrior\n */\nexport const ProtectionWarrior = new ProtectionWarrior$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionWarrior_Rotation$Type extends MessageType<ProtectionWarrior_Rotation> {\n    constructor() {\n        super(\"proto.ProtectionWarrior.Rotation\", [\n            { no: 1, name: \"demo_shout_choice\", kind: \"enum\", T: () => [\"proto.ProtectionWarrior.Rotation.DemoShoutChoice\", ProtectionWarrior_Rotation_DemoShoutChoice] },\n            { no: 2, name: \"thunder_clap_choice\", kind: \"enum\", T: () => [\"proto.ProtectionWarrior.Rotation.ThunderClapChoice\", ProtectionWarrior_Rotation_ThunderClapChoice] },\n            { no: 3, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation },\n            { no: 4, name: \"hs_rage_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"prio_sslam_on_shield_block\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionWarrior_Rotation>): ProtectionWarrior_Rotation {\n        const message = { demoShoutChoice: 0, thunderClapChoice: 0, hsRageThreshold: 0, prioSslamOnShieldBlock: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionWarrior_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionWarrior_Rotation): ProtectionWarrior_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ProtectionWarrior.Rotation.DemoShoutChoice demo_shout_choice */ 1:\n                    message.demoShoutChoice = reader.int32();\n                    break;\n                case /* proto.ProtectionWarrior.Rotation.ThunderClapChoice thunder_clap_choice */ 2:\n                    message.thunderClapChoice = reader.int32();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 3:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                case /* double hs_rage_threshold */ 4:\n                    message.hsRageThreshold = reader.double();\n                    break;\n                case /* bool prio_sslam_on_shield_block */ 5:\n                    message.prioSslamOnShieldBlock = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionWarrior_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ProtectionWarrior.Rotation.DemoShoutChoice demo_shout_choice = 1; */\n        if (message.demoShoutChoice !== 0)\n            writer.tag(1, WireType.Varint).int32(message.demoShoutChoice);\n        /* proto.ProtectionWarrior.Rotation.ThunderClapChoice thunder_clap_choice = 2; */\n        if (message.thunderClapChoice !== 0)\n            writer.tag(2, WireType.Varint).int32(message.thunderClapChoice);\n        /* proto.CustomRotation custom_rotation = 3; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* double hs_rage_threshold = 4; */\n        if (message.hsRageThreshold !== 0)\n            writer.tag(4, WireType.Bit64).double(message.hsRageThreshold);\n        /* bool prio_sslam_on_shield_block = 5; */\n        if (message.prioSslamOnShieldBlock !== false)\n            writer.tag(5, WireType.Varint).bool(message.prioSslamOnShieldBlock);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionWarrior.Rotation\n */\nexport const ProtectionWarrior_Rotation = new ProtectionWarrior_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionWarrior_Options$Type extends MessageType<ProtectionWarrior_Options> {\n    constructor() {\n        super(\"proto.ProtectionWarrior.Options\", [\n            { no: 1, name: \"starting_rage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"shout\", kind: \"enum\", T: () => [\"proto.WarriorShout\", WarriorShout] },\n            { no: 5, name: \"precast_shout\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"precast_shout_t2\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"precast_shout_sapphire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"use_shattering_throw\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionWarrior_Options>): ProtectionWarrior_Options {\n        const message = { startingRage: 0, shout: 0, precastShout: false, precastShoutT2: false, precastShoutSapphire: false, useShatteringThrow: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionWarrior_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionWarrior_Options): ProtectionWarrior_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_rage */ 1:\n                    message.startingRage = reader.double();\n                    break;\n                case /* proto.WarriorShout shout */ 4:\n                    message.shout = reader.int32();\n                    break;\n                case /* bool precast_shout */ 5:\n                    message.precastShout = reader.bool();\n                    break;\n                case /* bool precast_shout_t2 */ 6:\n                    message.precastShoutT2 = reader.bool();\n                    break;\n                case /* bool precast_shout_sapphire */ 7:\n                    message.precastShoutSapphire = reader.bool();\n                    break;\n                case /* bool use_shattering_throw */ 8:\n                    message.useShatteringThrow = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionWarrior_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_rage = 1; */\n        if (message.startingRage !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRage);\n        /* proto.WarriorShout shout = 4; */\n        if (message.shout !== 0)\n            writer.tag(4, WireType.Varint).int32(message.shout);\n        /* bool precast_shout = 5; */\n        if (message.precastShout !== false)\n            writer.tag(5, WireType.Varint).bool(message.precastShout);\n        /* bool precast_shout_t2 = 6; */\n        if (message.precastShoutT2 !== false)\n            writer.tag(6, WireType.Varint).bool(message.precastShoutT2);\n        /* bool precast_shout_sapphire = 7; */\n        if (message.precastShoutSapphire !== false)\n            writer.tag(7, WireType.Varint).bool(message.precastShoutSapphire);\n        /* bool use_shattering_throw = 8; */\n        if (message.useShatteringThrow !== false)\n            writer.tag(8, WireType.Varint).bool(message.useShatteringThrow);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionWarrior.Options\n */\nexport const ProtectionWarrior_Options = new ProtectionWarrior_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"warlock.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * WotLK talents\n *\n * @generated from protobuf message proto.WarlockTalents\n */\nexport interface WarlockTalents {\n    /**\n     * Affliction\n     *\n     * @generated from protobuf field: int32 improved_curse_of_agony = 1;\n     */\n    improvedCurseOfAgony: number;\n    /**\n     * @generated from protobuf field: int32 suppression = 2;\n     */\n    suppression: number;\n    /**\n     * @generated from protobuf field: int32 improved_corruption = 3;\n     */\n    improvedCorruption: number;\n    /**\n     * @generated from protobuf field: int32 improved_curse_of_weakness = 4;\n     */\n    improvedCurseOfWeakness: number;\n    /**\n     * @generated from protobuf field: int32 improved_drain_soul = 5;\n     */\n    improvedDrainSoul: number;\n    /**\n     * @generated from protobuf field: int32 improved_life_tap = 6;\n     */\n    improvedLifeTap: number;\n    /**\n     * @generated from protobuf field: int32 soul_siphon = 7;\n     */\n    soulSiphon: number;\n    /**\n     * @generated from protobuf field: int32 improved_fear = 8;\n     */\n    improvedFear: number;\n    /**\n     * @generated from protobuf field: int32 fel_concentration = 9;\n     */\n    felConcentration: number;\n    /**\n     * @generated from protobuf field: bool amplify_curse = 10;\n     */\n    amplifyCurse: boolean;\n    /**\n     * @generated from protobuf field: int32 grim_reach = 11;\n     */\n    grimReach: number;\n    /**\n     * @generated from protobuf field: int32 nightfall = 12;\n     */\n    nightfall: number;\n    /**\n     * @generated from protobuf field: int32 empowered_corruption = 13;\n     */\n    empoweredCorruption: number;\n    /**\n     * @generated from protobuf field: int32 shadow_embrace = 14;\n     */\n    shadowEmbrace: number;\n    /**\n     * @generated from protobuf field: bool siphon_life = 15;\n     */\n    siphonLife: boolean;\n    /**\n     * @generated from protobuf field: bool curse_of_exhaustion = 16;\n     */\n    curseOfExhaustion: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_felhunter = 17;\n     */\n    improvedFelhunter: number;\n    /**\n     * @generated from protobuf field: int32 shadow_mastery = 18;\n     */\n    shadowMastery: number;\n    /**\n     * @generated from protobuf field: int32 eradication = 19;\n     */\n    eradication: number;\n    /**\n     * @generated from protobuf field: int32 contagion = 20;\n     */\n    contagion: number;\n    /**\n     * @generated from protobuf field: bool dark_pact = 21;\n     */\n    darkPact: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_howl_of_terror = 22;\n     */\n    improvedHowlOfTerror: number;\n    /**\n     * @generated from protobuf field: int32 malediction = 23;\n     */\n    malediction: number;\n    /**\n     * @generated from protobuf field: int32 deaths_embrace = 24;\n     */\n    deathsEmbrace: number;\n    /**\n     * @generated from protobuf field: bool unstable_affliction = 25;\n     */\n    unstableAffliction: boolean;\n    /**\n     * @generated from protobuf field: bool pandemic = 26;\n     */\n    pandemic: boolean;\n    /**\n     * @generated from protobuf field: int32 everlasting_affliction = 27;\n     */\n    everlastingAffliction: number;\n    /**\n     * @generated from protobuf field: bool haunt = 28;\n     */\n    haunt: boolean;\n    /**\n     * Demonology\n     *\n     * @generated from protobuf field: int32 improved_healthstone = 29;\n     */\n    improvedHealthstone: number;\n    /**\n     * @generated from protobuf field: int32 improved_imp = 30;\n     */\n    improvedImp: number;\n    /**\n     * @generated from protobuf field: int32 demonic_embrace = 31;\n     */\n    demonicEmbrace: number;\n    /**\n     * @generated from protobuf field: int32 fel_synergy = 32;\n     */\n    felSynergy: number;\n    /**\n     * @generated from protobuf field: int32 improved_health_funnel = 33;\n     */\n    improvedHealthFunnel: number;\n    /**\n     * @generated from protobuf field: int32 demonic_brutality = 34;\n     */\n    demonicBrutality: number;\n    /**\n     * @generated from protobuf field: int32 fel_vitality = 35;\n     */\n    felVitality: number;\n    /**\n     * @generated from protobuf field: int32 improved_sayaad = 36;\n     */\n    improvedSayaad: number;\n    /**\n     * @generated from protobuf field: bool soul_link = 37;\n     */\n    soulLink: boolean;\n    /**\n     * @generated from protobuf field: bool fel_domination = 38;\n     */\n    felDomination: boolean;\n    /**\n     * @generated from protobuf field: int32 demonic_aegis = 39;\n     */\n    demonicAegis: number;\n    /**\n     * @generated from protobuf field: int32 unholy_power = 40;\n     */\n    unholyPower: number;\n    /**\n     * @generated from protobuf field: int32 master_summoner = 41;\n     */\n    masterSummoner: number;\n    /**\n     * @generated from protobuf field: bool mana_feed = 42;\n     */\n    manaFeed: boolean;\n    /**\n     * @generated from protobuf field: int32 master_conjuror = 43;\n     */\n    masterConjuror: number;\n    /**\n     * @generated from protobuf field: int32 master_demonologist = 44;\n     */\n    masterDemonologist: number;\n    /**\n     * @generated from protobuf field: int32 molten_core = 45;\n     */\n    moltenCore: number;\n    /**\n     * @generated from protobuf field: int32 demonic_resilience = 46;\n     */\n    demonicResilience: number;\n    /**\n     * @generated from protobuf field: bool demonic_empowerment = 47;\n     */\n    demonicEmpowerment: boolean;\n    /**\n     * @generated from protobuf field: int32 demonic_knowledge = 48;\n     */\n    demonicKnowledge: number;\n    /**\n     * @generated from protobuf field: int32 demonic_tactics = 49;\n     */\n    demonicTactics: number;\n    /**\n     * @generated from protobuf field: int32 decimation = 50;\n     */\n    decimation: number;\n    /**\n     * @generated from protobuf field: int32 improved_demonic_tactics = 51;\n     */\n    improvedDemonicTactics: number;\n    /**\n     * @generated from protobuf field: bool summon_felguard = 52;\n     */\n    summonFelguard: boolean;\n    /**\n     * @generated from protobuf field: int32 nemesis = 53;\n     */\n    nemesis: number;\n    /**\n     * @generated from protobuf field: int32 demonic_pact = 54;\n     */\n    demonicPact: number;\n    /**\n     * @generated from protobuf field: bool metamorphosis = 55;\n     */\n    metamorphosis: boolean;\n    /**\n     * Destruction\n     *\n     * @generated from protobuf field: int32 improved_shadow_bolt = 56;\n     */\n    improvedShadowBolt: number;\n    /**\n     * @generated from protobuf field: int32 bane = 57;\n     */\n    bane: number;\n    /**\n     * @generated from protobuf field: int32 aftermath = 58;\n     */\n    aftermath: number;\n    /**\n     * @generated from protobuf field: int32 molten_skin = 59;\n     */\n    moltenSkin: number;\n    /**\n     * @generated from protobuf field: int32 cataclysm = 60;\n     */\n    cataclysm: number;\n    /**\n     * @generated from protobuf field: int32 demonic_power = 61;\n     */\n    demonicPower: number;\n    /**\n     * @generated from protobuf field: bool shadowburn = 62;\n     */\n    shadowburn: boolean;\n    /**\n     * @generated from protobuf field: int32 ruin = 63;\n     */\n    ruin: number;\n    /**\n     * @generated from protobuf field: int32 intensity = 64;\n     */\n    intensity: number;\n    /**\n     * @generated from protobuf field: int32 destructive_reach = 65;\n     */\n    destructiveReach: number;\n    /**\n     * @generated from protobuf field: int32 improved_searing_pain = 66;\n     */\n    improvedSearingPain: number;\n    /**\n     * @generated from protobuf field: int32 backlash = 67;\n     */\n    backlash: number;\n    /**\n     * @generated from protobuf field: int32 improved_immolate = 68;\n     */\n    improvedImmolate: number;\n    /**\n     * @generated from protobuf field: bool devastation = 69;\n     */\n    devastation: boolean;\n    /**\n     * @generated from protobuf field: int32 nether_protection = 70;\n     */\n    netherProtection: number;\n    /**\n     * @generated from protobuf field: int32 emberstorm = 71;\n     */\n    emberstorm: number;\n    /**\n     * @generated from protobuf field: bool conflagrate = 72;\n     */\n    conflagrate: boolean;\n    /**\n     * @generated from protobuf field: int32 soul_leech = 73;\n     */\n    soulLeech: number;\n    /**\n     * @generated from protobuf field: int32 pyroclasm = 74;\n     */\n    pyroclasm: number;\n    /**\n     * @generated from protobuf field: int32 shadow_and_flame = 75;\n     */\n    shadowAndFlame: number;\n    /**\n     * @generated from protobuf field: int32 improved_soul_leech = 76;\n     */\n    improvedSoulLeech: number;\n    /**\n     * @generated from protobuf field: int32 backdraft = 77;\n     */\n    backdraft: number;\n    /**\n     * @generated from protobuf field: bool shadowfury = 78;\n     */\n    shadowfury: boolean;\n    /**\n     * @generated from protobuf field: int32 empowered_imp = 79;\n     */\n    empoweredImp: number;\n    /**\n     * @generated from protobuf field: int32 fire_and_brimstone = 80;\n     */\n    fireAndBrimstone: number;\n    /**\n     * @generated from protobuf field: bool chaos_bolt = 81;\n     */\n    chaosBolt: boolean;\n}\n/**\n * @generated from protobuf message proto.Warlock\n */\nexport interface Warlock {\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation rotation = 1;\n     */\n    rotation?: Warlock_Rotation;\n    /**\n     * @generated from protobuf field: proto.WarlockTalents talents = 2;\n     */\n    talents?: WarlockTalents;\n    /**\n     * @generated from protobuf field: proto.Warlock.Options options = 3;\n     */\n    options?: Warlock_Options;\n}\n/**\n * @generated from protobuf message proto.Warlock.Rotation\n */\nexport interface Warlock_Rotation {\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.Preset preset = 1;\n     */\n    preset: Warlock_Rotation_Preset;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.Curse curse = 2;\n     */\n    curse: Warlock_Rotation_Curse;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.PrimarySpell primary_spell = 3;\n     */\n    primarySpell: Warlock_Rotation_PrimarySpell;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.SecondaryDot secondary_dot = 4;\n     */\n    secondaryDot: Warlock_Rotation_SecondaryDot;\n    /**\n     * @generated from protobuf field: bool corruption = 5;\n     */\n    corruption: boolean;\n    /**\n     * @generated from protobuf field: bool detonate_seed = 6;\n     */\n    detonateSeed: boolean;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.SpecSpell spec_spell = 7;\n     */\n    specSpell: Warlock_Rotation_SpecSpell;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.Type type = 8;\n     */\n    type: Warlock_Rotation_Type;\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.Preset\n */\nexport enum Warlock_Rotation_Preset {\n    /**\n     * @generated from protobuf enum value: Manual = 0;\n     */\n    Manual = 0,\n    /**\n     * @generated from protobuf enum value: Automatic = 1;\n     */\n    Automatic = 1\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.Type\n */\nexport enum Warlock_Rotation_Type {\n    /**\n     * @generated from protobuf enum value: Affliction = 0;\n     */\n    Affliction = 0,\n    /**\n     * @generated from protobuf enum value: Demonology = 1;\n     */\n    Demonology = 1,\n    /**\n     * @generated from protobuf enum value: Destruction = 2;\n     */\n    Destruction = 2\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.PrimarySpell\n */\nexport enum Warlock_Rotation_PrimarySpell {\n    /**\n     * @generated from protobuf enum value: UnknownSpell = 0;\n     */\n    UnknownSpell = 0,\n    /**\n     * @generated from protobuf enum value: ShadowBolt = 1;\n     */\n    ShadowBolt = 1,\n    /**\n     * @generated from protobuf enum value: Incinerate = 2;\n     */\n    Incinerate = 2,\n    /**\n     * @generated from protobuf enum value: Seed = 3;\n     */\n    Seed = 3\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.Curse\n */\nexport enum Warlock_Rotation_Curse {\n    /**\n     * @generated from protobuf enum value: NoCurse = 0;\n     */\n    NoCurse = 0,\n    /**\n     * @generated from protobuf enum value: Elements = 1;\n     */\n    Elements = 1,\n    /**\n     * @generated from protobuf enum value: Weakness = 2;\n     */\n    Weakness = 2,\n    /**\n     * @generated from protobuf enum value: Doom = 3;\n     */\n    Doom = 3,\n    /**\n     * @generated from protobuf enum value: Agony = 4;\n     */\n    Agony = 4,\n    /**\n     * @generated from protobuf enum value: Tongues = 5;\n     */\n    Tongues = 5\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.SecondaryDot\n */\nexport enum Warlock_Rotation_SecondaryDot {\n    /**\n     * @generated from protobuf enum value: NoSecondaryDot = 0;\n     */\n    NoSecondaryDot = 0,\n    /**\n     * @generated from protobuf enum value: Immolate = 1;\n     */\n    Immolate = 1,\n    /**\n     * @generated from protobuf enum value: UnstableAffliction = 2;\n     */\n    UnstableAffliction = 2\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.SpecSpell\n */\nexport enum Warlock_Rotation_SpecSpell {\n    /**\n     * @generated from protobuf enum value: NoSpecSpell = 0;\n     */\n    NoSpecSpell = 0,\n    /**\n     * @generated from protobuf enum value: ChaosBolt = 1;\n     */\n    ChaosBolt = 1,\n    /**\n     * @generated from protobuf enum value: Haunt = 2;\n     */\n    Haunt = 2\n}\n/**\n * @generated from protobuf message proto.Warlock.Options\n */\nexport interface Warlock_Options {\n    /**\n     * @generated from protobuf field: proto.Warlock.Options.Armor armor = 1;\n     */\n    armor: Warlock_Options_Armor;\n    /**\n     * @generated from protobuf field: proto.Warlock.Options.Summon summon = 2;\n     */\n    summon: Warlock_Options_Summon;\n    /**\n     * @generated from protobuf field: proto.Warlock.Options.WeaponImbue weaponImbue = 3;\n     */\n    weaponImbue: Warlock_Options_WeaponImbue;\n}\n/**\n * @generated from protobuf enum proto.Warlock.Options.Summon\n */\nexport enum Warlock_Options_Summon {\n    /**\n     * @generated from protobuf enum value: NoSummon = 0;\n     */\n    NoSummon = 0,\n    /**\n     * @generated from protobuf enum value: Imp = 1;\n     */\n    Imp = 1,\n    /**\n     * @generated from protobuf enum value: Voidwalker = 2;\n     */\n    Voidwalker = 2,\n    /**\n     * @generated from protobuf enum value: Succubus = 3;\n     */\n    Succubus = 3,\n    /**\n     * @generated from protobuf enum value: Felhunter = 4;\n     */\n    Felhunter = 4,\n    /**\n     * @generated from protobuf enum value: Felguard = 5;\n     */\n    Felguard = 5\n}\n/**\n * @generated from protobuf enum proto.Warlock.Options.Armor\n */\nexport enum Warlock_Options_Armor {\n    /**\n     * @generated from protobuf enum value: NoArmor = 0;\n     */\n    NoArmor = 0,\n    /**\n     * @generated from protobuf enum value: FelArmor = 1;\n     */\n    FelArmor = 1,\n    /**\n     * @generated from protobuf enum value: DemonArmor = 2;\n     */\n    DemonArmor = 2\n}\n/**\n * @generated from protobuf enum proto.Warlock.Options.WeaponImbue\n */\nexport enum Warlock_Options_WeaponImbue {\n    /**\n     * @generated from protobuf enum value: NoWeaponImbue = 0;\n     */\n    NoWeaponImbue = 0,\n    /**\n     * @generated from protobuf enum value: GrandSpellstone = 1;\n     */\n    GrandSpellstone = 1,\n    /**\n     * @generated from protobuf enum value: GrandFirestone = 2;\n     */\n    GrandFirestone = 2\n}\n/**\n * @generated from protobuf enum proto.WarlockMajorGlyph\n */\nexport enum WarlockMajorGlyph {\n    /**\n     * @generated from protobuf enum value: WarlockMajorGlyphNone = 0;\n     */\n    WarlockMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfChaosBolt = 45781;\n     */\n    GlyphOfChaosBolt = 45781,\n    /**\n     * @generated from protobuf enum value: GlyphOfConflagrate = 42454;\n     */\n    GlyphOfConflagrate = 42454,\n    /**\n     * @generated from protobuf enum value: GlyphOfCorruption = 42455;\n     */\n    GlyphOfCorruption = 42455,\n    /**\n     * @generated from protobuf enum value: GlyphOfCurseOfAgony = 42456;\n     */\n    GlyphOfCurseOfAgony = 42456,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathCoil = 42457;\n     */\n    GlyphOfDeathCoil = 42457,\n    /**\n     * @generated from protobuf enum value: GlyphOfDemonicCircle = 45782;\n     */\n    GlyphOfDemonicCircle = 45782,\n    /**\n     * @generated from protobuf enum value: GlyphOfFear = 42458;\n     */\n    GlyphOfFear = 42458,\n    /**\n     * @generated from protobuf enum value: GlyphOfFelguard = 42459;\n     */\n    GlyphOfFelguard = 42459,\n    /**\n     * @generated from protobuf enum value: GlyphOfFelhunter = 42460;\n     */\n    GlyphOfFelhunter = 42460,\n    /**\n     * @generated from protobuf enum value: GlyphOfHaunt = 45779;\n     */\n    GlyphOfHaunt = 45779,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealthFunnel = 42461;\n     */\n    GlyphOfHealthFunnel = 42461,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealthstone = 42462;\n     */\n    GlyphOfHealthstone = 42462,\n    /**\n     * @generated from protobuf enum value: GlyphOfHowlOfTerror = 42463;\n     */\n    GlyphOfHowlOfTerror = 42463,\n    /**\n     * @generated from protobuf enum value: GlyphOfImmolate = 42464;\n     */\n    GlyphOfImmolate = 42464,\n    /**\n     * @generated from protobuf enum value: GlyphOfImp = 42465;\n     */\n    GlyphOfImp = 42465,\n    /**\n     * @generated from protobuf enum value: GlyphOfIncinerate = 42453;\n     */\n    GlyphOfIncinerate = 42453,\n    /**\n     * @generated from protobuf enum value: GlyphOfLifeTap = 45785;\n     */\n    GlyphOfLifeTap = 45785,\n    /**\n     * @generated from protobuf enum value: GlyphOfMetamorphosis = 45780;\n     */\n    GlyphOfMetamorphosis = 45780,\n    /**\n     * @generated from protobuf enum value: GlyphOfQuickDecay = 50077;\n     */\n    GlyphOfQuickDecay = 50077,\n    /**\n     * @generated from protobuf enum value: GlyphOfSearingPain = 42466;\n     */\n    GlyphOfSearingPain = 42466,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowBolt = 42467;\n     */\n    GlyphOfShadowBolt = 42467,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowburn = 42468;\n     */\n    GlyphOfShadowburn = 42468,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowflame = 45783;\n     */\n    GlyphOfShadowflame = 45783,\n    /**\n     * @generated from protobuf enum value: GlyphOfSiphonLife = 42469;\n     */\n    GlyphOfSiphonLife = 42469,\n    /**\n     * @generated from protobuf enum value: GlyphOfSoulLink = 45789;\n     */\n    GlyphOfSoulLink = 45789,\n    /**\n     * @generated from protobuf enum value: GlyphOfSoulstone = 42470;\n     */\n    GlyphOfSoulstone = 42470,\n    /**\n     * @generated from protobuf enum value: GlyphOfSuccubus = 42471;\n     */\n    GlyphOfSuccubus = 42471,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnstableAffliction = 42472;\n     */\n    GlyphOfUnstableAffliction = 42472,\n    /**\n     * @generated from protobuf enum value: GlyphOfVoidwalker = 42473;\n     */\n    GlyphOfVoidwalker = 42473\n}\n/**\n * @generated from protobuf enum proto.WarlockMinorGlyph\n */\nexport enum WarlockMinorGlyph {\n    /**\n     * @generated from protobuf enum value: WarlockMinorGlyphNone = 0;\n     */\n    WarlockMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfCurseOfExhausion = 43392;\n     */\n    GlyphOfCurseOfExhausion = 43392,\n    /**\n     * @generated from protobuf enum value: GlyphOfDrainSoul = 43390;\n     */\n    GlyphOfDrainSoul = 43390,\n    /**\n     * @generated from protobuf enum value: GlyphOfSubjugateDemon = 43393;\n     */\n    GlyphOfSubjugateDemon = 43393,\n    /**\n     * @generated from protobuf enum value: GlyphOfKilrogg = 43391;\n     */\n    GlyphOfKilrogg = 43391,\n    /**\n     * @generated from protobuf enum value: GlyphOfSouls = 43394;\n     */\n    GlyphOfSouls = 43394,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnendingBreath = 43389;\n     */\n    GlyphOfUnendingBreath = 43389\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass WarlockTalents$Type extends MessageType<WarlockTalents> {\n    constructor() {\n        super(\"proto.WarlockTalents\", [\n            { no: 1, name: \"improved_curse_of_agony\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"suppression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"improved_corruption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"improved_curse_of_weakness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"improved_drain_soul\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"improved_life_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"soul_siphon\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"improved_fear\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"fel_concentration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"amplify_curse\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"grim_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"nightfall\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"empowered_corruption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"shadow_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"siphon_life\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"curse_of_exhaustion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"improved_felhunter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"shadow_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"eradication\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"contagion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"dark_pact\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"improved_howl_of_terror\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"malediction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"deaths_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"unstable_affliction\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"pandemic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"everlasting_affliction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"haunt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"improved_healthstone\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"improved_imp\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"demonic_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"fel_synergy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"improved_health_funnel\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"demonic_brutality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"fel_vitality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"improved_sayaad\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"soul_link\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"fel_domination\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"demonic_aegis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"unholy_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"master_summoner\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"mana_feed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 43, name: \"master_conjuror\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"master_demonologist\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"molten_core\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"demonic_resilience\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"demonic_empowerment\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"demonic_knowledge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"demonic_tactics\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"decimation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"improved_demonic_tactics\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"summon_felguard\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"nemesis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"demonic_pact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"metamorphosis\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"improved_shadow_bolt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"bane\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"aftermath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"molten_skin\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"cataclysm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"demonic_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"shadowburn\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 63, name: \"ruin\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"intensity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"destructive_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"improved_searing_pain\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"backlash\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"improved_immolate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"devastation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 70, name: \"nether_protection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"emberstorm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"conflagrate\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 73, name: \"soul_leech\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"pyroclasm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"shadow_and_flame\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"improved_soul_leech\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"backdraft\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"shadowfury\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 79, name: \"empowered_imp\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"fire_and_brimstone\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"chaos_bolt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<WarlockTalents>): WarlockTalents {\n        const message = { improvedCurseOfAgony: 0, suppression: 0, improvedCorruption: 0, improvedCurseOfWeakness: 0, improvedDrainSoul: 0, improvedLifeTap: 0, soulSiphon: 0, improvedFear: 0, felConcentration: 0, amplifyCurse: false, grimReach: 0, nightfall: 0, empoweredCorruption: 0, shadowEmbrace: 0, siphonLife: false, curseOfExhaustion: false, improvedFelhunter: 0, shadowMastery: 0, eradication: 0, contagion: 0, darkPact: false, improvedHowlOfTerror: 0, malediction: 0, deathsEmbrace: 0, unstableAffliction: false, pandemic: false, everlastingAffliction: 0, haunt: false, improvedHealthstone: 0, improvedImp: 0, demonicEmbrace: 0, felSynergy: 0, improvedHealthFunnel: 0, demonicBrutality: 0, felVitality: 0, improvedSayaad: 0, soulLink: false, felDomination: false, demonicAegis: 0, unholyPower: 0, masterSummoner: 0, manaFeed: false, masterConjuror: 0, masterDemonologist: 0, moltenCore: 0, demonicResilience: 0, demonicEmpowerment: false, demonicKnowledge: 0, demonicTactics: 0, decimation: 0, improvedDemonicTactics: 0, summonFelguard: false, nemesis: 0, demonicPact: 0, metamorphosis: false, improvedShadowBolt: 0, bane: 0, aftermath: 0, moltenSkin: 0, cataclysm: 0, demonicPower: 0, shadowburn: false, ruin: 0, intensity: 0, destructiveReach: 0, improvedSearingPain: 0, backlash: 0, improvedImmolate: 0, devastation: false, netherProtection: 0, emberstorm: 0, conflagrate: false, soulLeech: 0, pyroclasm: 0, shadowAndFlame: 0, improvedSoulLeech: 0, backdraft: 0, shadowfury: false, empoweredImp: 0, fireAndBrimstone: 0, chaosBolt: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<WarlockTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarlockTalents): WarlockTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_curse_of_agony */ 1:\n                    message.improvedCurseOfAgony = reader.int32();\n                    break;\n                case /* int32 suppression */ 2:\n                    message.suppression = reader.int32();\n                    break;\n                case /* int32 improved_corruption */ 3:\n                    message.improvedCorruption = reader.int32();\n                    break;\n                case /* int32 improved_curse_of_weakness */ 4:\n                    message.improvedCurseOfWeakness = reader.int32();\n                    break;\n                case /* int32 improved_drain_soul */ 5:\n                    message.improvedDrainSoul = reader.int32();\n                    break;\n                case /* int32 improved_life_tap */ 6:\n                    message.improvedLifeTap = reader.int32();\n                    break;\n                case /* int32 soul_siphon */ 7:\n                    message.soulSiphon = reader.int32();\n                    break;\n                case /* int32 improved_fear */ 8:\n                    message.improvedFear = reader.int32();\n                    break;\n                case /* int32 fel_concentration */ 9:\n                    message.felConcentration = reader.int32();\n                    break;\n                case /* bool amplify_curse */ 10:\n                    message.amplifyCurse = reader.bool();\n                    break;\n                case /* int32 grim_reach */ 11:\n                    message.grimReach = reader.int32();\n                    break;\n                case /* int32 nightfall */ 12:\n                    message.nightfall = reader.int32();\n                    break;\n                case /* int32 empowered_corruption */ 13:\n                    message.empoweredCorruption = reader.int32();\n                    break;\n                case /* int32 shadow_embrace */ 14:\n                    message.shadowEmbrace = reader.int32();\n                    break;\n                case /* bool siphon_life */ 15:\n                    message.siphonLife = reader.bool();\n                    break;\n                case /* bool curse_of_exhaustion */ 16:\n                    message.curseOfExhaustion = reader.bool();\n                    break;\n                case /* int32 improved_felhunter */ 17:\n                    message.improvedFelhunter = reader.int32();\n                    break;\n                case /* int32 shadow_mastery */ 18:\n                    message.shadowMastery = reader.int32();\n                    break;\n                case /* int32 eradication */ 19:\n                    message.eradication = reader.int32();\n                    break;\n                case /* int32 contagion */ 20:\n                    message.contagion = reader.int32();\n                    break;\n                case /* bool dark_pact */ 21:\n                    message.darkPact = reader.bool();\n                    break;\n                case /* int32 improved_howl_of_terror */ 22:\n                    message.improvedHowlOfTerror = reader.int32();\n                    break;\n                case /* int32 malediction */ 23:\n                    message.malediction = reader.int32();\n                    break;\n                case /* int32 deaths_embrace */ 24:\n                    message.deathsEmbrace = reader.int32();\n                    break;\n                case /* bool unstable_affliction */ 25:\n                    message.unstableAffliction = reader.bool();\n                    break;\n                case /* bool pandemic */ 26:\n                    message.pandemic = reader.bool();\n                    break;\n                case /* int32 everlasting_affliction */ 27:\n                    message.everlastingAffliction = reader.int32();\n                    break;\n                case /* bool haunt */ 28:\n                    message.haunt = reader.bool();\n                    break;\n                case /* int32 improved_healthstone */ 29:\n                    message.improvedHealthstone = reader.int32();\n                    break;\n                case /* int32 improved_imp */ 30:\n                    message.improvedImp = reader.int32();\n                    break;\n                case /* int32 demonic_embrace */ 31:\n                    message.demonicEmbrace = reader.int32();\n                    break;\n                case /* int32 fel_synergy */ 32:\n                    message.felSynergy = reader.int32();\n                    break;\n                case /* int32 improved_health_funnel */ 33:\n                    message.improvedHealthFunnel = reader.int32();\n                    break;\n                case /* int32 demonic_brutality */ 34:\n                    message.demonicBrutality = reader.int32();\n                    break;\n                case /* int32 fel_vitality */ 35:\n                    message.felVitality = reader.int32();\n                    break;\n                case /* int32 improved_sayaad */ 36:\n                    message.improvedSayaad = reader.int32();\n                    break;\n                case /* bool soul_link */ 37:\n                    message.soulLink = reader.bool();\n                    break;\n                case /* bool fel_domination */ 38:\n                    message.felDomination = reader.bool();\n                    break;\n                case /* int32 demonic_aegis */ 39:\n                    message.demonicAegis = reader.int32();\n                    break;\n                case /* int32 unholy_power */ 40:\n                    message.unholyPower = reader.int32();\n                    break;\n                case /* int32 master_summoner */ 41:\n                    message.masterSummoner = reader.int32();\n                    break;\n                case /* bool mana_feed */ 42:\n                    message.manaFeed = reader.bool();\n                    break;\n                case /* int32 master_conjuror */ 43:\n                    message.masterConjuror = reader.int32();\n                    break;\n                case /* int32 master_demonologist */ 44:\n                    message.masterDemonologist = reader.int32();\n                    break;\n                case /* int32 molten_core */ 45:\n                    message.moltenCore = reader.int32();\n                    break;\n                case /* int32 demonic_resilience */ 46:\n                    message.demonicResilience = reader.int32();\n                    break;\n                case /* bool demonic_empowerment */ 47:\n                    message.demonicEmpowerment = reader.bool();\n                    break;\n                case /* int32 demonic_knowledge */ 48:\n                    message.demonicKnowledge = reader.int32();\n                    break;\n                case /* int32 demonic_tactics */ 49:\n                    message.demonicTactics = reader.int32();\n                    break;\n                case /* int32 decimation */ 50:\n                    message.decimation = reader.int32();\n                    break;\n                case /* int32 improved_demonic_tactics */ 51:\n                    message.improvedDemonicTactics = reader.int32();\n                    break;\n                case /* bool summon_felguard */ 52:\n                    message.summonFelguard = reader.bool();\n                    break;\n                case /* int32 nemesis */ 53:\n                    message.nemesis = reader.int32();\n                    break;\n                case /* int32 demonic_pact */ 54:\n                    message.demonicPact = reader.int32();\n                    break;\n                case /* bool metamorphosis */ 55:\n                    message.metamorphosis = reader.bool();\n                    break;\n                case /* int32 improved_shadow_bolt */ 56:\n                    message.improvedShadowBolt = reader.int32();\n                    break;\n                case /* int32 bane */ 57:\n                    message.bane = reader.int32();\n                    break;\n                case /* int32 aftermath */ 58:\n                    message.aftermath = reader.int32();\n                    break;\n                case /* int32 molten_skin */ 59:\n                    message.moltenSkin = reader.int32();\n                    break;\n                case /* int32 cataclysm */ 60:\n                    message.cataclysm = reader.int32();\n                    break;\n                case /* int32 demonic_power */ 61:\n                    message.demonicPower = reader.int32();\n                    break;\n                case /* bool shadowburn */ 62:\n                    message.shadowburn = reader.bool();\n                    break;\n                case /* int32 ruin */ 63:\n                    message.ruin = reader.int32();\n                    break;\n                case /* int32 intensity */ 64:\n                    message.intensity = reader.int32();\n                    break;\n                case /* int32 destructive_reach */ 65:\n                    message.destructiveReach = reader.int32();\n                    break;\n                case /* int32 improved_searing_pain */ 66:\n                    message.improvedSearingPain = reader.int32();\n                    break;\n                case /* int32 backlash */ 67:\n                    message.backlash = reader.int32();\n                    break;\n                case /* int32 improved_immolate */ 68:\n                    message.improvedImmolate = reader.int32();\n                    break;\n                case /* bool devastation */ 69:\n                    message.devastation = reader.bool();\n                    break;\n                case /* int32 nether_protection */ 70:\n                    message.netherProtection = reader.int32();\n                    break;\n                case /* int32 emberstorm */ 71:\n                    message.emberstorm = reader.int32();\n                    break;\n                case /* bool conflagrate */ 72:\n                    message.conflagrate = reader.bool();\n                    break;\n                case /* int32 soul_leech */ 73:\n                    message.soulLeech = reader.int32();\n                    break;\n                case /* int32 pyroclasm */ 74:\n                    message.pyroclasm = reader.int32();\n                    break;\n                case /* int32 shadow_and_flame */ 75:\n                    message.shadowAndFlame = reader.int32();\n                    break;\n                case /* int32 improved_soul_leech */ 76:\n                    message.improvedSoulLeech = reader.int32();\n                    break;\n                case /* int32 backdraft */ 77:\n                    message.backdraft = reader.int32();\n                    break;\n                case /* bool shadowfury */ 78:\n                    message.shadowfury = reader.bool();\n                    break;\n                case /* int32 empowered_imp */ 79:\n                    message.empoweredImp = reader.int32();\n                    break;\n                case /* int32 fire_and_brimstone */ 80:\n                    message.fireAndBrimstone = reader.int32();\n                    break;\n                case /* bool chaos_bolt */ 81:\n                    message.chaosBolt = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: WarlockTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_curse_of_agony = 1; */\n        if (message.improvedCurseOfAgony !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedCurseOfAgony);\n        /* int32 suppression = 2; */\n        if (message.suppression !== 0)\n            writer.tag(2, WireType.Varint).int32(message.suppression);\n        /* int32 improved_corruption = 3; */\n        if (message.improvedCorruption !== 0)\n            writer.tag(3, WireType.Varint).int32(message.improvedCorruption);\n        /* int32 improved_curse_of_weakness = 4; */\n        if (message.improvedCurseOfWeakness !== 0)\n            writer.tag(4, WireType.Varint).int32(message.improvedCurseOfWeakness);\n        /* int32 improved_drain_soul = 5; */\n        if (message.improvedDrainSoul !== 0)\n            writer.tag(5, WireType.Varint).int32(message.improvedDrainSoul);\n        /* int32 improved_life_tap = 6; */\n        if (message.improvedLifeTap !== 0)\n            writer.tag(6, WireType.Varint).int32(message.improvedLifeTap);\n        /* int32 soul_siphon = 7; */\n        if (message.soulSiphon !== 0)\n            writer.tag(7, WireType.Varint).int32(message.soulSiphon);\n        /* int32 improved_fear = 8; */\n        if (message.improvedFear !== 0)\n            writer.tag(8, WireType.Varint).int32(message.improvedFear);\n        /* int32 fel_concentration = 9; */\n        if (message.felConcentration !== 0)\n            writer.tag(9, WireType.Varint).int32(message.felConcentration);\n        /* bool amplify_curse = 10; */\n        if (message.amplifyCurse !== false)\n            writer.tag(10, WireType.Varint).bool(message.amplifyCurse);\n        /* int32 grim_reach = 11; */\n        if (message.grimReach !== 0)\n            writer.tag(11, WireType.Varint).int32(message.grimReach);\n        /* int32 nightfall = 12; */\n        if (message.nightfall !== 0)\n            writer.tag(12, WireType.Varint).int32(message.nightfall);\n        /* int32 empowered_corruption = 13; */\n        if (message.empoweredCorruption !== 0)\n            writer.tag(13, WireType.Varint).int32(message.empoweredCorruption);\n        /* int32 shadow_embrace = 14; */\n        if (message.shadowEmbrace !== 0)\n            writer.tag(14, WireType.Varint).int32(message.shadowEmbrace);\n        /* bool siphon_life = 15; */\n        if (message.siphonLife !== false)\n            writer.tag(15, WireType.Varint).bool(message.siphonLife);\n        /* bool curse_of_exhaustion = 16; */\n        if (message.curseOfExhaustion !== false)\n            writer.tag(16, WireType.Varint).bool(message.curseOfExhaustion);\n        /* int32 improved_felhunter = 17; */\n        if (message.improvedFelhunter !== 0)\n            writer.tag(17, WireType.Varint).int32(message.improvedFelhunter);\n        /* int32 shadow_mastery = 18; */\n        if (message.shadowMastery !== 0)\n            writer.tag(18, WireType.Varint).int32(message.shadowMastery);\n        /* int32 eradication = 19; */\n        if (message.eradication !== 0)\n            writer.tag(19, WireType.Varint).int32(message.eradication);\n        /* int32 contagion = 20; */\n        if (message.contagion !== 0)\n            writer.tag(20, WireType.Varint).int32(message.contagion);\n        /* bool dark_pact = 21; */\n        if (message.darkPact !== false)\n            writer.tag(21, WireType.Varint).bool(message.darkPact);\n        /* int32 improved_howl_of_terror = 22; */\n        if (message.improvedHowlOfTerror !== 0)\n            writer.tag(22, WireType.Varint).int32(message.improvedHowlOfTerror);\n        /* int32 malediction = 23; */\n        if (message.malediction !== 0)\n            writer.tag(23, WireType.Varint).int32(message.malediction);\n        /* int32 deaths_embrace = 24; */\n        if (message.deathsEmbrace !== 0)\n            writer.tag(24, WireType.Varint).int32(message.deathsEmbrace);\n        /* bool unstable_affliction = 25; */\n        if (message.unstableAffliction !== false)\n            writer.tag(25, WireType.Varint).bool(message.unstableAffliction);\n        /* bool pandemic = 26; */\n        if (message.pandemic !== false)\n            writer.tag(26, WireType.Varint).bool(message.pandemic);\n        /* int32 everlasting_affliction = 27; */\n        if (message.everlastingAffliction !== 0)\n            writer.tag(27, WireType.Varint).int32(message.everlastingAffliction);\n        /* bool haunt = 28; */\n        if (message.haunt !== false)\n            writer.tag(28, WireType.Varint).bool(message.haunt);\n        /* int32 improved_healthstone = 29; */\n        if (message.improvedHealthstone !== 0)\n            writer.tag(29, WireType.Varint).int32(message.improvedHealthstone);\n        /* int32 improved_imp = 30; */\n        if (message.improvedImp !== 0)\n            writer.tag(30, WireType.Varint).int32(message.improvedImp);\n        /* int32 demonic_embrace = 31; */\n        if (message.demonicEmbrace !== 0)\n            writer.tag(31, WireType.Varint).int32(message.demonicEmbrace);\n        /* int32 fel_synergy = 32; */\n        if (message.felSynergy !== 0)\n            writer.tag(32, WireType.Varint).int32(message.felSynergy);\n        /* int32 improved_health_funnel = 33; */\n        if (message.improvedHealthFunnel !== 0)\n            writer.tag(33, WireType.Varint).int32(message.improvedHealthFunnel);\n        /* int32 demonic_brutality = 34; */\n        if (message.demonicBrutality !== 0)\n            writer.tag(34, WireType.Varint).int32(message.demonicBrutality);\n        /* int32 fel_vitality = 35; */\n        if (message.felVitality !== 0)\n            writer.tag(35, WireType.Varint).int32(message.felVitality);\n        /* int32 improved_sayaad = 36; */\n        if (message.improvedSayaad !== 0)\n            writer.tag(36, WireType.Varint).int32(message.improvedSayaad);\n        /* bool soul_link = 37; */\n        if (message.soulLink !== false)\n            writer.tag(37, WireType.Varint).bool(message.soulLink);\n        /* bool fel_domination = 38; */\n        if (message.felDomination !== false)\n            writer.tag(38, WireType.Varint).bool(message.felDomination);\n        /* int32 demonic_aegis = 39; */\n        if (message.demonicAegis !== 0)\n            writer.tag(39, WireType.Varint).int32(message.demonicAegis);\n        /* int32 unholy_power = 40; */\n        if (message.unholyPower !== 0)\n            writer.tag(40, WireType.Varint).int32(message.unholyPower);\n        /* int32 master_summoner = 41; */\n        if (message.masterSummoner !== 0)\n            writer.tag(41, WireType.Varint).int32(message.masterSummoner);\n        /* bool mana_feed = 42; */\n        if (message.manaFeed !== false)\n            writer.tag(42, WireType.Varint).bool(message.manaFeed);\n        /* int32 master_conjuror = 43; */\n        if (message.masterConjuror !== 0)\n            writer.tag(43, WireType.Varint).int32(message.masterConjuror);\n        /* int32 master_demonologist = 44; */\n        if (message.masterDemonologist !== 0)\n            writer.tag(44, WireType.Varint).int32(message.masterDemonologist);\n        /* int32 molten_core = 45; */\n        if (message.moltenCore !== 0)\n            writer.tag(45, WireType.Varint).int32(message.moltenCore);\n        /* int32 demonic_resilience = 46; */\n        if (message.demonicResilience !== 0)\n            writer.tag(46, WireType.Varint).int32(message.demonicResilience);\n        /* bool demonic_empowerment = 47; */\n        if (message.demonicEmpowerment !== false)\n            writer.tag(47, WireType.Varint).bool(message.demonicEmpowerment);\n        /* int32 demonic_knowledge = 48; */\n        if (message.demonicKnowledge !== 0)\n            writer.tag(48, WireType.Varint).int32(message.demonicKnowledge);\n        /* int32 demonic_tactics = 49; */\n        if (message.demonicTactics !== 0)\n            writer.tag(49, WireType.Varint).int32(message.demonicTactics);\n        /* int32 decimation = 50; */\n        if (message.decimation !== 0)\n            writer.tag(50, WireType.Varint).int32(message.decimation);\n        /* int32 improved_demonic_tactics = 51; */\n        if (message.improvedDemonicTactics !== 0)\n            writer.tag(51, WireType.Varint).int32(message.improvedDemonicTactics);\n        /* bool summon_felguard = 52; */\n        if (message.summonFelguard !== false)\n            writer.tag(52, WireType.Varint).bool(message.summonFelguard);\n        /* int32 nemesis = 53; */\n        if (message.nemesis !== 0)\n            writer.tag(53, WireType.Varint).int32(message.nemesis);\n        /* int32 demonic_pact = 54; */\n        if (message.demonicPact !== 0)\n            writer.tag(54, WireType.Varint).int32(message.demonicPact);\n        /* bool metamorphosis = 55; */\n        if (message.metamorphosis !== false)\n            writer.tag(55, WireType.Varint).bool(message.metamorphosis);\n        /* int32 improved_shadow_bolt = 56; */\n        if (message.improvedShadowBolt !== 0)\n            writer.tag(56, WireType.Varint).int32(message.improvedShadowBolt);\n        /* int32 bane = 57; */\n        if (message.bane !== 0)\n            writer.tag(57, WireType.Varint).int32(message.bane);\n        /* int32 aftermath = 58; */\n        if (message.aftermath !== 0)\n            writer.tag(58, WireType.Varint).int32(message.aftermath);\n        /* int32 molten_skin = 59; */\n        if (message.moltenSkin !== 0)\n            writer.tag(59, WireType.Varint).int32(message.moltenSkin);\n        /* int32 cataclysm = 60; */\n        if (message.cataclysm !== 0)\n            writer.tag(60, WireType.Varint).int32(message.cataclysm);\n        /* int32 demonic_power = 61; */\n        if (message.demonicPower !== 0)\n            writer.tag(61, WireType.Varint).int32(message.demonicPower);\n        /* bool shadowburn = 62; */\n        if (message.shadowburn !== false)\n            writer.tag(62, WireType.Varint).bool(message.shadowburn);\n        /* int32 ruin = 63; */\n        if (message.ruin !== 0)\n            writer.tag(63, WireType.Varint).int32(message.ruin);\n        /* int32 intensity = 64; */\n        if (message.intensity !== 0)\n            writer.tag(64, WireType.Varint).int32(message.intensity);\n        /* int32 destructive_reach = 65; */\n        if (message.destructiveReach !== 0)\n            writer.tag(65, WireType.Varint).int32(message.destructiveReach);\n        /* int32 improved_searing_pain = 66; */\n        if (message.improvedSearingPain !== 0)\n            writer.tag(66, WireType.Varint).int32(message.improvedSearingPain);\n        /* int32 backlash = 67; */\n        if (message.backlash !== 0)\n            writer.tag(67, WireType.Varint).int32(message.backlash);\n        /* int32 improved_immolate = 68; */\n        if (message.improvedImmolate !== 0)\n            writer.tag(68, WireType.Varint).int32(message.improvedImmolate);\n        /* bool devastation = 69; */\n        if (message.devastation !== false)\n            writer.tag(69, WireType.Varint).bool(message.devastation);\n        /* int32 nether_protection = 70; */\n        if (message.netherProtection !== 0)\n            writer.tag(70, WireType.Varint).int32(message.netherProtection);\n        /* int32 emberstorm = 71; */\n        if (message.emberstorm !== 0)\n            writer.tag(71, WireType.Varint).int32(message.emberstorm);\n        /* bool conflagrate = 72; */\n        if (message.conflagrate !== false)\n            writer.tag(72, WireType.Varint).bool(message.conflagrate);\n        /* int32 soul_leech = 73; */\n        if (message.soulLeech !== 0)\n            writer.tag(73, WireType.Varint).int32(message.soulLeech);\n        /* int32 pyroclasm = 74; */\n        if (message.pyroclasm !== 0)\n            writer.tag(74, WireType.Varint).int32(message.pyroclasm);\n        /* int32 shadow_and_flame = 75; */\n        if (message.shadowAndFlame !== 0)\n            writer.tag(75, WireType.Varint).int32(message.shadowAndFlame);\n        /* int32 improved_soul_leech = 76; */\n        if (message.improvedSoulLeech !== 0)\n            writer.tag(76, WireType.Varint).int32(message.improvedSoulLeech);\n        /* int32 backdraft = 77; */\n        if (message.backdraft !== 0)\n            writer.tag(77, WireType.Varint).int32(message.backdraft);\n        /* bool shadowfury = 78; */\n        if (message.shadowfury !== false)\n            writer.tag(78, WireType.Varint).bool(message.shadowfury);\n        /* int32 empowered_imp = 79; */\n        if (message.empoweredImp !== 0)\n            writer.tag(79, WireType.Varint).int32(message.empoweredImp);\n        /* int32 fire_and_brimstone = 80; */\n        if (message.fireAndBrimstone !== 0)\n            writer.tag(80, WireType.Varint).int32(message.fireAndBrimstone);\n        /* bool chaos_bolt = 81; */\n        if (message.chaosBolt !== false)\n            writer.tag(81, WireType.Varint).bool(message.chaosBolt);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.WarlockTalents\n */\nexport const WarlockTalents = new WarlockTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warlock$Type extends MessageType<Warlock> {\n    constructor() {\n        super(\"proto.Warlock\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Warlock_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => WarlockTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Warlock_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Warlock>): Warlock {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warlock>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warlock): Warlock {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Warlock.Rotation rotation */ 1:\n                    message.rotation = Warlock_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.WarlockTalents talents */ 2:\n                    message.talents = WarlockTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.Warlock.Options options */ 3:\n                    message.options = Warlock_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Warlock.Rotation rotation = 1; */\n        if (message.rotation)\n            Warlock_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.WarlockTalents talents = 2; */\n        if (message.talents)\n            WarlockTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Warlock.Options options = 3; */\n        if (message.options)\n            Warlock_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warlock\n */\nexport const Warlock = new Warlock$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warlock_Rotation$Type extends MessageType<Warlock_Rotation> {\n    constructor() {\n        super(\"proto.Warlock.Rotation\", [\n            { no: 1, name: \"preset\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.Preset\", Warlock_Rotation_Preset] },\n            { no: 2, name: \"curse\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.Curse\", Warlock_Rotation_Curse] },\n            { no: 3, name: \"primary_spell\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.PrimarySpell\", Warlock_Rotation_PrimarySpell] },\n            { no: 4, name: \"secondary_dot\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.SecondaryDot\", Warlock_Rotation_SecondaryDot] },\n            { no: 5, name: \"corruption\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"detonate_seed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"spec_spell\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.SpecSpell\", Warlock_Rotation_SpecSpell] },\n            { no: 8, name: \"type\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.Type\", Warlock_Rotation_Type] }\n        ]);\n    }\n    create(value?: PartialMessage<Warlock_Rotation>): Warlock_Rotation {\n        const message = { preset: 0, curse: 0, primarySpell: 0, secondaryDot: 0, corruption: false, detonateSeed: false, specSpell: 0, type: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warlock_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warlock_Rotation): Warlock_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Warlock.Rotation.Preset preset */ 1:\n                    message.preset = reader.int32();\n                    break;\n                case /* proto.Warlock.Rotation.Curse curse */ 2:\n                    message.curse = reader.int32();\n                    break;\n                case /* proto.Warlock.Rotation.PrimarySpell primary_spell */ 3:\n                    message.primarySpell = reader.int32();\n                    break;\n                case /* proto.Warlock.Rotation.SecondaryDot secondary_dot */ 4:\n                    message.secondaryDot = reader.int32();\n                    break;\n                case /* bool corruption */ 5:\n                    message.corruption = reader.bool();\n                    break;\n                case /* bool detonate_seed */ 6:\n                    message.detonateSeed = reader.bool();\n                    break;\n                case /* proto.Warlock.Rotation.SpecSpell spec_spell */ 7:\n                    message.specSpell = reader.int32();\n                    break;\n                case /* proto.Warlock.Rotation.Type type */ 8:\n                    message.type = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warlock_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Warlock.Rotation.Preset preset = 1; */\n        if (message.preset !== 0)\n            writer.tag(1, WireType.Varint).int32(message.preset);\n        /* proto.Warlock.Rotation.Curse curse = 2; */\n        if (message.curse !== 0)\n            writer.tag(2, WireType.Varint).int32(message.curse);\n        /* proto.Warlock.Rotation.PrimarySpell primary_spell = 3; */\n        if (message.primarySpell !== 0)\n            writer.tag(3, WireType.Varint).int32(message.primarySpell);\n        /* proto.Warlock.Rotation.SecondaryDot secondary_dot = 4; */\n        if (message.secondaryDot !== 0)\n            writer.tag(4, WireType.Varint).int32(message.secondaryDot);\n        /* bool corruption = 5; */\n        if (message.corruption !== false)\n            writer.tag(5, WireType.Varint).bool(message.corruption);\n        /* bool detonate_seed = 6; */\n        if (message.detonateSeed !== false)\n            writer.tag(6, WireType.Varint).bool(message.detonateSeed);\n        /* proto.Warlock.Rotation.SpecSpell spec_spell = 7; */\n        if (message.specSpell !== 0)\n            writer.tag(7, WireType.Varint).int32(message.specSpell);\n        /* proto.Warlock.Rotation.Type type = 8; */\n        if (message.type !== 0)\n            writer.tag(8, WireType.Varint).int32(message.type);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warlock.Rotation\n */\nexport const Warlock_Rotation = new Warlock_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warlock_Options$Type extends MessageType<Warlock_Options> {\n    constructor() {\n        super(\"proto.Warlock.Options\", [\n            { no: 1, name: \"armor\", kind: \"enum\", T: () => [\"proto.Warlock.Options.Armor\", Warlock_Options_Armor] },\n            { no: 2, name: \"summon\", kind: \"enum\", T: () => [\"proto.Warlock.Options.Summon\", Warlock_Options_Summon] },\n            { no: 3, name: \"weaponImbue\", kind: \"enum\", T: () => [\"proto.Warlock.Options.WeaponImbue\", Warlock_Options_WeaponImbue] }\n        ]);\n    }\n    create(value?: PartialMessage<Warlock_Options>): Warlock_Options {\n        const message = { armor: 0, summon: 0, weaponImbue: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warlock_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warlock_Options): Warlock_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Warlock.Options.Armor armor */ 1:\n                    message.armor = reader.int32();\n                    break;\n                case /* proto.Warlock.Options.Summon summon */ 2:\n                    message.summon = reader.int32();\n                    break;\n                case /* proto.Warlock.Options.WeaponImbue weaponImbue */ 3:\n                    message.weaponImbue = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warlock_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Warlock.Options.Armor armor = 1; */\n        if (message.armor !== 0)\n            writer.tag(1, WireType.Varint).int32(message.armor);\n        /* proto.Warlock.Options.Summon summon = 2; */\n        if (message.summon !== 0)\n            writer.tag(2, WireType.Varint).int32(message.summon);\n        /* proto.Warlock.Options.WeaponImbue weaponImbue = 3; */\n        if (message.weaponImbue !== 0)\n            writer.tag(3, WireType.Varint).int32(message.weaponImbue);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warlock.Options\n */\nexport const Warlock_Options = new Warlock_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"shaman.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { CustomRotation } from \"./common\";\n/**\n * @generated from protobuf message proto.ShamanTalents\n */\nexport interface ShamanTalents {\n    /**\n     * Elemental\n     *\n     * @generated from protobuf field: int32 convection = 1;\n     */\n    convection: number;\n    /**\n     * @generated from protobuf field: int32 concussion = 2;\n     */\n    concussion: number;\n    /**\n     * @generated from protobuf field: int32 call_of_flame = 3;\n     */\n    callOfFlame: number;\n    /**\n     * @generated from protobuf field: int32 elemental_warding = 4;\n     */\n    elementalWarding: number;\n    /**\n     * @generated from protobuf field: int32 elemental_devastation = 5;\n     */\n    elementalDevastation: number;\n    /**\n     * @generated from protobuf field: int32 reverberation = 6;\n     */\n    reverberation: number;\n    /**\n     * @generated from protobuf field: bool elemental_focus = 7;\n     */\n    elementalFocus: boolean;\n    /**\n     * @generated from protobuf field: int32 elemental_fury = 8;\n     */\n    elementalFury: number;\n    /**\n     * @generated from protobuf field: int32 improved_fire_nova = 9;\n     */\n    improvedFireNova: number;\n    /**\n     * @generated from protobuf field: int32 eye_of_the_storm = 10;\n     */\n    eyeOfTheStorm: number;\n    /**\n     * @generated from protobuf field: int32 elemental_reach = 11;\n     */\n    elementalReach: number;\n    /**\n     * @generated from protobuf field: bool call_of_thunder = 12;\n     */\n    callOfThunder: boolean;\n    /**\n     * @generated from protobuf field: int32 unrelenting_storm = 13;\n     */\n    unrelentingStorm: number;\n    /**\n     * @generated from protobuf field: int32 elemental_precision = 14;\n     */\n    elementalPrecision: number;\n    /**\n     * @generated from protobuf field: int32 lightning_mastery = 15;\n     */\n    lightningMastery: number;\n    /**\n     * @generated from protobuf field: bool elemental_mastery = 16;\n     */\n    elementalMastery: boolean;\n    /**\n     * @generated from protobuf field: int32 storm_earth_and_fire = 17;\n     */\n    stormEarthAndFire: number;\n    /**\n     * @generated from protobuf field: int32 booming_echoes = 18;\n     */\n    boomingEchoes: number;\n    /**\n     * @generated from protobuf field: int32 elemental_oath = 19;\n     */\n    elementalOath: number;\n    /**\n     * @generated from protobuf field: int32 lightning_overload = 20;\n     */\n    lightningOverload: number;\n    /**\n     * @generated from protobuf field: int32 astral_shift = 21;\n     */\n    astralShift: number;\n    /**\n     * @generated from protobuf field: bool totem_of_wrath = 22;\n     */\n    totemOfWrath: boolean;\n    /**\n     * @generated from protobuf field: int32 lava_flows = 23;\n     */\n    lavaFlows: number;\n    /**\n     * @generated from protobuf field: int32 shamanism = 24;\n     */\n    shamanism: number;\n    /**\n     * @generated from protobuf field: bool thunderstorm = 25;\n     */\n    thunderstorm: boolean;\n    /**\n     * Enhancement\n     *\n     * @generated from protobuf field: int32 enhancing_totems = 26;\n     */\n    enhancingTotems: number;\n    /**\n     * @generated from protobuf field: int32 earths_grasp = 27;\n     */\n    earthsGrasp: number;\n    /**\n     * @generated from protobuf field: int32 ancestral_knowledge = 28;\n     */\n    ancestralKnowledge: number;\n    /**\n     * @generated from protobuf field: int32 guardian_totems = 29;\n     */\n    guardianTotems: number;\n    /**\n     * @generated from protobuf field: int32 thundering_strikes = 30;\n     */\n    thunderingStrikes: number;\n    /**\n     * @generated from protobuf field: int32 improved_ghost_wolf = 31;\n     */\n    improvedGhostWolf: number;\n    /**\n     * @generated from protobuf field: int32 improved_shields = 32;\n     */\n    improvedShields: number;\n    /**\n     * @generated from protobuf field: int32 elemental_weapons = 33;\n     */\n    elementalWeapons: number;\n    /**\n     * @generated from protobuf field: bool shamanistic_focus = 34;\n     */\n    shamanisticFocus: boolean;\n    /**\n     * @generated from protobuf field: int32 anticipation = 35;\n     */\n    anticipation: number;\n    /**\n     * @generated from protobuf field: int32 flurry = 36;\n     */\n    flurry: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 37;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 improved_windfury_totem = 38;\n     */\n    improvedWindfuryTotem: number;\n    /**\n     * @generated from protobuf field: bool spirit_weapons = 39;\n     */\n    spiritWeapons: boolean;\n    /**\n     * @generated from protobuf field: int32 mental_dexterity = 40;\n     */\n    mentalDexterity: number;\n    /**\n     * @generated from protobuf field: int32 unleashed_rage = 41;\n     */\n    unleashedRage: number;\n    /**\n     * @generated from protobuf field: int32 weapon_mastery = 42;\n     */\n    weaponMastery: number;\n    /**\n     * @generated from protobuf field: int32 frozen_power = 43;\n     */\n    frozenPower: number;\n    /**\n     * @generated from protobuf field: int32 dual_wield_specialization = 44;\n     */\n    dualWieldSpecialization: number;\n    /**\n     * @generated from protobuf field: bool dual_wield = 45;\n     */\n    dualWield: boolean;\n    /**\n     * @generated from protobuf field: bool stormstrike = 46;\n     */\n    stormstrike: boolean;\n    /**\n     * @generated from protobuf field: int32 static_shock = 47;\n     */\n    staticShock: number;\n    /**\n     * @generated from protobuf field: bool lava_lash = 48;\n     */\n    lavaLash: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_stormstrike = 49;\n     */\n    improvedStormstrike: number;\n    /**\n     * @generated from protobuf field: int32 mental_quickness = 50;\n     */\n    mentalQuickness: number;\n    /**\n     * @generated from protobuf field: bool shamanistic_rage = 51;\n     */\n    shamanisticRage: boolean;\n    /**\n     * @generated from protobuf field: int32 earthen_power = 52;\n     */\n    earthenPower: number;\n    /**\n     * @generated from protobuf field: int32 maelstrom_weapon = 53;\n     */\n    maelstromWeapon: number;\n    /**\n     * @generated from protobuf field: bool feral_spirit = 54;\n     */\n    feralSpirit: boolean;\n    /**\n     * Restoration\n     *\n     * @generated from protobuf field: int32 improved_healing_wave = 55;\n     */\n    improvedHealingWave: number;\n    /**\n     * @generated from protobuf field: int32 totemic_focus = 56;\n     */\n    totemicFocus: number;\n    /**\n     * @generated from protobuf field: int32 improved_reincarnation = 57;\n     */\n    improvedReincarnation: number;\n    /**\n     * @generated from protobuf field: int32 healing_grace = 58;\n     */\n    healingGrace: number;\n    /**\n     * @generated from protobuf field: int32 tidal_focus = 59;\n     */\n    tidalFocus: number;\n    /**\n     * @generated from protobuf field: int32 improved_water_shield = 60;\n     */\n    improvedWaterShield: number;\n    /**\n     * @generated from protobuf field: int32 healing_focus = 61;\n     */\n    healingFocus: number;\n    /**\n     * @generated from protobuf field: bool tidal_force = 62;\n     */\n    tidalForce: boolean;\n    /**\n     * @generated from protobuf field: int32 ancestral_healing = 63;\n     */\n    ancestralHealing: number;\n    /**\n     * @generated from protobuf field: int32 restorative_totems = 64;\n     */\n    restorativeTotems: number;\n    /**\n     * @generated from protobuf field: int32 tidal_mastery = 65;\n     */\n    tidalMastery: number;\n    /**\n     * @generated from protobuf field: int32 healing_way = 66;\n     */\n    healingWay: number;\n    /**\n     * @generated from protobuf field: bool natures_swiftness = 67;\n     */\n    naturesSwiftness: boolean;\n    /**\n     * @generated from protobuf field: int32 focused_mind = 68;\n     */\n    focusedMind: number;\n    /**\n     * @generated from protobuf field: int32 purification = 69;\n     */\n    purification: number;\n    /**\n     * @generated from protobuf field: int32 natures_guardian = 70;\n     */\n    naturesGuardian: number;\n    /**\n     * @generated from protobuf field: bool mana_tide_totem = 71;\n     */\n    manaTideTotem: boolean;\n    /**\n     * @generated from protobuf field: bool cleanse_spirit = 72;\n     */\n    cleanseSpirit: boolean;\n    /**\n     * @generated from protobuf field: int32 blessing_of_the_eternals = 73;\n     */\n    blessingOfTheEternals: number;\n    /**\n     * @generated from protobuf field: int32 improved_chain_heal = 74;\n     */\n    improvedChainHeal: number;\n    /**\n     * @generated from protobuf field: int32 natures_blessing = 75;\n     */\n    naturesBlessing: number;\n    /**\n     * @generated from protobuf field: int32 ancestral_awakening = 76;\n     */\n    ancestralAwakening: number;\n    /**\n     * @generated from protobuf field: bool earth_shield = 77;\n     */\n    earthShield: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_earth_shield = 78;\n     */\n    improvedEarthShield: number;\n    /**\n     * @generated from protobuf field: int32 tidal_waves = 79;\n     */\n    tidalWaves: number;\n    /**\n     * @generated from protobuf field: bool riptide = 80;\n     */\n    riptide: boolean;\n}\n/**\n * @generated from protobuf message proto.ShamanTotems\n */\nexport interface ShamanTotems {\n    /**\n     * @generated from protobuf field: proto.EarthTotem earth = 1;\n     */\n    earth: EarthTotem;\n    /**\n     * @generated from protobuf field: proto.AirTotem air = 2;\n     */\n    air: AirTotem;\n    /**\n     * @generated from protobuf field: proto.FireTotem fire = 3;\n     */\n    fire: FireTotem;\n    /**\n     * @generated from protobuf field: proto.WaterTotem water = 4;\n     */\n    water: WaterTotem;\n    /**\n     * If set, will use mana tide when appropriate.\n     *\n     * @generated from protobuf field: bool use_mana_tide = 5;\n     */\n    useManaTide: boolean;\n    /**\n     * If set, will use fire elemental totem at the start and revert to regular\n     * fire totems when it expires.\n     *\n     * @generated from protobuf field: bool use_fire_elemental = 6;\n     */\n    useFireElemental: boolean;\n    /**\n     * If set, will revert to regular fire totems when fire elemental goes OOM,\n     * instead of waiting the full 2 minutes.\n     *\n     * @generated from protobuf field: bool recall_fire_elemental_on_oom = 7;\n     */\n    recallFireElementalOnOom: boolean;\n    /**\n     * If set, any time a 2-minute totem is about to expire, will recall and\n     * replace all totems.\n     *\n     * @generated from protobuf field: bool recall_totems = 8;\n     */\n    recallTotems: boolean;\n}\n/**\n * @generated from protobuf message proto.ElementalShaman\n */\nexport interface ElementalShaman {\n    /**\n     * @generated from protobuf field: proto.ElementalShaman.Rotation rotation = 1;\n     */\n    rotation?: ElementalShaman_Rotation;\n    /**\n     * @generated from protobuf field: proto.ShamanTalents talents = 2;\n     */\n    talents?: ShamanTalents;\n    /**\n     * @generated from protobuf field: proto.ElementalShaman.Options options = 3;\n     */\n    options?: ElementalShaman_Options;\n}\n/**\n * @generated from protobuf message proto.ElementalShaman.Rotation\n */\nexport interface ElementalShaman_Rotation {\n    /**\n     * @generated from protobuf field: proto.ShamanTotems totems = 3;\n     */\n    totems?: ShamanTotems;\n    /**\n     * @generated from protobuf field: proto.ElementalShaman.Rotation.RotationType type = 1;\n     */\n    type: ElementalShaman_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: bool in_thunderstorm_range = 2;\n     */\n    inThunderstormRange: boolean;\n    /**\n     * These options are used for the manual rotation.\n     *\n     * @generated from protobuf field: bool use_fire_nova = 4;\n     */\n    useFireNova: boolean;\n    /**\n     * @generated from protobuf field: double fn_min_mana_per = 9;\n     */\n    fnMinManaPer: number;\n    /**\n     * @generated from protobuf field: bool use_chain_lightning = 5;\n     */\n    useChainLightning: boolean;\n    /**\n     * @generated from protobuf field: bool use_cl_only_gap = 11;\n     */\n    useClOnlyGap: boolean;\n    /**\n     * @generated from protobuf field: double cl_min_mana_per = 10;\n     */\n    clMinManaPer: number;\n    /**\n     * @generated from protobuf field: bool overwrite_flameshock = 6;\n     */\n    overwriteFlameshock: boolean;\n    /**\n     * @generated from protobuf field: bool always_crit_lvb = 7;\n     */\n    alwaysCritLvb: boolean;\n    /**\n     * @generated from protobuf field: bool use_thunderstorm = 8;\n     */\n    useThunderstorm: boolean;\n}\n/**\n * @generated from protobuf enum proto.ElementalShaman.Rotation.RotationType\n */\nexport enum ElementalShaman_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Adaptive = 1;\n     */\n    Adaptive = 1,\n    /**\n     * @generated from protobuf enum value: Manual = 2;\n     */\n    Manual = 2\n}\n/**\n * @generated from protobuf message proto.ElementalShaman.Options\n */\nexport interface ElementalShaman_Options {\n    /**\n     * @generated from protobuf field: proto.ShamanShield shield = 1;\n     */\n    shield: ShamanShield;\n    /**\n     * @generated from protobuf field: bool bloodlust = 2;\n     */\n    bloodlust: boolean;\n}\n/**\n * @generated from protobuf message proto.EnhancementShaman\n */\nexport interface EnhancementShaman {\n    /**\n     * @generated from protobuf field: proto.EnhancementShaman.Rotation rotation = 1;\n     */\n    rotation?: EnhancementShaman_Rotation;\n    /**\n     * @generated from protobuf field: proto.ShamanTalents talents = 2;\n     */\n    talents?: ShamanTalents;\n    /**\n     * @generated from protobuf field: proto.EnhancementShaman.Options options = 3;\n     */\n    options?: EnhancementShaman_Options;\n}\n/**\n * @generated from protobuf message proto.EnhancementShaman.Rotation\n */\nexport interface EnhancementShaman_Rotation {\n    /**\n     * @generated from protobuf field: proto.ShamanTotems totems = 1;\n     */\n    totems?: ShamanTotems;\n    /**\n     * @generated from protobuf field: proto.EnhancementShaman.Rotation.RotationType rotation_type = 2;\n     */\n    rotationType: EnhancementShaman_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 3;\n     */\n    customRotation?: CustomRotation;\n    /**\n     * weaving options\n     *\n     * @generated from protobuf field: bool lavaburst_weave = 4;\n     */\n    lavaburstWeave: boolean;\n    /**\n     * @generated from protobuf field: bool lightningbolt_weave = 5;\n     */\n    lightningboltWeave: boolean;\n    /**\n     * @generated from protobuf field: int32 maelstromweapon_min_stack = 6;\n     */\n    maelstromweaponMinStack: number;\n    /**\n     * @generated from protobuf field: double weave_reaction_time = 7;\n     */\n    weaveReactionTime: number;\n    /**\n     * other general rotation config options\n     *\n     * @generated from protobuf field: double firenova_mana_threshold = 8;\n     */\n    firenovaManaThreshold: number;\n    /**\n     * @generated from protobuf field: double shamanistic_rage_mana_threshold = 9;\n     */\n    shamanisticRageManaThreshold: number;\n    /**\n     * @generated from protobuf field: bool weave_flame_shock = 10;\n     */\n    weaveFlameShock: boolean;\n    /**\n     * @generated from protobuf field: proto.EnhancementShaman.Rotation.PrimaryShock primary_shock = 11;\n     */\n    primaryShock: EnhancementShaman_Rotation_PrimaryShock;\n    /**\n     * @generated from protobuf field: int32 flame_shock_clip_ticks = 12;\n     */\n    flameShockClipTicks: number;\n}\n/**\n * @generated from protobuf enum proto.EnhancementShaman.Rotation.RotationType\n */\nexport enum EnhancementShaman_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Priority = 1;\n     */\n    Priority = 1,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2\n}\n/**\n * TODO: add spells here for custom rotation (if nessecary?)\n *\n * @generated from protobuf enum proto.EnhancementShaman.Rotation.CustomRotationSpell\n */\nexport enum EnhancementShaman_Rotation_CustomRotationSpell {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: Stormstrike = 1;\n     */\n    Stormstrike = 1,\n    /**\n     * find a way to differentiate tooltips for this, lightning bolt weaves, and downranked flametongue\n     *\n     * @generated from protobuf enum value: StormstrikeDebuffMissing = 2;\n     */\n    StormstrikeDebuffMissing = 2,\n    /**\n     * @generated from protobuf enum value: LightningBolt = 3;\n     */\n    LightningBolt = 3,\n    /**\n     * @generated from protobuf enum value: LightningBoltWeave = 4;\n     */\n    LightningBoltWeave = 4,\n    /**\n     * @generated from protobuf enum value: FlameShock = 5;\n     */\n    FlameShock = 5,\n    /**\n     * @generated from protobuf enum value: EarthShock = 6;\n     */\n    EarthShock = 6,\n    /**\n     * @generated from protobuf enum value: LavaLash = 7;\n     */\n    LavaLash = 7,\n    /**\n     * @generated from protobuf enum value: LavaBurst = 8;\n     */\n    LavaBurst = 8,\n    /**\n     * @generated from protobuf enum value: LightningShield = 9;\n     */\n    LightningShield = 9,\n    /**\n     * @generated from protobuf enum value: FireNova = 10;\n     */\n    FireNova = 10,\n    /**\n     * @generated from protobuf enum value: ChainLightning = 11;\n     */\n    ChainLightning = 11,\n    /**\n     * @generated from protobuf enum value: FrostShock = 12;\n     */\n    FrostShock = 12,\n    /**\n     * @generated from protobuf enum value: MagmaTotem = 13;\n     */\n    MagmaTotem = 13\n}\n/**\n * @generated from protobuf enum proto.EnhancementShaman.Rotation.PrimaryShock\n */\nexport enum EnhancementShaman_Rotation_PrimaryShock {\n    /**\n     * @generated from protobuf enum value: None = 0;\n     */\n    None = 0,\n    /**\n     * @generated from protobuf enum value: Earth = 1;\n     */\n    Earth = 1,\n    /**\n     * @generated from protobuf enum value: Frost = 2;\n     */\n    Frost = 2\n}\n/**\n * @generated from protobuf message proto.EnhancementShaman.Options\n */\nexport interface EnhancementShaman_Options {\n    /**\n     * @generated from protobuf field: proto.ShamanShield shield = 1;\n     */\n    shield: ShamanShield;\n    /**\n     * @generated from protobuf field: bool bloodlust = 2;\n     */\n    bloodlust: boolean;\n    /**\n     * @generated from protobuf field: proto.ShamanSyncType sync_type = 3;\n     */\n    syncType: ShamanSyncType;\n    /**\n     * @generated from protobuf field: proto.ShamanImbue imbue_mh = 4;\n     */\n    imbueMh: ShamanImbue;\n    /**\n     * @generated from protobuf field: proto.ShamanImbue imbue_oh = 5;\n     */\n    imbueOh: ShamanImbue;\n}\n/**\n * @generated from protobuf enum proto.ShamanMajorGlyph\n */\nexport enum ShamanMajorGlyph {\n    /**\n     * @generated from protobuf enum value: ShamanMajorGlyphNone = 0;\n     */\n    ShamanMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfChainHeal = 41517;\n     */\n    GlyphOfChainHeal = 41517,\n    /**\n     * @generated from protobuf enum value: GlyphOfChainLightning = 41518;\n     */\n    GlyphOfChainLightning = 41518,\n    /**\n     * @generated from protobuf enum value: GlyphOfEarthShield = 45775;\n     */\n    GlyphOfEarthShield = 45775,\n    /**\n     * @generated from protobuf enum value: GlyphOfEarthlivingWeapon = 41527;\n     */\n    GlyphOfEarthlivingWeapon = 41527,\n    /**\n     * @generated from protobuf enum value: GlyphOfElementalMastery = 41552;\n     */\n    GlyphOfElementalMastery = 41552,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeralSpirit = 45771;\n     */\n    GlyphOfFeralSpirit = 45771,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireElementalTotem = 41529;\n     */\n    GlyphOfFireElementalTotem = 41529,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireNova = 41530;\n     */\n    GlyphOfFireNova = 41530,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlameShock = 41531;\n     */\n    GlyphOfFlameShock = 41531,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlametongueWeapon = 41532;\n     */\n    GlyphOfFlametongueWeapon = 41532,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostShock = 41547;\n     */\n    GlyphOfFrostShock = 41547,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealingStreamTotem = 41533;\n     */\n    GlyphOfHealingStreamTotem = 41533,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealingWave = 41534;\n     */\n    GlyphOfHealingWave = 41534,\n    /**\n     * @generated from protobuf enum value: GlyphOfHex = 45777;\n     */\n    GlyphOfHex = 45777,\n    /**\n     * @generated from protobuf enum value: GlyphOfLava = 41524;\n     */\n    GlyphOfLava = 41524,\n    /**\n     * @generated from protobuf enum value: GlyphOfLavaLash = 41540;\n     */\n    GlyphOfLavaLash = 41540,\n    /**\n     * @generated from protobuf enum value: GlyphOfLesserHealingWave = 41535;\n     */\n    GlyphOfLesserHealingWave = 41535,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightningBolt = 41536;\n     */\n    GlyphOfLightningBolt = 41536,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightningShield = 41537;\n     */\n    GlyphOfLightningShield = 41537,\n    /**\n     * @generated from protobuf enum value: GlyphOfManaTide = 41538;\n     */\n    GlyphOfManaTide = 41538,\n    /**\n     * @generated from protobuf enum value: GlyphOfRiptide = 45772;\n     */\n    GlyphOfRiptide = 45772,\n    /**\n     * @generated from protobuf enum value: GlyphOfShocking = 41526;\n     */\n    GlyphOfShocking = 41526,\n    /**\n     * @generated from protobuf enum value: GlyphOfStoneclawTotem = 45778;\n     */\n    GlyphOfStoneclawTotem = 45778,\n    /**\n     * @generated from protobuf enum value: GlyphOfStormstrike = 41539;\n     */\n    GlyphOfStormstrike = 41539,\n    /**\n     * @generated from protobuf enum value: GlyphOfThunder = 45770;\n     */\n    GlyphOfThunder = 45770,\n    /**\n     * @generated from protobuf enum value: GlyphOfTotemOfWrath = 45776;\n     */\n    GlyphOfTotemOfWrath = 45776,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterMastery = 41541;\n     */\n    GlyphOfWaterMastery = 41541,\n    /**\n     * @generated from protobuf enum value: GlyphOfWindfuryWeapon = 41542;\n     */\n    GlyphOfWindfuryWeapon = 41542\n}\n/**\n * @generated from protobuf enum proto.ShamanMinorGlyph\n */\nexport enum ShamanMinorGlyph {\n    /**\n     * @generated from protobuf enum value: ShamanMinorGlyphNone = 0;\n     */\n    ShamanMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAstralRecall = 43381;\n     */\n    GlyphOfAstralRecall = 43381,\n    /**\n     * @generated from protobuf enum value: GlyphOfGhostWolf = 43725;\n     */\n    GlyphOfGhostWolf = 43725,\n    /**\n     * @generated from protobuf enum value: GlyphOfRenewedLife = 43385;\n     */\n    GlyphOfRenewedLife = 43385,\n    /**\n     * @generated from protobuf enum value: GlyphOfThunderstorm = 44923;\n     */\n    GlyphOfThunderstorm = 44923,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterBreathing = 43344;\n     */\n    GlyphOfWaterBreathing = 43344,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterShield = 43386;\n     */\n    GlyphOfWaterShield = 43386,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterWalking = 43388;\n     */\n    GlyphOfWaterWalking = 43388\n}\n/**\n * @generated from protobuf enum proto.EarthTotem\n */\nexport enum EarthTotem {\n    /**\n     * @generated from protobuf enum value: NoEarthTotem = 0;\n     */\n    NoEarthTotem = 0,\n    /**\n     * @generated from protobuf enum value: StrengthOfEarthTotem = 1;\n     */\n    StrengthOfEarthTotem = 1,\n    /**\n     * @generated from protobuf enum value: TremorTotem = 2;\n     */\n    TremorTotem = 2\n}\n/**\n * @generated from protobuf enum proto.AirTotem\n */\nexport enum AirTotem {\n    /**\n     * @generated from protobuf enum value: NoAirTotem = 0;\n     */\n    NoAirTotem = 0,\n    /**\n     * @generated from protobuf enum value: WindfuryTotem = 2;\n     */\n    WindfuryTotem = 2,\n    /**\n     * @generated from protobuf enum value: WrathOfAirTotem = 3;\n     */\n    WrathOfAirTotem = 3\n}\n/**\n * @generated from protobuf enum proto.FireTotem\n */\nexport enum FireTotem {\n    /**\n     * @generated from protobuf enum value: NoFireTotem = 0;\n     */\n    NoFireTotem = 0,\n    /**\n     * @generated from protobuf enum value: MagmaTotem = 1;\n     */\n    MagmaTotem = 1,\n    /**\n     * @generated from protobuf enum value: SearingTotem = 2;\n     */\n    SearingTotem = 2,\n    /**\n     * @generated from protobuf enum value: TotemOfWrath = 3;\n     */\n    TotemOfWrath = 3,\n    /**\n     * @generated from protobuf enum value: FlametongueTotem = 4;\n     */\n    FlametongueTotem = 4\n}\n/**\n * @generated from protobuf enum proto.WaterTotem\n */\nexport enum WaterTotem {\n    /**\n     * @generated from protobuf enum value: NoWaterTotem = 0;\n     */\n    NoWaterTotem = 0,\n    /**\n     * @generated from protobuf enum value: ManaSpringTotem = 1;\n     */\n    ManaSpringTotem = 1\n}\n/**\n * @generated from protobuf enum proto.ShamanShield\n */\nexport enum ShamanShield {\n    /**\n     * @generated from protobuf enum value: NoShield = 0;\n     */\n    NoShield = 0,\n    /**\n     * @generated from protobuf enum value: WaterShield = 1;\n     */\n    WaterShield = 1,\n    /**\n     * @generated from protobuf enum value: LightningShield = 2;\n     */\n    LightningShield = 2\n}\n/**\n * @generated from protobuf enum proto.ShamanImbue\n */\nexport enum ShamanImbue {\n    /**\n     * @generated from protobuf enum value: NoImbue = 0;\n     */\n    NoImbue = 0,\n    /**\n     * @generated from protobuf enum value: WindfuryWeapon = 1;\n     */\n    WindfuryWeapon = 1,\n    /**\n     * @generated from protobuf enum value: FlametongueWeapon = 2;\n     */\n    FlametongueWeapon = 2,\n    /**\n     * @generated from protobuf enum value: FlametongueWeaponDownrank = 3;\n     */\n    FlametongueWeaponDownrank = 3,\n    /**\n     * @generated from protobuf enum value: FrostbrandWeapon = 4;\n     */\n    FrostbrandWeapon = 4\n}\n/**\n * @generated from protobuf enum proto.ShamanSyncType\n */\nexport enum ShamanSyncType {\n    /**\n     * @generated from protobuf enum value: NoSync = 0;\n     */\n    NoSync = 0,\n    /**\n     * @generated from protobuf enum value: SyncMainhandOffhandSwings = 1;\n     */\n    SyncMainhandOffhandSwings = 1,\n    /**\n     * @generated from protobuf enum value: DelayOffhandSwings = 2;\n     */\n    DelayOffhandSwings = 2\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShamanTalents$Type extends MessageType<ShamanTalents> {\n    constructor() {\n        super(\"proto.ShamanTalents\", [\n            { no: 1, name: \"convection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"concussion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"call_of_flame\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"elemental_warding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"elemental_devastation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"reverberation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"elemental_focus\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"elemental_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"improved_fire_nova\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"eye_of_the_storm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"elemental_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"call_of_thunder\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"unrelenting_storm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"elemental_precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"lightning_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"elemental_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"storm_earth_and_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"booming_echoes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"elemental_oath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"lightning_overload\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"astral_shift\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"totem_of_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"lava_flows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"shamanism\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"thunderstorm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"enhancing_totems\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"earths_grasp\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"ancestral_knowledge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"guardian_totems\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"thundering_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"improved_ghost_wolf\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"improved_shields\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"elemental_weapons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"shamanistic_focus\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"anticipation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"flurry\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"improved_windfury_totem\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"spirit_weapons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 40, name: \"mental_dexterity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"unleashed_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"weapon_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"frozen_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"dual_wield_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"dual_wield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 46, name: \"stormstrike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 47, name: \"static_shock\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"lava_lash\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"improved_stormstrike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"mental_quickness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"shamanistic_rage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 52, name: \"earthen_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"maelstrom_weapon\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"feral_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"improved_healing_wave\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"totemic_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"improved_reincarnation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"healing_grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"tidal_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"improved_water_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"healing_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"tidal_force\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 63, name: \"ancestral_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"restorative_totems\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"tidal_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"healing_way\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"natures_swiftness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 68, name: \"focused_mind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"purification\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"natures_guardian\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"mana_tide_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 72, name: \"cleanse_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 73, name: \"blessing_of_the_eternals\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"improved_chain_heal\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"natures_blessing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"ancestral_awakening\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"earth_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 78, name: \"improved_earth_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"tidal_waves\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"riptide\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShamanTalents>): ShamanTalents {\n        const message = { convection: 0, concussion: 0, callOfFlame: 0, elementalWarding: 0, elementalDevastation: 0, reverberation: 0, elementalFocus: false, elementalFury: 0, improvedFireNova: 0, eyeOfTheStorm: 0, elementalReach: 0, callOfThunder: false, unrelentingStorm: 0, elementalPrecision: 0, lightningMastery: 0, elementalMastery: false, stormEarthAndFire: 0, boomingEchoes: 0, elementalOath: 0, lightningOverload: 0, astralShift: 0, totemOfWrath: false, lavaFlows: 0, shamanism: 0, thunderstorm: false, enhancingTotems: 0, earthsGrasp: 0, ancestralKnowledge: 0, guardianTotems: 0, thunderingStrikes: 0, improvedGhostWolf: 0, improvedShields: 0, elementalWeapons: 0, shamanisticFocus: false, anticipation: 0, flurry: 0, toughness: 0, improvedWindfuryTotem: 0, spiritWeapons: false, mentalDexterity: 0, unleashedRage: 0, weaponMastery: 0, frozenPower: 0, dualWieldSpecialization: 0, dualWield: false, stormstrike: false, staticShock: 0, lavaLash: false, improvedStormstrike: 0, mentalQuickness: 0, shamanisticRage: false, earthenPower: 0, maelstromWeapon: 0, feralSpirit: false, improvedHealingWave: 0, totemicFocus: 0, improvedReincarnation: 0, healingGrace: 0, tidalFocus: 0, improvedWaterShield: 0, healingFocus: 0, tidalForce: false, ancestralHealing: 0, restorativeTotems: 0, tidalMastery: 0, healingWay: 0, naturesSwiftness: false, focusedMind: 0, purification: 0, naturesGuardian: 0, manaTideTotem: false, cleanseSpirit: false, blessingOfTheEternals: 0, improvedChainHeal: 0, naturesBlessing: 0, ancestralAwakening: 0, earthShield: false, improvedEarthShield: 0, tidalWaves: 0, riptide: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShamanTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShamanTalents): ShamanTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 convection */ 1:\n                    message.convection = reader.int32();\n                    break;\n                case /* int32 concussion */ 2:\n                    message.concussion = reader.int32();\n                    break;\n                case /* int32 call_of_flame */ 3:\n                    message.callOfFlame = reader.int32();\n                    break;\n                case /* int32 elemental_warding */ 4:\n                    message.elementalWarding = reader.int32();\n                    break;\n                case /* int32 elemental_devastation */ 5:\n                    message.elementalDevastation = reader.int32();\n                    break;\n                case /* int32 reverberation */ 6:\n                    message.reverberation = reader.int32();\n                    break;\n                case /* bool elemental_focus */ 7:\n                    message.elementalFocus = reader.bool();\n                    break;\n                case /* int32 elemental_fury */ 8:\n                    message.elementalFury = reader.int32();\n                    break;\n                case /* int32 improved_fire_nova */ 9:\n                    message.improvedFireNova = reader.int32();\n                    break;\n                case /* int32 eye_of_the_storm */ 10:\n                    message.eyeOfTheStorm = reader.int32();\n                    break;\n                case /* int32 elemental_reach */ 11:\n                    message.elementalReach = reader.int32();\n                    break;\n                case /* bool call_of_thunder */ 12:\n                    message.callOfThunder = reader.bool();\n                    break;\n                case /* int32 unrelenting_storm */ 13:\n                    message.unrelentingStorm = reader.int32();\n                    break;\n                case /* int32 elemental_precision */ 14:\n                    message.elementalPrecision = reader.int32();\n                    break;\n                case /* int32 lightning_mastery */ 15:\n                    message.lightningMastery = reader.int32();\n                    break;\n                case /* bool elemental_mastery */ 16:\n                    message.elementalMastery = reader.bool();\n                    break;\n                case /* int32 storm_earth_and_fire */ 17:\n                    message.stormEarthAndFire = reader.int32();\n                    break;\n                case /* int32 booming_echoes */ 18:\n                    message.boomingEchoes = reader.int32();\n                    break;\n                case /* int32 elemental_oath */ 19:\n                    message.elementalOath = reader.int32();\n                    break;\n                case /* int32 lightning_overload */ 20:\n                    message.lightningOverload = reader.int32();\n                    break;\n                case /* int32 astral_shift */ 21:\n                    message.astralShift = reader.int32();\n                    break;\n                case /* bool totem_of_wrath */ 22:\n                    message.totemOfWrath = reader.bool();\n                    break;\n                case /* int32 lava_flows */ 23:\n                    message.lavaFlows = reader.int32();\n                    break;\n                case /* int32 shamanism */ 24:\n                    message.shamanism = reader.int32();\n                    break;\n                case /* bool thunderstorm */ 25:\n                    message.thunderstorm = reader.bool();\n                    break;\n                case /* int32 enhancing_totems */ 26:\n                    message.enhancingTotems = reader.int32();\n                    break;\n                case /* int32 earths_grasp */ 27:\n                    message.earthsGrasp = reader.int32();\n                    break;\n                case /* int32 ancestral_knowledge */ 28:\n                    message.ancestralKnowledge = reader.int32();\n                    break;\n                case /* int32 guardian_totems */ 29:\n                    message.guardianTotems = reader.int32();\n                    break;\n                case /* int32 thundering_strikes */ 30:\n                    message.thunderingStrikes = reader.int32();\n                    break;\n                case /* int32 improved_ghost_wolf */ 31:\n                    message.improvedGhostWolf = reader.int32();\n                    break;\n                case /* int32 improved_shields */ 32:\n                    message.improvedShields = reader.int32();\n                    break;\n                case /* int32 elemental_weapons */ 33:\n                    message.elementalWeapons = reader.int32();\n                    break;\n                case /* bool shamanistic_focus */ 34:\n                    message.shamanisticFocus = reader.bool();\n                    break;\n                case /* int32 anticipation */ 35:\n                    message.anticipation = reader.int32();\n                    break;\n                case /* int32 flurry */ 36:\n                    message.flurry = reader.int32();\n                    break;\n                case /* int32 toughness */ 37:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 improved_windfury_totem */ 38:\n                    message.improvedWindfuryTotem = reader.int32();\n                    break;\n                case /* bool spirit_weapons */ 39:\n                    message.spiritWeapons = reader.bool();\n                    break;\n                case /* int32 mental_dexterity */ 40:\n                    message.mentalDexterity = reader.int32();\n                    break;\n                case /* int32 unleashed_rage */ 41:\n                    message.unleashedRage = reader.int32();\n                    break;\n                case /* int32 weapon_mastery */ 42:\n                    message.weaponMastery = reader.int32();\n                    break;\n                case /* int32 frozen_power */ 43:\n                    message.frozenPower = reader.int32();\n                    break;\n                case /* int32 dual_wield_specialization */ 44:\n                    message.dualWieldSpecialization = reader.int32();\n                    break;\n                case /* bool dual_wield */ 45:\n                    message.dualWield = reader.bool();\n                    break;\n                case /* bool stormstrike */ 46:\n                    message.stormstrike = reader.bool();\n                    break;\n                case /* int32 static_shock */ 47:\n                    message.staticShock = reader.int32();\n                    break;\n                case /* bool lava_lash */ 48:\n                    message.lavaLash = reader.bool();\n                    break;\n                case /* int32 improved_stormstrike */ 49:\n                    message.improvedStormstrike = reader.int32();\n                    break;\n                case /* int32 mental_quickness */ 50:\n                    message.mentalQuickness = reader.int32();\n                    break;\n                case /* bool shamanistic_rage */ 51:\n                    message.shamanisticRage = reader.bool();\n                    break;\n                case /* int32 earthen_power */ 52:\n                    message.earthenPower = reader.int32();\n                    break;\n                case /* int32 maelstrom_weapon */ 53:\n                    message.maelstromWeapon = reader.int32();\n                    break;\n                case /* bool feral_spirit */ 54:\n                    message.feralSpirit = reader.bool();\n                    break;\n                case /* int32 improved_healing_wave */ 55:\n                    message.improvedHealingWave = reader.int32();\n                    break;\n                case /* int32 totemic_focus */ 56:\n                    message.totemicFocus = reader.int32();\n                    break;\n                case /* int32 improved_reincarnation */ 57:\n                    message.improvedReincarnation = reader.int32();\n                    break;\n                case /* int32 healing_grace */ 58:\n                    message.healingGrace = reader.int32();\n                    break;\n                case /* int32 tidal_focus */ 59:\n                    message.tidalFocus = reader.int32();\n                    break;\n                case /* int32 improved_water_shield */ 60:\n                    message.improvedWaterShield = reader.int32();\n                    break;\n                case /* int32 healing_focus */ 61:\n                    message.healingFocus = reader.int32();\n                    break;\n                case /* bool tidal_force */ 62:\n                    message.tidalForce = reader.bool();\n                    break;\n                case /* int32 ancestral_healing */ 63:\n                    message.ancestralHealing = reader.int32();\n                    break;\n                case /* int32 restorative_totems */ 64:\n                    message.restorativeTotems = reader.int32();\n                    break;\n                case /* int32 tidal_mastery */ 65:\n                    message.tidalMastery = reader.int32();\n                    break;\n                case /* int32 healing_way */ 66:\n                    message.healingWay = reader.int32();\n                    break;\n                case /* bool natures_swiftness */ 67:\n                    message.naturesSwiftness = reader.bool();\n                    break;\n                case /* int32 focused_mind */ 68:\n                    message.focusedMind = reader.int32();\n                    break;\n                case /* int32 purification */ 69:\n                    message.purification = reader.int32();\n                    break;\n                case /* int32 natures_guardian */ 70:\n                    message.naturesGuardian = reader.int32();\n                    break;\n                case /* bool mana_tide_totem */ 71:\n                    message.manaTideTotem = reader.bool();\n                    break;\n                case /* bool cleanse_spirit */ 72:\n                    message.cleanseSpirit = reader.bool();\n                    break;\n                case /* int32 blessing_of_the_eternals */ 73:\n                    message.blessingOfTheEternals = reader.int32();\n                    break;\n                case /* int32 improved_chain_heal */ 74:\n                    message.improvedChainHeal = reader.int32();\n                    break;\n                case /* int32 natures_blessing */ 75:\n                    message.naturesBlessing = reader.int32();\n                    break;\n                case /* int32 ancestral_awakening */ 76:\n                    message.ancestralAwakening = reader.int32();\n                    break;\n                case /* bool earth_shield */ 77:\n                    message.earthShield = reader.bool();\n                    break;\n                case /* int32 improved_earth_shield */ 78:\n                    message.improvedEarthShield = reader.int32();\n                    break;\n                case /* int32 tidal_waves */ 79:\n                    message.tidalWaves = reader.int32();\n                    break;\n                case /* bool riptide */ 80:\n                    message.riptide = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShamanTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 convection = 1; */\n        if (message.convection !== 0)\n            writer.tag(1, WireType.Varint).int32(message.convection);\n        /* int32 concussion = 2; */\n        if (message.concussion !== 0)\n            writer.tag(2, WireType.Varint).int32(message.concussion);\n        /* int32 call_of_flame = 3; */\n        if (message.callOfFlame !== 0)\n            writer.tag(3, WireType.Varint).int32(message.callOfFlame);\n        /* int32 elemental_warding = 4; */\n        if (message.elementalWarding !== 0)\n            writer.tag(4, WireType.Varint).int32(message.elementalWarding);\n        /* int32 elemental_devastation = 5; */\n        if (message.elementalDevastation !== 0)\n            writer.tag(5, WireType.Varint).int32(message.elementalDevastation);\n        /* int32 reverberation = 6; */\n        if (message.reverberation !== 0)\n            writer.tag(6, WireType.Varint).int32(message.reverberation);\n        /* bool elemental_focus = 7; */\n        if (message.elementalFocus !== false)\n            writer.tag(7, WireType.Varint).bool(message.elementalFocus);\n        /* int32 elemental_fury = 8; */\n        if (message.elementalFury !== 0)\n            writer.tag(8, WireType.Varint).int32(message.elementalFury);\n        /* int32 improved_fire_nova = 9; */\n        if (message.improvedFireNova !== 0)\n            writer.tag(9, WireType.Varint).int32(message.improvedFireNova);\n        /* int32 eye_of_the_storm = 10; */\n        if (message.eyeOfTheStorm !== 0)\n            writer.tag(10, WireType.Varint).int32(message.eyeOfTheStorm);\n        /* int32 elemental_reach = 11; */\n        if (message.elementalReach !== 0)\n            writer.tag(11, WireType.Varint).int32(message.elementalReach);\n        /* bool call_of_thunder = 12; */\n        if (message.callOfThunder !== false)\n            writer.tag(12, WireType.Varint).bool(message.callOfThunder);\n        /* int32 unrelenting_storm = 13; */\n        if (message.unrelentingStorm !== 0)\n            writer.tag(13, WireType.Varint).int32(message.unrelentingStorm);\n        /* int32 elemental_precision = 14; */\n        if (message.elementalPrecision !== 0)\n            writer.tag(14, WireType.Varint).int32(message.elementalPrecision);\n        /* int32 lightning_mastery = 15; */\n        if (message.lightningMastery !== 0)\n            writer.tag(15, WireType.Varint).int32(message.lightningMastery);\n        /* bool elemental_mastery = 16; */\n        if (message.elementalMastery !== false)\n            writer.tag(16, WireType.Varint).bool(message.elementalMastery);\n        /* int32 storm_earth_and_fire = 17; */\n        if (message.stormEarthAndFire !== 0)\n            writer.tag(17, WireType.Varint).int32(message.stormEarthAndFire);\n        /* int32 booming_echoes = 18; */\n        if (message.boomingEchoes !== 0)\n            writer.tag(18, WireType.Varint).int32(message.boomingEchoes);\n        /* int32 elemental_oath = 19; */\n        if (message.elementalOath !== 0)\n            writer.tag(19, WireType.Varint).int32(message.elementalOath);\n        /* int32 lightning_overload = 20; */\n        if (message.lightningOverload !== 0)\n            writer.tag(20, WireType.Varint).int32(message.lightningOverload);\n        /* int32 astral_shift = 21; */\n        if (message.astralShift !== 0)\n            writer.tag(21, WireType.Varint).int32(message.astralShift);\n        /* bool totem_of_wrath = 22; */\n        if (message.totemOfWrath !== false)\n            writer.tag(22, WireType.Varint).bool(message.totemOfWrath);\n        /* int32 lava_flows = 23; */\n        if (message.lavaFlows !== 0)\n            writer.tag(23, WireType.Varint).int32(message.lavaFlows);\n        /* int32 shamanism = 24; */\n        if (message.shamanism !== 0)\n            writer.tag(24, WireType.Varint).int32(message.shamanism);\n        /* bool thunderstorm = 25; */\n        if (message.thunderstorm !== false)\n            writer.tag(25, WireType.Varint).bool(message.thunderstorm);\n        /* int32 enhancing_totems = 26; */\n        if (message.enhancingTotems !== 0)\n            writer.tag(26, WireType.Varint).int32(message.enhancingTotems);\n        /* int32 earths_grasp = 27; */\n        if (message.earthsGrasp !== 0)\n            writer.tag(27, WireType.Varint).int32(message.earthsGrasp);\n        /* int32 ancestral_knowledge = 28; */\n        if (message.ancestralKnowledge !== 0)\n            writer.tag(28, WireType.Varint).int32(message.ancestralKnowledge);\n        /* int32 guardian_totems = 29; */\n        if (message.guardianTotems !== 0)\n            writer.tag(29, WireType.Varint).int32(message.guardianTotems);\n        /* int32 thundering_strikes = 30; */\n        if (message.thunderingStrikes !== 0)\n            writer.tag(30, WireType.Varint).int32(message.thunderingStrikes);\n        /* int32 improved_ghost_wolf = 31; */\n        if (message.improvedGhostWolf !== 0)\n            writer.tag(31, WireType.Varint).int32(message.improvedGhostWolf);\n        /* int32 improved_shields = 32; */\n        if (message.improvedShields !== 0)\n            writer.tag(32, WireType.Varint).int32(message.improvedShields);\n        /* int32 elemental_weapons = 33; */\n        if (message.elementalWeapons !== 0)\n            writer.tag(33, WireType.Varint).int32(message.elementalWeapons);\n        /* bool shamanistic_focus = 34; */\n        if (message.shamanisticFocus !== false)\n            writer.tag(34, WireType.Varint).bool(message.shamanisticFocus);\n        /* int32 anticipation = 35; */\n        if (message.anticipation !== 0)\n            writer.tag(35, WireType.Varint).int32(message.anticipation);\n        /* int32 flurry = 36; */\n        if (message.flurry !== 0)\n            writer.tag(36, WireType.Varint).int32(message.flurry);\n        /* int32 toughness = 37; */\n        if (message.toughness !== 0)\n            writer.tag(37, WireType.Varint).int32(message.toughness);\n        /* int32 improved_windfury_totem = 38; */\n        if (message.improvedWindfuryTotem !== 0)\n            writer.tag(38, WireType.Varint).int32(message.improvedWindfuryTotem);\n        /* bool spirit_weapons = 39; */\n        if (message.spiritWeapons !== false)\n            writer.tag(39, WireType.Varint).bool(message.spiritWeapons);\n        /* int32 mental_dexterity = 40; */\n        if (message.mentalDexterity !== 0)\n            writer.tag(40, WireType.Varint).int32(message.mentalDexterity);\n        /* int32 unleashed_rage = 41; */\n        if (message.unleashedRage !== 0)\n            writer.tag(41, WireType.Varint).int32(message.unleashedRage);\n        /* int32 weapon_mastery = 42; */\n        if (message.weaponMastery !== 0)\n            writer.tag(42, WireType.Varint).int32(message.weaponMastery);\n        /* int32 frozen_power = 43; */\n        if (message.frozenPower !== 0)\n            writer.tag(43, WireType.Varint).int32(message.frozenPower);\n        /* int32 dual_wield_specialization = 44; */\n        if (message.dualWieldSpecialization !== 0)\n            writer.tag(44, WireType.Varint).int32(message.dualWieldSpecialization);\n        /* bool dual_wield = 45; */\n        if (message.dualWield !== false)\n            writer.tag(45, WireType.Varint).bool(message.dualWield);\n        /* bool stormstrike = 46; */\n        if (message.stormstrike !== false)\n            writer.tag(46, WireType.Varint).bool(message.stormstrike);\n        /* int32 static_shock = 47; */\n        if (message.staticShock !== 0)\n            writer.tag(47, WireType.Varint).int32(message.staticShock);\n        /* bool lava_lash = 48; */\n        if (message.lavaLash !== false)\n            writer.tag(48, WireType.Varint).bool(message.lavaLash);\n        /* int32 improved_stormstrike = 49; */\n        if (message.improvedStormstrike !== 0)\n            writer.tag(49, WireType.Varint).int32(message.improvedStormstrike);\n        /* int32 mental_quickness = 50; */\n        if (message.mentalQuickness !== 0)\n            writer.tag(50, WireType.Varint).int32(message.mentalQuickness);\n        /* bool shamanistic_rage = 51; */\n        if (message.shamanisticRage !== false)\n            writer.tag(51, WireType.Varint).bool(message.shamanisticRage);\n        /* int32 earthen_power = 52; */\n        if (message.earthenPower !== 0)\n            writer.tag(52, WireType.Varint).int32(message.earthenPower);\n        /* int32 maelstrom_weapon = 53; */\n        if (message.maelstromWeapon !== 0)\n            writer.tag(53, WireType.Varint).int32(message.maelstromWeapon);\n        /* bool feral_spirit = 54; */\n        if (message.feralSpirit !== false)\n            writer.tag(54, WireType.Varint).bool(message.feralSpirit);\n        /* int32 improved_healing_wave = 55; */\n        if (message.improvedHealingWave !== 0)\n            writer.tag(55, WireType.Varint).int32(message.improvedHealingWave);\n        /* int32 totemic_focus = 56; */\n        if (message.totemicFocus !== 0)\n            writer.tag(56, WireType.Varint).int32(message.totemicFocus);\n        /* int32 improved_reincarnation = 57; */\n        if (message.improvedReincarnation !== 0)\n            writer.tag(57, WireType.Varint).int32(message.improvedReincarnation);\n        /* int32 healing_grace = 58; */\n        if (message.healingGrace !== 0)\n            writer.tag(58, WireType.Varint).int32(message.healingGrace);\n        /* int32 tidal_focus = 59; */\n        if (message.tidalFocus !== 0)\n            writer.tag(59, WireType.Varint).int32(message.tidalFocus);\n        /* int32 improved_water_shield = 60; */\n        if (message.improvedWaterShield !== 0)\n            writer.tag(60, WireType.Varint).int32(message.improvedWaterShield);\n        /* int32 healing_focus = 61; */\n        if (message.healingFocus !== 0)\n            writer.tag(61, WireType.Varint).int32(message.healingFocus);\n        /* bool tidal_force = 62; */\n        if (message.tidalForce !== false)\n            writer.tag(62, WireType.Varint).bool(message.tidalForce);\n        /* int32 ancestral_healing = 63; */\n        if (message.ancestralHealing !== 0)\n            writer.tag(63, WireType.Varint).int32(message.ancestralHealing);\n        /* int32 restorative_totems = 64; */\n        if (message.restorativeTotems !== 0)\n            writer.tag(64, WireType.Varint).int32(message.restorativeTotems);\n        /* int32 tidal_mastery = 65; */\n        if (message.tidalMastery !== 0)\n            writer.tag(65, WireType.Varint).int32(message.tidalMastery);\n        /* int32 healing_way = 66; */\n        if (message.healingWay !== 0)\n            writer.tag(66, WireType.Varint).int32(message.healingWay);\n        /* bool natures_swiftness = 67; */\n        if (message.naturesSwiftness !== false)\n            writer.tag(67, WireType.Varint).bool(message.naturesSwiftness);\n        /* int32 focused_mind = 68; */\n        if (message.focusedMind !== 0)\n            writer.tag(68, WireType.Varint).int32(message.focusedMind);\n        /* int32 purification = 69; */\n        if (message.purification !== 0)\n            writer.tag(69, WireType.Varint).int32(message.purification);\n        /* int32 natures_guardian = 70; */\n        if (message.naturesGuardian !== 0)\n            writer.tag(70, WireType.Varint).int32(message.naturesGuardian);\n        /* bool mana_tide_totem = 71; */\n        if (message.manaTideTotem !== false)\n            writer.tag(71, WireType.Varint).bool(message.manaTideTotem);\n        /* bool cleanse_spirit = 72; */\n        if (message.cleanseSpirit !== false)\n            writer.tag(72, WireType.Varint).bool(message.cleanseSpirit);\n        /* int32 blessing_of_the_eternals = 73; */\n        if (message.blessingOfTheEternals !== 0)\n            writer.tag(73, WireType.Varint).int32(message.blessingOfTheEternals);\n        /* int32 improved_chain_heal = 74; */\n        if (message.improvedChainHeal !== 0)\n            writer.tag(74, WireType.Varint).int32(message.improvedChainHeal);\n        /* int32 natures_blessing = 75; */\n        if (message.naturesBlessing !== 0)\n            writer.tag(75, WireType.Varint).int32(message.naturesBlessing);\n        /* int32 ancestral_awakening = 76; */\n        if (message.ancestralAwakening !== 0)\n            writer.tag(76, WireType.Varint).int32(message.ancestralAwakening);\n        /* bool earth_shield = 77; */\n        if (message.earthShield !== false)\n            writer.tag(77, WireType.Varint).bool(message.earthShield);\n        /* int32 improved_earth_shield = 78; */\n        if (message.improvedEarthShield !== 0)\n            writer.tag(78, WireType.Varint).int32(message.improvedEarthShield);\n        /* int32 tidal_waves = 79; */\n        if (message.tidalWaves !== 0)\n            writer.tag(79, WireType.Varint).int32(message.tidalWaves);\n        /* bool riptide = 80; */\n        if (message.riptide !== false)\n            writer.tag(80, WireType.Varint).bool(message.riptide);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShamanTalents\n */\nexport const ShamanTalents = new ShamanTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShamanTotems$Type extends MessageType<ShamanTotems> {\n    constructor() {\n        super(\"proto.ShamanTotems\", [\n            { no: 1, name: \"earth\", kind: \"enum\", T: () => [\"proto.EarthTotem\", EarthTotem] },\n            { no: 2, name: \"air\", kind: \"enum\", T: () => [\"proto.AirTotem\", AirTotem] },\n            { no: 3, name: \"fire\", kind: \"enum\", T: () => [\"proto.FireTotem\", FireTotem] },\n            { no: 4, name: \"water\", kind: \"enum\", T: () => [\"proto.WaterTotem\", WaterTotem] },\n            { no: 5, name: \"use_mana_tide\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"use_fire_elemental\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"recall_fire_elemental_on_oom\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"recall_totems\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShamanTotems>): ShamanTotems {\n        const message = { earth: 0, air: 0, fire: 0, water: 0, useManaTide: false, useFireElemental: false, recallFireElementalOnOom: false, recallTotems: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShamanTotems>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShamanTotems): ShamanTotems {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.EarthTotem earth */ 1:\n                    message.earth = reader.int32();\n                    break;\n                case /* proto.AirTotem air */ 2:\n                    message.air = reader.int32();\n                    break;\n                case /* proto.FireTotem fire */ 3:\n                    message.fire = reader.int32();\n                    break;\n                case /* proto.WaterTotem water */ 4:\n                    message.water = reader.int32();\n                    break;\n                case /* bool use_mana_tide */ 5:\n                    message.useManaTide = reader.bool();\n                    break;\n                case /* bool use_fire_elemental */ 6:\n                    message.useFireElemental = reader.bool();\n                    break;\n                case /* bool recall_fire_elemental_on_oom */ 7:\n                    message.recallFireElementalOnOom = reader.bool();\n                    break;\n                case /* bool recall_totems */ 8:\n                    message.recallTotems = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShamanTotems, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.EarthTotem earth = 1; */\n        if (message.earth !== 0)\n            writer.tag(1, WireType.Varint).int32(message.earth);\n        /* proto.AirTotem air = 2; */\n        if (message.air !== 0)\n            writer.tag(2, WireType.Varint).int32(message.air);\n        /* proto.FireTotem fire = 3; */\n        if (message.fire !== 0)\n            writer.tag(3, WireType.Varint).int32(message.fire);\n        /* proto.WaterTotem water = 4; */\n        if (message.water !== 0)\n            writer.tag(4, WireType.Varint).int32(message.water);\n        /* bool use_mana_tide = 5; */\n        if (message.useManaTide !== false)\n            writer.tag(5, WireType.Varint).bool(message.useManaTide);\n        /* bool use_fire_elemental = 6; */\n        if (message.useFireElemental !== false)\n            writer.tag(6, WireType.Varint).bool(message.useFireElemental);\n        /* bool recall_fire_elemental_on_oom = 7; */\n        if (message.recallFireElementalOnOom !== false)\n            writer.tag(7, WireType.Varint).bool(message.recallFireElementalOnOom);\n        /* bool recall_totems = 8; */\n        if (message.recallTotems !== false)\n            writer.tag(8, WireType.Varint).bool(message.recallTotems);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShamanTotems\n */\nexport const ShamanTotems = new ShamanTotems$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElementalShaman$Type extends MessageType<ElementalShaman> {\n    constructor() {\n        super(\"proto.ElementalShaman\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => ElementalShaman_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => ShamanTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => ElementalShaman_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ElementalShaman>): ElementalShaman {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ElementalShaman>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementalShaman): ElementalShaman {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ElementalShaman.Rotation rotation */ 1:\n                    message.rotation = ElementalShaman_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.ShamanTalents talents */ 2:\n                    message.talents = ShamanTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.ElementalShaman.Options options */ 3:\n                    message.options = ElementalShaman_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ElementalShaman, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ElementalShaman.Rotation rotation = 1; */\n        if (message.rotation)\n            ElementalShaman_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShamanTalents talents = 2; */\n        if (message.talents)\n            ShamanTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ElementalShaman.Options options = 3; */\n        if (message.options)\n            ElementalShaman_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ElementalShaman\n */\nexport const ElementalShaman = new ElementalShaman$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElementalShaman_Rotation$Type extends MessageType<ElementalShaman_Rotation> {\n    constructor() {\n        super(\"proto.ElementalShaman.Rotation\", [\n            { no: 3, name: \"totems\", kind: \"message\", T: () => ShamanTotems },\n            { no: 1, name: \"type\", kind: \"enum\", T: () => [\"proto.ElementalShaman.Rotation.RotationType\", ElementalShaman_Rotation_RotationType] },\n            { no: 2, name: \"in_thunderstorm_range\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"use_fire_nova\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"fn_min_mana_per\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_chain_lightning\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"use_cl_only_gap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"cl_min_mana_per\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"overwrite_flameshock\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"always_crit_lvb\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"use_thunderstorm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ElementalShaman_Rotation>): ElementalShaman_Rotation {\n        const message = { type: 0, inThunderstormRange: false, useFireNova: false, fnMinManaPer: 0, useChainLightning: false, useClOnlyGap: false, clMinManaPer: 0, overwriteFlameshock: false, alwaysCritLvb: false, useThunderstorm: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ElementalShaman_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementalShaman_Rotation): ElementalShaman_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanTotems totems */ 3:\n                    message.totems = ShamanTotems.internalBinaryRead(reader, reader.uint32(), options, message.totems);\n                    break;\n                case /* proto.ElementalShaman.Rotation.RotationType type */ 1:\n                    message.type = reader.int32();\n                    break;\n                case /* bool in_thunderstorm_range */ 2:\n                    message.inThunderstormRange = reader.bool();\n                    break;\n                case /* bool use_fire_nova */ 4:\n                    message.useFireNova = reader.bool();\n                    break;\n                case /* double fn_min_mana_per */ 9:\n                    message.fnMinManaPer = reader.double();\n                    break;\n                case /* bool use_chain_lightning */ 5:\n                    message.useChainLightning = reader.bool();\n                    break;\n                case /* bool use_cl_only_gap */ 11:\n                    message.useClOnlyGap = reader.bool();\n                    break;\n                case /* double cl_min_mana_per */ 10:\n                    message.clMinManaPer = reader.double();\n                    break;\n                case /* bool overwrite_flameshock */ 6:\n                    message.overwriteFlameshock = reader.bool();\n                    break;\n                case /* bool always_crit_lvb */ 7:\n                    message.alwaysCritLvb = reader.bool();\n                    break;\n                case /* bool use_thunderstorm */ 8:\n                    message.useThunderstorm = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ElementalShaman_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanTotems totems = 3; */\n        if (message.totems)\n            ShamanTotems.internalBinaryWrite(message.totems, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ElementalShaman.Rotation.RotationType type = 1; */\n        if (message.type !== 0)\n            writer.tag(1, WireType.Varint).int32(message.type);\n        /* bool in_thunderstorm_range = 2; */\n        if (message.inThunderstormRange !== false)\n            writer.tag(2, WireType.Varint).bool(message.inThunderstormRange);\n        /* bool use_fire_nova = 4; */\n        if (message.useFireNova !== false)\n            writer.tag(4, WireType.Varint).bool(message.useFireNova);\n        /* double fn_min_mana_per = 9; */\n        if (message.fnMinManaPer !== 0)\n            writer.tag(9, WireType.Bit64).double(message.fnMinManaPer);\n        /* bool use_chain_lightning = 5; */\n        if (message.useChainLightning !== false)\n            writer.tag(5, WireType.Varint).bool(message.useChainLightning);\n        /* bool use_cl_only_gap = 11; */\n        if (message.useClOnlyGap !== false)\n            writer.tag(11, WireType.Varint).bool(message.useClOnlyGap);\n        /* double cl_min_mana_per = 10; */\n        if (message.clMinManaPer !== 0)\n            writer.tag(10, WireType.Bit64).double(message.clMinManaPer);\n        /* bool overwrite_flameshock = 6; */\n        if (message.overwriteFlameshock !== false)\n            writer.tag(6, WireType.Varint).bool(message.overwriteFlameshock);\n        /* bool always_crit_lvb = 7; */\n        if (message.alwaysCritLvb !== false)\n            writer.tag(7, WireType.Varint).bool(message.alwaysCritLvb);\n        /* bool use_thunderstorm = 8; */\n        if (message.useThunderstorm !== false)\n            writer.tag(8, WireType.Varint).bool(message.useThunderstorm);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ElementalShaman.Rotation\n */\nexport const ElementalShaman_Rotation = new ElementalShaman_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElementalShaman_Options$Type extends MessageType<ElementalShaman_Options> {\n    constructor() {\n        super(\"proto.ElementalShaman.Options\", [\n            { no: 1, name: \"shield\", kind: \"enum\", T: () => [\"proto.ShamanShield\", ShamanShield] },\n            { no: 2, name: \"bloodlust\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ElementalShaman_Options>): ElementalShaman_Options {\n        const message = { shield: 0, bloodlust: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ElementalShaman_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementalShaman_Options): ElementalShaman_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanShield shield */ 1:\n                    message.shield = reader.int32();\n                    break;\n                case /* bool bloodlust */ 2:\n                    message.bloodlust = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ElementalShaman_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanShield shield = 1; */\n        if (message.shield !== 0)\n            writer.tag(1, WireType.Varint).int32(message.shield);\n        /* bool bloodlust = 2; */\n        if (message.bloodlust !== false)\n            writer.tag(2, WireType.Varint).bool(message.bloodlust);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ElementalShaman.Options\n */\nexport const ElementalShaman_Options = new ElementalShaman_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnhancementShaman$Type extends MessageType<EnhancementShaman> {\n    constructor() {\n        super(\"proto.EnhancementShaman\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => EnhancementShaman_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => ShamanTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => EnhancementShaman_Options }\n        ]);\n    }\n    create(value?: PartialMessage<EnhancementShaman>): EnhancementShaman {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EnhancementShaman>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancementShaman): EnhancementShaman {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.EnhancementShaman.Rotation rotation */ 1:\n                    message.rotation = EnhancementShaman_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.ShamanTalents talents */ 2:\n                    message.talents = ShamanTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.EnhancementShaman.Options options */ 3:\n                    message.options = EnhancementShaman_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EnhancementShaman, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.EnhancementShaman.Rotation rotation = 1; */\n        if (message.rotation)\n            EnhancementShaman_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShamanTalents talents = 2; */\n        if (message.talents)\n            ShamanTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EnhancementShaman.Options options = 3; */\n        if (message.options)\n            EnhancementShaman_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EnhancementShaman\n */\nexport const EnhancementShaman = new EnhancementShaman$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnhancementShaman_Rotation$Type extends MessageType<EnhancementShaman_Rotation> {\n    constructor() {\n        super(\"proto.EnhancementShaman.Rotation\", [\n            { no: 1, name: \"totems\", kind: \"message\", T: () => ShamanTotems },\n            { no: 2, name: \"rotation_type\", kind: \"enum\", T: () => [\"proto.EnhancementShaman.Rotation.RotationType\", EnhancementShaman_Rotation_RotationType] },\n            { no: 3, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation },\n            { no: 4, name: \"lavaburst_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"lightningbolt_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"maelstromweapon_min_stack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"weave_reaction_time\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"firenova_mana_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"shamanistic_rage_mana_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"weave_flame_shock\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"primary_shock\", kind: \"enum\", T: () => [\"proto.EnhancementShaman.Rotation.PrimaryShock\", EnhancementShaman_Rotation_PrimaryShock] },\n            { no: 12, name: \"flame_shock_clip_ticks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<EnhancementShaman_Rotation>): EnhancementShaman_Rotation {\n        const message = { rotationType: 0, lavaburstWeave: false, lightningboltWeave: false, maelstromweaponMinStack: 0, weaveReactionTime: 0, firenovaManaThreshold: 0, shamanisticRageManaThreshold: 0, weaveFlameShock: false, primaryShock: 0, flameShockClipTicks: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EnhancementShaman_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancementShaman_Rotation): EnhancementShaman_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanTotems totems */ 1:\n                    message.totems = ShamanTotems.internalBinaryRead(reader, reader.uint32(), options, message.totems);\n                    break;\n                case /* proto.EnhancementShaman.Rotation.RotationType rotation_type */ 2:\n                    message.rotationType = reader.int32();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 3:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                case /* bool lavaburst_weave */ 4:\n                    message.lavaburstWeave = reader.bool();\n                    break;\n                case /* bool lightningbolt_weave */ 5:\n                    message.lightningboltWeave = reader.bool();\n                    break;\n                case /* int32 maelstromweapon_min_stack */ 6:\n                    message.maelstromweaponMinStack = reader.int32();\n                    break;\n                case /* double weave_reaction_time */ 7:\n                    message.weaveReactionTime = reader.double();\n                    break;\n                case /* double firenova_mana_threshold */ 8:\n                    message.firenovaManaThreshold = reader.double();\n                    break;\n                case /* double shamanistic_rage_mana_threshold */ 9:\n                    message.shamanisticRageManaThreshold = reader.double();\n                    break;\n                case /* bool weave_flame_shock */ 10:\n                    message.weaveFlameShock = reader.bool();\n                    break;\n                case /* proto.EnhancementShaman.Rotation.PrimaryShock primary_shock */ 11:\n                    message.primaryShock = reader.int32();\n                    break;\n                case /* int32 flame_shock_clip_ticks */ 12:\n                    message.flameShockClipTicks = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EnhancementShaman_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanTotems totems = 1; */\n        if (message.totems)\n            ShamanTotems.internalBinaryWrite(message.totems, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EnhancementShaman.Rotation.RotationType rotation_type = 2; */\n        if (message.rotationType !== 0)\n            writer.tag(2, WireType.Varint).int32(message.rotationType);\n        /* proto.CustomRotation custom_rotation = 3; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* bool lavaburst_weave = 4; */\n        if (message.lavaburstWeave !== false)\n            writer.tag(4, WireType.Varint).bool(message.lavaburstWeave);\n        /* bool lightningbolt_weave = 5; */\n        if (message.lightningboltWeave !== false)\n            writer.tag(5, WireType.Varint).bool(message.lightningboltWeave);\n        /* int32 maelstromweapon_min_stack = 6; */\n        if (message.maelstromweaponMinStack !== 0)\n            writer.tag(6, WireType.Varint).int32(message.maelstromweaponMinStack);\n        /* double weave_reaction_time = 7; */\n        if (message.weaveReactionTime !== 0)\n            writer.tag(7, WireType.Bit64).double(message.weaveReactionTime);\n        /* double firenova_mana_threshold = 8; */\n        if (message.firenovaManaThreshold !== 0)\n            writer.tag(8, WireType.Bit64).double(message.firenovaManaThreshold);\n        /* double shamanistic_rage_mana_threshold = 9; */\n        if (message.shamanisticRageManaThreshold !== 0)\n            writer.tag(9, WireType.Bit64).double(message.shamanisticRageManaThreshold);\n        /* bool weave_flame_shock = 10; */\n        if (message.weaveFlameShock !== false)\n            writer.tag(10, WireType.Varint).bool(message.weaveFlameShock);\n        /* proto.EnhancementShaman.Rotation.PrimaryShock primary_shock = 11; */\n        if (message.primaryShock !== 0)\n            writer.tag(11, WireType.Varint).int32(message.primaryShock);\n        /* int32 flame_shock_clip_ticks = 12; */\n        if (message.flameShockClipTicks !== 0)\n            writer.tag(12, WireType.Varint).int32(message.flameShockClipTicks);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EnhancementShaman.Rotation\n */\nexport const EnhancementShaman_Rotation = new EnhancementShaman_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnhancementShaman_Options$Type extends MessageType<EnhancementShaman_Options> {\n    constructor() {\n        super(\"proto.EnhancementShaman.Options\", [\n            { no: 1, name: \"shield\", kind: \"enum\", T: () => [\"proto.ShamanShield\", ShamanShield] },\n            { no: 2, name: \"bloodlust\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"sync_type\", kind: \"enum\", T: () => [\"proto.ShamanSyncType\", ShamanSyncType] },\n            { no: 4, name: \"imbue_mh\", kind: \"enum\", T: () => [\"proto.ShamanImbue\", ShamanImbue] },\n            { no: 5, name: \"imbue_oh\", kind: \"enum\", T: () => [\"proto.ShamanImbue\", ShamanImbue] }\n        ]);\n    }\n    create(value?: PartialMessage<EnhancementShaman_Options>): EnhancementShaman_Options {\n        const message = { shield: 0, bloodlust: false, syncType: 0, imbueMh: 0, imbueOh: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EnhancementShaman_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancementShaman_Options): EnhancementShaman_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanShield shield */ 1:\n                    message.shield = reader.int32();\n                    break;\n                case /* bool bloodlust */ 2:\n                    message.bloodlust = reader.bool();\n                    break;\n                case /* proto.ShamanSyncType sync_type */ 3:\n                    message.syncType = reader.int32();\n                    break;\n                case /* proto.ShamanImbue imbue_mh */ 4:\n                    message.imbueMh = reader.int32();\n                    break;\n                case /* proto.ShamanImbue imbue_oh */ 5:\n                    message.imbueOh = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EnhancementShaman_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanShield shield = 1; */\n        if (message.shield !== 0)\n            writer.tag(1, WireType.Varint).int32(message.shield);\n        /* bool bloodlust = 2; */\n        if (message.bloodlust !== false)\n            writer.tag(2, WireType.Varint).bool(message.bloodlust);\n        /* proto.ShamanSyncType sync_type = 3; */\n        if (message.syncType !== 0)\n            writer.tag(3, WireType.Varint).int32(message.syncType);\n        /* proto.ShamanImbue imbue_mh = 4; */\n        if (message.imbueMh !== 0)\n            writer.tag(4, WireType.Varint).int32(message.imbueMh);\n        /* proto.ShamanImbue imbue_oh = 5; */\n        if (message.imbueOh !== 0)\n            writer.tag(5, WireType.Varint).int32(message.imbueOh);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EnhancementShaman.Options\n */\nexport const EnhancementShaman_Options = new EnhancementShaman_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"rogue.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidTarget } from \"./common\";\n/**\n * @generated from protobuf message proto.RogueTalents\n */\nexport interface RogueTalents {\n    /**\n     * Assassination\n     *\n     * @generated from protobuf field: int32 improved_eviscerate = 1;\n     */\n    improvedEviscerate: number;\n    /**\n     * @generated from protobuf field: int32 remorseless_attacks = 2;\n     */\n    remorselessAttacks: number;\n    /**\n     * @generated from protobuf field: int32 malice = 3;\n     */\n    malice: number;\n    /**\n     * @generated from protobuf field: int32 ruthlessness = 4;\n     */\n    ruthlessness: number;\n    /**\n     * @generated from protobuf field: int32 blood_spatter = 5;\n     */\n    bloodSpatter: number;\n    /**\n     * @generated from protobuf field: int32 puncturing_wounds = 6;\n     */\n    puncturingWounds: number;\n    /**\n     * @generated from protobuf field: bool vigor = 7;\n     */\n    vigor: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_expose_armor = 8;\n     */\n    improvedExposeArmor: number;\n    /**\n     * @generated from protobuf field: int32 lethality = 9;\n     */\n    lethality: number;\n    /**\n     * @generated from protobuf field: int32 vile_poisons = 10;\n     */\n    vilePoisons: number;\n    /**\n     * @generated from protobuf field: int32 improved_poisons = 11;\n     */\n    improvedPoisons: number;\n    /**\n     * @generated from protobuf field: int32 fleet_footed = 12;\n     */\n    fleetFooted: number;\n    /**\n     * @generated from protobuf field: bool cold_blood = 13;\n     */\n    coldBlood: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_kidney_shot = 14;\n     */\n    improvedKidneyShot: number;\n    /**\n     * @generated from protobuf field: int32 quick_recovery = 15;\n     */\n    quickRecovery: number;\n    /**\n     * @generated from protobuf field: int32 seal_fate = 16;\n     */\n    sealFate: number;\n    /**\n     * @generated from protobuf field: int32 murder = 17;\n     */\n    murder: number;\n    /**\n     * @generated from protobuf field: int32 deadly_brew = 18;\n     */\n    deadlyBrew: number;\n    /**\n     * @generated from protobuf field: bool overkill = 19;\n     */\n    overkill: boolean;\n    /**\n     * @generated from protobuf field: int32 deadened_nerves = 20;\n     */\n    deadenedNerves: number;\n    /**\n     * @generated from protobuf field: int32 focused_attacks = 21;\n     */\n    focusedAttacks: number;\n    /**\n     * @generated from protobuf field: int32 find_weakness = 22;\n     */\n    findWeakness: number;\n    /**\n     * @generated from protobuf field: int32 master_poisoner = 23;\n     */\n    masterPoisoner: number;\n    /**\n     * @generated from protobuf field: bool mutilate = 24;\n     */\n    mutilate: boolean;\n    /**\n     * @generated from protobuf field: int32 turn_the_tables = 25;\n     */\n    turnTheTables: number;\n    /**\n     * @generated from protobuf field: int32 cut_to_the_chase = 26;\n     */\n    cutToTheChase: number;\n    /**\n     * @generated from protobuf field: bool hunger_for_blood = 27;\n     */\n    hungerForBlood: boolean;\n    /**\n     * Combat\n     *\n     * @generated from protobuf field: int32 improved_gouge = 28;\n     */\n    improvedGouge: number;\n    /**\n     * @generated from protobuf field: int32 improved_sinister_strike = 29;\n     */\n    improvedSinisterStrike: number;\n    /**\n     * @generated from protobuf field: int32 dual_wield_specialization = 30;\n     */\n    dualWieldSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 improved_slice_and_dice = 31;\n     */\n    improvedSliceAndDice: number;\n    /**\n     * @generated from protobuf field: int32 deflection = 32;\n     */\n    deflection: number;\n    /**\n     * @generated from protobuf field: int32 precision = 33;\n     */\n    precision: number;\n    /**\n     * @generated from protobuf field: int32 endurance = 34;\n     */\n    endurance: number;\n    /**\n     * @generated from protobuf field: bool riposte = 35;\n     */\n    riposte: boolean;\n    /**\n     * @generated from protobuf field: int32 close_quarters_combat = 36;\n     */\n    closeQuartersCombat: number;\n    /**\n     * @generated from protobuf field: int32 improved_kick = 37;\n     */\n    improvedKick: number;\n    /**\n     * @generated from protobuf field: int32 improved_sprint = 38;\n     */\n    improvedSprint: number;\n    /**\n     * @generated from protobuf field: int32 lightning_reflexes = 39;\n     */\n    lightningReflexes: number;\n    /**\n     * @generated from protobuf field: int32 aggression = 40;\n     */\n    aggression: number;\n    /**\n     * @generated from protobuf field: int32 mace_specialization = 41;\n     */\n    maceSpecialization: number;\n    /**\n     * @generated from protobuf field: bool blade_flurry = 42;\n     */\n    bladeFlurry: boolean;\n    /**\n     * @generated from protobuf field: int32 hack_and_slash = 43;\n     */\n    hackAndSlash: number;\n    /**\n     * @generated from protobuf field: int32 weapon_expertise = 44;\n     */\n    weaponExpertise: number;\n    /**\n     * @generated from protobuf field: int32 blade_twisting = 45;\n     */\n    bladeTwisting: number;\n    /**\n     * @generated from protobuf field: int32 vitality = 46;\n     */\n    vitality: number;\n    /**\n     * @generated from protobuf field: bool adrenaline_rush = 47;\n     */\n    adrenalineRush: boolean;\n    /**\n     * @generated from protobuf field: int32 nerves_of_steel = 48;\n     */\n    nervesOfSteel: number;\n    /**\n     * @generated from protobuf field: int32 throwing_specialization = 49;\n     */\n    throwingSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 combat_potency = 50;\n     */\n    combatPotency: number;\n    /**\n     * @generated from protobuf field: int32 unfair_advantage = 51;\n     */\n    unfairAdvantage: number;\n    /**\n     * @generated from protobuf field: bool surprise_attacks = 52;\n     */\n    surpriseAttacks: boolean;\n    /**\n     * @generated from protobuf field: int32 savage_combat = 53;\n     */\n    savageCombat: number;\n    /**\n     * @generated from protobuf field: int32 prey_on_the_weak = 54;\n     */\n    preyOnTheWeak: number;\n    /**\n     * @generated from protobuf field: bool killing_spree = 55;\n     */\n    killingSpree: boolean;\n    /**\n     * Subtlety\n     *\n     * @generated from protobuf field: int32 relentless_strikes = 56;\n     */\n    relentlessStrikes: number;\n    /**\n     * @generated from protobuf field: int32 master_of_deception = 57;\n     */\n    masterOfDeception: number;\n    /**\n     * @generated from protobuf field: int32 opportunity = 58;\n     */\n    opportunity: number;\n    /**\n     * @generated from protobuf field: int32 sleight_of_hand = 59;\n     */\n    sleightOfHand: number;\n    /**\n     * @generated from protobuf field: int32 dirty_tricks = 60;\n     */\n    dirtyTricks: number;\n    /**\n     * @generated from protobuf field: int32 camouflage = 61;\n     */\n    camouflage: number;\n    /**\n     * @generated from protobuf field: int32 elusiveness = 62;\n     */\n    elusiveness: number;\n    /**\n     * @generated from protobuf field: bool ghostly_strike = 63;\n     */\n    ghostlyStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 serrated_blades = 64;\n     */\n    serratedBlades: number;\n    /**\n     * @generated from protobuf field: int32 setup = 65;\n     */\n    setup: number;\n    /**\n     * @generated from protobuf field: int32 initiative = 66;\n     */\n    initiative: number;\n    /**\n     * @generated from protobuf field: int32 improved_ambush = 67;\n     */\n    improvedAmbush: number;\n    /**\n     * @generated from protobuf field: int32 heightened_senses = 68;\n     */\n    heightenedSenses: number;\n    /**\n     * @generated from protobuf field: bool preparation = 69;\n     */\n    preparation: boolean;\n    /**\n     * @generated from protobuf field: int32 dirty_deeds = 70;\n     */\n    dirtyDeeds: number;\n    /**\n     * @generated from protobuf field: bool hemorrhage = 71;\n     */\n    hemorrhage: boolean;\n    /**\n     * @generated from protobuf field: int32 master_of_subtlety = 72;\n     */\n    masterOfSubtlety: number;\n    /**\n     * @generated from protobuf field: int32 deadliness = 73;\n     */\n    deadliness: number;\n    /**\n     * @generated from protobuf field: int32 enveloping_shadows = 74;\n     */\n    envelopingShadows: number;\n    /**\n     * @generated from protobuf field: bool premeditation = 75;\n     */\n    premeditation: boolean;\n    /**\n     * @generated from protobuf field: int32 cheat_death = 76;\n     */\n    cheatDeath: number;\n    /**\n     * @generated from protobuf field: int32 sinister_calling = 77;\n     */\n    sinisterCalling: number;\n    /**\n     * @generated from protobuf field: int32 waylay = 78;\n     */\n    waylay: number;\n    /**\n     * @generated from protobuf field: int32 honor_among_thieves = 79;\n     */\n    honorAmongThieves: number;\n    /**\n     * @generated from protobuf field: bool shadowstep = 80;\n     */\n    shadowstep: boolean;\n    /**\n     * @generated from protobuf field: int32 filthy_tricks = 81;\n     */\n    filthyTricks: number;\n    /**\n     * @generated from protobuf field: int32 slaughter_from_the_shadows = 82;\n     */\n    slaughterFromTheShadows: number;\n    /**\n     * @generated from protobuf field: bool shadow_dance = 83;\n     */\n    shadowDance: boolean;\n}\n/**\n * @generated from protobuf message proto.Rogue\n */\nexport interface Rogue {\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation rotation = 1;\n     */\n    rotation?: Rogue_Rotation;\n    /**\n     * @generated from protobuf field: proto.RogueTalents talents = 2;\n     */\n    talents?: RogueTalents;\n    /**\n     * @generated from protobuf field: proto.Rogue.Options options = 3;\n     */\n    options?: Rogue_Options;\n}\n/**\n * @generated from protobuf message proto.Rogue.Rotation\n */\nexport interface Rogue_Rotation {\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.Frequency expose_armor_frequency = 1;\n     */\n    exposeArmorFrequency: Rogue_Rotation_Frequency;\n    /**\n     * @generated from protobuf field: int32 minimum_combo_points_expose_armor = 2;\n     */\n    minimumComboPointsExposeArmor: number;\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.Frequency tricks_of_the_trade_frequency = 3;\n     */\n    tricksOfTheTradeFrequency: Rogue_Rotation_Frequency;\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.CombatPriority combat_finisher_priority = 4;\n     */\n    combatFinisherPriority: Rogue_Rotation_CombatPriority;\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.AssassinationPriority assassination_finisher_priority = 5;\n     */\n    assassinationFinisherPriority: Rogue_Rotation_AssassinationPriority;\n    /**\n     * @generated from protobuf field: int32 minimum_combo_points_primary_finisher = 6;\n     */\n    minimumComboPointsPrimaryFinisher: number;\n    /**\n     * @generated from protobuf field: int32 minimum_combo_points_secondary_finisher = 7;\n     */\n    minimumComboPointsSecondaryFinisher: number;\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.Frequency MultiTargetSliceFrequency = 8 [json_name = \"MultiTargetSliceFrequency\"];\n     */\n    multiTargetSliceFrequency: Rogue_Rotation_Frequency;\n    /**\n     * @generated from protobuf field: int32 minimum_combo_points_multi_target_slice = 9;\n     */\n    minimumComboPointsMultiTargetSlice: number;\n    /**\n     * @generated from protobuf field: int32 envenom_pool_amount = 10;\n     */\n    envenomPoolAmount: number;\n    /**\n     * @generated from protobuf field: bool use_feint = 11;\n     */\n    useFeint: boolean;\n    /**\n     * @generated from protobuf field: bool allow_cp_overcap = 12;\n     */\n    allowCpOvercap: boolean;\n    /**\n     * @generated from protobuf field: bool allow_cp_undercap = 13;\n     */\n    allowCpUndercap: boolean;\n    /**\n     * @generated from protobuf field: bool open_with_garrote = 14;\n     */\n    openWithGarrote: boolean;\n    /**\n     * @generated from protobuf field: bool rupture_for_bleed = 15;\n     */\n    ruptureForBleed: boolean;\n}\n/**\n * @generated from protobuf enum proto.Rogue.Rotation.Frequency\n */\nexport enum Rogue_Rotation_Frequency {\n    /**\n     * @generated from protobuf enum value: Never = 0;\n     */\n    Never = 0,\n    /**\n     * @generated from protobuf enum value: Once = 1;\n     */\n    Once = 1,\n    /**\n     * @generated from protobuf enum value: Maintain = 2;\n     */\n    Maintain = 2,\n    /**\n     * @generated from protobuf enum value: Build = 3;\n     */\n    Build = 3,\n    /**\n     * @generated from protobuf enum value: Fill = 4;\n     */\n    Fill = 4,\n    /**\n     * @generated from protobuf enum value: FrequencyUnknown = 5;\n     */\n    FrequencyUnknown = 5\n}\n/**\n * @generated from protobuf enum proto.Rogue.Rotation.CombatPriority\n */\nexport enum Rogue_Rotation_CombatPriority {\n    /**\n     * @generated from protobuf enum value: RuptureEviscerate = 0;\n     */\n    RuptureEviscerate = 0,\n    /**\n     * @generated from protobuf enum value: EviscerateRupture = 1;\n     */\n    EviscerateRupture = 1,\n    /**\n     * @generated from protobuf enum value: CombatPriorityUnknown = 2;\n     */\n    CombatPriorityUnknown = 2\n}\n/**\n * @generated from protobuf enum proto.Rogue.Rotation.AssassinationPriority\n */\nexport enum Rogue_Rotation_AssassinationPriority {\n    /**\n     * @generated from protobuf enum value: EnvenomRupture = 0;\n     */\n    EnvenomRupture = 0,\n    /**\n     * @generated from protobuf enum value: RuptureEnvenom = 1;\n     */\n    RuptureEnvenom = 1,\n    /**\n     * @generated from protobuf enum value: AssassinationPriorityUnknown = 2;\n     */\n    AssassinationPriorityUnknown = 2\n}\n/**\n * @generated from protobuf message proto.Rogue.Options\n */\nexport interface Rogue_Options {\n    /**\n     * @generated from protobuf field: proto.RaidTarget tricks_of_the_trade_target = 1;\n     */\n    tricksOfTheTradeTarget?: RaidTarget;\n    /**\n     * @generated from protobuf field: proto.Rogue.Options.PoisonImbue mh_imbue = 2;\n     */\n    mhImbue: Rogue_Options_PoisonImbue;\n    /**\n     * @generated from protobuf field: proto.Rogue.Options.PoisonImbue oh_imbue = 3;\n     */\n    ohImbue: Rogue_Options_PoisonImbue;\n    /**\n     * @generated from protobuf field: int32 starting_overkill_duration = 4;\n     */\n    startingOverkillDuration: number;\n    /**\n     * @generated from protobuf field: bool apply_poisons_manually = 5;\n     */\n    applyPoisonsManually: boolean;\n}\n/**\n * @generated from protobuf enum proto.Rogue.Options.PoisonImbue\n */\nexport enum Rogue_Options_PoisonImbue {\n    /**\n     * @generated from protobuf enum value: NoPoison = 0;\n     */\n    NoPoison = 0,\n    /**\n     * @generated from protobuf enum value: InstantPoison = 1;\n     */\n    InstantPoison = 1,\n    /**\n     * @generated from protobuf enum value: DeadlyPoison = 2;\n     */\n    DeadlyPoison = 2,\n    /**\n     * @generated from protobuf enum value: WoundPoison = 3;\n     */\n    WoundPoison = 3\n}\n/**\n * @generated from protobuf enum proto.RogueMajorGlyph\n */\nexport enum RogueMajorGlyph {\n    /**\n     * @generated from protobuf enum value: RogueMajorGlyphNone = 0;\n     */\n    RogueMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAdrenalineRush = 42954;\n     */\n    GlyphOfAdrenalineRush = 42954,\n    /**\n     * @generated from protobuf enum value: GlyphOfAmbush = 42955;\n     */\n    GlyphOfAmbush = 42955,\n    /**\n     * @generated from protobuf enum value: GlyphOfBackstab = 42956;\n     */\n    GlyphOfBackstab = 42956,\n    /**\n     * @generated from protobuf enum value: GlyphOfBladeFlurry = 42957;\n     */\n    GlyphOfBladeFlurry = 42957,\n    /**\n     * @generated from protobuf enum value: GlyphOfCloakOfShadows = 45769;\n     */\n    GlyphOfCloakOfShadows = 45769,\n    /**\n     * @generated from protobuf enum value: GlyphOfCripplingPoison = 42958;\n     */\n    GlyphOfCripplingPoison = 42958,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeadlyThrow = 42959;\n     */\n    GlyphOfDeadlyThrow = 42959,\n    /**\n     * @generated from protobuf enum value: GlyphOfEvasion = 42960;\n     */\n    GlyphOfEvasion = 42960,\n    /**\n     * @generated from protobuf enum value: GlyphOfEviscerate = 42961;\n     */\n    GlyphOfEviscerate = 42961,\n    /**\n     * @generated from protobuf enum value: GlyphOfExposeArmor = 42962;\n     */\n    GlyphOfExposeArmor = 42962,\n    /**\n     * @generated from protobuf enum value: GlyphOfFanOfKnives = 45766;\n     */\n    GlyphOfFanOfKnives = 45766,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeint = 42963;\n     */\n    GlyphOfFeint = 42963,\n    /**\n     * @generated from protobuf enum value: GlyphOfGarrote = 42964;\n     */\n    GlyphOfGarrote = 42964,\n    /**\n     * @generated from protobuf enum value: GlyphOfGhostlyStrike = 42965;\n     */\n    GlyphOfGhostlyStrike = 42965,\n    /**\n     * @generated from protobuf enum value: GlyphOfGouge = 42966;\n     */\n    GlyphOfGouge = 42966,\n    /**\n     * @generated from protobuf enum value: GlyphOfHemorrhage = 42967;\n     */\n    GlyphOfHemorrhage = 42967,\n    /**\n     * @generated from protobuf enum value: GlyphOfHungerForBlood = 45761;\n     */\n    GlyphOfHungerForBlood = 45761,\n    /**\n     * @generated from protobuf enum value: GlyphOfKillingSpree = 45762;\n     */\n    GlyphOfKillingSpree = 45762,\n    /**\n     * @generated from protobuf enum value: GlyphOfMutilate = 45768;\n     */\n    GlyphOfMutilate = 45768,\n    /**\n     * @generated from protobuf enum value: GlyphOfPreparation = 42968;\n     */\n    GlyphOfPreparation = 42968,\n    /**\n     * @generated from protobuf enum value: GlyphOfRupture = 42969;\n     */\n    GlyphOfRupture = 42969,\n    /**\n     * @generated from protobuf enum value: GlyphOfSap = 42970;\n     */\n    GlyphOfSap = 42970,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowDance = 45764;\n     */\n    GlyphOfShadowDance = 45764,\n    /**\n     * @generated from protobuf enum value: GlyphOfSinisterStrike = 42972;\n     */\n    GlyphOfSinisterStrike = 42972,\n    /**\n     * @generated from protobuf enum value: GlyphOfSliceAndDice = 42973;\n     */\n    GlyphOfSliceAndDice = 42973,\n    /**\n     * @generated from protobuf enum value: GlyphOfSprint = 42974;\n     */\n    GlyphOfSprint = 42974,\n    /**\n     * @generated from protobuf enum value: GlyphOfTricksOfTheTrade = 45767;\n     */\n    GlyphOfTricksOfTheTrade = 45767,\n    /**\n     * @generated from protobuf enum value: GlyphOfVigor = 42971;\n     */\n    GlyphOfVigor = 42971\n}\n/**\n * @generated from protobuf enum proto.RogueMinorGlyph\n */\nexport enum RogueMinorGlyph {\n    /**\n     * @generated from protobuf enum value: RogueMinorGlyphNone = 0;\n     */\n    RogueMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlurredSpeed = 43379;\n     */\n    GlyphOfBlurredSpeed = 43379,\n    /**\n     * @generated from protobuf enum value: GlyphOfDistract = 43376;\n     */\n    GlyphOfDistract = 43376,\n    /**\n     * @generated from protobuf enum value: GlyphOfPickLock = 43377;\n     */\n    GlyphOfPickLock = 43377,\n    /**\n     * @generated from protobuf enum value: GlyphOfPickPocket = 43343;\n     */\n    GlyphOfPickPocket = 43343,\n    /**\n     * @generated from protobuf enum value: GlyphOfSafeFall = 43378;\n     */\n    GlyphOfSafeFall = 43378,\n    /**\n     * @generated from protobuf enum value: GlyphOfVanish = 43380;\n     */\n    GlyphOfVanish = 43380\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass RogueTalents$Type extends MessageType<RogueTalents> {\n    constructor() {\n        super(\"proto.RogueTalents\", [\n            { no: 1, name: \"improved_eviscerate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"remorseless_attacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"malice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"ruthlessness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"blood_spatter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"puncturing_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"vigor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"improved_expose_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"lethality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"vile_poisons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"improved_poisons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"fleet_footed\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"cold_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"improved_kidney_shot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"quick_recovery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"seal_fate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"murder\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"deadly_brew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"overkill\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"deadened_nerves\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"focused_attacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"find_weakness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"master_poisoner\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"mutilate\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"turn_the_tables\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"cut_to_the_chase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"hunger_for_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"improved_gouge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"improved_sinister_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"dual_wield_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"improved_slice_and_dice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"endurance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"riposte\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"close_quarters_combat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"improved_kick\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"improved_sprint\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"lightning_reflexes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"aggression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"mace_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"blade_flurry\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 43, name: \"hack_and_slash\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"weapon_expertise\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"blade_twisting\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"vitality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"adrenaline_rush\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"nerves_of_steel\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"throwing_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"combat_potency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"unfair_advantage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"surprise_attacks\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"savage_combat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"prey_on_the_weak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"killing_spree\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"relentless_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"master_of_deception\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"opportunity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"sleight_of_hand\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"dirty_tricks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"camouflage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"elusiveness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"ghostly_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 64, name: \"serrated_blades\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"setup\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"initiative\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"improved_ambush\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"heightened_senses\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"preparation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 70, name: \"dirty_deeds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"hemorrhage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 72, name: \"master_of_subtlety\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"deadliness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"enveloping_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"premeditation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 76, name: \"cheat_death\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"sinister_calling\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"waylay\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"honor_among_thieves\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"shadowstep\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 81, name: \"filthy_tricks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 82, name: \"slaughter_from_the_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"shadow_dance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RogueTalents>): RogueTalents {\n        const message = { improvedEviscerate: 0, remorselessAttacks: 0, malice: 0, ruthlessness: 0, bloodSpatter: 0, puncturingWounds: 0, vigor: false, improvedExposeArmor: 0, lethality: 0, vilePoisons: 0, improvedPoisons: 0, fleetFooted: 0, coldBlood: false, improvedKidneyShot: 0, quickRecovery: 0, sealFate: 0, murder: 0, deadlyBrew: 0, overkill: false, deadenedNerves: 0, focusedAttacks: 0, findWeakness: 0, masterPoisoner: 0, mutilate: false, turnTheTables: 0, cutToTheChase: 0, hungerForBlood: false, improvedGouge: 0, improvedSinisterStrike: 0, dualWieldSpecialization: 0, improvedSliceAndDice: 0, deflection: 0, precision: 0, endurance: 0, riposte: false, closeQuartersCombat: 0, improvedKick: 0, improvedSprint: 0, lightningReflexes: 0, aggression: 0, maceSpecialization: 0, bladeFlurry: false, hackAndSlash: 0, weaponExpertise: 0, bladeTwisting: 0, vitality: 0, adrenalineRush: false, nervesOfSteel: 0, throwingSpecialization: 0, combatPotency: 0, unfairAdvantage: 0, surpriseAttacks: false, savageCombat: 0, preyOnTheWeak: 0, killingSpree: false, relentlessStrikes: 0, masterOfDeception: 0, opportunity: 0, sleightOfHand: 0, dirtyTricks: 0, camouflage: 0, elusiveness: 0, ghostlyStrike: false, serratedBlades: 0, setup: 0, initiative: 0, improvedAmbush: 0, heightenedSenses: 0, preparation: false, dirtyDeeds: 0, hemorrhage: false, masterOfSubtlety: 0, deadliness: 0, envelopingShadows: 0, premeditation: false, cheatDeath: 0, sinisterCalling: 0, waylay: 0, honorAmongThieves: 0, shadowstep: false, filthyTricks: 0, slaughterFromTheShadows: 0, shadowDance: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RogueTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueTalents): RogueTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_eviscerate */ 1:\n                    message.improvedEviscerate = reader.int32();\n                    break;\n                case /* int32 remorseless_attacks */ 2:\n                    message.remorselessAttacks = reader.int32();\n                    break;\n                case /* int32 malice */ 3:\n                    message.malice = reader.int32();\n                    break;\n                case /* int32 ruthlessness */ 4:\n                    message.ruthlessness = reader.int32();\n                    break;\n                case /* int32 blood_spatter */ 5:\n                    message.bloodSpatter = reader.int32();\n                    break;\n                case /* int32 puncturing_wounds */ 6:\n                    message.puncturingWounds = reader.int32();\n                    break;\n                case /* bool vigor */ 7:\n                    message.vigor = reader.bool();\n                    break;\n                case /* int32 improved_expose_armor */ 8:\n                    message.improvedExposeArmor = reader.int32();\n                    break;\n                case /* int32 lethality */ 9:\n                    message.lethality = reader.int32();\n                    break;\n                case /* int32 vile_poisons */ 10:\n                    message.vilePoisons = reader.int32();\n                    break;\n                case /* int32 improved_poisons */ 11:\n                    message.improvedPoisons = reader.int32();\n                    break;\n                case /* int32 fleet_footed */ 12:\n                    message.fleetFooted = reader.int32();\n                    break;\n                case /* bool cold_blood */ 13:\n                    message.coldBlood = reader.bool();\n                    break;\n                case /* int32 improved_kidney_shot */ 14:\n                    message.improvedKidneyShot = reader.int32();\n                    break;\n                case /* int32 quick_recovery */ 15:\n                    message.quickRecovery = reader.int32();\n                    break;\n                case /* int32 seal_fate */ 16:\n                    message.sealFate = reader.int32();\n                    break;\n                case /* int32 murder */ 17:\n                    message.murder = reader.int32();\n                    break;\n                case /* int32 deadly_brew */ 18:\n                    message.deadlyBrew = reader.int32();\n                    break;\n                case /* bool overkill */ 19:\n                    message.overkill = reader.bool();\n                    break;\n                case /* int32 deadened_nerves */ 20:\n                    message.deadenedNerves = reader.int32();\n                    break;\n                case /* int32 focused_attacks */ 21:\n                    message.focusedAttacks = reader.int32();\n                    break;\n                case /* int32 find_weakness */ 22:\n                    message.findWeakness = reader.int32();\n                    break;\n                case /* int32 master_poisoner */ 23:\n                    message.masterPoisoner = reader.int32();\n                    break;\n                case /* bool mutilate */ 24:\n                    message.mutilate = reader.bool();\n                    break;\n                case /* int32 turn_the_tables */ 25:\n                    message.turnTheTables = reader.int32();\n                    break;\n                case /* int32 cut_to_the_chase */ 26:\n                    message.cutToTheChase = reader.int32();\n                    break;\n                case /* bool hunger_for_blood */ 27:\n                    message.hungerForBlood = reader.bool();\n                    break;\n                case /* int32 improved_gouge */ 28:\n                    message.improvedGouge = reader.int32();\n                    break;\n                case /* int32 improved_sinister_strike */ 29:\n                    message.improvedSinisterStrike = reader.int32();\n                    break;\n                case /* int32 dual_wield_specialization */ 30:\n                    message.dualWieldSpecialization = reader.int32();\n                    break;\n                case /* int32 improved_slice_and_dice */ 31:\n                    message.improvedSliceAndDice = reader.int32();\n                    break;\n                case /* int32 deflection */ 32:\n                    message.deflection = reader.int32();\n                    break;\n                case /* int32 precision */ 33:\n                    message.precision = reader.int32();\n                    break;\n                case /* int32 endurance */ 34:\n                    message.endurance = reader.int32();\n                    break;\n                case /* bool riposte */ 35:\n                    message.riposte = reader.bool();\n                    break;\n                case /* int32 close_quarters_combat */ 36:\n                    message.closeQuartersCombat = reader.int32();\n                    break;\n                case /* int32 improved_kick */ 37:\n                    message.improvedKick = reader.int32();\n                    break;\n                case /* int32 improved_sprint */ 38:\n                    message.improvedSprint = reader.int32();\n                    break;\n                case /* int32 lightning_reflexes */ 39:\n                    message.lightningReflexes = reader.int32();\n                    break;\n                case /* int32 aggression */ 40:\n                    message.aggression = reader.int32();\n                    break;\n                case /* int32 mace_specialization */ 41:\n                    message.maceSpecialization = reader.int32();\n                    break;\n                case /* bool blade_flurry */ 42:\n                    message.bladeFlurry = reader.bool();\n                    break;\n                case /* int32 hack_and_slash */ 43:\n                    message.hackAndSlash = reader.int32();\n                    break;\n                case /* int32 weapon_expertise */ 44:\n                    message.weaponExpertise = reader.int32();\n                    break;\n                case /* int32 blade_twisting */ 45:\n                    message.bladeTwisting = reader.int32();\n                    break;\n                case /* int32 vitality */ 46:\n                    message.vitality = reader.int32();\n                    break;\n                case /* bool adrenaline_rush */ 47:\n                    message.adrenalineRush = reader.bool();\n                    break;\n                case /* int32 nerves_of_steel */ 48:\n                    message.nervesOfSteel = reader.int32();\n                    break;\n                case /* int32 throwing_specialization */ 49:\n                    message.throwingSpecialization = reader.int32();\n                    break;\n                case /* int32 combat_potency */ 50:\n                    message.combatPotency = reader.int32();\n                    break;\n                case /* int32 unfair_advantage */ 51:\n                    message.unfairAdvantage = reader.int32();\n                    break;\n                case /* bool surprise_attacks */ 52:\n                    message.surpriseAttacks = reader.bool();\n                    break;\n                case /* int32 savage_combat */ 53:\n                    message.savageCombat = reader.int32();\n                    break;\n                case /* int32 prey_on_the_weak */ 54:\n                    message.preyOnTheWeak = reader.int32();\n                    break;\n                case /* bool killing_spree */ 55:\n                    message.killingSpree = reader.bool();\n                    break;\n                case /* int32 relentless_strikes */ 56:\n                    message.relentlessStrikes = reader.int32();\n                    break;\n                case /* int32 master_of_deception */ 57:\n                    message.masterOfDeception = reader.int32();\n                    break;\n                case /* int32 opportunity */ 58:\n                    message.opportunity = reader.int32();\n                    break;\n                case /* int32 sleight_of_hand */ 59:\n                    message.sleightOfHand = reader.int32();\n                    break;\n                case /* int32 dirty_tricks */ 60:\n                    message.dirtyTricks = reader.int32();\n                    break;\n                case /* int32 camouflage */ 61:\n                    message.camouflage = reader.int32();\n                    break;\n                case /* int32 elusiveness */ 62:\n                    message.elusiveness = reader.int32();\n                    break;\n                case /* bool ghostly_strike */ 63:\n                    message.ghostlyStrike = reader.bool();\n                    break;\n                case /* int32 serrated_blades */ 64:\n                    message.serratedBlades = reader.int32();\n                    break;\n                case /* int32 setup */ 65:\n                    message.setup = reader.int32();\n                    break;\n                case /* int32 initiative */ 66:\n                    message.initiative = reader.int32();\n                    break;\n                case /* int32 improved_ambush */ 67:\n                    message.improvedAmbush = reader.int32();\n                    break;\n                case /* int32 heightened_senses */ 68:\n                    message.heightenedSenses = reader.int32();\n                    break;\n                case /* bool preparation */ 69:\n                    message.preparation = reader.bool();\n                    break;\n                case /* int32 dirty_deeds */ 70:\n                    message.dirtyDeeds = reader.int32();\n                    break;\n                case /* bool hemorrhage */ 71:\n                    message.hemorrhage = reader.bool();\n                    break;\n                case /* int32 master_of_subtlety */ 72:\n                    message.masterOfSubtlety = reader.int32();\n                    break;\n                case /* int32 deadliness */ 73:\n                    message.deadliness = reader.int32();\n                    break;\n                case /* int32 enveloping_shadows */ 74:\n                    message.envelopingShadows = reader.int32();\n                    break;\n                case /* bool premeditation */ 75:\n                    message.premeditation = reader.bool();\n                    break;\n                case /* int32 cheat_death */ 76:\n                    message.cheatDeath = reader.int32();\n                    break;\n                case /* int32 sinister_calling */ 77:\n                    message.sinisterCalling = reader.int32();\n                    break;\n                case /* int32 waylay */ 78:\n                    message.waylay = reader.int32();\n                    break;\n                case /* int32 honor_among_thieves */ 79:\n                    message.honorAmongThieves = reader.int32();\n                    break;\n                case /* bool shadowstep */ 80:\n                    message.shadowstep = reader.bool();\n                    break;\n                case /* int32 filthy_tricks */ 81:\n                    message.filthyTricks = reader.int32();\n                    break;\n                case /* int32 slaughter_from_the_shadows */ 82:\n                    message.slaughterFromTheShadows = reader.int32();\n                    break;\n                case /* bool shadow_dance */ 83:\n                    message.shadowDance = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RogueTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_eviscerate = 1; */\n        if (message.improvedEviscerate !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedEviscerate);\n        /* int32 remorseless_attacks = 2; */\n        if (message.remorselessAttacks !== 0)\n            writer.tag(2, WireType.Varint).int32(message.remorselessAttacks);\n        /* int32 malice = 3; */\n        if (message.malice !== 0)\n            writer.tag(3, WireType.Varint).int32(message.malice);\n        /* int32 ruthlessness = 4; */\n        if (message.ruthlessness !== 0)\n            writer.tag(4, WireType.Varint).int32(message.ruthlessness);\n        /* int32 blood_spatter = 5; */\n        if (message.bloodSpatter !== 0)\n            writer.tag(5, WireType.Varint).int32(message.bloodSpatter);\n        /* int32 puncturing_wounds = 6; */\n        if (message.puncturingWounds !== 0)\n            writer.tag(6, WireType.Varint).int32(message.puncturingWounds);\n        /* bool vigor = 7; */\n        if (message.vigor !== false)\n            writer.tag(7, WireType.Varint).bool(message.vigor);\n        /* int32 improved_expose_armor = 8; */\n        if (message.improvedExposeArmor !== 0)\n            writer.tag(8, WireType.Varint).int32(message.improvedExposeArmor);\n        /* int32 lethality = 9; */\n        if (message.lethality !== 0)\n            writer.tag(9, WireType.Varint).int32(message.lethality);\n        /* int32 vile_poisons = 10; */\n        if (message.vilePoisons !== 0)\n            writer.tag(10, WireType.Varint).int32(message.vilePoisons);\n        /* int32 improved_poisons = 11; */\n        if (message.improvedPoisons !== 0)\n            writer.tag(11, WireType.Varint).int32(message.improvedPoisons);\n        /* int32 fleet_footed = 12; */\n        if (message.fleetFooted !== 0)\n            writer.tag(12, WireType.Varint).int32(message.fleetFooted);\n        /* bool cold_blood = 13; */\n        if (message.coldBlood !== false)\n            writer.tag(13, WireType.Varint).bool(message.coldBlood);\n        /* int32 improved_kidney_shot = 14; */\n        if (message.improvedKidneyShot !== 0)\n            writer.tag(14, WireType.Varint).int32(message.improvedKidneyShot);\n        /* int32 quick_recovery = 15; */\n        if (message.quickRecovery !== 0)\n            writer.tag(15, WireType.Varint).int32(message.quickRecovery);\n        /* int32 seal_fate = 16; */\n        if (message.sealFate !== 0)\n            writer.tag(16, WireType.Varint).int32(message.sealFate);\n        /* int32 murder = 17; */\n        if (message.murder !== 0)\n            writer.tag(17, WireType.Varint).int32(message.murder);\n        /* int32 deadly_brew = 18; */\n        if (message.deadlyBrew !== 0)\n            writer.tag(18, WireType.Varint).int32(message.deadlyBrew);\n        /* bool overkill = 19; */\n        if (message.overkill !== false)\n            writer.tag(19, WireType.Varint).bool(message.overkill);\n        /* int32 deadened_nerves = 20; */\n        if (message.deadenedNerves !== 0)\n            writer.tag(20, WireType.Varint).int32(message.deadenedNerves);\n        /* int32 focused_attacks = 21; */\n        if (message.focusedAttacks !== 0)\n            writer.tag(21, WireType.Varint).int32(message.focusedAttacks);\n        /* int32 find_weakness = 22; */\n        if (message.findWeakness !== 0)\n            writer.tag(22, WireType.Varint).int32(message.findWeakness);\n        /* int32 master_poisoner = 23; */\n        if (message.masterPoisoner !== 0)\n            writer.tag(23, WireType.Varint).int32(message.masterPoisoner);\n        /* bool mutilate = 24; */\n        if (message.mutilate !== false)\n            writer.tag(24, WireType.Varint).bool(message.mutilate);\n        /* int32 turn_the_tables = 25; */\n        if (message.turnTheTables !== 0)\n            writer.tag(25, WireType.Varint).int32(message.turnTheTables);\n        /* int32 cut_to_the_chase = 26; */\n        if (message.cutToTheChase !== 0)\n            writer.tag(26, WireType.Varint).int32(message.cutToTheChase);\n        /* bool hunger_for_blood = 27; */\n        if (message.hungerForBlood !== false)\n            writer.tag(27, WireType.Varint).bool(message.hungerForBlood);\n        /* int32 improved_gouge = 28; */\n        if (message.improvedGouge !== 0)\n            writer.tag(28, WireType.Varint).int32(message.improvedGouge);\n        /* int32 improved_sinister_strike = 29; */\n        if (message.improvedSinisterStrike !== 0)\n            writer.tag(29, WireType.Varint).int32(message.improvedSinisterStrike);\n        /* int32 dual_wield_specialization = 30; */\n        if (message.dualWieldSpecialization !== 0)\n            writer.tag(30, WireType.Varint).int32(message.dualWieldSpecialization);\n        /* int32 improved_slice_and_dice = 31; */\n        if (message.improvedSliceAndDice !== 0)\n            writer.tag(31, WireType.Varint).int32(message.improvedSliceAndDice);\n        /* int32 deflection = 32; */\n        if (message.deflection !== 0)\n            writer.tag(32, WireType.Varint).int32(message.deflection);\n        /* int32 precision = 33; */\n        if (message.precision !== 0)\n            writer.tag(33, WireType.Varint).int32(message.precision);\n        /* int32 endurance = 34; */\n        if (message.endurance !== 0)\n            writer.tag(34, WireType.Varint).int32(message.endurance);\n        /* bool riposte = 35; */\n        if (message.riposte !== false)\n            writer.tag(35, WireType.Varint).bool(message.riposte);\n        /* int32 close_quarters_combat = 36; */\n        if (message.closeQuartersCombat !== 0)\n            writer.tag(36, WireType.Varint).int32(message.closeQuartersCombat);\n        /* int32 improved_kick = 37; */\n        if (message.improvedKick !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedKick);\n        /* int32 improved_sprint = 38; */\n        if (message.improvedSprint !== 0)\n            writer.tag(38, WireType.Varint).int32(message.improvedSprint);\n        /* int32 lightning_reflexes = 39; */\n        if (message.lightningReflexes !== 0)\n            writer.tag(39, WireType.Varint).int32(message.lightningReflexes);\n        /* int32 aggression = 40; */\n        if (message.aggression !== 0)\n            writer.tag(40, WireType.Varint).int32(message.aggression);\n        /* int32 mace_specialization = 41; */\n        if (message.maceSpecialization !== 0)\n            writer.tag(41, WireType.Varint).int32(message.maceSpecialization);\n        /* bool blade_flurry = 42; */\n        if (message.bladeFlurry !== false)\n            writer.tag(42, WireType.Varint).bool(message.bladeFlurry);\n        /* int32 hack_and_slash = 43; */\n        if (message.hackAndSlash !== 0)\n            writer.tag(43, WireType.Varint).int32(message.hackAndSlash);\n        /* int32 weapon_expertise = 44; */\n        if (message.weaponExpertise !== 0)\n            writer.tag(44, WireType.Varint).int32(message.weaponExpertise);\n        /* int32 blade_twisting = 45; */\n        if (message.bladeTwisting !== 0)\n            writer.tag(45, WireType.Varint).int32(message.bladeTwisting);\n        /* int32 vitality = 46; */\n        if (message.vitality !== 0)\n            writer.tag(46, WireType.Varint).int32(message.vitality);\n        /* bool adrenaline_rush = 47; */\n        if (message.adrenalineRush !== false)\n            writer.tag(47, WireType.Varint).bool(message.adrenalineRush);\n        /* int32 nerves_of_steel = 48; */\n        if (message.nervesOfSteel !== 0)\n            writer.tag(48, WireType.Varint).int32(message.nervesOfSteel);\n        /* int32 throwing_specialization = 49; */\n        if (message.throwingSpecialization !== 0)\n            writer.tag(49, WireType.Varint).int32(message.throwingSpecialization);\n        /* int32 combat_potency = 50; */\n        if (message.combatPotency !== 0)\n            writer.tag(50, WireType.Varint).int32(message.combatPotency);\n        /* int32 unfair_advantage = 51; */\n        if (message.unfairAdvantage !== 0)\n            writer.tag(51, WireType.Varint).int32(message.unfairAdvantage);\n        /* bool surprise_attacks = 52; */\n        if (message.surpriseAttacks !== false)\n            writer.tag(52, WireType.Varint).bool(message.surpriseAttacks);\n        /* int32 savage_combat = 53; */\n        if (message.savageCombat !== 0)\n            writer.tag(53, WireType.Varint).int32(message.savageCombat);\n        /* int32 prey_on_the_weak = 54; */\n        if (message.preyOnTheWeak !== 0)\n            writer.tag(54, WireType.Varint).int32(message.preyOnTheWeak);\n        /* bool killing_spree = 55; */\n        if (message.killingSpree !== false)\n            writer.tag(55, WireType.Varint).bool(message.killingSpree);\n        /* int32 relentless_strikes = 56; */\n        if (message.relentlessStrikes !== 0)\n            writer.tag(56, WireType.Varint).int32(message.relentlessStrikes);\n        /* int32 master_of_deception = 57; */\n        if (message.masterOfDeception !== 0)\n            writer.tag(57, WireType.Varint).int32(message.masterOfDeception);\n        /* int32 opportunity = 58; */\n        if (message.opportunity !== 0)\n            writer.tag(58, WireType.Varint).int32(message.opportunity);\n        /* int32 sleight_of_hand = 59; */\n        if (message.sleightOfHand !== 0)\n            writer.tag(59, WireType.Varint).int32(message.sleightOfHand);\n        /* int32 dirty_tricks = 60; */\n        if (message.dirtyTricks !== 0)\n            writer.tag(60, WireType.Varint).int32(message.dirtyTricks);\n        /* int32 camouflage = 61; */\n        if (message.camouflage !== 0)\n            writer.tag(61, WireType.Varint).int32(message.camouflage);\n        /* int32 elusiveness = 62; */\n        if (message.elusiveness !== 0)\n            writer.tag(62, WireType.Varint).int32(message.elusiveness);\n        /* bool ghostly_strike = 63; */\n        if (message.ghostlyStrike !== false)\n            writer.tag(63, WireType.Varint).bool(message.ghostlyStrike);\n        /* int32 serrated_blades = 64; */\n        if (message.serratedBlades !== 0)\n            writer.tag(64, WireType.Varint).int32(message.serratedBlades);\n        /* int32 setup = 65; */\n        if (message.setup !== 0)\n            writer.tag(65, WireType.Varint).int32(message.setup);\n        /* int32 initiative = 66; */\n        if (message.initiative !== 0)\n            writer.tag(66, WireType.Varint).int32(message.initiative);\n        /* int32 improved_ambush = 67; */\n        if (message.improvedAmbush !== 0)\n            writer.tag(67, WireType.Varint).int32(message.improvedAmbush);\n        /* int32 heightened_senses = 68; */\n        if (message.heightenedSenses !== 0)\n            writer.tag(68, WireType.Varint).int32(message.heightenedSenses);\n        /* bool preparation = 69; */\n        if (message.preparation !== false)\n            writer.tag(69, WireType.Varint).bool(message.preparation);\n        /* int32 dirty_deeds = 70; */\n        if (message.dirtyDeeds !== 0)\n            writer.tag(70, WireType.Varint).int32(message.dirtyDeeds);\n        /* bool hemorrhage = 71; */\n        if (message.hemorrhage !== false)\n            writer.tag(71, WireType.Varint).bool(message.hemorrhage);\n        /* int32 master_of_subtlety = 72; */\n        if (message.masterOfSubtlety !== 0)\n            writer.tag(72, WireType.Varint).int32(message.masterOfSubtlety);\n        /* int32 deadliness = 73; */\n        if (message.deadliness !== 0)\n            writer.tag(73, WireType.Varint).int32(message.deadliness);\n        /* int32 enveloping_shadows = 74; */\n        if (message.envelopingShadows !== 0)\n            writer.tag(74, WireType.Varint).int32(message.envelopingShadows);\n        /* bool premeditation = 75; */\n        if (message.premeditation !== false)\n            writer.tag(75, WireType.Varint).bool(message.premeditation);\n        /* int32 cheat_death = 76; */\n        if (message.cheatDeath !== 0)\n            writer.tag(76, WireType.Varint).int32(message.cheatDeath);\n        /* int32 sinister_calling = 77; */\n        if (message.sinisterCalling !== 0)\n            writer.tag(77, WireType.Varint).int32(message.sinisterCalling);\n        /* int32 waylay = 78; */\n        if (message.waylay !== 0)\n            writer.tag(78, WireType.Varint).int32(message.waylay);\n        /* int32 honor_among_thieves = 79; */\n        if (message.honorAmongThieves !== 0)\n            writer.tag(79, WireType.Varint).int32(message.honorAmongThieves);\n        /* bool shadowstep = 80; */\n        if (message.shadowstep !== false)\n            writer.tag(80, WireType.Varint).bool(message.shadowstep);\n        /* int32 filthy_tricks = 81; */\n        if (message.filthyTricks !== 0)\n            writer.tag(81, WireType.Varint).int32(message.filthyTricks);\n        /* int32 slaughter_from_the_shadows = 82; */\n        if (message.slaughterFromTheShadows !== 0)\n            writer.tag(82, WireType.Varint).int32(message.slaughterFromTheShadows);\n        /* bool shadow_dance = 83; */\n        if (message.shadowDance !== false)\n            writer.tag(83, WireType.Varint).bool(message.shadowDance);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RogueTalents\n */\nexport const RogueTalents = new RogueTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Rogue$Type extends MessageType<Rogue> {\n    constructor() {\n        super(\"proto.Rogue\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Rogue_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => RogueTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Rogue_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Rogue>): Rogue {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Rogue>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Rogue): Rogue {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Rogue.Rotation rotation */ 1:\n                    message.rotation = Rogue_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.RogueTalents talents */ 2:\n                    message.talents = RogueTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.Rogue.Options options */ 3:\n                    message.options = Rogue_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Rogue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Rogue.Rotation rotation = 1; */\n        if (message.rotation)\n            Rogue_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RogueTalents talents = 2; */\n        if (message.talents)\n            RogueTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Rogue.Options options = 3; */\n        if (message.options)\n            Rogue_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Rogue\n */\nexport const Rogue = new Rogue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Rogue_Rotation$Type extends MessageType<Rogue_Rotation> {\n    constructor() {\n        super(\"proto.Rogue.Rotation\", [\n            { no: 1, name: \"expose_armor_frequency\", kind: \"enum\", T: () => [\"proto.Rogue.Rotation.Frequency\", Rogue_Rotation_Frequency] },\n            { no: 2, name: \"minimum_combo_points_expose_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"tricks_of_the_trade_frequency\", kind: \"enum\", T: () => [\"proto.Rogue.Rotation.Frequency\", Rogue_Rotation_Frequency] },\n            { no: 4, name: \"combat_finisher_priority\", kind: \"enum\", T: () => [\"proto.Rogue.Rotation.CombatPriority\", Rogue_Rotation_CombatPriority] },\n            { no: 5, name: \"assassination_finisher_priority\", kind: \"enum\", T: () => [\"proto.Rogue.Rotation.AssassinationPriority\", Rogue_Rotation_AssassinationPriority] },\n            { no: 6, name: \"minimum_combo_points_primary_finisher\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"minimum_combo_points_secondary_finisher\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"MultiTargetSliceFrequency\", kind: \"enum\", jsonName: \"MultiTargetSliceFrequency\", T: () => [\"proto.Rogue.Rotation.Frequency\", Rogue_Rotation_Frequency] },\n            { no: 9, name: \"minimum_combo_points_multi_target_slice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"envenom_pool_amount\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"use_feint\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"allow_cp_overcap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"allow_cp_undercap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"open_with_garrote\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"rupture_for_bleed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Rogue_Rotation>): Rogue_Rotation {\n        const message = { exposeArmorFrequency: 0, minimumComboPointsExposeArmor: 0, tricksOfTheTradeFrequency: 0, combatFinisherPriority: 0, assassinationFinisherPriority: 0, minimumComboPointsPrimaryFinisher: 0, minimumComboPointsSecondaryFinisher: 0, multiTargetSliceFrequency: 0, minimumComboPointsMultiTargetSlice: 0, envenomPoolAmount: 0, useFeint: false, allowCpOvercap: false, allowCpUndercap: false, openWithGarrote: false, ruptureForBleed: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Rogue_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Rogue_Rotation): Rogue_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Rogue.Rotation.Frequency expose_armor_frequency */ 1:\n                    message.exposeArmorFrequency = reader.int32();\n                    break;\n                case /* int32 minimum_combo_points_expose_armor */ 2:\n                    message.minimumComboPointsExposeArmor = reader.int32();\n                    break;\n                case /* proto.Rogue.Rotation.Frequency tricks_of_the_trade_frequency */ 3:\n                    message.tricksOfTheTradeFrequency = reader.int32();\n                    break;\n                case /* proto.Rogue.Rotation.CombatPriority combat_finisher_priority */ 4:\n                    message.combatFinisherPriority = reader.int32();\n                    break;\n                case /* proto.Rogue.Rotation.AssassinationPriority assassination_finisher_priority */ 5:\n                    message.assassinationFinisherPriority = reader.int32();\n                    break;\n                case /* int32 minimum_combo_points_primary_finisher */ 6:\n                    message.minimumComboPointsPrimaryFinisher = reader.int32();\n                    break;\n                case /* int32 minimum_combo_points_secondary_finisher */ 7:\n                    message.minimumComboPointsSecondaryFinisher = reader.int32();\n                    break;\n                case /* proto.Rogue.Rotation.Frequency MultiTargetSliceFrequency = 8 [json_name = \"MultiTargetSliceFrequency\"];*/ 8:\n                    message.multiTargetSliceFrequency = reader.int32();\n                    break;\n                case /* int32 minimum_combo_points_multi_target_slice */ 9:\n                    message.minimumComboPointsMultiTargetSlice = reader.int32();\n                    break;\n                case /* int32 envenom_pool_amount */ 10:\n                    message.envenomPoolAmount = reader.int32();\n                    break;\n                case /* bool use_feint */ 11:\n                    message.useFeint = reader.bool();\n                    break;\n                case /* bool allow_cp_overcap */ 12:\n                    message.allowCpOvercap = reader.bool();\n                    break;\n                case /* bool allow_cp_undercap */ 13:\n                    message.allowCpUndercap = reader.bool();\n                    break;\n                case /* bool open_with_garrote */ 14:\n                    message.openWithGarrote = reader.bool();\n                    break;\n                case /* bool rupture_for_bleed */ 15:\n                    message.ruptureForBleed = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Rogue_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Rogue.Rotation.Frequency expose_armor_frequency = 1; */\n        if (message.exposeArmorFrequency !== 0)\n            writer.tag(1, WireType.Varint).int32(message.exposeArmorFrequency);\n        /* int32 minimum_combo_points_expose_armor = 2; */\n        if (message.minimumComboPointsExposeArmor !== 0)\n            writer.tag(2, WireType.Varint).int32(message.minimumComboPointsExposeArmor);\n        /* proto.Rogue.Rotation.Frequency tricks_of_the_trade_frequency = 3; */\n        if (message.tricksOfTheTradeFrequency !== 0)\n            writer.tag(3, WireType.Varint).int32(message.tricksOfTheTradeFrequency);\n        /* proto.Rogue.Rotation.CombatPriority combat_finisher_priority = 4; */\n        if (message.combatFinisherPriority !== 0)\n            writer.tag(4, WireType.Varint).int32(message.combatFinisherPriority);\n        /* proto.Rogue.Rotation.AssassinationPriority assassination_finisher_priority = 5; */\n        if (message.assassinationFinisherPriority !== 0)\n            writer.tag(5, WireType.Varint).int32(message.assassinationFinisherPriority);\n        /* int32 minimum_combo_points_primary_finisher = 6; */\n        if (message.minimumComboPointsPrimaryFinisher !== 0)\n            writer.tag(6, WireType.Varint).int32(message.minimumComboPointsPrimaryFinisher);\n        /* int32 minimum_combo_points_secondary_finisher = 7; */\n        if (message.minimumComboPointsSecondaryFinisher !== 0)\n            writer.tag(7, WireType.Varint).int32(message.minimumComboPointsSecondaryFinisher);\n        /* proto.Rogue.Rotation.Frequency MultiTargetSliceFrequency = 8 [json_name = \"MultiTargetSliceFrequency\"]; */\n        if (message.multiTargetSliceFrequency !== 0)\n            writer.tag(8, WireType.Varint).int32(message.multiTargetSliceFrequency);\n        /* int32 minimum_combo_points_multi_target_slice = 9; */\n        if (message.minimumComboPointsMultiTargetSlice !== 0)\n            writer.tag(9, WireType.Varint).int32(message.minimumComboPointsMultiTargetSlice);\n        /* int32 envenom_pool_amount = 10; */\n        if (message.envenomPoolAmount !== 0)\n            writer.tag(10, WireType.Varint).int32(message.envenomPoolAmount);\n        /* bool use_feint = 11; */\n        if (message.useFeint !== false)\n            writer.tag(11, WireType.Varint).bool(message.useFeint);\n        /* bool allow_cp_overcap = 12; */\n        if (message.allowCpOvercap !== false)\n            writer.tag(12, WireType.Varint).bool(message.allowCpOvercap);\n        /* bool allow_cp_undercap = 13; */\n        if (message.allowCpUndercap !== false)\n            writer.tag(13, WireType.Varint).bool(message.allowCpUndercap);\n        /* bool open_with_garrote = 14; */\n        if (message.openWithGarrote !== false)\n            writer.tag(14, WireType.Varint).bool(message.openWithGarrote);\n        /* bool rupture_for_bleed = 15; */\n        if (message.ruptureForBleed !== false)\n            writer.tag(15, WireType.Varint).bool(message.ruptureForBleed);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Rogue.Rotation\n */\nexport const Rogue_Rotation = new Rogue_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Rogue_Options$Type extends MessageType<Rogue_Options> {\n    constructor() {\n        super(\"proto.Rogue.Options\", [\n            { no: 1, name: \"tricks_of_the_trade_target\", kind: \"message\", T: () => RaidTarget },\n            { no: 2, name: \"mh_imbue\", kind: \"enum\", T: () => [\"proto.Rogue.Options.PoisonImbue\", Rogue_Options_PoisonImbue] },\n            { no: 3, name: \"oh_imbue\", kind: \"enum\", T: () => [\"proto.Rogue.Options.PoisonImbue\", Rogue_Options_PoisonImbue] },\n            { no: 4, name: \"starting_overkill_duration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"apply_poisons_manually\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Rogue_Options>): Rogue_Options {\n        const message = { mhImbue: 0, ohImbue: 0, startingOverkillDuration: 0, applyPoisonsManually: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Rogue_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Rogue_Options): Rogue_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidTarget tricks_of_the_trade_target */ 1:\n                    message.tricksOfTheTradeTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.tricksOfTheTradeTarget);\n                    break;\n                case /* proto.Rogue.Options.PoisonImbue mh_imbue */ 2:\n                    message.mhImbue = reader.int32();\n                    break;\n                case /* proto.Rogue.Options.PoisonImbue oh_imbue */ 3:\n                    message.ohImbue = reader.int32();\n                    break;\n                case /* int32 starting_overkill_duration */ 4:\n                    message.startingOverkillDuration = reader.int32();\n                    break;\n                case /* bool apply_poisons_manually */ 5:\n                    message.applyPoisonsManually = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Rogue_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidTarget tricks_of_the_trade_target = 1; */\n        if (message.tricksOfTheTradeTarget)\n            RaidTarget.internalBinaryWrite(message.tricksOfTheTradeTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Rogue.Options.PoisonImbue mh_imbue = 2; */\n        if (message.mhImbue !== 0)\n            writer.tag(2, WireType.Varint).int32(message.mhImbue);\n        /* proto.Rogue.Options.PoisonImbue oh_imbue = 3; */\n        if (message.ohImbue !== 0)\n            writer.tag(3, WireType.Varint).int32(message.ohImbue);\n        /* int32 starting_overkill_duration = 4; */\n        if (message.startingOverkillDuration !== 0)\n            writer.tag(4, WireType.Varint).int32(message.startingOverkillDuration);\n        /* bool apply_poisons_manually = 5; */\n        if (message.applyPoisonsManually !== false)\n            writer.tag(5, WireType.Varint).bool(message.applyPoisonsManually);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Rogue.Options\n */\nexport const Rogue_Options = new Rogue_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"priest.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidTarget } from \"./common\";\n/**\n * WotLK talents\n *\n * @generated from protobuf message proto.PriestTalents\n */\nexport interface PriestTalents {\n    /**\n     * Discipline\n     *\n     * @generated from protobuf field: int32 unbreakable_will = 1;\n     */\n    unbreakableWill: number;\n    /**\n     * @generated from protobuf field: int32 twin_disciplines = 2;\n     */\n    twinDisciplines: number;\n    /**\n     * @generated from protobuf field: int32 silent_resolve = 3;\n     */\n    silentResolve: number;\n    /**\n     * @generated from protobuf field: int32 improved_inner_fire = 4;\n     */\n    improvedInnerFire: number;\n    /**\n     * @generated from protobuf field: int32 improved_power_word_fortitude = 5;\n     */\n    improvedPowerWordFortitude: number;\n    /**\n     * @generated from protobuf field: int32 martyrdom = 6;\n     */\n    martyrdom: number;\n    /**\n     * @generated from protobuf field: int32 meditation = 7;\n     */\n    meditation: number;\n    /**\n     * @generated from protobuf field: bool inner_focus = 8;\n     */\n    innerFocus: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_power_word_shield = 9;\n     */\n    improvedPowerWordShield: number;\n    /**\n     * @generated from protobuf field: int32 absolution = 10;\n     */\n    absolution: number;\n    /**\n     * @generated from protobuf field: int32 mental_agility = 11;\n     */\n    mentalAgility: number;\n    /**\n     * @generated from protobuf field: int32 improved_mana_burn = 12;\n     */\n    improvedManaBurn: number;\n    /**\n     * @generated from protobuf field: int32 reflective_shield = 13;\n     */\n    reflectiveShield: number;\n    /**\n     * @generated from protobuf field: int32 mental_strength = 14;\n     */\n    mentalStrength: number;\n    /**\n     * @generated from protobuf field: bool soul_warding = 15;\n     */\n    soulWarding: boolean;\n    /**\n     * @generated from protobuf field: int32 focused_power = 16;\n     */\n    focusedPower: number;\n    /**\n     * @generated from protobuf field: int32 enlightenment = 17;\n     */\n    enlightenment: number;\n    /**\n     * @generated from protobuf field: int32 focused_will = 18;\n     */\n    focusedWill: number;\n    /**\n     * @generated from protobuf field: bool power_infusion = 19;\n     */\n    powerInfusion: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_flash_heal = 20;\n     */\n    improvedFlashHeal: number;\n    /**\n     * @generated from protobuf field: int32 renewed_hope = 21;\n     */\n    renewedHope: number;\n    /**\n     * @generated from protobuf field: int32 rapture = 22;\n     */\n    rapture: number;\n    /**\n     * @generated from protobuf field: int32 aspiration = 23;\n     */\n    aspiration: number;\n    /**\n     * @generated from protobuf field: int32 divine_aegis = 24;\n     */\n    divineAegis: number;\n    /**\n     * @generated from protobuf field: bool pain_suppression = 25;\n     */\n    painSuppression: boolean;\n    /**\n     * @generated from protobuf field: int32 grace = 26;\n     */\n    grace: number;\n    /**\n     * @generated from protobuf field: int32 borrowed_time = 27;\n     */\n    borrowedTime: number;\n    /**\n     * @generated from protobuf field: bool penance = 28;\n     */\n    penance: boolean;\n    /**\n     * Holy\n     *\n     * @generated from protobuf field: int32 healing_focus = 29;\n     */\n    healingFocus: number;\n    /**\n     * @generated from protobuf field: int32 improved_renew = 30;\n     */\n    improvedRenew: number;\n    /**\n     * @generated from protobuf field: int32 holy_specialization = 31;\n     */\n    holySpecialization: number;\n    /**\n     * @generated from protobuf field: int32 spell_warding = 32;\n     */\n    spellWarding: number;\n    /**\n     * @generated from protobuf field: int32 divine_fury = 33;\n     */\n    divineFury: number;\n    /**\n     * @generated from protobuf field: bool desperate_prayer = 34;\n     */\n    desperatePrayer: boolean;\n    /**\n     * @generated from protobuf field: int32 blessed_recovery = 35;\n     */\n    blessedRecovery: number;\n    /**\n     * @generated from protobuf field: int32 inspiration = 36;\n     */\n    inspiration: number;\n    /**\n     * @generated from protobuf field: int32 holy_reach = 37;\n     */\n    holyReach: number;\n    /**\n     * @generated from protobuf field: int32 improved_healing = 38;\n     */\n    improvedHealing: number;\n    /**\n     * @generated from protobuf field: int32 searing_light = 39;\n     */\n    searingLight: number;\n    /**\n     * @generated from protobuf field: int32 healing_prayers = 40;\n     */\n    healingPrayers: number;\n    /**\n     * @generated from protobuf field: bool spirit_of_redemption = 41;\n     */\n    spiritOfRedemption: boolean;\n    /**\n     * @generated from protobuf field: int32 spiritual_guidance = 42;\n     */\n    spiritualGuidance: number;\n    /**\n     * @generated from protobuf field: int32 surge_of_light = 43;\n     */\n    surgeOfLight: number;\n    /**\n     * @generated from protobuf field: int32 spiritual_healing = 44;\n     */\n    spiritualHealing: number;\n    /**\n     * @generated from protobuf field: int32 holy_concentration = 45;\n     */\n    holyConcentration: number;\n    /**\n     * @generated from protobuf field: bool lightwell = 46;\n     */\n    lightwell: boolean;\n    /**\n     * @generated from protobuf field: int32 blessed_resilience = 47;\n     */\n    blessedResilience: number;\n    /**\n     * @generated from protobuf field: int32 body_and_soul = 48;\n     */\n    bodyAndSoul: number;\n    /**\n     * @generated from protobuf field: int32 empowered_healing = 49;\n     */\n    empoweredHealing: number;\n    /**\n     * @generated from protobuf field: int32 serendipity = 50;\n     */\n    serendipity: number;\n    /**\n     * @generated from protobuf field: int32 empowered_renew = 51;\n     */\n    empoweredRenew: number;\n    /**\n     * @generated from protobuf field: bool circle_of_healing = 52;\n     */\n    circleOfHealing: boolean;\n    /**\n     * @generated from protobuf field: int32 test_of_faith = 53;\n     */\n    testOfFaith: number;\n    /**\n     * @generated from protobuf field: int32 divine_providence = 54;\n     */\n    divineProvidence: number;\n    /**\n     * @generated from protobuf field: bool guardian_spirit = 55;\n     */\n    guardianSpirit: boolean;\n    /**\n     * Shadow\n     *\n     * @generated from protobuf field: int32 spirit_tap = 56;\n     */\n    spiritTap: number;\n    /**\n     * @generated from protobuf field: int32 improved_spirit_tap = 57;\n     */\n    improvedSpiritTap: number;\n    /**\n     * @generated from protobuf field: int32 darkness = 58;\n     */\n    darkness: number;\n    /**\n     * @generated from protobuf field: int32 shadow_affinity = 59;\n     */\n    shadowAffinity: number;\n    /**\n     * @generated from protobuf field: int32 improved_shadow_word_pain = 60;\n     */\n    improvedShadowWordPain: number;\n    /**\n     * @generated from protobuf field: int32 shadow_focus = 61;\n     */\n    shadowFocus: number;\n    /**\n     * @generated from protobuf field: int32 improved_psychic_scream = 62;\n     */\n    improvedPsychicScream: number;\n    /**\n     * @generated from protobuf field: int32 improved_mind_blast = 63;\n     */\n    improvedMindBlast: number;\n    /**\n     * @generated from protobuf field: bool mind_flay = 64;\n     */\n    mindFlay: boolean;\n    /**\n     * @generated from protobuf field: int32 veiled_shadows = 65;\n     */\n    veiledShadows: number;\n    /**\n     * @generated from protobuf field: int32 shadow_reach = 66;\n     */\n    shadowReach: number;\n    /**\n     * @generated from protobuf field: int32 shadow_weaving = 67;\n     */\n    shadowWeaving: number;\n    /**\n     * @generated from protobuf field: bool silence = 68;\n     */\n    silence: boolean;\n    /**\n     * @generated from protobuf field: bool vampiric_embrace = 69;\n     */\n    vampiricEmbrace: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_vampiric_embrace = 70;\n     */\n    improvedVampiricEmbrace: number;\n    /**\n     * @generated from protobuf field: int32 focused_mind = 71;\n     */\n    focusedMind: number;\n    /**\n     * @generated from protobuf field: int32 mind_melt = 72;\n     */\n    mindMelt: number;\n    /**\n     * @generated from protobuf field: int32 improved_devouring_plague = 73;\n     */\n    improvedDevouringPlague: number;\n    /**\n     * @generated from protobuf field: bool shadowform = 74;\n     */\n    shadowform: boolean;\n    /**\n     * @generated from protobuf field: int32 shadow_power = 75;\n     */\n    shadowPower: number;\n    /**\n     * @generated from protobuf field: int32 improved_shadowform = 76;\n     */\n    improvedShadowform: number;\n    /**\n     * @generated from protobuf field: int32 misery = 77;\n     */\n    misery: number;\n    /**\n     * @generated from protobuf field: bool psychic_horror = 78;\n     */\n    psychicHorror: boolean;\n    /**\n     * @generated from protobuf field: bool vampiric_touch = 79;\n     */\n    vampiricTouch: boolean;\n    /**\n     * @generated from protobuf field: int32 pain_and_suffering = 80;\n     */\n    painAndSuffering: number;\n    /**\n     * @generated from protobuf field: int32 twisted_faith = 81;\n     */\n    twistedFaith: number;\n    /**\n     * @generated from protobuf field: bool dispersion = 82;\n     */\n    dispersion: boolean;\n}\n/**\n * @generated from protobuf message proto.ShadowPriest\n */\nexport interface ShadowPriest {\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Rotation rotation = 1;\n     */\n    rotation?: ShadowPriest_Rotation;\n    /**\n     * @generated from protobuf field: proto.PriestTalents talents = 2;\n     */\n    talents?: PriestTalents;\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Options options = 3;\n     */\n    options?: ShadowPriest_Options;\n}\n/**\n * @generated from protobuf message proto.ShadowPriest.Rotation\n */\nexport interface ShadowPriest_Rotation {\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Rotation.RotationType rotation_type = 1;\n     */\n    rotationType: ShadowPriest_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: bool precast_vt = 2;\n     */\n    precastVt: boolean; // casts VT ahead of the start of the fight so that it lands on 0\n    /**\n     * @generated from protobuf field: double latency = 3;\n     */\n    latency: number; // Latency between actions\n}\n/**\n * @generated from protobuf enum proto.ShadowPriest.Rotation.RotationType\n */\nexport enum ShadowPriest_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Basic = 1;\n     */\n    Basic = 1,\n    /**\n     * @generated from protobuf enum value: Clipping = 2;\n     */\n    Clipping = 2,\n    /**\n     * @generated from protobuf enum value: Ideal = 3;\n     */\n    Ideal = 3,\n    /**\n     * @generated from protobuf enum value: AoE = 4;\n     */\n    AoE = 4\n}\n/**\n * @generated from protobuf message proto.ShadowPriest.Options\n */\nexport interface ShadowPriest_Options {\n    /**\n     * @generated from protobuf field: bool use_shadowfiend = 1;\n     */\n    useShadowfiend: boolean;\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Options.Armor armor = 2;\n     */\n    armor: ShadowPriest_Options_Armor;\n    /**\n     * @generated from protobuf field: bool use_mind_blast = 4;\n     */\n    useMindBlast: boolean;\n    /**\n     * @generated from protobuf field: bool use_shadow_word_death = 5;\n     */\n    useShadowWordDeath: boolean;\n}\n/**\n * @generated from protobuf enum proto.ShadowPriest.Options.Armor\n */\nexport enum ShadowPriest_Options_Armor {\n    /**\n     * @generated from protobuf enum value: NoArmor = 0;\n     */\n    NoArmor = 0,\n    /**\n     * @generated from protobuf enum value: InnerFire = 1;\n     */\n    InnerFire = 1\n}\n/**\n * @generated from protobuf message proto.SmitePriest\n */\nexport interface SmitePriest {\n    /**\n     * @generated from protobuf field: proto.SmitePriest.Rotation rotation = 1;\n     */\n    rotation?: SmitePriest_Rotation;\n    /**\n     * @generated from protobuf field: proto.PriestTalents talents = 2;\n     */\n    talents?: PriestTalents;\n    /**\n     * @generated from protobuf field: proto.SmitePriest.Options options = 3;\n     */\n    options?: SmitePriest_Options;\n}\n/**\n * @generated from protobuf message proto.SmitePriest.Rotation\n */\nexport interface SmitePriest_Rotation {\n    /**\n     * @generated from protobuf field: bool use_mind_blast = 2;\n     */\n    useMindBlast: boolean;\n    /**\n     * @generated from protobuf field: bool use_shadow_word_death = 3;\n     */\n    useShadowWordDeath: boolean;\n    /**\n     * @generated from protobuf field: bool use_devouring_plague = 4;\n     */\n    useDevouringPlague: boolean;\n    /**\n     * @generated from protobuf field: bool meme_dream = 5;\n     */\n    memeDream: boolean;\n    /**\n     * @generated from protobuf field: double allowed_holy_fire_delay_ms = 6;\n     */\n    allowedHolyFireDelayMs: number;\n}\n/**\n * @generated from protobuf message proto.SmitePriest.Options\n */\nexport interface SmitePriest_Options {\n    /**\n     * @generated from protobuf field: bool use_inner_fire = 3;\n     */\n    useInnerFire: boolean;\n    /**\n     * @generated from protobuf field: bool use_shadowfiend = 1;\n     */\n    useShadowfiend: boolean;\n    /**\n     * @generated from protobuf field: proto.RaidTarget power_infusion_target = 2;\n     */\n    powerInfusionTarget?: RaidTarget;\n}\n/**\n * @generated from protobuf message proto.HealingPriest\n */\nexport interface HealingPriest {\n    /**\n     * @generated from protobuf field: proto.HealingPriest.Rotation rotation = 1;\n     */\n    rotation?: HealingPriest_Rotation;\n    /**\n     * @generated from protobuf field: proto.PriestTalents talents = 2;\n     */\n    talents?: PriestTalents;\n    /**\n     * @generated from protobuf field: proto.HealingPriest.Options options = 3;\n     */\n    options?: HealingPriest_Options;\n}\n/**\n * @generated from protobuf message proto.HealingPriest.Rotation\n */\nexport interface HealingPriest_Rotation {\n}\n/**\n * @generated from protobuf message proto.HealingPriest.Options\n */\nexport interface HealingPriest_Options {\n    /**\n     * @generated from protobuf field: bool use_inner_fire = 3;\n     */\n    useInnerFire: boolean;\n    /**\n     * @generated from protobuf field: bool use_shadowfiend = 1;\n     */\n    useShadowfiend: boolean;\n    /**\n     * @generated from protobuf field: proto.RaidTarget power_infusion_target = 2;\n     */\n    powerInfusionTarget?: RaidTarget;\n}\n/**\n * @generated from protobuf enum proto.PriestMajorGlyph\n */\nexport enum PriestMajorGlyph {\n    /**\n     * @generated from protobuf enum value: PriestMajorGlyphNone = 0;\n     */\n    PriestMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfCircleOfHealing = 42396;\n     */\n    GlyphOfCircleOfHealing = 42396,\n    /**\n     * @generated from protobuf enum value: GlyphOfDispelMagic = 42397;\n     */\n    GlyphOfDispelMagic = 42397,\n    /**\n     * @generated from protobuf enum value: GlyphOfDispersion = 45753;\n     */\n    GlyphOfDispersion = 45753,\n    /**\n     * @generated from protobuf enum value: GlyphOfFade = 42398;\n     */\n    GlyphOfFade = 42398,\n    /**\n     * @generated from protobuf enum value: GlyphOfFearWard = 42399;\n     */\n    GlyphOfFearWard = 42399,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlashHeal = 42400;\n     */\n    GlyphOfFlashHeal = 42400,\n    /**\n     * @generated from protobuf enum value: GlyphOfGuardianSpirit = 45755;\n     */\n    GlyphOfGuardianSpirit = 45755,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyNova = 42401;\n     */\n    GlyphOfHolyNova = 42401,\n    /**\n     * @generated from protobuf enum value: GlyphOfHymnOfHope = 45758;\n     */\n    GlyphOfHymnOfHope = 45758,\n    /**\n     * @generated from protobuf enum value: GlyphOfInnerFire = 42402;\n     */\n    GlyphOfInnerFire = 42402,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightwell = 42403;\n     */\n    GlyphOfLightwell = 42403,\n    /**\n     * @generated from protobuf enum value: GlyphOfMassDispel = 42404;\n     */\n    GlyphOfMassDispel = 42404,\n    /**\n     * @generated from protobuf enum value: GlyphOfMindControl = 42405;\n     */\n    GlyphOfMindControl = 42405,\n    /**\n     * @generated from protobuf enum value: GlyphOfMindFlay = 42415;\n     */\n    GlyphOfMindFlay = 42415,\n    /**\n     * @generated from protobuf enum value: GlyphOfMindSear = 45757;\n     */\n    GlyphOfMindSear = 45757,\n    /**\n     * @generated from protobuf enum value: GlyphOfPainSuppression = 45760;\n     */\n    GlyphOfPainSuppression = 45760,\n    /**\n     * @generated from protobuf enum value: GlyphOfPenance = 45756;\n     */\n    GlyphOfPenance = 45756,\n    /**\n     * @generated from protobuf enum value: GlyphOfPowerWordShield = 42408;\n     */\n    GlyphOfPowerWordShield = 42408,\n    /**\n     * @generated from protobuf enum value: GlyphOfPrayerOfHealing = 42409;\n     */\n    GlyphOfPrayerOfHealing = 42409,\n    /**\n     * @generated from protobuf enum value: GlyphOfPsychicScream = 42410;\n     */\n    GlyphOfPsychicScream = 42410,\n    /**\n     * @generated from protobuf enum value: GlyphOfRenew = 42411;\n     */\n    GlyphOfRenew = 42411,\n    /**\n     * @generated from protobuf enum value: GlyphOfScourgeImprisonment = 42412;\n     */\n    GlyphOfScourgeImprisonment = 42412,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadow = 42407;\n     */\n    GlyphOfShadow = 42407,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowWordDeath = 42414;\n     */\n    GlyphOfShadowWordDeath = 42414,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowWordPain = 42406;\n     */\n    GlyphOfShadowWordPain = 42406,\n    /**\n     * @generated from protobuf enum value: GlyphOfSmite = 42416;\n     */\n    GlyphOfSmite = 42416,\n    /**\n     * @generated from protobuf enum value: GlyphOfSpiritOfRedemption = 42417;\n     */\n    GlyphOfSpiritOfRedemption = 42417\n}\n/**\n * @generated from protobuf enum proto.PriestMinorGlyph\n */\nexport enum PriestMinorGlyph {\n    /**\n     * @generated from protobuf enum value: PriestMinorGlyphNone = 0;\n     */\n    PriestMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfFading = 43342;\n     */\n    GlyphOfFading = 43342,\n    /**\n     * @generated from protobuf enum value: GlyphOfFortitude = 43371;\n     */\n    GlyphOfFortitude = 43371,\n    /**\n     * @generated from protobuf enum value: GlyphOfLevitate = 43370;\n     */\n    GlyphOfLevitate = 43370,\n    /**\n     * @generated from protobuf enum value: GlyphOfShackleUndead = 43373;\n     */\n    GlyphOfShackleUndead = 43373,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowProtection = 43372;\n     */\n    GlyphOfShadowProtection = 43372,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowfiend = 43374;\n     */\n    GlyphOfShadowfiend = 43374\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass PriestTalents$Type extends MessageType<PriestTalents> {\n    constructor() {\n        super(\"proto.PriestTalents\", [\n            { no: 1, name: \"unbreakable_will\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"twin_disciplines\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"silent_resolve\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"improved_inner_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"improved_power_word_fortitude\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"martyrdom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"meditation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"inner_focus\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"improved_power_word_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"absolution\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"mental_agility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"improved_mana_burn\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"reflective_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"mental_strength\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"soul_warding\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"focused_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"enlightenment\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"focused_will\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"power_infusion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"improved_flash_heal\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"renewed_hope\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"rapture\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"aspiration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"divine_aegis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"pain_suppression\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"borrowed_time\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"penance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"healing_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"improved_renew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"holy_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"spell_warding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"divine_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"desperate_prayer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"blessed_recovery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"inspiration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"holy_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"improved_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"searing_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"healing_prayers\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"spirit_of_redemption\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 42, name: \"spiritual_guidance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"surge_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"spiritual_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"holy_concentration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"lightwell\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 47, name: \"blessed_resilience\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"body_and_soul\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"empowered_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"serendipity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"empowered_renew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"circle_of_healing\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"test_of_faith\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"divine_providence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"guardian_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"spirit_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"improved_spirit_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"darkness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"shadow_affinity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"improved_shadow_word_pain\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"shadow_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"improved_psychic_scream\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"improved_mind_blast\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"mind_flay\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 65, name: \"veiled_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"shadow_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"shadow_weaving\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"silence\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 69, name: \"vampiric_embrace\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 70, name: \"improved_vampiric_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"focused_mind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"mind_melt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"improved_devouring_plague\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"shadowform\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 75, name: \"shadow_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"improved_shadowform\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"misery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"psychic_horror\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 79, name: \"vampiric_touch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 80, name: \"pain_and_suffering\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"twisted_faith\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 82, name: \"dispersion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PriestTalents>): PriestTalents {\n        const message = { unbreakableWill: 0, twinDisciplines: 0, silentResolve: 0, improvedInnerFire: 0, improvedPowerWordFortitude: 0, martyrdom: 0, meditation: 0, innerFocus: false, improvedPowerWordShield: 0, absolution: 0, mentalAgility: 0, improvedManaBurn: 0, reflectiveShield: 0, mentalStrength: 0, soulWarding: false, focusedPower: 0, enlightenment: 0, focusedWill: 0, powerInfusion: false, improvedFlashHeal: 0, renewedHope: 0, rapture: 0, aspiration: 0, divineAegis: 0, painSuppression: false, grace: 0, borrowedTime: 0, penance: false, healingFocus: 0, improvedRenew: 0, holySpecialization: 0, spellWarding: 0, divineFury: 0, desperatePrayer: false, blessedRecovery: 0, inspiration: 0, holyReach: 0, improvedHealing: 0, searingLight: 0, healingPrayers: 0, spiritOfRedemption: false, spiritualGuidance: 0, surgeOfLight: 0, spiritualHealing: 0, holyConcentration: 0, lightwell: false, blessedResilience: 0, bodyAndSoul: 0, empoweredHealing: 0, serendipity: 0, empoweredRenew: 0, circleOfHealing: false, testOfFaith: 0, divineProvidence: 0, guardianSpirit: false, spiritTap: 0, improvedSpiritTap: 0, darkness: 0, shadowAffinity: 0, improvedShadowWordPain: 0, shadowFocus: 0, improvedPsychicScream: 0, improvedMindBlast: 0, mindFlay: false, veiledShadows: 0, shadowReach: 0, shadowWeaving: 0, silence: false, vampiricEmbrace: false, improvedVampiricEmbrace: 0, focusedMind: 0, mindMelt: 0, improvedDevouringPlague: 0, shadowform: false, shadowPower: 0, improvedShadowform: 0, misery: 0, psychicHorror: false, vampiricTouch: false, painAndSuffering: 0, twistedFaith: 0, dispersion: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PriestTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PriestTalents): PriestTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 unbreakable_will */ 1:\n                    message.unbreakableWill = reader.int32();\n                    break;\n                case /* int32 twin_disciplines */ 2:\n                    message.twinDisciplines = reader.int32();\n                    break;\n                case /* int32 silent_resolve */ 3:\n                    message.silentResolve = reader.int32();\n                    break;\n                case /* int32 improved_inner_fire */ 4:\n                    message.improvedInnerFire = reader.int32();\n                    break;\n                case /* int32 improved_power_word_fortitude */ 5:\n                    message.improvedPowerWordFortitude = reader.int32();\n                    break;\n                case /* int32 martyrdom */ 6:\n                    message.martyrdom = reader.int32();\n                    break;\n                case /* int32 meditation */ 7:\n                    message.meditation = reader.int32();\n                    break;\n                case /* bool inner_focus */ 8:\n                    message.innerFocus = reader.bool();\n                    break;\n                case /* int32 improved_power_word_shield */ 9:\n                    message.improvedPowerWordShield = reader.int32();\n                    break;\n                case /* int32 absolution */ 10:\n                    message.absolution = reader.int32();\n                    break;\n                case /* int32 mental_agility */ 11:\n                    message.mentalAgility = reader.int32();\n                    break;\n                case /* int32 improved_mana_burn */ 12:\n                    message.improvedManaBurn = reader.int32();\n                    break;\n                case /* int32 reflective_shield */ 13:\n                    message.reflectiveShield = reader.int32();\n                    break;\n                case /* int32 mental_strength */ 14:\n                    message.mentalStrength = reader.int32();\n                    break;\n                case /* bool soul_warding */ 15:\n                    message.soulWarding = reader.bool();\n                    break;\n                case /* int32 focused_power */ 16:\n                    message.focusedPower = reader.int32();\n                    break;\n                case /* int32 enlightenment */ 17:\n                    message.enlightenment = reader.int32();\n                    break;\n                case /* int32 focused_will */ 18:\n                    message.focusedWill = reader.int32();\n                    break;\n                case /* bool power_infusion */ 19:\n                    message.powerInfusion = reader.bool();\n                    break;\n                case /* int32 improved_flash_heal */ 20:\n                    message.improvedFlashHeal = reader.int32();\n                    break;\n                case /* int32 renewed_hope */ 21:\n                    message.renewedHope = reader.int32();\n                    break;\n                case /* int32 rapture */ 22:\n                    message.rapture = reader.int32();\n                    break;\n                case /* int32 aspiration */ 23:\n                    message.aspiration = reader.int32();\n                    break;\n                case /* int32 divine_aegis */ 24:\n                    message.divineAegis = reader.int32();\n                    break;\n                case /* bool pain_suppression */ 25:\n                    message.painSuppression = reader.bool();\n                    break;\n                case /* int32 grace */ 26:\n                    message.grace = reader.int32();\n                    break;\n                case /* int32 borrowed_time */ 27:\n                    message.borrowedTime = reader.int32();\n                    break;\n                case /* bool penance */ 28:\n                    message.penance = reader.bool();\n                    break;\n                case /* int32 healing_focus */ 29:\n                    message.healingFocus = reader.int32();\n                    break;\n                case /* int32 improved_renew */ 30:\n                    message.improvedRenew = reader.int32();\n                    break;\n                case /* int32 holy_specialization */ 31:\n                    message.holySpecialization = reader.int32();\n                    break;\n                case /* int32 spell_warding */ 32:\n                    message.spellWarding = reader.int32();\n                    break;\n                case /* int32 divine_fury */ 33:\n                    message.divineFury = reader.int32();\n                    break;\n                case /* bool desperate_prayer */ 34:\n                    message.desperatePrayer = reader.bool();\n                    break;\n                case /* int32 blessed_recovery */ 35:\n                    message.blessedRecovery = reader.int32();\n                    break;\n                case /* int32 inspiration */ 36:\n                    message.inspiration = reader.int32();\n                    break;\n                case /* int32 holy_reach */ 37:\n                    message.holyReach = reader.int32();\n                    break;\n                case /* int32 improved_healing */ 38:\n                    message.improvedHealing = reader.int32();\n                    break;\n                case /* int32 searing_light */ 39:\n                    message.searingLight = reader.int32();\n                    break;\n                case /* int32 healing_prayers */ 40:\n                    message.healingPrayers = reader.int32();\n                    break;\n                case /* bool spirit_of_redemption */ 41:\n                    message.spiritOfRedemption = reader.bool();\n                    break;\n                case /* int32 spiritual_guidance */ 42:\n                    message.spiritualGuidance = reader.int32();\n                    break;\n                case /* int32 surge_of_light */ 43:\n                    message.surgeOfLight = reader.int32();\n                    break;\n                case /* int32 spiritual_healing */ 44:\n                    message.spiritualHealing = reader.int32();\n                    break;\n                case /* int32 holy_concentration */ 45:\n                    message.holyConcentration = reader.int32();\n                    break;\n                case /* bool lightwell */ 46:\n                    message.lightwell = reader.bool();\n                    break;\n                case /* int32 blessed_resilience */ 47:\n                    message.blessedResilience = reader.int32();\n                    break;\n                case /* int32 body_and_soul */ 48:\n                    message.bodyAndSoul = reader.int32();\n                    break;\n                case /* int32 empowered_healing */ 49:\n                    message.empoweredHealing = reader.int32();\n                    break;\n                case /* int32 serendipity */ 50:\n                    message.serendipity = reader.int32();\n                    break;\n                case /* int32 empowered_renew */ 51:\n                    message.empoweredRenew = reader.int32();\n                    break;\n                case /* bool circle_of_healing */ 52:\n                    message.circleOfHealing = reader.bool();\n                    break;\n                case /* int32 test_of_faith */ 53:\n                    message.testOfFaith = reader.int32();\n                    break;\n                case /* int32 divine_providence */ 54:\n                    message.divineProvidence = reader.int32();\n                    break;\n                case /* bool guardian_spirit */ 55:\n                    message.guardianSpirit = reader.bool();\n                    break;\n                case /* int32 spirit_tap */ 56:\n                    message.spiritTap = reader.int32();\n                    break;\n                case /* int32 improved_spirit_tap */ 57:\n                    message.improvedSpiritTap = reader.int32();\n                    break;\n                case /* int32 darkness */ 58:\n                    message.darkness = reader.int32();\n                    break;\n                case /* int32 shadow_affinity */ 59:\n                    message.shadowAffinity = reader.int32();\n                    break;\n                case /* int32 improved_shadow_word_pain */ 60:\n                    message.improvedShadowWordPain = reader.int32();\n                    break;\n                case /* int32 shadow_focus */ 61:\n                    message.shadowFocus = reader.int32();\n                    break;\n                case /* int32 improved_psychic_scream */ 62:\n                    message.improvedPsychicScream = reader.int32();\n                    break;\n                case /* int32 improved_mind_blast */ 63:\n                    message.improvedMindBlast = reader.int32();\n                    break;\n                case /* bool mind_flay */ 64:\n                    message.mindFlay = reader.bool();\n                    break;\n                case /* int32 veiled_shadows */ 65:\n                    message.veiledShadows = reader.int32();\n                    break;\n                case /* int32 shadow_reach */ 66:\n                    message.shadowReach = reader.int32();\n                    break;\n                case /* int32 shadow_weaving */ 67:\n                    message.shadowWeaving = reader.int32();\n                    break;\n                case /* bool silence */ 68:\n                    message.silence = reader.bool();\n                    break;\n                case /* bool vampiric_embrace */ 69:\n                    message.vampiricEmbrace = reader.bool();\n                    break;\n                case /* int32 improved_vampiric_embrace */ 70:\n                    message.improvedVampiricEmbrace = reader.int32();\n                    break;\n                case /* int32 focused_mind */ 71:\n                    message.focusedMind = reader.int32();\n                    break;\n                case /* int32 mind_melt */ 72:\n                    message.mindMelt = reader.int32();\n                    break;\n                case /* int32 improved_devouring_plague */ 73:\n                    message.improvedDevouringPlague = reader.int32();\n                    break;\n                case /* bool shadowform */ 74:\n                    message.shadowform = reader.bool();\n                    break;\n                case /* int32 shadow_power */ 75:\n                    message.shadowPower = reader.int32();\n                    break;\n                case /* int32 improved_shadowform */ 76:\n                    message.improvedShadowform = reader.int32();\n                    break;\n                case /* int32 misery */ 77:\n                    message.misery = reader.int32();\n                    break;\n                case /* bool psychic_horror */ 78:\n                    message.psychicHorror = reader.bool();\n                    break;\n                case /* bool vampiric_touch */ 79:\n                    message.vampiricTouch = reader.bool();\n                    break;\n                case /* int32 pain_and_suffering */ 80:\n                    message.painAndSuffering = reader.int32();\n                    break;\n                case /* int32 twisted_faith */ 81:\n                    message.twistedFaith = reader.int32();\n                    break;\n                case /* bool dispersion */ 82:\n                    message.dispersion = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PriestTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 unbreakable_will = 1; */\n        if (message.unbreakableWill !== 0)\n            writer.tag(1, WireType.Varint).int32(message.unbreakableWill);\n        /* int32 twin_disciplines = 2; */\n        if (message.twinDisciplines !== 0)\n            writer.tag(2, WireType.Varint).int32(message.twinDisciplines);\n        /* int32 silent_resolve = 3; */\n        if (message.silentResolve !== 0)\n            writer.tag(3, WireType.Varint).int32(message.silentResolve);\n        /* int32 improved_inner_fire = 4; */\n        if (message.improvedInnerFire !== 0)\n            writer.tag(4, WireType.Varint).int32(message.improvedInnerFire);\n        /* int32 improved_power_word_fortitude = 5; */\n        if (message.improvedPowerWordFortitude !== 0)\n            writer.tag(5, WireType.Varint).int32(message.improvedPowerWordFortitude);\n        /* int32 martyrdom = 6; */\n        if (message.martyrdom !== 0)\n            writer.tag(6, WireType.Varint).int32(message.martyrdom);\n        /* int32 meditation = 7; */\n        if (message.meditation !== 0)\n            writer.tag(7, WireType.Varint).int32(message.meditation);\n        /* bool inner_focus = 8; */\n        if (message.innerFocus !== false)\n            writer.tag(8, WireType.Varint).bool(message.innerFocus);\n        /* int32 improved_power_word_shield = 9; */\n        if (message.improvedPowerWordShield !== 0)\n            writer.tag(9, WireType.Varint).int32(message.improvedPowerWordShield);\n        /* int32 absolution = 10; */\n        if (message.absolution !== 0)\n            writer.tag(10, WireType.Varint).int32(message.absolution);\n        /* int32 mental_agility = 11; */\n        if (message.mentalAgility !== 0)\n            writer.tag(11, WireType.Varint).int32(message.mentalAgility);\n        /* int32 improved_mana_burn = 12; */\n        if (message.improvedManaBurn !== 0)\n            writer.tag(12, WireType.Varint).int32(message.improvedManaBurn);\n        /* int32 reflective_shield = 13; */\n        if (message.reflectiveShield !== 0)\n            writer.tag(13, WireType.Varint).int32(message.reflectiveShield);\n        /* int32 mental_strength = 14; */\n        if (message.mentalStrength !== 0)\n            writer.tag(14, WireType.Varint).int32(message.mentalStrength);\n        /* bool soul_warding = 15; */\n        if (message.soulWarding !== false)\n            writer.tag(15, WireType.Varint).bool(message.soulWarding);\n        /* int32 focused_power = 16; */\n        if (message.focusedPower !== 0)\n            writer.tag(16, WireType.Varint).int32(message.focusedPower);\n        /* int32 enlightenment = 17; */\n        if (message.enlightenment !== 0)\n            writer.tag(17, WireType.Varint).int32(message.enlightenment);\n        /* int32 focused_will = 18; */\n        if (message.focusedWill !== 0)\n            writer.tag(18, WireType.Varint).int32(message.focusedWill);\n        /* bool power_infusion = 19; */\n        if (message.powerInfusion !== false)\n            writer.tag(19, WireType.Varint).bool(message.powerInfusion);\n        /* int32 improved_flash_heal = 20; */\n        if (message.improvedFlashHeal !== 0)\n            writer.tag(20, WireType.Varint).int32(message.improvedFlashHeal);\n        /* int32 renewed_hope = 21; */\n        if (message.renewedHope !== 0)\n            writer.tag(21, WireType.Varint).int32(message.renewedHope);\n        /* int32 rapture = 22; */\n        if (message.rapture !== 0)\n            writer.tag(22, WireType.Varint).int32(message.rapture);\n        /* int32 aspiration = 23; */\n        if (message.aspiration !== 0)\n            writer.tag(23, WireType.Varint).int32(message.aspiration);\n        /* int32 divine_aegis = 24; */\n        if (message.divineAegis !== 0)\n            writer.tag(24, WireType.Varint).int32(message.divineAegis);\n        /* bool pain_suppression = 25; */\n        if (message.painSuppression !== false)\n            writer.tag(25, WireType.Varint).bool(message.painSuppression);\n        /* int32 grace = 26; */\n        if (message.grace !== 0)\n            writer.tag(26, WireType.Varint).int32(message.grace);\n        /* int32 borrowed_time = 27; */\n        if (message.borrowedTime !== 0)\n            writer.tag(27, WireType.Varint).int32(message.borrowedTime);\n        /* bool penance = 28; */\n        if (message.penance !== false)\n            writer.tag(28, WireType.Varint).bool(message.penance);\n        /* int32 healing_focus = 29; */\n        if (message.healingFocus !== 0)\n            writer.tag(29, WireType.Varint).int32(message.healingFocus);\n        /* int32 improved_renew = 30; */\n        if (message.improvedRenew !== 0)\n            writer.tag(30, WireType.Varint).int32(message.improvedRenew);\n        /* int32 holy_specialization = 31; */\n        if (message.holySpecialization !== 0)\n            writer.tag(31, WireType.Varint).int32(message.holySpecialization);\n        /* int32 spell_warding = 32; */\n        if (message.spellWarding !== 0)\n            writer.tag(32, WireType.Varint).int32(message.spellWarding);\n        /* int32 divine_fury = 33; */\n        if (message.divineFury !== 0)\n            writer.tag(33, WireType.Varint).int32(message.divineFury);\n        /* bool desperate_prayer = 34; */\n        if (message.desperatePrayer !== false)\n            writer.tag(34, WireType.Varint).bool(message.desperatePrayer);\n        /* int32 blessed_recovery = 35; */\n        if (message.blessedRecovery !== 0)\n            writer.tag(35, WireType.Varint).int32(message.blessedRecovery);\n        /* int32 inspiration = 36; */\n        if (message.inspiration !== 0)\n            writer.tag(36, WireType.Varint).int32(message.inspiration);\n        /* int32 holy_reach = 37; */\n        if (message.holyReach !== 0)\n            writer.tag(37, WireType.Varint).int32(message.holyReach);\n        /* int32 improved_healing = 38; */\n        if (message.improvedHealing !== 0)\n            writer.tag(38, WireType.Varint).int32(message.improvedHealing);\n        /* int32 searing_light = 39; */\n        if (message.searingLight !== 0)\n            writer.tag(39, WireType.Varint).int32(message.searingLight);\n        /* int32 healing_prayers = 40; */\n        if (message.healingPrayers !== 0)\n            writer.tag(40, WireType.Varint).int32(message.healingPrayers);\n        /* bool spirit_of_redemption = 41; */\n        if (message.spiritOfRedemption !== false)\n            writer.tag(41, WireType.Varint).bool(message.spiritOfRedemption);\n        /* int32 spiritual_guidance = 42; */\n        if (message.spiritualGuidance !== 0)\n            writer.tag(42, WireType.Varint).int32(message.spiritualGuidance);\n        /* int32 surge_of_light = 43; */\n        if (message.surgeOfLight !== 0)\n            writer.tag(43, WireType.Varint).int32(message.surgeOfLight);\n        /* int32 spiritual_healing = 44; */\n        if (message.spiritualHealing !== 0)\n            writer.tag(44, WireType.Varint).int32(message.spiritualHealing);\n        /* int32 holy_concentration = 45; */\n        if (message.holyConcentration !== 0)\n            writer.tag(45, WireType.Varint).int32(message.holyConcentration);\n        /* bool lightwell = 46; */\n        if (message.lightwell !== false)\n            writer.tag(46, WireType.Varint).bool(message.lightwell);\n        /* int32 blessed_resilience = 47; */\n        if (message.blessedResilience !== 0)\n            writer.tag(47, WireType.Varint).int32(message.blessedResilience);\n        /* int32 body_and_soul = 48; */\n        if (message.bodyAndSoul !== 0)\n            writer.tag(48, WireType.Varint).int32(message.bodyAndSoul);\n        /* int32 empowered_healing = 49; */\n        if (message.empoweredHealing !== 0)\n            writer.tag(49, WireType.Varint).int32(message.empoweredHealing);\n        /* int32 serendipity = 50; */\n        if (message.serendipity !== 0)\n            writer.tag(50, WireType.Varint).int32(message.serendipity);\n        /* int32 empowered_renew = 51; */\n        if (message.empoweredRenew !== 0)\n            writer.tag(51, WireType.Varint).int32(message.empoweredRenew);\n        /* bool circle_of_healing = 52; */\n        if (message.circleOfHealing !== false)\n            writer.tag(52, WireType.Varint).bool(message.circleOfHealing);\n        /* int32 test_of_faith = 53; */\n        if (message.testOfFaith !== 0)\n            writer.tag(53, WireType.Varint).int32(message.testOfFaith);\n        /* int32 divine_providence = 54; */\n        if (message.divineProvidence !== 0)\n            writer.tag(54, WireType.Varint).int32(message.divineProvidence);\n        /* bool guardian_spirit = 55; */\n        if (message.guardianSpirit !== false)\n            writer.tag(55, WireType.Varint).bool(message.guardianSpirit);\n        /* int32 spirit_tap = 56; */\n        if (message.spiritTap !== 0)\n            writer.tag(56, WireType.Varint).int32(message.spiritTap);\n        /* int32 improved_spirit_tap = 57; */\n        if (message.improvedSpiritTap !== 0)\n            writer.tag(57, WireType.Varint).int32(message.improvedSpiritTap);\n        /* int32 darkness = 58; */\n        if (message.darkness !== 0)\n            writer.tag(58, WireType.Varint).int32(message.darkness);\n        /* int32 shadow_affinity = 59; */\n        if (message.shadowAffinity !== 0)\n            writer.tag(59, WireType.Varint).int32(message.shadowAffinity);\n        /* int32 improved_shadow_word_pain = 60; */\n        if (message.improvedShadowWordPain !== 0)\n            writer.tag(60, WireType.Varint).int32(message.improvedShadowWordPain);\n        /* int32 shadow_focus = 61; */\n        if (message.shadowFocus !== 0)\n            writer.tag(61, WireType.Varint).int32(message.shadowFocus);\n        /* int32 improved_psychic_scream = 62; */\n        if (message.improvedPsychicScream !== 0)\n            writer.tag(62, WireType.Varint).int32(message.improvedPsychicScream);\n        /* int32 improved_mind_blast = 63; */\n        if (message.improvedMindBlast !== 0)\n            writer.tag(63, WireType.Varint).int32(message.improvedMindBlast);\n        /* bool mind_flay = 64; */\n        if (message.mindFlay !== false)\n            writer.tag(64, WireType.Varint).bool(message.mindFlay);\n        /* int32 veiled_shadows = 65; */\n        if (message.veiledShadows !== 0)\n            writer.tag(65, WireType.Varint).int32(message.veiledShadows);\n        /* int32 shadow_reach = 66; */\n        if (message.shadowReach !== 0)\n            writer.tag(66, WireType.Varint).int32(message.shadowReach);\n        /* int32 shadow_weaving = 67; */\n        if (message.shadowWeaving !== 0)\n            writer.tag(67, WireType.Varint).int32(message.shadowWeaving);\n        /* bool silence = 68; */\n        if (message.silence !== false)\n            writer.tag(68, WireType.Varint).bool(message.silence);\n        /* bool vampiric_embrace = 69; */\n        if (message.vampiricEmbrace !== false)\n            writer.tag(69, WireType.Varint).bool(message.vampiricEmbrace);\n        /* int32 improved_vampiric_embrace = 70; */\n        if (message.improvedVampiricEmbrace !== 0)\n            writer.tag(70, WireType.Varint).int32(message.improvedVampiricEmbrace);\n        /* int32 focused_mind = 71; */\n        if (message.focusedMind !== 0)\n            writer.tag(71, WireType.Varint).int32(message.focusedMind);\n        /* int32 mind_melt = 72; */\n        if (message.mindMelt !== 0)\n            writer.tag(72, WireType.Varint).int32(message.mindMelt);\n        /* int32 improved_devouring_plague = 73; */\n        if (message.improvedDevouringPlague !== 0)\n            writer.tag(73, WireType.Varint).int32(message.improvedDevouringPlague);\n        /* bool shadowform = 74; */\n        if (message.shadowform !== false)\n            writer.tag(74, WireType.Varint).bool(message.shadowform);\n        /* int32 shadow_power = 75; */\n        if (message.shadowPower !== 0)\n            writer.tag(75, WireType.Varint).int32(message.shadowPower);\n        /* int32 improved_shadowform = 76; */\n        if (message.improvedShadowform !== 0)\n            writer.tag(76, WireType.Varint).int32(message.improvedShadowform);\n        /* int32 misery = 77; */\n        if (message.misery !== 0)\n            writer.tag(77, WireType.Varint).int32(message.misery);\n        /* bool psychic_horror = 78; */\n        if (message.psychicHorror !== false)\n            writer.tag(78, WireType.Varint).bool(message.psychicHorror);\n        /* bool vampiric_touch = 79; */\n        if (message.vampiricTouch !== false)\n            writer.tag(79, WireType.Varint).bool(message.vampiricTouch);\n        /* int32 pain_and_suffering = 80; */\n        if (message.painAndSuffering !== 0)\n            writer.tag(80, WireType.Varint).int32(message.painAndSuffering);\n        /* int32 twisted_faith = 81; */\n        if (message.twistedFaith !== 0)\n            writer.tag(81, WireType.Varint).int32(message.twistedFaith);\n        /* bool dispersion = 82; */\n        if (message.dispersion !== false)\n            writer.tag(82, WireType.Varint).bool(message.dispersion);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PriestTalents\n */\nexport const PriestTalents = new PriestTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShadowPriest$Type extends MessageType<ShadowPriest> {\n    constructor() {\n        super(\"proto.ShadowPriest\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => ShadowPriest_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => PriestTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => ShadowPriest_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ShadowPriest>): ShadowPriest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShadowPriest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShadowPriest): ShadowPriest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShadowPriest.Rotation rotation */ 1:\n                    message.rotation = ShadowPriest_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.PriestTalents talents */ 2:\n                    message.talents = PriestTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.ShadowPriest.Options options */ 3:\n                    message.options = ShadowPriest_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShadowPriest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShadowPriest.Rotation rotation = 1; */\n        if (message.rotation)\n            ShadowPriest_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PriestTalents talents = 2; */\n        if (message.talents)\n            PriestTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShadowPriest.Options options = 3; */\n        if (message.options)\n            ShadowPriest_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShadowPriest\n */\nexport const ShadowPriest = new ShadowPriest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShadowPriest_Rotation$Type extends MessageType<ShadowPriest_Rotation> {\n    constructor() {\n        super(\"proto.ShadowPriest.Rotation\", [\n            { no: 1, name: \"rotation_type\", kind: \"enum\", T: () => [\"proto.ShadowPriest.Rotation.RotationType\", ShadowPriest_Rotation_RotationType] },\n            { no: 2, name: \"precast_vt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"latency\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShadowPriest_Rotation>): ShadowPriest_Rotation {\n        const message = { rotationType: 0, precastVt: false, latency: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShadowPriest_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShadowPriest_Rotation): ShadowPriest_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShadowPriest.Rotation.RotationType rotation_type */ 1:\n                    message.rotationType = reader.int32();\n                    break;\n                case /* bool precast_vt */ 2:\n                    message.precastVt = reader.bool();\n                    break;\n                case /* double latency */ 3:\n                    message.latency = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShadowPriest_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShadowPriest.Rotation.RotationType rotation_type = 1; */\n        if (message.rotationType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.rotationType);\n        /* bool precast_vt = 2; */\n        if (message.precastVt !== false)\n            writer.tag(2, WireType.Varint).bool(message.precastVt);\n        /* double latency = 3; */\n        if (message.latency !== 0)\n            writer.tag(3, WireType.Bit64).double(message.latency);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShadowPriest.Rotation\n */\nexport const ShadowPriest_Rotation = new ShadowPriest_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShadowPriest_Options$Type extends MessageType<ShadowPriest_Options> {\n    constructor() {\n        super(\"proto.ShadowPriest.Options\", [\n            { no: 1, name: \"use_shadowfiend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"armor\", kind: \"enum\", T: () => [\"proto.ShadowPriest.Options.Armor\", ShadowPriest_Options_Armor] },\n            { no: 4, name: \"use_mind_blast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"use_shadow_word_death\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShadowPriest_Options>): ShadowPriest_Options {\n        const message = { useShadowfiend: false, armor: 0, useMindBlast: false, useShadowWordDeath: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShadowPriest_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShadowPriest_Options): ShadowPriest_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_shadowfiend */ 1:\n                    message.useShadowfiend = reader.bool();\n                    break;\n                case /* proto.ShadowPriest.Options.Armor armor */ 2:\n                    message.armor = reader.int32();\n                    break;\n                case /* bool use_mind_blast */ 4:\n                    message.useMindBlast = reader.bool();\n                    break;\n                case /* bool use_shadow_word_death */ 5:\n                    message.useShadowWordDeath = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShadowPriest_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_shadowfiend = 1; */\n        if (message.useShadowfiend !== false)\n            writer.tag(1, WireType.Varint).bool(message.useShadowfiend);\n        /* proto.ShadowPriest.Options.Armor armor = 2; */\n        if (message.armor !== 0)\n            writer.tag(2, WireType.Varint).int32(message.armor);\n        /* bool use_mind_blast = 4; */\n        if (message.useMindBlast !== false)\n            writer.tag(4, WireType.Varint).bool(message.useMindBlast);\n        /* bool use_shadow_word_death = 5; */\n        if (message.useShadowWordDeath !== false)\n            writer.tag(5, WireType.Varint).bool(message.useShadowWordDeath);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShadowPriest.Options\n */\nexport const ShadowPriest_Options = new ShadowPriest_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SmitePriest$Type extends MessageType<SmitePriest> {\n    constructor() {\n        super(\"proto.SmitePriest\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => SmitePriest_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => PriestTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => SmitePriest_Options }\n        ]);\n    }\n    create(value?: PartialMessage<SmitePriest>): SmitePriest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SmitePriest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SmitePriest): SmitePriest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SmitePriest.Rotation rotation */ 1:\n                    message.rotation = SmitePriest_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.PriestTalents talents */ 2:\n                    message.talents = PriestTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.SmitePriest.Options options */ 3:\n                    message.options = SmitePriest_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SmitePriest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SmitePriest.Rotation rotation = 1; */\n        if (message.rotation)\n            SmitePriest_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PriestTalents talents = 2; */\n        if (message.talents)\n            PriestTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SmitePriest.Options options = 3; */\n        if (message.options)\n            SmitePriest_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SmitePriest\n */\nexport const SmitePriest = new SmitePriest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SmitePriest_Rotation$Type extends MessageType<SmitePriest_Rotation> {\n    constructor() {\n        super(\"proto.SmitePriest.Rotation\", [\n            { no: 2, name: \"use_mind_blast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"use_shadow_word_death\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"use_devouring_plague\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"meme_dream\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"allowed_holy_fire_delay_ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SmitePriest_Rotation>): SmitePriest_Rotation {\n        const message = { useMindBlast: false, useShadowWordDeath: false, useDevouringPlague: false, memeDream: false, allowedHolyFireDelayMs: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SmitePriest_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SmitePriest_Rotation): SmitePriest_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_mind_blast */ 2:\n                    message.useMindBlast = reader.bool();\n                    break;\n                case /* bool use_shadow_word_death */ 3:\n                    message.useShadowWordDeath = reader.bool();\n                    break;\n                case /* bool use_devouring_plague */ 4:\n                    message.useDevouringPlague = reader.bool();\n                    break;\n                case /* bool meme_dream */ 5:\n                    message.memeDream = reader.bool();\n                    break;\n                case /* double allowed_holy_fire_delay_ms */ 6:\n                    message.allowedHolyFireDelayMs = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SmitePriest_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_mind_blast = 2; */\n        if (message.useMindBlast !== false)\n            writer.tag(2, WireType.Varint).bool(message.useMindBlast);\n        /* bool use_shadow_word_death = 3; */\n        if (message.useShadowWordDeath !== false)\n            writer.tag(3, WireType.Varint).bool(message.useShadowWordDeath);\n        /* bool use_devouring_plague = 4; */\n        if (message.useDevouringPlague !== false)\n            writer.tag(4, WireType.Varint).bool(message.useDevouringPlague);\n        /* bool meme_dream = 5; */\n        if (message.memeDream !== false)\n            writer.tag(5, WireType.Varint).bool(message.memeDream);\n        /* double allowed_holy_fire_delay_ms = 6; */\n        if (message.allowedHolyFireDelayMs !== 0)\n            writer.tag(6, WireType.Bit64).double(message.allowedHolyFireDelayMs);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SmitePriest.Rotation\n */\nexport const SmitePriest_Rotation = new SmitePriest_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SmitePriest_Options$Type extends MessageType<SmitePriest_Options> {\n    constructor() {\n        super(\"proto.SmitePriest.Options\", [\n            { no: 3, name: \"use_inner_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 1, name: \"use_shadowfiend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"power_infusion_target\", kind: \"message\", T: () => RaidTarget }\n        ]);\n    }\n    create(value?: PartialMessage<SmitePriest_Options>): SmitePriest_Options {\n        const message = { useInnerFire: false, useShadowfiend: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SmitePriest_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SmitePriest_Options): SmitePriest_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_inner_fire */ 3:\n                    message.useInnerFire = reader.bool();\n                    break;\n                case /* bool use_shadowfiend */ 1:\n                    message.useShadowfiend = reader.bool();\n                    break;\n                case /* proto.RaidTarget power_infusion_target */ 2:\n                    message.powerInfusionTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.powerInfusionTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SmitePriest_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_inner_fire = 3; */\n        if (message.useInnerFire !== false)\n            writer.tag(3, WireType.Varint).bool(message.useInnerFire);\n        /* bool use_shadowfiend = 1; */\n        if (message.useShadowfiend !== false)\n            writer.tag(1, WireType.Varint).bool(message.useShadowfiend);\n        /* proto.RaidTarget power_infusion_target = 2; */\n        if (message.powerInfusionTarget)\n            RaidTarget.internalBinaryWrite(message.powerInfusionTarget, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SmitePriest.Options\n */\nexport const SmitePriest_Options = new SmitePriest_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealingPriest$Type extends MessageType<HealingPriest> {\n    constructor() {\n        super(\"proto.HealingPriest\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => HealingPriest_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => PriestTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => HealingPriest_Options }\n        ]);\n    }\n    create(value?: PartialMessage<HealingPriest>): HealingPriest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HealingPriest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealingPriest): HealingPriest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.HealingPriest.Rotation rotation */ 1:\n                    message.rotation = HealingPriest_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.PriestTalents talents */ 2:\n                    message.talents = PriestTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.HealingPriest.Options options */ 3:\n                    message.options = HealingPriest_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HealingPriest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.HealingPriest.Rotation rotation = 1; */\n        if (message.rotation)\n            HealingPriest_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PriestTalents talents = 2; */\n        if (message.talents)\n            PriestTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.HealingPriest.Options options = 3; */\n        if (message.options)\n            HealingPriest_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HealingPriest\n */\nexport const HealingPriest = new HealingPriest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealingPriest_Rotation$Type extends MessageType<HealingPriest_Rotation> {\n    constructor() {\n        super(\"proto.HealingPriest.Rotation\", []);\n    }\n    create(value?: PartialMessage<HealingPriest_Rotation>): HealingPriest_Rotation {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HealingPriest_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealingPriest_Rotation): HealingPriest_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: HealingPriest_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HealingPriest.Rotation\n */\nexport const HealingPriest_Rotation = new HealingPriest_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealingPriest_Options$Type extends MessageType<HealingPriest_Options> {\n    constructor() {\n        super(\"proto.HealingPriest.Options\", [\n            { no: 3, name: \"use_inner_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 1, name: \"use_shadowfiend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"power_infusion_target\", kind: \"message\", T: () => RaidTarget }\n        ]);\n    }\n    create(value?: PartialMessage<HealingPriest_Options>): HealingPriest_Options {\n        const message = { useInnerFire: false, useShadowfiend: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HealingPriest_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealingPriest_Options): HealingPriest_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_inner_fire */ 3:\n                    message.useInnerFire = reader.bool();\n                    break;\n                case /* bool use_shadowfiend */ 1:\n                    message.useShadowfiend = reader.bool();\n                    break;\n                case /* proto.RaidTarget power_infusion_target */ 2:\n                    message.powerInfusionTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.powerInfusionTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HealingPriest_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_inner_fire = 3; */\n        if (message.useInnerFire !== false)\n            writer.tag(3, WireType.Varint).bool(message.useInnerFire);\n        /* bool use_shadowfiend = 1; */\n        if (message.useShadowfiend !== false)\n            writer.tag(1, WireType.Varint).bool(message.useShadowfiend);\n        /* proto.RaidTarget power_infusion_target = 2; */\n        if (message.powerInfusionTarget)\n            RaidTarget.internalBinaryWrite(message.powerInfusionTarget, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HealingPriest.Options\n */\nexport const HealingPriest_Options = new HealingPriest_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"paladin.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { CustomRotation } from \"./common\";\n/**\n * @generated from protobuf message proto.PaladinTalents\n */\nexport interface PaladinTalents {\n    /**\n     * Holy\n     *\n     * @generated from protobuf field: int32 spiritual_focus = 1;\n     */\n    spiritualFocus: number;\n    /**\n     * @generated from protobuf field: int32 seals_of_the_pure = 2;\n     */\n    sealsOfThePure: number;\n    /**\n     * @generated from protobuf field: int32 healing_light = 3;\n     */\n    healingLight: number;\n    /**\n     * @generated from protobuf field: int32 divine_intellect = 4;\n     */\n    divineIntellect: number;\n    /**\n     * @generated from protobuf field: int32 unyielding_faith = 5;\n     */\n    unyieldingFaith: number;\n    /**\n     * @generated from protobuf field: bool aura_mastery = 6;\n     */\n    auraMastery: boolean;\n    /**\n     * @generated from protobuf field: int32 illumination = 7;\n     */\n    illumination: number;\n    /**\n     * @generated from protobuf field: int32 improved_lay_on_hands = 8;\n     */\n    improvedLayOnHands: number;\n    /**\n     * @generated from protobuf field: int32 improved_concentration_aura = 9;\n     */\n    improvedConcentrationAura: number;\n    /**\n     * @generated from protobuf field: int32 improved_blessing_of_wisdom = 10;\n     */\n    improvedBlessingOfWisdom: number;\n    /**\n     * @generated from protobuf field: int32 blessed_hands = 11;\n     */\n    blessedHands: number;\n    /**\n     * @generated from protobuf field: int32 pure_of_heart = 12;\n     */\n    pureOfHeart: number;\n    /**\n     * @generated from protobuf field: bool divine_favor = 13;\n     */\n    divineFavor: boolean;\n    /**\n     * @generated from protobuf field: int32 sanctified_light = 14;\n     */\n    sanctifiedLight: number;\n    /**\n     * @generated from protobuf field: int32 purifying_power = 15;\n     */\n    purifyingPower: number;\n    /**\n     * @generated from protobuf field: int32 holy_power = 16;\n     */\n    holyPower: number;\n    /**\n     * @generated from protobuf field: int32 lights_grace = 17;\n     */\n    lightsGrace: number;\n    /**\n     * @generated from protobuf field: bool holy_shock = 18;\n     */\n    holyShock: boolean;\n    /**\n     * @generated from protobuf field: int32 blessed_life = 19;\n     */\n    blessedLife: number;\n    /**\n     * @generated from protobuf field: int32 sacred_cleansing = 20;\n     */\n    sacredCleansing: number;\n    /**\n     * @generated from protobuf field: int32 holy_guidance = 21;\n     */\n    holyGuidance: number;\n    /**\n     * @generated from protobuf field: bool divine_illumination = 22;\n     */\n    divineIllumination: boolean;\n    /**\n     * @generated from protobuf field: int32 judgements_of_the_pure = 23;\n     */\n    judgementsOfThePure: number;\n    /**\n     * @generated from protobuf field: int32 infusion_of_light = 24;\n     */\n    infusionOfLight: number;\n    /**\n     * @generated from protobuf field: int32 enlightened_judgements = 25;\n     */\n    enlightenedJudgements: number;\n    /**\n     * @generated from protobuf field: bool beacon_of_light = 26;\n     */\n    beaconOfLight: boolean;\n    /**\n     * Protection\n     *\n     * @generated from protobuf field: int32 divinity = 27;\n     */\n    divinity: number;\n    /**\n     * @generated from protobuf field: int32 divine_strength = 28;\n     */\n    divineStrength: number;\n    /**\n     * @generated from protobuf field: int32 stoicism = 29;\n     */\n    stoicism: number;\n    /**\n     * @generated from protobuf field: int32 guardians_favor = 30;\n     */\n    guardiansFavor: number;\n    /**\n     * @generated from protobuf field: int32 anticipation = 31;\n     */\n    anticipation: number;\n    /**\n     * @generated from protobuf field: bool divine_sacrifice = 32;\n     */\n    divineSacrifice: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_righteous_fury = 33;\n     */\n    improvedRighteousFury: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 34;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 divine_guardian = 35;\n     */\n    divineGuardian: number;\n    /**\n     * @generated from protobuf field: int32 improved_hammer_of_justice = 36;\n     */\n    improvedHammerOfJustice: number;\n    /**\n     * @generated from protobuf field: int32 improved_devotion_aura = 37;\n     */\n    improvedDevotionAura: number;\n    /**\n     * @generated from protobuf field: bool blessing_of_sanctuary = 38;\n     */\n    blessingOfSanctuary: boolean;\n    /**\n     * @generated from protobuf field: int32 reckoning = 39;\n     */\n    reckoning: number;\n    /**\n     * @generated from protobuf field: int32 sacred_duty = 40;\n     */\n    sacredDuty: number;\n    /**\n     * @generated from protobuf field: int32 one_handed_weapon_specialization = 41;\n     */\n    oneHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 spiritual_attunement = 42;\n     */\n    spiritualAttunement: number;\n    /**\n     * @generated from protobuf field: bool holy_shield = 43;\n     */\n    holyShield: boolean;\n    /**\n     * @generated from protobuf field: int32 ardent_defender = 44;\n     */\n    ardentDefender: number;\n    /**\n     * @generated from protobuf field: int32 redoubt = 45;\n     */\n    redoubt: number;\n    /**\n     * @generated from protobuf field: int32 combat_expertise = 46;\n     */\n    combatExpertise: number;\n    /**\n     * @generated from protobuf field: int32 touched_by_the_light = 47;\n     */\n    touchedByTheLight: number;\n    /**\n     * @generated from protobuf field: bool avengers_shield = 48;\n     */\n    avengersShield: boolean;\n    /**\n     * @generated from protobuf field: int32 guarded_by_the_light = 49;\n     */\n    guardedByTheLight: number;\n    /**\n     * @generated from protobuf field: int32 shield_of_the_templar = 50;\n     */\n    shieldOfTheTemplar: number;\n    /**\n     * @generated from protobuf field: int32 judgements_of_the_just = 51;\n     */\n    judgementsOfTheJust: number;\n    /**\n     * @generated from protobuf field: bool hammer_of_the_righteous = 52;\n     */\n    hammerOfTheRighteous: boolean;\n    /**\n     * Retribution\n     *\n     * @generated from protobuf field: int32 deflection = 53;\n     */\n    deflection: number;\n    /**\n     * @generated from protobuf field: int32 benediction = 54;\n     */\n    benediction: number;\n    /**\n     * @generated from protobuf field: int32 improved_judgements = 55;\n     */\n    improvedJudgements: number;\n    /**\n     * @generated from protobuf field: int32 heart_of_the_crusader = 56;\n     */\n    heartOfTheCrusader: number;\n    /**\n     * @generated from protobuf field: int32 improved_blessing_of_might = 57;\n     */\n    improvedBlessingOfMight: number;\n    /**\n     * @generated from protobuf field: int32 vindication = 58;\n     */\n    vindication: number;\n    /**\n     * @generated from protobuf field: int32 conviction = 59;\n     */\n    conviction: number;\n    /**\n     * @generated from protobuf field: bool seal_of_command = 60;\n     */\n    sealOfCommand: boolean;\n    /**\n     * @generated from protobuf field: int32 pursuit_of_justice = 61;\n     */\n    pursuitOfJustice: number;\n    /**\n     * @generated from protobuf field: int32 eye_for_an_eye = 62;\n     */\n    eyeForAnEye: number;\n    /**\n     * @generated from protobuf field: int32 sanctity_of_battle = 63;\n     */\n    sanctityOfBattle: number;\n    /**\n     * @generated from protobuf field: int32 crusade = 64;\n     */\n    crusade: number;\n    /**\n     * @generated from protobuf field: int32 two_handed_weapon_specialization = 65;\n     */\n    twoHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: bool sanctified_retribution = 66;\n     */\n    sanctifiedRetribution: boolean;\n    /**\n     * @generated from protobuf field: int32 vengeance = 67;\n     */\n    vengeance: number;\n    /**\n     * @generated from protobuf field: int32 divine_purpose = 68;\n     */\n    divinePurpose: number;\n    /**\n     * @generated from protobuf field: int32 the_art_of_war = 69;\n     */\n    theArtOfWar: number;\n    /**\n     * @generated from protobuf field: bool repentance = 70;\n     */\n    repentance: boolean;\n    /**\n     * @generated from protobuf field: int32 judgements_of_the_wise = 71;\n     */\n    judgementsOfTheWise: number;\n    /**\n     * @generated from protobuf field: int32 fanaticism = 72;\n     */\n    fanaticism: number;\n    /**\n     * @generated from protobuf field: int32 sanctified_wrath = 73;\n     */\n    sanctifiedWrath: number;\n    /**\n     * @generated from protobuf field: int32 swift_retribution = 74;\n     */\n    swiftRetribution: number;\n    /**\n     * @generated from protobuf field: bool crusader_strike = 75;\n     */\n    crusaderStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 sheath_of_light = 76;\n     */\n    sheathOfLight: number;\n    /**\n     * @generated from protobuf field: int32 righteous_vengeance = 77;\n     */\n    righteousVengeance: number;\n    /**\n     * @generated from protobuf field: bool divine_storm = 78;\n     */\n    divineStorm: boolean;\n}\n/**\n * @generated from protobuf message proto.RetributionPaladin\n */\nexport interface RetributionPaladin {\n    /**\n     * @generated from protobuf field: proto.RetributionPaladin.Rotation rotation = 1;\n     */\n    rotation?: RetributionPaladin_Rotation;\n    /**\n     * @generated from protobuf field: proto.PaladinTalents talents = 2;\n     */\n    talents?: PaladinTalents;\n    /**\n     * @generated from protobuf field: proto.RetributionPaladin.Options options = 3;\n     */\n    options?: RetributionPaladin_Options;\n}\n/**\n * @generated from protobuf message proto.RetributionPaladin.Rotation\n */\nexport interface RetributionPaladin_Rotation {\n    /**\n     * @generated from protobuf field: int32 exo_slack = 1;\n     */\n    exoSlack: number;\n    /**\n     * @generated from protobuf field: int32 cons_slack = 2;\n     */\n    consSlack: number;\n    /**\n     * @generated from protobuf field: double divine_plea_percentage = 3;\n     */\n    divinePleaPercentage: number;\n    /**\n     * @generated from protobuf field: int32 holy_wrath_threshold = 4;\n     */\n    holyWrathThreshold: number;\n    /**\n     * @generated from protobuf field: int32 sov_targets = 5;\n     */\n    sovTargets: number;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 8;\n     */\n    customRotation?: CustomRotation;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_cast_sequence = 10;\n     */\n    customCastSequence?: CustomRotation;\n    /**\n     * @generated from protobuf field: proto.RetributionPaladin.Rotation.RotationType type = 9;\n     */\n    type: RetributionPaladin_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: bool use_divine_plea = 11;\n     */\n    useDivinePlea: boolean;\n}\n/**\n * @generated from protobuf enum proto.RetributionPaladin.Rotation.SpellOption\n */\nexport enum RetributionPaladin_Rotation_SpellOption {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: JudgementOfWisdom = 1;\n     */\n    JudgementOfWisdom = 1,\n    /**\n     * @generated from protobuf enum value: DivineStorm = 2;\n     */\n    DivineStorm = 2,\n    /**\n     * @generated from protobuf enum value: HammerOfWrath = 3;\n     */\n    HammerOfWrath = 3,\n    /**\n     * @generated from protobuf enum value: Consecration = 4;\n     */\n    Consecration = 4,\n    /**\n     * @generated from protobuf enum value: HolyWrath = 5;\n     */\n    HolyWrath = 5,\n    /**\n     * @generated from protobuf enum value: CrusaderStrike = 6;\n     */\n    CrusaderStrike = 6,\n    /**\n     * @generated from protobuf enum value: Exorcism = 7;\n     */\n    Exorcism = 7,\n    /**\n     * @generated from protobuf enum value: DivinePlea = 8;\n     */\n    DivinePlea = 8\n}\n/**\n * @generated from protobuf enum proto.RetributionPaladin.Rotation.RotationType\n */\nexport enum RetributionPaladin_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: UnknownType = 0;\n     */\n    UnknownType = 0,\n    /**\n     * @generated from protobuf enum value: Standard = 1;\n     */\n    Standard = 1,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2,\n    /**\n     * @generated from protobuf enum value: CastSequence = 3;\n     */\n    CastSequence = 3\n}\n/**\n * @generated from protobuf message proto.RetributionPaladin.Options\n */\nexport interface RetributionPaladin_Options {\n    /**\n     * @generated from protobuf field: proto.PaladinJudgement judgement = 1;\n     */\n    judgement: PaladinJudgement;\n    /**\n     * @generated from protobuf field: proto.PaladinSeal seal = 2;\n     */\n    seal: PaladinSeal;\n    /**\n     * @generated from protobuf field: proto.PaladinAura aura = 3;\n     */\n    aura: PaladinAura;\n    /**\n     * @generated from protobuf field: double damage_taken_per_second = 4;\n     */\n    damageTakenPerSecond: number;\n    /**\n     * @generated from protobuf field: bool use_avenging_wrath = 5;\n     */\n    useAvengingWrath: boolean;\n}\n/**\n * @generated from protobuf message proto.ProtectionPaladin\n */\nexport interface ProtectionPaladin {\n    /**\n     * @generated from protobuf field: proto.ProtectionPaladin.Rotation rotation = 1;\n     */\n    rotation?: ProtectionPaladin_Rotation;\n    /**\n     * @generated from protobuf field: proto.PaladinTalents talents = 2;\n     */\n    talents?: PaladinTalents;\n    /**\n     * @generated from protobuf field: proto.ProtectionPaladin.Options options = 3;\n     */\n    options?: ProtectionPaladin_Options;\n}\n/**\n * @generated from protobuf message proto.ProtectionPaladin.Rotation\n */\nexport interface ProtectionPaladin_Rotation {\n    /**\n     * @generated from protobuf field: bool hammer_first = 1;\n     */\n    hammerFirst: boolean;\n    /**\n     * @generated from protobuf field: bool use_custom_prio = 2;\n     */\n    useCustomPrio: boolean;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 3;\n     */\n    customRotation?: CustomRotation;\n}\n/**\n * @generated from protobuf enum proto.ProtectionPaladin.Rotation.SpellOption\n */\nexport enum ProtectionPaladin_Rotation_SpellOption {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: JudgementOfWisdom = 1;\n     */\n    JudgementOfWisdom = 1,\n    /**\n     * @generated from protobuf enum value: HammerOfWrath = 2;\n     */\n    HammerOfWrath = 2,\n    /**\n     * @generated from protobuf enum value: Consecration = 3;\n     */\n    Consecration = 3,\n    /**\n     * @generated from protobuf enum value: HolyWrath = 4;\n     */\n    HolyWrath = 4,\n    /**\n     * @generated from protobuf enum value: Exorcism = 5;\n     */\n    Exorcism = 5,\n    /**\n     * @generated from protobuf enum value: ShieldOfRighteousness = 6;\n     */\n    ShieldOfRighteousness = 6,\n    /**\n     * @generated from protobuf enum value: AvengersShield = 7;\n     */\n    AvengersShield = 7,\n    /**\n     * @generated from protobuf enum value: HammerOfTheRighteous = 8;\n     */\n    HammerOfTheRighteous = 8,\n    /**\n     * @generated from protobuf enum value: HolyShield = 9;\n     */\n    HolyShield = 9\n}\n/**\n * @generated from protobuf message proto.ProtectionPaladin.Options\n */\nexport interface ProtectionPaladin_Options {\n    /**\n     * @generated from protobuf field: proto.PaladinJudgement judgement = 1;\n     */\n    judgement: PaladinJudgement;\n    /**\n     * @generated from protobuf field: proto.PaladinSeal seal = 2;\n     */\n    seal: PaladinSeal;\n    /**\n     * @generated from protobuf field: proto.PaladinAura aura = 3;\n     */\n    aura: PaladinAura;\n    /**\n     * @generated from protobuf field: double damage_taken_per_second = 4;\n     */\n    damageTakenPerSecond: number;\n    /**\n     * @generated from protobuf field: bool use_avenging_wrath = 5;\n     */\n    useAvengingWrath: boolean;\n}\n/**\n * @generated from protobuf enum proto.PaladinMajorGlyph\n */\nexport enum PaladinMajorGlyph {\n    /**\n     * @generated from protobuf enum value: PaladinMajorGlyphNone = 0;\n     */\n    PaladinMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAvengerSShield = 41101;\n     */\n    GlyphOfAvengerSShield = 41101,\n    /**\n     * @generated from protobuf enum value: GlyphOfAvengingWrath = 41107;\n     */\n    GlyphOfAvengingWrath = 41107,\n    /**\n     * @generated from protobuf enum value: GlyphOfBeaconOfLight = 45741;\n     */\n    GlyphOfBeaconOfLight = 45741,\n    /**\n     * @generated from protobuf enum value: GlyphOfCleansing = 41104;\n     */\n    GlyphOfCleansing = 41104,\n    /**\n     * @generated from protobuf enum value: GlyphOfConsecration = 41099;\n     */\n    GlyphOfConsecration = 41099,\n    /**\n     * @generated from protobuf enum value: GlyphOfCrusaderStrike = 41098;\n     */\n    GlyphOfCrusaderStrike = 41098,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivinePlea = 45745;\n     */\n    GlyphOfDivinePlea = 45745,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivineStorm = 45743;\n     */\n    GlyphOfDivineStorm = 45743,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivinity = 41108;\n     */\n    GlyphOfDivinity = 41108,\n    /**\n     * @generated from protobuf enum value: GlyphOfExorcism = 41103;\n     */\n    GlyphOfExorcism = 41103,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlashOfLight = 41105;\n     */\n    GlyphOfFlashOfLight = 41105,\n    /**\n     * @generated from protobuf enum value: GlyphOfHammerOfJustice = 41095;\n     */\n    GlyphOfHammerOfJustice = 41095,\n    /**\n     * @generated from protobuf enum value: GlyphOfHammerOfTheRighteous = 45742;\n     */\n    GlyphOfHammerOfTheRighteous = 45742,\n    /**\n     * @generated from protobuf enum value: GlyphOfHammerOfWrath = 41097;\n     */\n    GlyphOfHammerOfWrath = 41097,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyLight = 41106;\n     */\n    GlyphOfHolyLight = 41106,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyShock = 45746;\n     */\n    GlyphOfHolyShock = 45746,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyWrath = 43867;\n     */\n    GlyphOfHolyWrath = 43867,\n    /**\n     * @generated from protobuf enum value: GlyphOfJudgement = 41092;\n     */\n    GlyphOfJudgement = 41092,\n    /**\n     * @generated from protobuf enum value: GlyphOfRighteousDefense = 41100;\n     */\n    GlyphOfRighteousDefense = 41100,\n    /**\n     * @generated from protobuf enum value: GlyphOfSalvation = 45747;\n     */\n    GlyphOfSalvation = 45747,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfCommand = 41094;\n     */\n    GlyphOfSealOfCommand = 41094,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfLight = 41110;\n     */\n    GlyphOfSealOfLight = 41110,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfRighteousness = 43868;\n     */\n    GlyphOfSealOfRighteousness = 43868,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfVengeance = 43869;\n     */\n    GlyphOfSealOfVengeance = 43869,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfWisdom = 41109;\n     */\n    GlyphOfSealOfWisdom = 41109,\n    /**\n     * @generated from protobuf enum value: GlyphOfShieldOfRighteousness = 45744;\n     */\n    GlyphOfShieldOfRighteousness = 45744,\n    /**\n     * @generated from protobuf enum value: GlyphOfSpiritualAttunement = 41096;\n     */\n    GlyphOfSpiritualAttunement = 41096,\n    /**\n     * @generated from protobuf enum value: GlyphOfTurnEvil = 41102;\n     */\n    GlyphOfTurnEvil = 41102\n}\n/**\n * @generated from protobuf enum proto.PaladinMinorGlyph\n */\nexport enum PaladinMinorGlyph {\n    /**\n     * @generated from protobuf enum value: PaladinMinorGlyphNone = 0;\n     */\n    PaladinMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlessingOfKings = 43365;\n     */\n    GlyphOfBlessingOfKings = 43365,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlessingOfMight = 43340;\n     */\n    GlyphOfBlessingOfMight = 43340,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlessingOfWisdom = 43366;\n     */\n    GlyphOfBlessingOfWisdom = 43366,\n    /**\n     * @generated from protobuf enum value: GlyphOfLayOnHands = 43367;\n     */\n    GlyphOfLayOnHands = 43367,\n    /**\n     * @generated from protobuf enum value: GlyphOfSenseUndead = 43368;\n     */\n    GlyphOfSenseUndead = 43368,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheWise = 43369;\n     */\n    GlyphOfTheWise = 43369\n}\n/**\n * @generated from protobuf enum proto.Blessings\n */\nexport enum Blessings {\n    /**\n     * @generated from protobuf enum value: BlessingUnknown = 0;\n     */\n    BlessingUnknown = 0,\n    /**\n     * @generated from protobuf enum value: BlessingOfKings = 1;\n     */\n    BlessingOfKings = 1,\n    /**\n     * @generated from protobuf enum value: BlessingOfMight = 2;\n     */\n    BlessingOfMight = 2,\n    /**\n     * @generated from protobuf enum value: BlessingOfSalvation = 3;\n     */\n    BlessingOfSalvation = 3,\n    /**\n     * @generated from protobuf enum value: BlessingOfWisdom = 4;\n     */\n    BlessingOfWisdom = 4,\n    /**\n     * @generated from protobuf enum value: BlessingOfSanctuary = 5;\n     */\n    BlessingOfSanctuary = 5,\n    /**\n     * @generated from protobuf enum value: BlessingOfLight = 6;\n     */\n    BlessingOfLight = 6\n}\n/**\n * @generated from protobuf enum proto.PaladinAura\n */\nexport enum PaladinAura {\n    /**\n     * @generated from protobuf enum value: NoPaladinAura = 0;\n     */\n    NoPaladinAura = 0,\n    /**\n     * @generated from protobuf enum value: DevotionAura = 2;\n     */\n    DevotionAura = 2,\n    /**\n     * @generated from protobuf enum value: RetributionAura = 3;\n     */\n    RetributionAura = 3\n}\n/**\n * @generated from protobuf enum proto.PaladinSeal\n */\nexport enum PaladinSeal {\n    /**\n     * @generated from protobuf enum value: Vengeance = 0;\n     */\n    Vengeance = 0,\n    /**\n     * @generated from protobuf enum value: Command = 1;\n     */\n    Command = 1,\n    /**\n     * @generated from protobuf enum value: Righteousness = 2;\n     */\n    Righteousness = 2\n}\n/**\n * @generated from protobuf enum proto.PaladinJudgement\n */\nexport enum PaladinJudgement {\n    /**\n     * @generated from protobuf enum value: JudgementOfWisdom = 0;\n     */\n    JudgementOfWisdom = 0,\n    /**\n     * @generated from protobuf enum value: JudgementOfLight = 1;\n     */\n    JudgementOfLight = 1\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass PaladinTalents$Type extends MessageType<PaladinTalents> {\n    constructor() {\n        super(\"proto.PaladinTalents\", [\n            { no: 1, name: \"spiritual_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"seals_of_the_pure\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"healing_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"divine_intellect\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"unyielding_faith\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"aura_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"illumination\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"improved_lay_on_hands\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"improved_concentration_aura\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"improved_blessing_of_wisdom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"blessed_hands\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"pure_of_heart\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"divine_favor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"sanctified_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"purifying_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"holy_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"lights_grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"holy_shock\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"blessed_life\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"sacred_cleansing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"holy_guidance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"divine_illumination\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"judgements_of_the_pure\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"infusion_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"enlightened_judgements\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"beacon_of_light\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"divinity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"divine_strength\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"stoicism\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"guardians_favor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"anticipation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"divine_sacrifice\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"improved_righteous_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"divine_guardian\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"improved_hammer_of_justice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"improved_devotion_aura\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"blessing_of_sanctuary\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"reckoning\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"sacred_duty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"one_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"spiritual_attunement\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"holy_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 44, name: \"ardent_defender\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"redoubt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"combat_expertise\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"touched_by_the_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"avengers_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"guarded_by_the_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"shield_of_the_templar\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"judgements_of_the_just\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"hammer_of_the_righteous\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"benediction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"improved_judgements\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"heart_of_the_crusader\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"improved_blessing_of_might\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"vindication\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"conviction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"seal_of_command\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 61, name: \"pursuit_of_justice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"eye_for_an_eye\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"sanctity_of_battle\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"crusade\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"two_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"sanctified_retribution\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 67, name: \"vengeance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"divine_purpose\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"the_art_of_war\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"repentance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 71, name: \"judgements_of_the_wise\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"fanaticism\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"sanctified_wrath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"swift_retribution\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"crusader_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 76, name: \"sheath_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"righteous_vengeance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"divine_storm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PaladinTalents>): PaladinTalents {\n        const message = { spiritualFocus: 0, sealsOfThePure: 0, healingLight: 0, divineIntellect: 0, unyieldingFaith: 0, auraMastery: false, illumination: 0, improvedLayOnHands: 0, improvedConcentrationAura: 0, improvedBlessingOfWisdom: 0, blessedHands: 0, pureOfHeart: 0, divineFavor: false, sanctifiedLight: 0, purifyingPower: 0, holyPower: 0, lightsGrace: 0, holyShock: false, blessedLife: 0, sacredCleansing: 0, holyGuidance: 0, divineIllumination: false, judgementsOfThePure: 0, infusionOfLight: 0, enlightenedJudgements: 0, beaconOfLight: false, divinity: 0, divineStrength: 0, stoicism: 0, guardiansFavor: 0, anticipation: 0, divineSacrifice: false, improvedRighteousFury: 0, toughness: 0, divineGuardian: 0, improvedHammerOfJustice: 0, improvedDevotionAura: 0, blessingOfSanctuary: false, reckoning: 0, sacredDuty: 0, oneHandedWeaponSpecialization: 0, spiritualAttunement: 0, holyShield: false, ardentDefender: 0, redoubt: 0, combatExpertise: 0, touchedByTheLight: 0, avengersShield: false, guardedByTheLight: 0, shieldOfTheTemplar: 0, judgementsOfTheJust: 0, hammerOfTheRighteous: false, deflection: 0, benediction: 0, improvedJudgements: 0, heartOfTheCrusader: 0, improvedBlessingOfMight: 0, vindication: 0, conviction: 0, sealOfCommand: false, pursuitOfJustice: 0, eyeForAnEye: 0, sanctityOfBattle: 0, crusade: 0, twoHandedWeaponSpecialization: 0, sanctifiedRetribution: false, vengeance: 0, divinePurpose: 0, theArtOfWar: 0, repentance: false, judgementsOfTheWise: 0, fanaticism: 0, sanctifiedWrath: 0, swiftRetribution: 0, crusaderStrike: false, sheathOfLight: 0, righteousVengeance: 0, divineStorm: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PaladinTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaladinTalents): PaladinTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 spiritual_focus */ 1:\n                    message.spiritualFocus = reader.int32();\n                    break;\n                case /* int32 seals_of_the_pure */ 2:\n                    message.sealsOfThePure = reader.int32();\n                    break;\n                case /* int32 healing_light */ 3:\n                    message.healingLight = reader.int32();\n                    break;\n                case /* int32 divine_intellect */ 4:\n                    message.divineIntellect = reader.int32();\n                    break;\n                case /* int32 unyielding_faith */ 5:\n                    message.unyieldingFaith = reader.int32();\n                    break;\n                case /* bool aura_mastery */ 6:\n                    message.auraMastery = reader.bool();\n                    break;\n                case /* int32 illumination */ 7:\n                    message.illumination = reader.int32();\n                    break;\n                case /* int32 improved_lay_on_hands */ 8:\n                    message.improvedLayOnHands = reader.int32();\n                    break;\n                case /* int32 improved_concentration_aura */ 9:\n                    message.improvedConcentrationAura = reader.int32();\n                    break;\n                case /* int32 improved_blessing_of_wisdom */ 10:\n                    message.improvedBlessingOfWisdom = reader.int32();\n                    break;\n                case /* int32 blessed_hands */ 11:\n                    message.blessedHands = reader.int32();\n                    break;\n                case /* int32 pure_of_heart */ 12:\n                    message.pureOfHeart = reader.int32();\n                    break;\n                case /* bool divine_favor */ 13:\n                    message.divineFavor = reader.bool();\n                    break;\n                case /* int32 sanctified_light */ 14:\n                    message.sanctifiedLight = reader.int32();\n                    break;\n                case /* int32 purifying_power */ 15:\n                    message.purifyingPower = reader.int32();\n                    break;\n                case /* int32 holy_power */ 16:\n                    message.holyPower = reader.int32();\n                    break;\n                case /* int32 lights_grace */ 17:\n                    message.lightsGrace = reader.int32();\n                    break;\n                case /* bool holy_shock */ 18:\n                    message.holyShock = reader.bool();\n                    break;\n                case /* int32 blessed_life */ 19:\n                    message.blessedLife = reader.int32();\n                    break;\n                case /* int32 sacred_cleansing */ 20:\n                    message.sacredCleansing = reader.int32();\n                    break;\n                case /* int32 holy_guidance */ 21:\n                    message.holyGuidance = reader.int32();\n                    break;\n                case /* bool divine_illumination */ 22:\n                    message.divineIllumination = reader.bool();\n                    break;\n                case /* int32 judgements_of_the_pure */ 23:\n                    message.judgementsOfThePure = reader.int32();\n                    break;\n                case /* int32 infusion_of_light */ 24:\n                    message.infusionOfLight = reader.int32();\n                    break;\n                case /* int32 enlightened_judgements */ 25:\n                    message.enlightenedJudgements = reader.int32();\n                    break;\n                case /* bool beacon_of_light */ 26:\n                    message.beaconOfLight = reader.bool();\n                    break;\n                case /* int32 divinity */ 27:\n                    message.divinity = reader.int32();\n                    break;\n                case /* int32 divine_strength */ 28:\n                    message.divineStrength = reader.int32();\n                    break;\n                case /* int32 stoicism */ 29:\n                    message.stoicism = reader.int32();\n                    break;\n                case /* int32 guardians_favor */ 30:\n                    message.guardiansFavor = reader.int32();\n                    break;\n                case /* int32 anticipation */ 31:\n                    message.anticipation = reader.int32();\n                    break;\n                case /* bool divine_sacrifice */ 32:\n                    message.divineSacrifice = reader.bool();\n                    break;\n                case /* int32 improved_righteous_fury */ 33:\n                    message.improvedRighteousFury = reader.int32();\n                    break;\n                case /* int32 toughness */ 34:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 divine_guardian */ 35:\n                    message.divineGuardian = reader.int32();\n                    break;\n                case /* int32 improved_hammer_of_justice */ 36:\n                    message.improvedHammerOfJustice = reader.int32();\n                    break;\n                case /* int32 improved_devotion_aura */ 37:\n                    message.improvedDevotionAura = reader.int32();\n                    break;\n                case /* bool blessing_of_sanctuary */ 38:\n                    message.blessingOfSanctuary = reader.bool();\n                    break;\n                case /* int32 reckoning */ 39:\n                    message.reckoning = reader.int32();\n                    break;\n                case /* int32 sacred_duty */ 40:\n                    message.sacredDuty = reader.int32();\n                    break;\n                case /* int32 one_handed_weapon_specialization */ 41:\n                    message.oneHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* int32 spiritual_attunement */ 42:\n                    message.spiritualAttunement = reader.int32();\n                    break;\n                case /* bool holy_shield */ 43:\n                    message.holyShield = reader.bool();\n                    break;\n                case /* int32 ardent_defender */ 44:\n                    message.ardentDefender = reader.int32();\n                    break;\n                case /* int32 redoubt */ 45:\n                    message.redoubt = reader.int32();\n                    break;\n                case /* int32 combat_expertise */ 46:\n                    message.combatExpertise = reader.int32();\n                    break;\n                case /* int32 touched_by_the_light */ 47:\n                    message.touchedByTheLight = reader.int32();\n                    break;\n                case /* bool avengers_shield */ 48:\n                    message.avengersShield = reader.bool();\n                    break;\n                case /* int32 guarded_by_the_light */ 49:\n                    message.guardedByTheLight = reader.int32();\n                    break;\n                case /* int32 shield_of_the_templar */ 50:\n                    message.shieldOfTheTemplar = reader.int32();\n                    break;\n                case /* int32 judgements_of_the_just */ 51:\n                    message.judgementsOfTheJust = reader.int32();\n                    break;\n                case /* bool hammer_of_the_righteous */ 52:\n                    message.hammerOfTheRighteous = reader.bool();\n                    break;\n                case /* int32 deflection */ 53:\n                    message.deflection = reader.int32();\n                    break;\n                case /* int32 benediction */ 54:\n                    message.benediction = reader.int32();\n                    break;\n                case /* int32 improved_judgements */ 55:\n                    message.improvedJudgements = reader.int32();\n                    break;\n                case /* int32 heart_of_the_crusader */ 56:\n                    message.heartOfTheCrusader = reader.int32();\n                    break;\n                case /* int32 improved_blessing_of_might */ 57:\n                    message.improvedBlessingOfMight = reader.int32();\n                    break;\n                case /* int32 vindication */ 58:\n                    message.vindication = reader.int32();\n                    break;\n                case /* int32 conviction */ 59:\n                    message.conviction = reader.int32();\n                    break;\n                case /* bool seal_of_command */ 60:\n                    message.sealOfCommand = reader.bool();\n                    break;\n                case /* int32 pursuit_of_justice */ 61:\n                    message.pursuitOfJustice = reader.int32();\n                    break;\n                case /* int32 eye_for_an_eye */ 62:\n                    message.eyeForAnEye = reader.int32();\n                    break;\n                case /* int32 sanctity_of_battle */ 63:\n                    message.sanctityOfBattle = reader.int32();\n                    break;\n                case /* int32 crusade */ 64:\n                    message.crusade = reader.int32();\n                    break;\n                case /* int32 two_handed_weapon_specialization */ 65:\n                    message.twoHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* bool sanctified_retribution */ 66:\n                    message.sanctifiedRetribution = reader.bool();\n                    break;\n                case /* int32 vengeance */ 67:\n                    message.vengeance = reader.int32();\n                    break;\n                case /* int32 divine_purpose */ 68:\n                    message.divinePurpose = reader.int32();\n                    break;\n                case /* int32 the_art_of_war */ 69:\n                    message.theArtOfWar = reader.int32();\n                    break;\n                case /* bool repentance */ 70:\n                    message.repentance = reader.bool();\n                    break;\n                case /* int32 judgements_of_the_wise */ 71:\n                    message.judgementsOfTheWise = reader.int32();\n                    break;\n                case /* int32 fanaticism */ 72:\n                    message.fanaticism = reader.int32();\n                    break;\n                case /* int32 sanctified_wrath */ 73:\n                    message.sanctifiedWrath = reader.int32();\n                    break;\n                case /* int32 swift_retribution */ 74:\n                    message.swiftRetribution = reader.int32();\n                    break;\n                case /* bool crusader_strike */ 75:\n                    message.crusaderStrike = reader.bool();\n                    break;\n                case /* int32 sheath_of_light */ 76:\n                    message.sheathOfLight = reader.int32();\n                    break;\n                case /* int32 righteous_vengeance */ 77:\n                    message.righteousVengeance = reader.int32();\n                    break;\n                case /* bool divine_storm */ 78:\n                    message.divineStorm = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PaladinTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 spiritual_focus = 1; */\n        if (message.spiritualFocus !== 0)\n            writer.tag(1, WireType.Varint).int32(message.spiritualFocus);\n        /* int32 seals_of_the_pure = 2; */\n        if (message.sealsOfThePure !== 0)\n            writer.tag(2, WireType.Varint).int32(message.sealsOfThePure);\n        /* int32 healing_light = 3; */\n        if (message.healingLight !== 0)\n            writer.tag(3, WireType.Varint).int32(message.healingLight);\n        /* int32 divine_intellect = 4; */\n        if (message.divineIntellect !== 0)\n            writer.tag(4, WireType.Varint).int32(message.divineIntellect);\n        /* int32 unyielding_faith = 5; */\n        if (message.unyieldingFaith !== 0)\n            writer.tag(5, WireType.Varint).int32(message.unyieldingFaith);\n        /* bool aura_mastery = 6; */\n        if (message.auraMastery !== false)\n            writer.tag(6, WireType.Varint).bool(message.auraMastery);\n        /* int32 illumination = 7; */\n        if (message.illumination !== 0)\n            writer.tag(7, WireType.Varint).int32(message.illumination);\n        /* int32 improved_lay_on_hands = 8; */\n        if (message.improvedLayOnHands !== 0)\n            writer.tag(8, WireType.Varint).int32(message.improvedLayOnHands);\n        /* int32 improved_concentration_aura = 9; */\n        if (message.improvedConcentrationAura !== 0)\n            writer.tag(9, WireType.Varint).int32(message.improvedConcentrationAura);\n        /* int32 improved_blessing_of_wisdom = 10; */\n        if (message.improvedBlessingOfWisdom !== 0)\n            writer.tag(10, WireType.Varint).int32(message.improvedBlessingOfWisdom);\n        /* int32 blessed_hands = 11; */\n        if (message.blessedHands !== 0)\n            writer.tag(11, WireType.Varint).int32(message.blessedHands);\n        /* int32 pure_of_heart = 12; */\n        if (message.pureOfHeart !== 0)\n            writer.tag(12, WireType.Varint).int32(message.pureOfHeart);\n        /* bool divine_favor = 13; */\n        if (message.divineFavor !== false)\n            writer.tag(13, WireType.Varint).bool(message.divineFavor);\n        /* int32 sanctified_light = 14; */\n        if (message.sanctifiedLight !== 0)\n            writer.tag(14, WireType.Varint).int32(message.sanctifiedLight);\n        /* int32 purifying_power = 15; */\n        if (message.purifyingPower !== 0)\n            writer.tag(15, WireType.Varint).int32(message.purifyingPower);\n        /* int32 holy_power = 16; */\n        if (message.holyPower !== 0)\n            writer.tag(16, WireType.Varint).int32(message.holyPower);\n        /* int32 lights_grace = 17; */\n        if (message.lightsGrace !== 0)\n            writer.tag(17, WireType.Varint).int32(message.lightsGrace);\n        /* bool holy_shock = 18; */\n        if (message.holyShock !== false)\n            writer.tag(18, WireType.Varint).bool(message.holyShock);\n        /* int32 blessed_life = 19; */\n        if (message.blessedLife !== 0)\n            writer.tag(19, WireType.Varint).int32(message.blessedLife);\n        /* int32 sacred_cleansing = 20; */\n        if (message.sacredCleansing !== 0)\n            writer.tag(20, WireType.Varint).int32(message.sacredCleansing);\n        /* int32 holy_guidance = 21; */\n        if (message.holyGuidance !== 0)\n            writer.tag(21, WireType.Varint).int32(message.holyGuidance);\n        /* bool divine_illumination = 22; */\n        if (message.divineIllumination !== false)\n            writer.tag(22, WireType.Varint).bool(message.divineIllumination);\n        /* int32 judgements_of_the_pure = 23; */\n        if (message.judgementsOfThePure !== 0)\n            writer.tag(23, WireType.Varint).int32(message.judgementsOfThePure);\n        /* int32 infusion_of_light = 24; */\n        if (message.infusionOfLight !== 0)\n            writer.tag(24, WireType.Varint).int32(message.infusionOfLight);\n        /* int32 enlightened_judgements = 25; */\n        if (message.enlightenedJudgements !== 0)\n            writer.tag(25, WireType.Varint).int32(message.enlightenedJudgements);\n        /* bool beacon_of_light = 26; */\n        if (message.beaconOfLight !== false)\n            writer.tag(26, WireType.Varint).bool(message.beaconOfLight);\n        /* int32 divinity = 27; */\n        if (message.divinity !== 0)\n            writer.tag(27, WireType.Varint).int32(message.divinity);\n        /* int32 divine_strength = 28; */\n        if (message.divineStrength !== 0)\n            writer.tag(28, WireType.Varint).int32(message.divineStrength);\n        /* int32 stoicism = 29; */\n        if (message.stoicism !== 0)\n            writer.tag(29, WireType.Varint).int32(message.stoicism);\n        /* int32 guardians_favor = 30; */\n        if (message.guardiansFavor !== 0)\n            writer.tag(30, WireType.Varint).int32(message.guardiansFavor);\n        /* int32 anticipation = 31; */\n        if (message.anticipation !== 0)\n            writer.tag(31, WireType.Varint).int32(message.anticipation);\n        /* bool divine_sacrifice = 32; */\n        if (message.divineSacrifice !== false)\n            writer.tag(32, WireType.Varint).bool(message.divineSacrifice);\n        /* int32 improved_righteous_fury = 33; */\n        if (message.improvedRighteousFury !== 0)\n            writer.tag(33, WireType.Varint).int32(message.improvedRighteousFury);\n        /* int32 toughness = 34; */\n        if (message.toughness !== 0)\n            writer.tag(34, WireType.Varint).int32(message.toughness);\n        /* int32 divine_guardian = 35; */\n        if (message.divineGuardian !== 0)\n            writer.tag(35, WireType.Varint).int32(message.divineGuardian);\n        /* int32 improved_hammer_of_justice = 36; */\n        if (message.improvedHammerOfJustice !== 0)\n            writer.tag(36, WireType.Varint).int32(message.improvedHammerOfJustice);\n        /* int32 improved_devotion_aura = 37; */\n        if (message.improvedDevotionAura !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedDevotionAura);\n        /* bool blessing_of_sanctuary = 38; */\n        if (message.blessingOfSanctuary !== false)\n            writer.tag(38, WireType.Varint).bool(message.blessingOfSanctuary);\n        /* int32 reckoning = 39; */\n        if (message.reckoning !== 0)\n            writer.tag(39, WireType.Varint).int32(message.reckoning);\n        /* int32 sacred_duty = 40; */\n        if (message.sacredDuty !== 0)\n            writer.tag(40, WireType.Varint).int32(message.sacredDuty);\n        /* int32 one_handed_weapon_specialization = 41; */\n        if (message.oneHandedWeaponSpecialization !== 0)\n            writer.tag(41, WireType.Varint).int32(message.oneHandedWeaponSpecialization);\n        /* int32 spiritual_attunement = 42; */\n        if (message.spiritualAttunement !== 0)\n            writer.tag(42, WireType.Varint).int32(message.spiritualAttunement);\n        /* bool holy_shield = 43; */\n        if (message.holyShield !== false)\n            writer.tag(43, WireType.Varint).bool(message.holyShield);\n        /* int32 ardent_defender = 44; */\n        if (message.ardentDefender !== 0)\n            writer.tag(44, WireType.Varint).int32(message.ardentDefender);\n        /* int32 redoubt = 45; */\n        if (message.redoubt !== 0)\n            writer.tag(45, WireType.Varint).int32(message.redoubt);\n        /* int32 combat_expertise = 46; */\n        if (message.combatExpertise !== 0)\n            writer.tag(46, WireType.Varint).int32(message.combatExpertise);\n        /* int32 touched_by_the_light = 47; */\n        if (message.touchedByTheLight !== 0)\n            writer.tag(47, WireType.Varint).int32(message.touchedByTheLight);\n        /* bool avengers_shield = 48; */\n        if (message.avengersShield !== false)\n            writer.tag(48, WireType.Varint).bool(message.avengersShield);\n        /* int32 guarded_by_the_light = 49; */\n        if (message.guardedByTheLight !== 0)\n            writer.tag(49, WireType.Varint).int32(message.guardedByTheLight);\n        /* int32 shield_of_the_templar = 50; */\n        if (message.shieldOfTheTemplar !== 0)\n            writer.tag(50, WireType.Varint).int32(message.shieldOfTheTemplar);\n        /* int32 judgements_of_the_just = 51; */\n        if (message.judgementsOfTheJust !== 0)\n            writer.tag(51, WireType.Varint).int32(message.judgementsOfTheJust);\n        /* bool hammer_of_the_righteous = 52; */\n        if (message.hammerOfTheRighteous !== false)\n            writer.tag(52, WireType.Varint).bool(message.hammerOfTheRighteous);\n        /* int32 deflection = 53; */\n        if (message.deflection !== 0)\n            writer.tag(53, WireType.Varint).int32(message.deflection);\n        /* int32 benediction = 54; */\n        if (message.benediction !== 0)\n            writer.tag(54, WireType.Varint).int32(message.benediction);\n        /* int32 improved_judgements = 55; */\n        if (message.improvedJudgements !== 0)\n            writer.tag(55, WireType.Varint).int32(message.improvedJudgements);\n        /* int32 heart_of_the_crusader = 56; */\n        if (message.heartOfTheCrusader !== 0)\n            writer.tag(56, WireType.Varint).int32(message.heartOfTheCrusader);\n        /* int32 improved_blessing_of_might = 57; */\n        if (message.improvedBlessingOfMight !== 0)\n            writer.tag(57, WireType.Varint).int32(message.improvedBlessingOfMight);\n        /* int32 vindication = 58; */\n        if (message.vindication !== 0)\n            writer.tag(58, WireType.Varint).int32(message.vindication);\n        /* int32 conviction = 59; */\n        if (message.conviction !== 0)\n            writer.tag(59, WireType.Varint).int32(message.conviction);\n        /* bool seal_of_command = 60; */\n        if (message.sealOfCommand !== false)\n            writer.tag(60, WireType.Varint).bool(message.sealOfCommand);\n        /* int32 pursuit_of_justice = 61; */\n        if (message.pursuitOfJustice !== 0)\n            writer.tag(61, WireType.Varint).int32(message.pursuitOfJustice);\n        /* int32 eye_for_an_eye = 62; */\n        if (message.eyeForAnEye !== 0)\n            writer.tag(62, WireType.Varint).int32(message.eyeForAnEye);\n        /* int32 sanctity_of_battle = 63; */\n        if (message.sanctityOfBattle !== 0)\n            writer.tag(63, WireType.Varint).int32(message.sanctityOfBattle);\n        /* int32 crusade = 64; */\n        if (message.crusade !== 0)\n            writer.tag(64, WireType.Varint).int32(message.crusade);\n        /* int32 two_handed_weapon_specialization = 65; */\n        if (message.twoHandedWeaponSpecialization !== 0)\n            writer.tag(65, WireType.Varint).int32(message.twoHandedWeaponSpecialization);\n        /* bool sanctified_retribution = 66; */\n        if (message.sanctifiedRetribution !== false)\n            writer.tag(66, WireType.Varint).bool(message.sanctifiedRetribution);\n        /* int32 vengeance = 67; */\n        if (message.vengeance !== 0)\n            writer.tag(67, WireType.Varint).int32(message.vengeance);\n        /* int32 divine_purpose = 68; */\n        if (message.divinePurpose !== 0)\n            writer.tag(68, WireType.Varint).int32(message.divinePurpose);\n        /* int32 the_art_of_war = 69; */\n        if (message.theArtOfWar !== 0)\n            writer.tag(69, WireType.Varint).int32(message.theArtOfWar);\n        /* bool repentance = 70; */\n        if (message.repentance !== false)\n            writer.tag(70, WireType.Varint).bool(message.repentance);\n        /* int32 judgements_of_the_wise = 71; */\n        if (message.judgementsOfTheWise !== 0)\n            writer.tag(71, WireType.Varint).int32(message.judgementsOfTheWise);\n        /* int32 fanaticism = 72; */\n        if (message.fanaticism !== 0)\n            writer.tag(72, WireType.Varint).int32(message.fanaticism);\n        /* int32 sanctified_wrath = 73; */\n        if (message.sanctifiedWrath !== 0)\n            writer.tag(73, WireType.Varint).int32(message.sanctifiedWrath);\n        /* int32 swift_retribution = 74; */\n        if (message.swiftRetribution !== 0)\n            writer.tag(74, WireType.Varint).int32(message.swiftRetribution);\n        /* bool crusader_strike = 75; */\n        if (message.crusaderStrike !== false)\n            writer.tag(75, WireType.Varint).bool(message.crusaderStrike);\n        /* int32 sheath_of_light = 76; */\n        if (message.sheathOfLight !== 0)\n            writer.tag(76, WireType.Varint).int32(message.sheathOfLight);\n        /* int32 righteous_vengeance = 77; */\n        if (message.righteousVengeance !== 0)\n            writer.tag(77, WireType.Varint).int32(message.righteousVengeance);\n        /* bool divine_storm = 78; */\n        if (message.divineStorm !== false)\n            writer.tag(78, WireType.Varint).bool(message.divineStorm);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PaladinTalents\n */\nexport const PaladinTalents = new PaladinTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetributionPaladin$Type extends MessageType<RetributionPaladin> {\n    constructor() {\n        super(\"proto.RetributionPaladin\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => RetributionPaladin_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => PaladinTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => RetributionPaladin_Options }\n        ]);\n    }\n    create(value?: PartialMessage<RetributionPaladin>): RetributionPaladin {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RetributionPaladin>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetributionPaladin): RetributionPaladin {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RetributionPaladin.Rotation rotation */ 1:\n                    message.rotation = RetributionPaladin_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.PaladinTalents talents */ 2:\n                    message.talents = PaladinTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.RetributionPaladin.Options options */ 3:\n                    message.options = RetributionPaladin_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetributionPaladin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RetributionPaladin.Rotation rotation = 1; */\n        if (message.rotation)\n            RetributionPaladin_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PaladinTalents talents = 2; */\n        if (message.talents)\n            PaladinTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RetributionPaladin.Options options = 3; */\n        if (message.options)\n            RetributionPaladin_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RetributionPaladin\n */\nexport const RetributionPaladin = new RetributionPaladin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetributionPaladin_Rotation$Type extends MessageType<RetributionPaladin_Rotation> {\n    constructor() {\n        super(\"proto.RetributionPaladin.Rotation\", [\n            { no: 1, name: \"exo_slack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"cons_slack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"divine_plea_percentage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"holy_wrath_threshold\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"sov_targets\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation },\n            { no: 10, name: \"custom_cast_sequence\", kind: \"message\", T: () => CustomRotation },\n            { no: 9, name: \"type\", kind: \"enum\", T: () => [\"proto.RetributionPaladin.Rotation.RotationType\", RetributionPaladin_Rotation_RotationType] },\n            { no: 11, name: \"use_divine_plea\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RetributionPaladin_Rotation>): RetributionPaladin_Rotation {\n        const message = { exoSlack: 0, consSlack: 0, divinePleaPercentage: 0, holyWrathThreshold: 0, sovTargets: 0, type: 0, useDivinePlea: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RetributionPaladin_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetributionPaladin_Rotation): RetributionPaladin_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 exo_slack */ 1:\n                    message.exoSlack = reader.int32();\n                    break;\n                case /* int32 cons_slack */ 2:\n                    message.consSlack = reader.int32();\n                    break;\n                case /* double divine_plea_percentage */ 3:\n                    message.divinePleaPercentage = reader.double();\n                    break;\n                case /* int32 holy_wrath_threshold */ 4:\n                    message.holyWrathThreshold = reader.int32();\n                    break;\n                case /* int32 sov_targets */ 5:\n                    message.sovTargets = reader.int32();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 8:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                case /* proto.CustomRotation custom_cast_sequence */ 10:\n                    message.customCastSequence = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customCastSequence);\n                    break;\n                case /* proto.RetributionPaladin.Rotation.RotationType type */ 9:\n                    message.type = reader.int32();\n                    break;\n                case /* bool use_divine_plea */ 11:\n                    message.useDivinePlea = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetributionPaladin_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 exo_slack = 1; */\n        if (message.exoSlack !== 0)\n            writer.tag(1, WireType.Varint).int32(message.exoSlack);\n        /* int32 cons_slack = 2; */\n        if (message.consSlack !== 0)\n            writer.tag(2, WireType.Varint).int32(message.consSlack);\n        /* double divine_plea_percentage = 3; */\n        if (message.divinePleaPercentage !== 0)\n            writer.tag(3, WireType.Bit64).double(message.divinePleaPercentage);\n        /* int32 holy_wrath_threshold = 4; */\n        if (message.holyWrathThreshold !== 0)\n            writer.tag(4, WireType.Varint).int32(message.holyWrathThreshold);\n        /* int32 sov_targets = 5; */\n        if (message.sovTargets !== 0)\n            writer.tag(5, WireType.Varint).int32(message.sovTargets);\n        /* proto.CustomRotation custom_rotation = 8; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.CustomRotation custom_cast_sequence = 10; */\n        if (message.customCastSequence)\n            CustomRotation.internalBinaryWrite(message.customCastSequence, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RetributionPaladin.Rotation.RotationType type = 9; */\n        if (message.type !== 0)\n            writer.tag(9, WireType.Varint).int32(message.type);\n        /* bool use_divine_plea = 11; */\n        if (message.useDivinePlea !== false)\n            writer.tag(11, WireType.Varint).bool(message.useDivinePlea);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RetributionPaladin.Rotation\n */\nexport const RetributionPaladin_Rotation = new RetributionPaladin_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetributionPaladin_Options$Type extends MessageType<RetributionPaladin_Options> {\n    constructor() {\n        super(\"proto.RetributionPaladin.Options\", [\n            { no: 1, name: \"judgement\", kind: \"enum\", T: () => [\"proto.PaladinJudgement\", PaladinJudgement] },\n            { no: 2, name: \"seal\", kind: \"enum\", T: () => [\"proto.PaladinSeal\", PaladinSeal] },\n            { no: 3, name: \"aura\", kind: \"enum\", T: () => [\"proto.PaladinAura\", PaladinAura] },\n            { no: 4, name: \"damage_taken_per_second\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_avenging_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RetributionPaladin_Options>): RetributionPaladin_Options {\n        const message = { judgement: 0, seal: 0, aura: 0, damageTakenPerSecond: 0, useAvengingWrath: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RetributionPaladin_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetributionPaladin_Options): RetributionPaladin_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PaladinJudgement judgement */ 1:\n                    message.judgement = reader.int32();\n                    break;\n                case /* proto.PaladinSeal seal */ 2:\n                    message.seal = reader.int32();\n                    break;\n                case /* proto.PaladinAura aura */ 3:\n                    message.aura = reader.int32();\n                    break;\n                case /* double damage_taken_per_second */ 4:\n                    message.damageTakenPerSecond = reader.double();\n                    break;\n                case /* bool use_avenging_wrath */ 5:\n                    message.useAvengingWrath = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetributionPaladin_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PaladinJudgement judgement = 1; */\n        if (message.judgement !== 0)\n            writer.tag(1, WireType.Varint).int32(message.judgement);\n        /* proto.PaladinSeal seal = 2; */\n        if (message.seal !== 0)\n            writer.tag(2, WireType.Varint).int32(message.seal);\n        /* proto.PaladinAura aura = 3; */\n        if (message.aura !== 0)\n            writer.tag(3, WireType.Varint).int32(message.aura);\n        /* double damage_taken_per_second = 4; */\n        if (message.damageTakenPerSecond !== 0)\n            writer.tag(4, WireType.Bit64).double(message.damageTakenPerSecond);\n        /* bool use_avenging_wrath = 5; */\n        if (message.useAvengingWrath !== false)\n            writer.tag(5, WireType.Varint).bool(message.useAvengingWrath);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RetributionPaladin.Options\n */\nexport const RetributionPaladin_Options = new RetributionPaladin_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionPaladin$Type extends MessageType<ProtectionPaladin> {\n    constructor() {\n        super(\"proto.ProtectionPaladin\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => ProtectionPaladin_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => PaladinTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => ProtectionPaladin_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionPaladin>): ProtectionPaladin {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionPaladin>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionPaladin): ProtectionPaladin {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ProtectionPaladin.Rotation rotation */ 1:\n                    message.rotation = ProtectionPaladin_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.PaladinTalents talents */ 2:\n                    message.talents = PaladinTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.ProtectionPaladin.Options options */ 3:\n                    message.options = ProtectionPaladin_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionPaladin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ProtectionPaladin.Rotation rotation = 1; */\n        if (message.rotation)\n            ProtectionPaladin_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PaladinTalents talents = 2; */\n        if (message.talents)\n            PaladinTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionPaladin.Options options = 3; */\n        if (message.options)\n            ProtectionPaladin_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionPaladin\n */\nexport const ProtectionPaladin = new ProtectionPaladin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionPaladin_Rotation$Type extends MessageType<ProtectionPaladin_Rotation> {\n    constructor() {\n        super(\"proto.ProtectionPaladin.Rotation\", [\n            { no: 1, name: \"hammer_first\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"use_custom_prio\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionPaladin_Rotation>): ProtectionPaladin_Rotation {\n        const message = { hammerFirst: false, useCustomPrio: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionPaladin_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionPaladin_Rotation): ProtectionPaladin_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool hammer_first */ 1:\n                    message.hammerFirst = reader.bool();\n                    break;\n                case /* bool use_custom_prio */ 2:\n                    message.useCustomPrio = reader.bool();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 3:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionPaladin_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool hammer_first = 1; */\n        if (message.hammerFirst !== false)\n            writer.tag(1, WireType.Varint).bool(message.hammerFirst);\n        /* bool use_custom_prio = 2; */\n        if (message.useCustomPrio !== false)\n            writer.tag(2, WireType.Varint).bool(message.useCustomPrio);\n        /* proto.CustomRotation custom_rotation = 3; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionPaladin.Rotation\n */\nexport const ProtectionPaladin_Rotation = new ProtectionPaladin_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionPaladin_Options$Type extends MessageType<ProtectionPaladin_Options> {\n    constructor() {\n        super(\"proto.ProtectionPaladin.Options\", [\n            { no: 1, name: \"judgement\", kind: \"enum\", T: () => [\"proto.PaladinJudgement\", PaladinJudgement] },\n            { no: 2, name: \"seal\", kind: \"enum\", T: () => [\"proto.PaladinSeal\", PaladinSeal] },\n            { no: 3, name: \"aura\", kind: \"enum\", T: () => [\"proto.PaladinAura\", PaladinAura] },\n            { no: 4, name: \"damage_taken_per_second\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_avenging_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionPaladin_Options>): ProtectionPaladin_Options {\n        const message = { judgement: 0, seal: 0, aura: 0, damageTakenPerSecond: 0, useAvengingWrath: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionPaladin_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionPaladin_Options): ProtectionPaladin_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PaladinJudgement judgement */ 1:\n                    message.judgement = reader.int32();\n                    break;\n                case /* proto.PaladinSeal seal */ 2:\n                    message.seal = reader.int32();\n                    break;\n                case /* proto.PaladinAura aura */ 3:\n                    message.aura = reader.int32();\n                    break;\n                case /* double damage_taken_per_second */ 4:\n                    message.damageTakenPerSecond = reader.double();\n                    break;\n                case /* bool use_avenging_wrath */ 5:\n                    message.useAvengingWrath = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionPaladin_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PaladinJudgement judgement = 1; */\n        if (message.judgement !== 0)\n            writer.tag(1, WireType.Varint).int32(message.judgement);\n        /* proto.PaladinSeal seal = 2; */\n        if (message.seal !== 0)\n            writer.tag(2, WireType.Varint).int32(message.seal);\n        /* proto.PaladinAura aura = 3; */\n        if (message.aura !== 0)\n            writer.tag(3, WireType.Varint).int32(message.aura);\n        /* double damage_taken_per_second = 4; */\n        if (message.damageTakenPerSecond !== 0)\n            writer.tag(4, WireType.Bit64).double(message.damageTakenPerSecond);\n        /* bool use_avenging_wrath = 5; */\n        if (message.useAvengingWrath !== false)\n            writer.tag(5, WireType.Varint).bool(message.useAvengingWrath);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionPaladin.Options\n */\nexport const ProtectionPaladin_Options = new ProtectionPaladin_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"mage.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message proto.MageTalents\n */\nexport interface MageTalents {\n    /**\n     * Arcane\n     *\n     * @generated from protobuf field: int32 arcane_subtlety = 1;\n     */\n    arcaneSubtlety: number;\n    /**\n     * @generated from protobuf field: int32 arcane_focus = 2;\n     */\n    arcaneFocus: number;\n    /**\n     * @generated from protobuf field: int32 arcane_stability = 3;\n     */\n    arcaneStability: number;\n    /**\n     * @generated from protobuf field: int32 arcane_fortitude = 4;\n     */\n    arcaneFortitude: number;\n    /**\n     * @generated from protobuf field: int32 magic_absorption = 5;\n     */\n    magicAbsorption: number;\n    /**\n     * @generated from protobuf field: int32 arcane_concentration = 6;\n     */\n    arcaneConcentration: number;\n    /**\n     * @generated from protobuf field: int32 magic_attunement = 7;\n     */\n    magicAttunement: number;\n    /**\n     * @generated from protobuf field: int32 spell_impact = 8;\n     */\n    spellImpact: number;\n    /**\n     * @generated from protobuf field: int32 student_of_the_mind = 9;\n     */\n    studentOfTheMind: number;\n    /**\n     * @generated from protobuf field: bool focus_magic = 10;\n     */\n    focusMagic: boolean;\n    /**\n     * @generated from protobuf field: int32 arcane_shielding = 11;\n     */\n    arcaneShielding: number;\n    /**\n     * @generated from protobuf field: int32 improved_counterspell = 12;\n     */\n    improvedCounterspell: number;\n    /**\n     * @generated from protobuf field: int32 arcane_meditation = 13;\n     */\n    arcaneMeditation: number;\n    /**\n     * @generated from protobuf field: int32 torment_the_weak = 14;\n     */\n    tormentTheWeak: number;\n    /**\n     * @generated from protobuf field: int32 improved_blink = 15;\n     */\n    improvedBlink: number;\n    /**\n     * @generated from protobuf field: bool presence_of_mind = 16;\n     */\n    presenceOfMind: boolean;\n    /**\n     * @generated from protobuf field: int32 arcane_mind = 17;\n     */\n    arcaneMind: number;\n    /**\n     * @generated from protobuf field: int32 prismatic_cloak = 18;\n     */\n    prismaticCloak: number;\n    /**\n     * @generated from protobuf field: int32 arcane_instability = 19;\n     */\n    arcaneInstability: number;\n    /**\n     * @generated from protobuf field: int32 arcane_potency = 20;\n     */\n    arcanePotency: number;\n    /**\n     * @generated from protobuf field: int32 arcane_empowerment = 21;\n     */\n    arcaneEmpowerment: number;\n    /**\n     * @generated from protobuf field: bool arcane_power = 22;\n     */\n    arcanePower: boolean;\n    /**\n     * @generated from protobuf field: int32 incanters_absorption = 23;\n     */\n    incantersAbsorption: number;\n    /**\n     * @generated from protobuf field: int32 arcane_flows = 24;\n     */\n    arcaneFlows: number;\n    /**\n     * @generated from protobuf field: int32 mind_mastery = 25;\n     */\n    mindMastery: number;\n    /**\n     * @generated from protobuf field: bool slow = 26;\n     */\n    slow: boolean;\n    /**\n     * @generated from protobuf field: int32 missile_barrage = 27;\n     */\n    missileBarrage: number;\n    /**\n     * @generated from protobuf field: int32 netherwind_presence = 28;\n     */\n    netherwindPresence: number;\n    /**\n     * @generated from protobuf field: int32 spell_power = 29;\n     */\n    spellPower: number;\n    /**\n     * @generated from protobuf field: bool arcane_barrage = 30;\n     */\n    arcaneBarrage: boolean;\n    /**\n     * Fire\n     *\n     * @generated from protobuf field: int32 improved_fire_blast = 31;\n     */\n    improvedFireBlast: number;\n    /**\n     * @generated from protobuf field: int32 incineration = 32;\n     */\n    incineration: number;\n    /**\n     * @generated from protobuf field: int32 improved_fireball = 33;\n     */\n    improvedFireball: number;\n    /**\n     * @generated from protobuf field: int32 ignite = 34;\n     */\n    ignite: number;\n    /**\n     * @generated from protobuf field: int32 burning_determination = 35;\n     */\n    burningDetermination: number;\n    /**\n     * @generated from protobuf field: int32 world_in_flames = 36;\n     */\n    worldInFlames: number;\n    /**\n     * @generated from protobuf field: int32 flame_throwing = 37;\n     */\n    flameThrowing: number;\n    /**\n     * @generated from protobuf field: int32 impact = 38;\n     */\n    impact: number;\n    /**\n     * @generated from protobuf field: bool pyroblast = 39;\n     */\n    pyroblast: boolean;\n    /**\n     * @generated from protobuf field: int32 burning_soul = 40;\n     */\n    burningSoul: number;\n    /**\n     * @generated from protobuf field: int32 improved_scorch = 41;\n     */\n    improvedScorch: number;\n    /**\n     * @generated from protobuf field: int32 molten_shields = 42;\n     */\n    moltenShields: number;\n    /**\n     * @generated from protobuf field: int32 master_of_elements = 43;\n     */\n    masterOfElements: number;\n    /**\n     * @generated from protobuf field: int32 playing_with_fire = 44;\n     */\n    playingWithFire: number;\n    /**\n     * @generated from protobuf field: int32 critical_mass = 45;\n     */\n    criticalMass: number;\n    /**\n     * @generated from protobuf field: bool blast_wave = 46;\n     */\n    blastWave: boolean;\n    /**\n     * @generated from protobuf field: int32 blazing_speed = 47;\n     */\n    blazingSpeed: number;\n    /**\n     * @generated from protobuf field: int32 fire_power = 48;\n     */\n    firePower: number;\n    /**\n     * @generated from protobuf field: int32 pyromaniac = 49;\n     */\n    pyromaniac: number;\n    /**\n     * @generated from protobuf field: bool combustion = 50;\n     */\n    combustion: boolean;\n    /**\n     * @generated from protobuf field: int32 molten_fury = 51;\n     */\n    moltenFury: number;\n    /**\n     * @generated from protobuf field: int32 fiery_payback = 52;\n     */\n    fieryPayback: number;\n    /**\n     * @generated from protobuf field: int32 empowered_fire = 53;\n     */\n    empoweredFire: number;\n    /**\n     * @generated from protobuf field: int32 firestarter = 54;\n     */\n    firestarter: number;\n    /**\n     * @generated from protobuf field: bool dragons_breath = 55;\n     */\n    dragonsBreath: boolean;\n    /**\n     * @generated from protobuf field: int32 hot_streak = 56;\n     */\n    hotStreak: number;\n    /**\n     * @generated from protobuf field: int32 burnout = 57;\n     */\n    burnout: number;\n    /**\n     * @generated from protobuf field: bool living_bomb = 58;\n     */\n    livingBomb: boolean;\n    /**\n     * Frost\n     *\n     * @generated from protobuf field: int32 frostbite = 59;\n     */\n    frostbite: number;\n    /**\n     * @generated from protobuf field: int32 improved_frostbolt = 60;\n     */\n    improvedFrostbolt: number;\n    /**\n     * @generated from protobuf field: int32 ice_floes = 61;\n     */\n    iceFloes: number;\n    /**\n     * @generated from protobuf field: int32 ice_shards = 62;\n     */\n    iceShards: number;\n    /**\n     * @generated from protobuf field: int32 frost_warding = 63;\n     */\n    frostWarding: number;\n    /**\n     * @generated from protobuf field: int32 precision = 64;\n     */\n    precision: number;\n    /**\n     * @generated from protobuf field: int32 permafrost = 65;\n     */\n    permafrost: number;\n    /**\n     * @generated from protobuf field: int32 piercing_ice = 66;\n     */\n    piercingIce: number;\n    /**\n     * @generated from protobuf field: bool icy_veins = 67;\n     */\n    icyVeins: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_blizzard = 68;\n     */\n    improvedBlizzard: number;\n    /**\n     * @generated from protobuf field: int32 arctic_reach = 69;\n     */\n    arcticReach: number;\n    /**\n     * @generated from protobuf field: int32 frost_channeling = 70;\n     */\n    frostChanneling: number;\n    /**\n     * @generated from protobuf field: int32 shatter = 71;\n     */\n    shatter: number;\n    /**\n     * @generated from protobuf field: bool cold_snap = 72;\n     */\n    coldSnap: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_cone_of_cold = 73;\n     */\n    improvedConeOfCold: number;\n    /**\n     * @generated from protobuf field: int32 frozen_core = 74;\n     */\n    frozenCore: number;\n    /**\n     * @generated from protobuf field: int32 cold_as_ice = 75;\n     */\n    coldAsIce: number;\n    /**\n     * @generated from protobuf field: int32 winters_chill = 76;\n     */\n    wintersChill: number;\n    /**\n     * @generated from protobuf field: int32 shattered_barrier = 77;\n     */\n    shatteredBarrier: number;\n    /**\n     * @generated from protobuf field: bool ice_barrier = 78;\n     */\n    iceBarrier: boolean;\n    /**\n     * @generated from protobuf field: int32 arctic_winds = 79;\n     */\n    arcticWinds: number;\n    /**\n     * @generated from protobuf field: int32 empowered_frostbolt = 80;\n     */\n    empoweredFrostbolt: number;\n    /**\n     * @generated from protobuf field: int32 fingers_of_frost = 81;\n     */\n    fingersOfFrost: number;\n    /**\n     * @generated from protobuf field: int32 brain_freeze = 82;\n     */\n    brainFreeze: number;\n    /**\n     * @generated from protobuf field: bool summon_water_elemental = 83;\n     */\n    summonWaterElemental: boolean;\n    /**\n     * @generated from protobuf field: int32 enduring_winter = 84;\n     */\n    enduringWinter: number;\n    /**\n     * @generated from protobuf field: int32 chilled_to_the_bone = 85;\n     */\n    chilledToTheBone: number;\n    /**\n     * @generated from protobuf field: bool deep_freeze = 86;\n     */\n    deepFreeze: boolean;\n}\n/**\n * @generated from protobuf message proto.Mage\n */\nexport interface Mage {\n    /**\n     * @generated from protobuf field: proto.Mage.Rotation rotation = 1;\n     */\n    rotation?: Mage_Rotation;\n    /**\n     * @generated from protobuf field: proto.MageTalents talents = 2;\n     */\n    talents?: MageTalents;\n    /**\n     * @generated from protobuf field: proto.Mage.Options options = 3;\n     */\n    options?: Mage_Options;\n}\n/**\n * @generated from protobuf message proto.Mage.Rotation\n */\nexport interface Mage_Rotation {\n    /**\n     * @generated from protobuf field: proto.Mage.Rotation.Type type = 1;\n     */\n    type: Mage_Rotation_Type;\n    /**\n     * Arcane Options.\n     *\n     * @generated from protobuf field: int32 min_blast_before_missiles = 2;\n     */\n    minBlastBeforeMissiles: number;\n    /**\n     * @generated from protobuf field: int32 num_4_stack_blasts_to_missiles_gamble = 8;\n     */\n    num4StackBlastsToMissilesGamble: number;\n    /**\n     * @generated from protobuf field: int32 num_4_stack_blasts_to_early_missiles = 9;\n     */\n    num4StackBlastsToEarlyMissiles: number;\n    /**\n     * @generated from protobuf field: int32 extra_blasts_during_first_ap = 10;\n     */\n    extraBlastsDuringFirstAp: number;\n    /**\n     * @generated from protobuf field: proto.Mage.Rotation.PrimaryFireSpell primary_fire_spell = 3;\n     */\n    primaryFireSpell: Mage_Rotation_PrimaryFireSpell;\n    /**\n     * @generated from protobuf field: bool maintain_improved_scorch = 4;\n     */\n    maintainImprovedScorch: boolean;\n    /**\n     * @generated from protobuf field: int32 num_extra_targets = 5;\n     */\n    numExtraTargets: number;\n    /**\n     * @generated from protobuf field: bool optimize_cds_for_execute = 11;\n     */\n    optimizeCdsForExecute: boolean;\n    /**\n     * @generated from protobuf field: int32 cqs_latency = 12;\n     */\n    cqsLatency: number;\n    /**\n     * @generated from protobuf field: bool lb_before_hotstreak = 13;\n     */\n    lbBeforeHotstreak: boolean;\n    /**\n     * Frost Options.\n     * Chance for water elemental to disobey, doing nothing rather than cast.\n     *\n     * @generated from protobuf field: double water_elemental_disobey_chance = 6;\n     */\n    waterElementalDisobeyChance: number;\n    /**\n     * @generated from protobuf field: proto.Mage.Rotation.AoeRotation aoe = 7;\n     */\n    aoe: Mage_Rotation_AoeRotation;\n}\n/**\n * Just used for controlling which options are displayed in the UI. Is not\n * used by the sim.\n *\n * @generated from protobuf enum proto.Mage.Rotation.Type\n */\nexport enum Mage_Rotation_Type {\n    /**\n     * @generated from protobuf enum value: Arcane = 0;\n     */\n    Arcane = 0,\n    /**\n     * @generated from protobuf enum value: Fire = 1;\n     */\n    Fire = 1,\n    /**\n     * @generated from protobuf enum value: Frost = 2;\n     */\n    Frost = 2,\n    /**\n     * @generated from protobuf enum value: Aoe = 3;\n     */\n    Aoe = 3\n}\n/**\n * Fire Options.\n *\n * @generated from protobuf enum proto.Mage.Rotation.PrimaryFireSpell\n */\nexport enum Mage_Rotation_PrimaryFireSpell {\n    /**\n     * @generated from protobuf enum value: Fireball = 0;\n     */\n    Fireball = 0,\n    /**\n     * @generated from protobuf enum value: FrostfireBolt = 1;\n     */\n    FrostfireBolt = 1\n}\n/**\n * Aoe Options.\n *\n * @generated from protobuf enum proto.Mage.Rotation.AoeRotation\n */\nexport enum Mage_Rotation_AoeRotation {\n    /**\n     * @generated from protobuf enum value: ArcaneExplosion = 0;\n     */\n    ArcaneExplosion = 0,\n    /**\n     * @generated from protobuf enum value: Flamestrike = 1;\n     */\n    Flamestrike = 1,\n    /**\n     * @generated from protobuf enum value: Blizzard = 2;\n     */\n    Blizzard = 2\n}\n/**\n * @generated from protobuf message proto.Mage.Options\n */\nexport interface Mage_Options {\n    /**\n     * @generated from protobuf field: proto.Mage.Options.ArmorType armor = 1;\n     */\n    armor: Mage_Options_ArmorType;\n    /**\n     * Number of Evocation ticks to use. If 0, use all of them.\n     *\n     * @generated from protobuf field: int32 evocation_ticks = 2;\n     */\n    evocationTicks: number;\n    /**\n     * @generated from protobuf field: int32 focus_magic_percent_uptime = 3;\n     */\n    focusMagicPercentUptime: number;\n}\n/**\n * @generated from protobuf enum proto.Mage.Options.ArmorType\n */\nexport enum Mage_Options_ArmorType {\n    /**\n     * @generated from protobuf enum value: NoArmor = 0;\n     */\n    NoArmor = 0,\n    /**\n     * @generated from protobuf enum value: MageArmor = 1;\n     */\n    MageArmor = 1,\n    /**\n     * @generated from protobuf enum value: MoltenArmor = 2;\n     */\n    MoltenArmor = 2\n}\n/**\n * @generated from protobuf enum proto.MageMajorGlyph\n */\nexport enum MageMajorGlyph {\n    /**\n     * @generated from protobuf enum value: MageMajorGlyphNone = 0;\n     */\n    MageMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneBarrage = 45738;\n     */\n    GlyphOfArcaneBarrage = 45738,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneBlast = 44955;\n     */\n    GlyphOfArcaneBlast = 44955,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneExplosion = 42734;\n     */\n    GlyphOfArcaneExplosion = 42734,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneMissiles = 42735;\n     */\n    GlyphOfArcaneMissiles = 42735,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcanePower = 42736;\n     */\n    GlyphOfArcanePower = 42736,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlink = 42737;\n     */\n    GlyphOfBlink = 42737,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeepFreeze = 45736;\n     */\n    GlyphOfDeepFreeze = 45736,\n    /**\n     * @generated from protobuf enum value: GlyphOfEternalWater = 50045;\n     */\n    GlyphOfEternalWater = 50045,\n    /**\n     * @generated from protobuf enum value: GlyphOfEvocation = 42738;\n     */\n    GlyphOfEvocation = 42738,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireBlast = 42740;\n     */\n    GlyphOfFireBlast = 42740,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireball = 42739;\n     */\n    GlyphOfFireball = 42739,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostNova = 42741;\n     */\n    GlyphOfFrostNova = 42741,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostbolt = 42742;\n     */\n    GlyphOfFrostbolt = 42742,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostfire = 44684;\n     */\n    GlyphOfFrostfire = 44684,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceArmor = 42743;\n     */\n    GlyphOfIceArmor = 42743,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceBarrier = 45740;\n     */\n    GlyphOfIceBarrier = 45740,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceBlock = 42744;\n     */\n    GlyphOfIceBlock = 42744,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceLance = 42745;\n     */\n    GlyphOfIceLance = 42745,\n    /**\n     * @generated from protobuf enum value: GlyphOfIcyVeins = 42746;\n     */\n    GlyphOfIcyVeins = 42746,\n    /**\n     * @generated from protobuf enum value: GlyphOfInvisibility = 42748;\n     */\n    GlyphOfInvisibility = 42748,\n    /**\n     * @generated from protobuf enum value: GlyphOfLivingBomb = 45737;\n     */\n    GlyphOfLivingBomb = 45737,\n    /**\n     * @generated from protobuf enum value: GlyphOfMageArmor = 42749;\n     */\n    GlyphOfMageArmor = 42749,\n    /**\n     * @generated from protobuf enum value: GlyphOfManaGem = 42750;\n     */\n    GlyphOfManaGem = 42750,\n    /**\n     * @generated from protobuf enum value: GlyphOfMirrorImage = 45739;\n     */\n    GlyphOfMirrorImage = 45739,\n    /**\n     * @generated from protobuf enum value: GlyphOfMoltenArmor = 42751;\n     */\n    GlyphOfMoltenArmor = 42751,\n    /**\n     * @generated from protobuf enum value: GlyphOfPolymorph = 42752;\n     */\n    GlyphOfPolymorph = 42752,\n    /**\n     * @generated from protobuf enum value: GlyphOfRemoveCurse = 42753;\n     */\n    GlyphOfRemoveCurse = 42753,\n    /**\n     * @generated from protobuf enum value: GlyphOfScorch = 42747;\n     */\n    GlyphOfScorch = 42747,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterElemental = 42754;\n     */\n    GlyphOfWaterElemental = 42754\n}\n/**\n * @generated from protobuf enum proto.MageMinorGlyph\n */\nexport enum MageMinorGlyph {\n    /**\n     * @generated from protobuf enum value: MageMinorGlyphNone = 0;\n     */\n    MageMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneIntellect = 43339;\n     */\n    GlyphOfArcaneIntellect = 43339,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlastWave = 44920;\n     */\n    GlyphOfBlastWave = 44920,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireWard = 43357;\n     */\n    GlyphOfFireWard = 43357,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostArmor = 43359;\n     */\n    GlyphOfFrostArmor = 43359,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostWard = 43360;\n     */\n    GlyphOfFrostWard = 43360,\n    /**\n     * @generated from protobuf enum value: GlyphOfSlowFall = 43364;\n     */\n    GlyphOfSlowFall = 43364,\n    /**\n     * @generated from protobuf enum value: GlyphOfThePenguin = 43361;\n     */\n    GlyphOfThePenguin = 43361\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass MageTalents$Type extends MessageType<MageTalents> {\n    constructor() {\n        super(\"proto.MageTalents\", [\n            { no: 1, name: \"arcane_subtlety\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"arcane_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"arcane_stability\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"arcane_fortitude\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"magic_absorption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"arcane_concentration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"magic_attunement\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"spell_impact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"student_of_the_mind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"focus_magic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"arcane_shielding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"improved_counterspell\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"arcane_meditation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"torment_the_weak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"improved_blink\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"presence_of_mind\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"arcane_mind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"prismatic_cloak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"arcane_instability\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"arcane_potency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"arcane_empowerment\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"arcane_power\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"incanters_absorption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"arcane_flows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"mind_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"slow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"missile_barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"netherwind_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"spell_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"arcane_barrage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"improved_fire_blast\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"incineration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"improved_fireball\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"ignite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"burning_determination\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"world_in_flames\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"flame_throwing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"impact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"pyroblast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 40, name: \"burning_soul\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"improved_scorch\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"molten_shields\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"master_of_elements\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"playing_with_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"critical_mass\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"blast_wave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 47, name: \"blazing_speed\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"fire_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"pyromaniac\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"combustion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"molten_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"fiery_payback\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"empowered_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"firestarter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"dragons_breath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"hot_streak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"burnout\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"living_bomb\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 59, name: \"frostbite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"improved_frostbolt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"ice_floes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"ice_shards\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"frost_warding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"permafrost\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"piercing_ice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"icy_veins\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 68, name: \"improved_blizzard\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"arctic_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"frost_channeling\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"shatter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"cold_snap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 73, name: \"improved_cone_of_cold\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"frozen_core\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"cold_as_ice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"winters_chill\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"shattered_barrier\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"ice_barrier\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 79, name: \"arctic_winds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"empowered_frostbolt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"fingers_of_frost\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 82, name: \"brain_freeze\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"summon_water_elemental\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 84, name: \"enduring_winter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 85, name: \"chilled_to_the_bone\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 86, name: \"deep_freeze\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<MageTalents>): MageTalents {\n        const message = { arcaneSubtlety: 0, arcaneFocus: 0, arcaneStability: 0, arcaneFortitude: 0, magicAbsorption: 0, arcaneConcentration: 0, magicAttunement: 0, spellImpact: 0, studentOfTheMind: 0, focusMagic: false, arcaneShielding: 0, improvedCounterspell: 0, arcaneMeditation: 0, tormentTheWeak: 0, improvedBlink: 0, presenceOfMind: false, arcaneMind: 0, prismaticCloak: 0, arcaneInstability: 0, arcanePotency: 0, arcaneEmpowerment: 0, arcanePower: false, incantersAbsorption: 0, arcaneFlows: 0, mindMastery: 0, slow: false, missileBarrage: 0, netherwindPresence: 0, spellPower: 0, arcaneBarrage: false, improvedFireBlast: 0, incineration: 0, improvedFireball: 0, ignite: 0, burningDetermination: 0, worldInFlames: 0, flameThrowing: 0, impact: 0, pyroblast: false, burningSoul: 0, improvedScorch: 0, moltenShields: 0, masterOfElements: 0, playingWithFire: 0, criticalMass: 0, blastWave: false, blazingSpeed: 0, firePower: 0, pyromaniac: 0, combustion: false, moltenFury: 0, fieryPayback: 0, empoweredFire: 0, firestarter: 0, dragonsBreath: false, hotStreak: 0, burnout: 0, livingBomb: false, frostbite: 0, improvedFrostbolt: 0, iceFloes: 0, iceShards: 0, frostWarding: 0, precision: 0, permafrost: 0, piercingIce: 0, icyVeins: false, improvedBlizzard: 0, arcticReach: 0, frostChanneling: 0, shatter: 0, coldSnap: false, improvedConeOfCold: 0, frozenCore: 0, coldAsIce: 0, wintersChill: 0, shatteredBarrier: 0, iceBarrier: false, arcticWinds: 0, empoweredFrostbolt: 0, fingersOfFrost: 0, brainFreeze: 0, summonWaterElemental: false, enduringWinter: 0, chilledToTheBone: 0, deepFreeze: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<MageTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MageTalents): MageTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 arcane_subtlety */ 1:\n                    message.arcaneSubtlety = reader.int32();\n                    break;\n                case /* int32 arcane_focus */ 2:\n                    message.arcaneFocus = reader.int32();\n                    break;\n                case /* int32 arcane_stability */ 3:\n                    message.arcaneStability = reader.int32();\n                    break;\n                case /* int32 arcane_fortitude */ 4:\n                    message.arcaneFortitude = reader.int32();\n                    break;\n                case /* int32 magic_absorption */ 5:\n                    message.magicAbsorption = reader.int32();\n                    break;\n                case /* int32 arcane_concentration */ 6:\n                    message.arcaneConcentration = reader.int32();\n                    break;\n                case /* int32 magic_attunement */ 7:\n                    message.magicAttunement = reader.int32();\n                    break;\n                case /* int32 spell_impact */ 8:\n                    message.spellImpact = reader.int32();\n                    break;\n                case /* int32 student_of_the_mind */ 9:\n                    message.studentOfTheMind = reader.int32();\n                    break;\n                case /* bool focus_magic */ 10:\n                    message.focusMagic = reader.bool();\n                    break;\n                case /* int32 arcane_shielding */ 11:\n                    message.arcaneShielding = reader.int32();\n                    break;\n                case /* int32 improved_counterspell */ 12:\n                    message.improvedCounterspell = reader.int32();\n                    break;\n                case /* int32 arcane_meditation */ 13:\n                    message.arcaneMeditation = reader.int32();\n                    break;\n                case /* int32 torment_the_weak */ 14:\n                    message.tormentTheWeak = reader.int32();\n                    break;\n                case /* int32 improved_blink */ 15:\n                    message.improvedBlink = reader.int32();\n                    break;\n                case /* bool presence_of_mind */ 16:\n                    message.presenceOfMind = reader.bool();\n                    break;\n                case /* int32 arcane_mind */ 17:\n                    message.arcaneMind = reader.int32();\n                    break;\n                case /* int32 prismatic_cloak */ 18:\n                    message.prismaticCloak = reader.int32();\n                    break;\n                case /* int32 arcane_instability */ 19:\n                    message.arcaneInstability = reader.int32();\n                    break;\n                case /* int32 arcane_potency */ 20:\n                    message.arcanePotency = reader.int32();\n                    break;\n                case /* int32 arcane_empowerment */ 21:\n                    message.arcaneEmpowerment = reader.int32();\n                    break;\n                case /* bool arcane_power */ 22:\n                    message.arcanePower = reader.bool();\n                    break;\n                case /* int32 incanters_absorption */ 23:\n                    message.incantersAbsorption = reader.int32();\n                    break;\n                case /* int32 arcane_flows */ 24:\n                    message.arcaneFlows = reader.int32();\n                    break;\n                case /* int32 mind_mastery */ 25:\n                    message.mindMastery = reader.int32();\n                    break;\n                case /* bool slow */ 26:\n                    message.slow = reader.bool();\n                    break;\n                case /* int32 missile_barrage */ 27:\n                    message.missileBarrage = reader.int32();\n                    break;\n                case /* int32 netherwind_presence */ 28:\n                    message.netherwindPresence = reader.int32();\n                    break;\n                case /* int32 spell_power */ 29:\n                    message.spellPower = reader.int32();\n                    break;\n                case /* bool arcane_barrage */ 30:\n                    message.arcaneBarrage = reader.bool();\n                    break;\n                case /* int32 improved_fire_blast */ 31:\n                    message.improvedFireBlast = reader.int32();\n                    break;\n                case /* int32 incineration */ 32:\n                    message.incineration = reader.int32();\n                    break;\n                case /* int32 improved_fireball */ 33:\n                    message.improvedFireball = reader.int32();\n                    break;\n                case /* int32 ignite */ 34:\n                    message.ignite = reader.int32();\n                    break;\n                case /* int32 burning_determination */ 35:\n                    message.burningDetermination = reader.int32();\n                    break;\n                case /* int32 world_in_flames */ 36:\n                    message.worldInFlames = reader.int32();\n                    break;\n                case /* int32 flame_throwing */ 37:\n                    message.flameThrowing = reader.int32();\n                    break;\n                case /* int32 impact */ 38:\n                    message.impact = reader.int32();\n                    break;\n                case /* bool pyroblast */ 39:\n                    message.pyroblast = reader.bool();\n                    break;\n                case /* int32 burning_soul */ 40:\n                    message.burningSoul = reader.int32();\n                    break;\n                case /* int32 improved_scorch */ 41:\n                    message.improvedScorch = reader.int32();\n                    break;\n                case /* int32 molten_shields */ 42:\n                    message.moltenShields = reader.int32();\n                    break;\n                case /* int32 master_of_elements */ 43:\n                    message.masterOfElements = reader.int32();\n                    break;\n                case /* int32 playing_with_fire */ 44:\n                    message.playingWithFire = reader.int32();\n                    break;\n                case /* int32 critical_mass */ 45:\n                    message.criticalMass = reader.int32();\n                    break;\n                case /* bool blast_wave */ 46:\n                    message.blastWave = reader.bool();\n                    break;\n                case /* int32 blazing_speed */ 47:\n                    message.blazingSpeed = reader.int32();\n                    break;\n                case /* int32 fire_power */ 48:\n                    message.firePower = reader.int32();\n                    break;\n                case /* int32 pyromaniac */ 49:\n                    message.pyromaniac = reader.int32();\n                    break;\n                case /* bool combustion */ 50:\n                    message.combustion = reader.bool();\n                    break;\n                case /* int32 molten_fury */ 51:\n                    message.moltenFury = reader.int32();\n                    break;\n                case /* int32 fiery_payback */ 52:\n                    message.fieryPayback = reader.int32();\n                    break;\n                case /* int32 empowered_fire */ 53:\n                    message.empoweredFire = reader.int32();\n                    break;\n                case /* int32 firestarter */ 54:\n                    message.firestarter = reader.int32();\n                    break;\n                case /* bool dragons_breath */ 55:\n                    message.dragonsBreath = reader.bool();\n                    break;\n                case /* int32 hot_streak */ 56:\n                    message.hotStreak = reader.int32();\n                    break;\n                case /* int32 burnout */ 57:\n                    message.burnout = reader.int32();\n                    break;\n                case /* bool living_bomb */ 58:\n                    message.livingBomb = reader.bool();\n                    break;\n                case /* int32 frostbite */ 59:\n                    message.frostbite = reader.int32();\n                    break;\n                case /* int32 improved_frostbolt */ 60:\n                    message.improvedFrostbolt = reader.int32();\n                    break;\n                case /* int32 ice_floes */ 61:\n                    message.iceFloes = reader.int32();\n                    break;\n                case /* int32 ice_shards */ 62:\n                    message.iceShards = reader.int32();\n                    break;\n                case /* int32 frost_warding */ 63:\n                    message.frostWarding = reader.int32();\n                    break;\n                case /* int32 precision */ 64:\n                    message.precision = reader.int32();\n                    break;\n                case /* int32 permafrost */ 65:\n                    message.permafrost = reader.int32();\n                    break;\n                case /* int32 piercing_ice */ 66:\n                    message.piercingIce = reader.int32();\n                    break;\n                case /* bool icy_veins */ 67:\n                    message.icyVeins = reader.bool();\n                    break;\n                case /* int32 improved_blizzard */ 68:\n                    message.improvedBlizzard = reader.int32();\n                    break;\n                case /* int32 arctic_reach */ 69:\n                    message.arcticReach = reader.int32();\n                    break;\n                case /* int32 frost_channeling */ 70:\n                    message.frostChanneling = reader.int32();\n                    break;\n                case /* int32 shatter */ 71:\n                    message.shatter = reader.int32();\n                    break;\n                case /* bool cold_snap */ 72:\n                    message.coldSnap = reader.bool();\n                    break;\n                case /* int32 improved_cone_of_cold */ 73:\n                    message.improvedConeOfCold = reader.int32();\n                    break;\n                case /* int32 frozen_core */ 74:\n                    message.frozenCore = reader.int32();\n                    break;\n                case /* int32 cold_as_ice */ 75:\n                    message.coldAsIce = reader.int32();\n                    break;\n                case /* int32 winters_chill */ 76:\n                    message.wintersChill = reader.int32();\n                    break;\n                case /* int32 shattered_barrier */ 77:\n                    message.shatteredBarrier = reader.int32();\n                    break;\n                case /* bool ice_barrier */ 78:\n                    message.iceBarrier = reader.bool();\n                    break;\n                case /* int32 arctic_winds */ 79:\n                    message.arcticWinds = reader.int32();\n                    break;\n                case /* int32 empowered_frostbolt */ 80:\n                    message.empoweredFrostbolt = reader.int32();\n                    break;\n                case /* int32 fingers_of_frost */ 81:\n                    message.fingersOfFrost = reader.int32();\n                    break;\n                case /* int32 brain_freeze */ 82:\n                    message.brainFreeze = reader.int32();\n                    break;\n                case /* bool summon_water_elemental */ 83:\n                    message.summonWaterElemental = reader.bool();\n                    break;\n                case /* int32 enduring_winter */ 84:\n                    message.enduringWinter = reader.int32();\n                    break;\n                case /* int32 chilled_to_the_bone */ 85:\n                    message.chilledToTheBone = reader.int32();\n                    break;\n                case /* bool deep_freeze */ 86:\n                    message.deepFreeze = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: MageTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 arcane_subtlety = 1; */\n        if (message.arcaneSubtlety !== 0)\n            writer.tag(1, WireType.Varint).int32(message.arcaneSubtlety);\n        /* int32 arcane_focus = 2; */\n        if (message.arcaneFocus !== 0)\n            writer.tag(2, WireType.Varint).int32(message.arcaneFocus);\n        /* int32 arcane_stability = 3; */\n        if (message.arcaneStability !== 0)\n            writer.tag(3, WireType.Varint).int32(message.arcaneStability);\n        /* int32 arcane_fortitude = 4; */\n        if (message.arcaneFortitude !== 0)\n            writer.tag(4, WireType.Varint).int32(message.arcaneFortitude);\n        /* int32 magic_absorption = 5; */\n        if (message.magicAbsorption !== 0)\n            writer.tag(5, WireType.Varint).int32(message.magicAbsorption);\n        /* int32 arcane_concentration = 6; */\n        if (message.arcaneConcentration !== 0)\n            writer.tag(6, WireType.Varint).int32(message.arcaneConcentration);\n        /* int32 magic_attunement = 7; */\n        if (message.magicAttunement !== 0)\n            writer.tag(7, WireType.Varint).int32(message.magicAttunement);\n        /* int32 spell_impact = 8; */\n        if (message.spellImpact !== 0)\n            writer.tag(8, WireType.Varint).int32(message.spellImpact);\n        /* int32 student_of_the_mind = 9; */\n        if (message.studentOfTheMind !== 0)\n            writer.tag(9, WireType.Varint).int32(message.studentOfTheMind);\n        /* bool focus_magic = 10; */\n        if (message.focusMagic !== false)\n            writer.tag(10, WireType.Varint).bool(message.focusMagic);\n        /* int32 arcane_shielding = 11; */\n        if (message.arcaneShielding !== 0)\n            writer.tag(11, WireType.Varint).int32(message.arcaneShielding);\n        /* int32 improved_counterspell = 12; */\n        if (message.improvedCounterspell !== 0)\n            writer.tag(12, WireType.Varint).int32(message.improvedCounterspell);\n        /* int32 arcane_meditation = 13; */\n        if (message.arcaneMeditation !== 0)\n            writer.tag(13, WireType.Varint).int32(message.arcaneMeditation);\n        /* int32 torment_the_weak = 14; */\n        if (message.tormentTheWeak !== 0)\n            writer.tag(14, WireType.Varint).int32(message.tormentTheWeak);\n        /* int32 improved_blink = 15; */\n        if (message.improvedBlink !== 0)\n            writer.tag(15, WireType.Varint).int32(message.improvedBlink);\n        /* bool presence_of_mind = 16; */\n        if (message.presenceOfMind !== false)\n            writer.tag(16, WireType.Varint).bool(message.presenceOfMind);\n        /* int32 arcane_mind = 17; */\n        if (message.arcaneMind !== 0)\n            writer.tag(17, WireType.Varint).int32(message.arcaneMind);\n        /* int32 prismatic_cloak = 18; */\n        if (message.prismaticCloak !== 0)\n            writer.tag(18, WireType.Varint).int32(message.prismaticCloak);\n        /* int32 arcane_instability = 19; */\n        if (message.arcaneInstability !== 0)\n            writer.tag(19, WireType.Varint).int32(message.arcaneInstability);\n        /* int32 arcane_potency = 20; */\n        if (message.arcanePotency !== 0)\n            writer.tag(20, WireType.Varint).int32(message.arcanePotency);\n        /* int32 arcane_empowerment = 21; */\n        if (message.arcaneEmpowerment !== 0)\n            writer.tag(21, WireType.Varint).int32(message.arcaneEmpowerment);\n        /* bool arcane_power = 22; */\n        if (message.arcanePower !== false)\n            writer.tag(22, WireType.Varint).bool(message.arcanePower);\n        /* int32 incanters_absorption = 23; */\n        if (message.incantersAbsorption !== 0)\n            writer.tag(23, WireType.Varint).int32(message.incantersAbsorption);\n        /* int32 arcane_flows = 24; */\n        if (message.arcaneFlows !== 0)\n            writer.tag(24, WireType.Varint).int32(message.arcaneFlows);\n        /* int32 mind_mastery = 25; */\n        if (message.mindMastery !== 0)\n            writer.tag(25, WireType.Varint).int32(message.mindMastery);\n        /* bool slow = 26; */\n        if (message.slow !== false)\n            writer.tag(26, WireType.Varint).bool(message.slow);\n        /* int32 missile_barrage = 27; */\n        if (message.missileBarrage !== 0)\n            writer.tag(27, WireType.Varint).int32(message.missileBarrage);\n        /* int32 netherwind_presence = 28; */\n        if (message.netherwindPresence !== 0)\n            writer.tag(28, WireType.Varint).int32(message.netherwindPresence);\n        /* int32 spell_power = 29; */\n        if (message.spellPower !== 0)\n            writer.tag(29, WireType.Varint).int32(message.spellPower);\n        /* bool arcane_barrage = 30; */\n        if (message.arcaneBarrage !== false)\n            writer.tag(30, WireType.Varint).bool(message.arcaneBarrage);\n        /* int32 improved_fire_blast = 31; */\n        if (message.improvedFireBlast !== 0)\n            writer.tag(31, WireType.Varint).int32(message.improvedFireBlast);\n        /* int32 incineration = 32; */\n        if (message.incineration !== 0)\n            writer.tag(32, WireType.Varint).int32(message.incineration);\n        /* int32 improved_fireball = 33; */\n        if (message.improvedFireball !== 0)\n            writer.tag(33, WireType.Varint).int32(message.improvedFireball);\n        /* int32 ignite = 34; */\n        if (message.ignite !== 0)\n            writer.tag(34, WireType.Varint).int32(message.ignite);\n        /* int32 burning_determination = 35; */\n        if (message.burningDetermination !== 0)\n            writer.tag(35, WireType.Varint).int32(message.burningDetermination);\n        /* int32 world_in_flames = 36; */\n        if (message.worldInFlames !== 0)\n            writer.tag(36, WireType.Varint).int32(message.worldInFlames);\n        /* int32 flame_throwing = 37; */\n        if (message.flameThrowing !== 0)\n            writer.tag(37, WireType.Varint).int32(message.flameThrowing);\n        /* int32 impact = 38; */\n        if (message.impact !== 0)\n            writer.tag(38, WireType.Varint).int32(message.impact);\n        /* bool pyroblast = 39; */\n        if (message.pyroblast !== false)\n            writer.tag(39, WireType.Varint).bool(message.pyroblast);\n        /* int32 burning_soul = 40; */\n        if (message.burningSoul !== 0)\n            writer.tag(40, WireType.Varint).int32(message.burningSoul);\n        /* int32 improved_scorch = 41; */\n        if (message.improvedScorch !== 0)\n            writer.tag(41, WireType.Varint).int32(message.improvedScorch);\n        /* int32 molten_shields = 42; */\n        if (message.moltenShields !== 0)\n            writer.tag(42, WireType.Varint).int32(message.moltenShields);\n        /* int32 master_of_elements = 43; */\n        if (message.masterOfElements !== 0)\n            writer.tag(43, WireType.Varint).int32(message.masterOfElements);\n        /* int32 playing_with_fire = 44; */\n        if (message.playingWithFire !== 0)\n            writer.tag(44, WireType.Varint).int32(message.playingWithFire);\n        /* int32 critical_mass = 45; */\n        if (message.criticalMass !== 0)\n            writer.tag(45, WireType.Varint).int32(message.criticalMass);\n        /* bool blast_wave = 46; */\n        if (message.blastWave !== false)\n            writer.tag(46, WireType.Varint).bool(message.blastWave);\n        /* int32 blazing_speed = 47; */\n        if (message.blazingSpeed !== 0)\n            writer.tag(47, WireType.Varint).int32(message.blazingSpeed);\n        /* int32 fire_power = 48; */\n        if (message.firePower !== 0)\n            writer.tag(48, WireType.Varint).int32(message.firePower);\n        /* int32 pyromaniac = 49; */\n        if (message.pyromaniac !== 0)\n            writer.tag(49, WireType.Varint).int32(message.pyromaniac);\n        /* bool combustion = 50; */\n        if (message.combustion !== false)\n            writer.tag(50, WireType.Varint).bool(message.combustion);\n        /* int32 molten_fury = 51; */\n        if (message.moltenFury !== 0)\n            writer.tag(51, WireType.Varint).int32(message.moltenFury);\n        /* int32 fiery_payback = 52; */\n        if (message.fieryPayback !== 0)\n            writer.tag(52, WireType.Varint).int32(message.fieryPayback);\n        /* int32 empowered_fire = 53; */\n        if (message.empoweredFire !== 0)\n            writer.tag(53, WireType.Varint).int32(message.empoweredFire);\n        /* int32 firestarter = 54; */\n        if (message.firestarter !== 0)\n            writer.tag(54, WireType.Varint).int32(message.firestarter);\n        /* bool dragons_breath = 55; */\n        if (message.dragonsBreath !== false)\n            writer.tag(55, WireType.Varint).bool(message.dragonsBreath);\n        /* int32 hot_streak = 56; */\n        if (message.hotStreak !== 0)\n            writer.tag(56, WireType.Varint).int32(message.hotStreak);\n        /* int32 burnout = 57; */\n        if (message.burnout !== 0)\n            writer.tag(57, WireType.Varint).int32(message.burnout);\n        /* bool living_bomb = 58; */\n        if (message.livingBomb !== false)\n            writer.tag(58, WireType.Varint).bool(message.livingBomb);\n        /* int32 frostbite = 59; */\n        if (message.frostbite !== 0)\n            writer.tag(59, WireType.Varint).int32(message.frostbite);\n        /* int32 improved_frostbolt = 60; */\n        if (message.improvedFrostbolt !== 0)\n            writer.tag(60, WireType.Varint).int32(message.improvedFrostbolt);\n        /* int32 ice_floes = 61; */\n        if (message.iceFloes !== 0)\n            writer.tag(61, WireType.Varint).int32(message.iceFloes);\n        /* int32 ice_shards = 62; */\n        if (message.iceShards !== 0)\n            writer.tag(62, WireType.Varint).int32(message.iceShards);\n        /* int32 frost_warding = 63; */\n        if (message.frostWarding !== 0)\n            writer.tag(63, WireType.Varint).int32(message.frostWarding);\n        /* int32 precision = 64; */\n        if (message.precision !== 0)\n            writer.tag(64, WireType.Varint).int32(message.precision);\n        /* int32 permafrost = 65; */\n        if (message.permafrost !== 0)\n            writer.tag(65, WireType.Varint).int32(message.permafrost);\n        /* int32 piercing_ice = 66; */\n        if (message.piercingIce !== 0)\n            writer.tag(66, WireType.Varint).int32(message.piercingIce);\n        /* bool icy_veins = 67; */\n        if (message.icyVeins !== false)\n            writer.tag(67, WireType.Varint).bool(message.icyVeins);\n        /* int32 improved_blizzard = 68; */\n        if (message.improvedBlizzard !== 0)\n            writer.tag(68, WireType.Varint).int32(message.improvedBlizzard);\n        /* int32 arctic_reach = 69; */\n        if (message.arcticReach !== 0)\n            writer.tag(69, WireType.Varint).int32(message.arcticReach);\n        /* int32 frost_channeling = 70; */\n        if (message.frostChanneling !== 0)\n            writer.tag(70, WireType.Varint).int32(message.frostChanneling);\n        /* int32 shatter = 71; */\n        if (message.shatter !== 0)\n            writer.tag(71, WireType.Varint).int32(message.shatter);\n        /* bool cold_snap = 72; */\n        if (message.coldSnap !== false)\n            writer.tag(72, WireType.Varint).bool(message.coldSnap);\n        /* int32 improved_cone_of_cold = 73; */\n        if (message.improvedConeOfCold !== 0)\n            writer.tag(73, WireType.Varint).int32(message.improvedConeOfCold);\n        /* int32 frozen_core = 74; */\n        if (message.frozenCore !== 0)\n            writer.tag(74, WireType.Varint).int32(message.frozenCore);\n        /* int32 cold_as_ice = 75; */\n        if (message.coldAsIce !== 0)\n            writer.tag(75, WireType.Varint).int32(message.coldAsIce);\n        /* int32 winters_chill = 76; */\n        if (message.wintersChill !== 0)\n            writer.tag(76, WireType.Varint).int32(message.wintersChill);\n        /* int32 shattered_barrier = 77; */\n        if (message.shatteredBarrier !== 0)\n            writer.tag(77, WireType.Varint).int32(message.shatteredBarrier);\n        /* bool ice_barrier = 78; */\n        if (message.iceBarrier !== false)\n            writer.tag(78, WireType.Varint).bool(message.iceBarrier);\n        /* int32 arctic_winds = 79; */\n        if (message.arcticWinds !== 0)\n            writer.tag(79, WireType.Varint).int32(message.arcticWinds);\n        /* int32 empowered_frostbolt = 80; */\n        if (message.empoweredFrostbolt !== 0)\n            writer.tag(80, WireType.Varint).int32(message.empoweredFrostbolt);\n        /* int32 fingers_of_frost = 81; */\n        if (message.fingersOfFrost !== 0)\n            writer.tag(81, WireType.Varint).int32(message.fingersOfFrost);\n        /* int32 brain_freeze = 82; */\n        if (message.brainFreeze !== 0)\n            writer.tag(82, WireType.Varint).int32(message.brainFreeze);\n        /* bool summon_water_elemental = 83; */\n        if (message.summonWaterElemental !== false)\n            writer.tag(83, WireType.Varint).bool(message.summonWaterElemental);\n        /* int32 enduring_winter = 84; */\n        if (message.enduringWinter !== 0)\n            writer.tag(84, WireType.Varint).int32(message.enduringWinter);\n        /* int32 chilled_to_the_bone = 85; */\n        if (message.chilledToTheBone !== 0)\n            writer.tag(85, WireType.Varint).int32(message.chilledToTheBone);\n        /* bool deep_freeze = 86; */\n        if (message.deepFreeze !== false)\n            writer.tag(86, WireType.Varint).bool(message.deepFreeze);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.MageTalents\n */\nexport const MageTalents = new MageTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Mage$Type extends MessageType<Mage> {\n    constructor() {\n        super(\"proto.Mage\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Mage_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => MageTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Mage_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Mage>): Mage {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Mage>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Mage): Mage {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Mage.Rotation rotation */ 1:\n                    message.rotation = Mage_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.MageTalents talents */ 2:\n                    message.talents = MageTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.Mage.Options options */ 3:\n                    message.options = Mage_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Mage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Mage.Rotation rotation = 1; */\n        if (message.rotation)\n            Mage_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.MageTalents talents = 2; */\n        if (message.talents)\n            MageTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Mage.Options options = 3; */\n        if (message.options)\n            Mage_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Mage\n */\nexport const Mage = new Mage$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Mage_Rotation$Type extends MessageType<Mage_Rotation> {\n    constructor() {\n        super(\"proto.Mage.Rotation\", [\n            { no: 1, name: \"type\", kind: \"enum\", T: () => [\"proto.Mage.Rotation.Type\", Mage_Rotation_Type] },\n            { no: 2, name: \"min_blast_before_missiles\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"num_4_stack_blasts_to_missiles_gamble\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"num_4_stack_blasts_to_early_missiles\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"extra_blasts_during_first_ap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"primary_fire_spell\", kind: \"enum\", T: () => [\"proto.Mage.Rotation.PrimaryFireSpell\", Mage_Rotation_PrimaryFireSpell] },\n            { no: 4, name: \"maintain_improved_scorch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"num_extra_targets\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"optimize_cds_for_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"cqs_latency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"lb_before_hotstreak\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"water_elemental_disobey_chance\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"aoe\", kind: \"enum\", T: () => [\"proto.Mage.Rotation.AoeRotation\", Mage_Rotation_AoeRotation] }\n        ]);\n    }\n    create(value?: PartialMessage<Mage_Rotation>): Mage_Rotation {\n        const message = { type: 0, minBlastBeforeMissiles: 0, num4StackBlastsToMissilesGamble: 0, num4StackBlastsToEarlyMissiles: 0, extraBlastsDuringFirstAp: 0, primaryFireSpell: 0, maintainImprovedScorch: false, numExtraTargets: 0, optimizeCdsForExecute: false, cqsLatency: 0, lbBeforeHotstreak: false, waterElementalDisobeyChance: 0, aoe: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Mage_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Mage_Rotation): Mage_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Mage.Rotation.Type type */ 1:\n                    message.type = reader.int32();\n                    break;\n                case /* int32 min_blast_before_missiles */ 2:\n                    message.minBlastBeforeMissiles = reader.int32();\n                    break;\n                case /* int32 num_4_stack_blasts_to_missiles_gamble */ 8:\n                    message.num4StackBlastsToMissilesGamble = reader.int32();\n                    break;\n                case /* int32 num_4_stack_blasts_to_early_missiles */ 9:\n                    message.num4StackBlastsToEarlyMissiles = reader.int32();\n                    break;\n                case /* int32 extra_blasts_during_first_ap */ 10:\n                    message.extraBlastsDuringFirstAp = reader.int32();\n                    break;\n                case /* proto.Mage.Rotation.PrimaryFireSpell primary_fire_spell */ 3:\n                    message.primaryFireSpell = reader.int32();\n                    break;\n                case /* bool maintain_improved_scorch */ 4:\n                    message.maintainImprovedScorch = reader.bool();\n                    break;\n                case /* int32 num_extra_targets */ 5:\n                    message.numExtraTargets = reader.int32();\n                    break;\n                case /* bool optimize_cds_for_execute */ 11:\n                    message.optimizeCdsForExecute = reader.bool();\n                    break;\n                case /* int32 cqs_latency */ 12:\n                    message.cqsLatency = reader.int32();\n                    break;\n                case /* bool lb_before_hotstreak */ 13:\n                    message.lbBeforeHotstreak = reader.bool();\n                    break;\n                case /* double water_elemental_disobey_chance */ 6:\n                    message.waterElementalDisobeyChance = reader.double();\n                    break;\n                case /* proto.Mage.Rotation.AoeRotation aoe */ 7:\n                    message.aoe = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Mage_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Mage.Rotation.Type type = 1; */\n        if (message.type !== 0)\n            writer.tag(1, WireType.Varint).int32(message.type);\n        /* int32 min_blast_before_missiles = 2; */\n        if (message.minBlastBeforeMissiles !== 0)\n            writer.tag(2, WireType.Varint).int32(message.minBlastBeforeMissiles);\n        /* int32 num_4_stack_blasts_to_missiles_gamble = 8; */\n        if (message.num4StackBlastsToMissilesGamble !== 0)\n            writer.tag(8, WireType.Varint).int32(message.num4StackBlastsToMissilesGamble);\n        /* int32 num_4_stack_blasts_to_early_missiles = 9; */\n        if (message.num4StackBlastsToEarlyMissiles !== 0)\n            writer.tag(9, WireType.Varint).int32(message.num4StackBlastsToEarlyMissiles);\n        /* int32 extra_blasts_during_first_ap = 10; */\n        if (message.extraBlastsDuringFirstAp !== 0)\n            writer.tag(10, WireType.Varint).int32(message.extraBlastsDuringFirstAp);\n        /* proto.Mage.Rotation.PrimaryFireSpell primary_fire_spell = 3; */\n        if (message.primaryFireSpell !== 0)\n            writer.tag(3, WireType.Varint).int32(message.primaryFireSpell);\n        /* bool maintain_improved_scorch = 4; */\n        if (message.maintainImprovedScorch !== false)\n            writer.tag(4, WireType.Varint).bool(message.maintainImprovedScorch);\n        /* int32 num_extra_targets = 5; */\n        if (message.numExtraTargets !== 0)\n            writer.tag(5, WireType.Varint).int32(message.numExtraTargets);\n        /* bool optimize_cds_for_execute = 11; */\n        if (message.optimizeCdsForExecute !== false)\n            writer.tag(11, WireType.Varint).bool(message.optimizeCdsForExecute);\n        /* int32 cqs_latency = 12; */\n        if (message.cqsLatency !== 0)\n            writer.tag(12, WireType.Varint).int32(message.cqsLatency);\n        /* bool lb_before_hotstreak = 13; */\n        if (message.lbBeforeHotstreak !== false)\n            writer.tag(13, WireType.Varint).bool(message.lbBeforeHotstreak);\n        /* double water_elemental_disobey_chance = 6; */\n        if (message.waterElementalDisobeyChance !== 0)\n            writer.tag(6, WireType.Bit64).double(message.waterElementalDisobeyChance);\n        /* proto.Mage.Rotation.AoeRotation aoe = 7; */\n        if (message.aoe !== 0)\n            writer.tag(7, WireType.Varint).int32(message.aoe);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Mage.Rotation\n */\nexport const Mage_Rotation = new Mage_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Mage_Options$Type extends MessageType<Mage_Options> {\n    constructor() {\n        super(\"proto.Mage.Options\", [\n            { no: 1, name: \"armor\", kind: \"enum\", T: () => [\"proto.Mage.Options.ArmorType\", Mage_Options_ArmorType] },\n            { no: 2, name: \"evocation_ticks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"focus_magic_percent_uptime\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Mage_Options>): Mage_Options {\n        const message = { armor: 0, evocationTicks: 0, focusMagicPercentUptime: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Mage_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Mage_Options): Mage_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Mage.Options.ArmorType armor */ 1:\n                    message.armor = reader.int32();\n                    break;\n                case /* int32 evocation_ticks */ 2:\n                    message.evocationTicks = reader.int32();\n                    break;\n                case /* int32 focus_magic_percent_uptime */ 3:\n                    message.focusMagicPercentUptime = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Mage_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Mage.Options.ArmorType armor = 1; */\n        if (message.armor !== 0)\n            writer.tag(1, WireType.Varint).int32(message.armor);\n        /* int32 evocation_ticks = 2; */\n        if (message.evocationTicks !== 0)\n            writer.tag(2, WireType.Varint).int32(message.evocationTicks);\n        /* int32 focus_magic_percent_uptime = 3; */\n        if (message.focusMagicPercentUptime !== 0)\n            writer.tag(3, WireType.Varint).int32(message.focusMagicPercentUptime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Mage.Options\n */\nexport const Mage_Options = new Mage_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"hunter.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { CustomRotation } from \"./common\";\n/**\n * @generated from protobuf message proto.HunterTalents\n */\nexport interface HunterTalents {\n    /**\n     * Beast Mastery\n     *\n     * @generated from protobuf field: int32 improved_aspect_of_the_hawk = 1;\n     */\n    improvedAspectOfTheHawk: number;\n    /**\n     * @generated from protobuf field: int32 endurance_training = 2;\n     */\n    enduranceTraining: number;\n    /**\n     * @generated from protobuf field: int32 focused_fire = 3;\n     */\n    focusedFire: number;\n    /**\n     * @generated from protobuf field: int32 improved_aspect_of_the_monkey = 4;\n     */\n    improvedAspectOfTheMonkey: number;\n    /**\n     * @generated from protobuf field: int32 thick_hide = 5;\n     */\n    thickHide: number;\n    /**\n     * @generated from protobuf field: int32 improved_revive_pet = 6;\n     */\n    improvedRevivePet: number;\n    /**\n     * @generated from protobuf field: int32 pathfinding = 7;\n     */\n    pathfinding: number;\n    /**\n     * @generated from protobuf field: bool aspect_mastery = 8;\n     */\n    aspectMastery: boolean;\n    /**\n     * @generated from protobuf field: int32 unleashed_fury = 9;\n     */\n    unleashedFury: number;\n    /**\n     * @generated from protobuf field: int32 improved_mend_pet = 10;\n     */\n    improvedMendPet: number;\n    /**\n     * @generated from protobuf field: int32 ferocity = 11;\n     */\n    ferocity: number;\n    /**\n     * @generated from protobuf field: int32 spirit_bond = 12;\n     */\n    spiritBond: number;\n    /**\n     * @generated from protobuf field: bool intimidation = 13;\n     */\n    intimidation: boolean;\n    /**\n     * @generated from protobuf field: int32 bestial_discipline = 14;\n     */\n    bestialDiscipline: number;\n    /**\n     * @generated from protobuf field: int32 animal_handler = 15;\n     */\n    animalHandler: number;\n    /**\n     * @generated from protobuf field: int32 frenzy = 16;\n     */\n    frenzy: number;\n    /**\n     * @generated from protobuf field: int32 ferocious_inspiration = 17;\n     */\n    ferociousInspiration: number;\n    /**\n     * @generated from protobuf field: bool bestial_wrath = 18;\n     */\n    bestialWrath: boolean;\n    /**\n     * @generated from protobuf field: int32 catlike_reflexes = 19;\n     */\n    catlikeReflexes: number;\n    /**\n     * @generated from protobuf field: int32 invigoration = 20;\n     */\n    invigoration: number;\n    /**\n     * @generated from protobuf field: int32 serpents_swiftness = 21;\n     */\n    serpentsSwiftness: number;\n    /**\n     * @generated from protobuf field: int32 longevity = 22;\n     */\n    longevity: number;\n    /**\n     * @generated from protobuf field: bool the_beast_within = 23;\n     */\n    theBeastWithin: boolean;\n    /**\n     * @generated from protobuf field: int32 cobra_strikes = 24;\n     */\n    cobraStrikes: number;\n    /**\n     * @generated from protobuf field: int32 kindred_spirits = 25;\n     */\n    kindredSpirits: number;\n    /**\n     * @generated from protobuf field: bool beast_mastery = 26;\n     */\n    beastMastery: boolean;\n    /**\n     * Marksmanship\n     *\n     * @generated from protobuf field: int32 improved_concussive_shot = 27;\n     */\n    improvedConcussiveShot: number;\n    /**\n     * @generated from protobuf field: int32 focused_aim = 28;\n     */\n    focusedAim: number;\n    /**\n     * @generated from protobuf field: int32 lethal_shots = 29;\n     */\n    lethalShots: number;\n    /**\n     * @generated from protobuf field: int32 careful_aim = 30;\n     */\n    carefulAim: number;\n    /**\n     * @generated from protobuf field: int32 improved_hunters_mark = 31;\n     */\n    improvedHuntersMark: number;\n    /**\n     * @generated from protobuf field: int32 mortal_shots = 32;\n     */\n    mortalShots: number;\n    /**\n     * @generated from protobuf field: int32 go_for_the_throat = 33;\n     */\n    goForTheThroat: number;\n    /**\n     * @generated from protobuf field: int32 improved_arcane_shot = 34;\n     */\n    improvedArcaneShot: number;\n    /**\n     * @generated from protobuf field: bool aimed_shot = 35;\n     */\n    aimedShot: boolean;\n    /**\n     * @generated from protobuf field: int32 rapid_killing = 36;\n     */\n    rapidKilling: number;\n    /**\n     * @generated from protobuf field: int32 improved_stings = 37;\n     */\n    improvedStings: number;\n    /**\n     * @generated from protobuf field: int32 efficiency = 38;\n     */\n    efficiency: number;\n    /**\n     * @generated from protobuf field: int32 concussive_barrage = 39;\n     */\n    concussiveBarrage: number;\n    /**\n     * @generated from protobuf field: bool readiness = 40;\n     */\n    readiness: boolean;\n    /**\n     * @generated from protobuf field: int32 barrage = 41;\n     */\n    barrage: number;\n    /**\n     * @generated from protobuf field: int32 combat_experience = 42;\n     */\n    combatExperience: number;\n    /**\n     * @generated from protobuf field: int32 ranged_weapon_specialization = 43;\n     */\n    rangedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 piercing_shots = 44;\n     */\n    piercingShots: number;\n    /**\n     * @generated from protobuf field: bool trueshot_aura = 45;\n     */\n    trueshotAura: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_barrage = 46;\n     */\n    improvedBarrage: number;\n    /**\n     * @generated from protobuf field: int32 master_marksman = 47;\n     */\n    masterMarksman: number;\n    /**\n     * @generated from protobuf field: int32 rapid_recuperation = 48;\n     */\n    rapidRecuperation: number;\n    /**\n     * @generated from protobuf field: int32 wild_quiver = 49;\n     */\n    wildQuiver: number;\n    /**\n     * @generated from protobuf field: bool silencing_shot = 50;\n     */\n    silencingShot: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_steady_shot = 51;\n     */\n    improvedSteadyShot: number;\n    /**\n     * @generated from protobuf field: int32 marked_for_death = 52;\n     */\n    markedForDeath: number;\n    /**\n     * @generated from protobuf field: bool chimera_shot = 53;\n     */\n    chimeraShot: boolean;\n    /**\n     * Survival\n     *\n     * @generated from protobuf field: int32 improved_tracking = 54;\n     */\n    improvedTracking: number;\n    /**\n     * @generated from protobuf field: int32 hawk_eye = 55;\n     */\n    hawkEye: number;\n    /**\n     * @generated from protobuf field: int32 savage_strikes = 56;\n     */\n    savageStrikes: number;\n    /**\n     * @generated from protobuf field: int32 surefooted = 57;\n     */\n    surefooted: number;\n    /**\n     * @generated from protobuf field: int32 entrapment = 58;\n     */\n    entrapment: number;\n    /**\n     * @generated from protobuf field: int32 trap_mastery = 59;\n     */\n    trapMastery: number;\n    /**\n     * @generated from protobuf field: int32 survival_instincts = 60;\n     */\n    survivalInstincts: number;\n    /**\n     * @generated from protobuf field: int32 survivalist = 61;\n     */\n    survivalist: number;\n    /**\n     * @generated from protobuf field: bool scatter_shot = 62;\n     */\n    scatterShot: boolean;\n    /**\n     * @generated from protobuf field: int32 deflection = 63;\n     */\n    deflection: number;\n    /**\n     * @generated from protobuf field: int32 survival_tactics = 64;\n     */\n    survivalTactics: number;\n    /**\n     * @generated from protobuf field: int32 t_n_t = 65;\n     */\n    tNT: number;\n    /**\n     * @generated from protobuf field: int32 lock_and_load = 66;\n     */\n    lockAndLoad: number;\n    /**\n     * @generated from protobuf field: int32 hunter_vs_wild = 67;\n     */\n    hunterVsWild: number;\n    /**\n     * @generated from protobuf field: int32 killer_instinct = 68;\n     */\n    killerInstinct: number;\n    /**\n     * @generated from protobuf field: bool counterattack = 69;\n     */\n    counterattack: boolean;\n    /**\n     * @generated from protobuf field: int32 lightning_reflexes = 70;\n     */\n    lightningReflexes: number;\n    /**\n     * @generated from protobuf field: int32 resourcefulness = 71;\n     */\n    resourcefulness: number;\n    /**\n     * @generated from protobuf field: int32 expose_weakness = 72;\n     */\n    exposeWeakness: number;\n    /**\n     * @generated from protobuf field: bool wyvern_sting = 73;\n     */\n    wyvernSting: boolean;\n    /**\n     * @generated from protobuf field: int32 thrill_of_the_hunt = 74;\n     */\n    thrillOfTheHunt: number;\n    /**\n     * @generated from protobuf field: int32 master_tactician = 75;\n     */\n    masterTactician: number;\n    /**\n     * @generated from protobuf field: int32 noxious_stings = 76;\n     */\n    noxiousStings: number;\n    /**\n     * @generated from protobuf field: int32 point_of_no_escape = 77;\n     */\n    pointOfNoEscape: number;\n    /**\n     * @generated from protobuf field: bool black_arrow = 78;\n     */\n    blackArrow: boolean;\n    /**\n     * @generated from protobuf field: int32 sniper_training = 79;\n     */\n    sniperTraining: number;\n    /**\n     * @generated from protobuf field: int32 hunting_party = 80;\n     */\n    huntingParty: number;\n    /**\n     * @generated from protobuf field: bool explosive_shot = 81;\n     */\n    explosiveShot: boolean;\n}\n/**\n * @generated from protobuf message proto.HunterPetTalents\n */\nexport interface HunterPetTalents {\n    /**\n     * Cunning\n     *\n     * @generated from protobuf field: int32 cobra_reflexes = 1;\n     */\n    cobraReflexes: number;\n    /**\n     * @generated from protobuf field: bool dive = 2;\n     */\n    dive: boolean;\n    /**\n     * @generated from protobuf field: int32 great_stamina = 3;\n     */\n    greatStamina: number;\n    /**\n     * @generated from protobuf field: int32 natural_armor = 4;\n     */\n    naturalArmor: number;\n    /**\n     * @generated from protobuf field: bool boars_speed = 5;\n     */\n    boarsSpeed: boolean;\n    /**\n     * @generated from protobuf field: int32 mobility = 6;\n     */\n    mobility: number;\n    /**\n     * @generated from protobuf field: int32 owls_focus = 7;\n     */\n    owlsFocus: number;\n    /**\n     * @generated from protobuf field: int32 spiked_collar = 8;\n     */\n    spikedCollar: number;\n    /**\n     * @generated from protobuf field: int32 culling_the_herd = 9;\n     */\n    cullingTheHerd: number;\n    /**\n     * @generated from protobuf field: int32 lionhearted = 10;\n     */\n    lionhearted: number;\n    /**\n     * @generated from protobuf field: bool carrion_feeder = 11;\n     */\n    carrionFeeder: boolean;\n    /**\n     * @generated from protobuf field: int32 great_resistance = 12;\n     */\n    greatResistance: number;\n    /**\n     * @generated from protobuf field: int32 cornered = 13;\n     */\n    cornered: number;\n    /**\n     * @generated from protobuf field: int32 feeding_frenzy = 14;\n     */\n    feedingFrenzy: number;\n    /**\n     * @generated from protobuf field: bool wolverine_bite = 15;\n     */\n    wolverineBite: boolean;\n    /**\n     * @generated from protobuf field: bool roar_of_recovery = 16;\n     */\n    roarOfRecovery: boolean;\n    /**\n     * @generated from protobuf field: bool bullheaded = 17;\n     */\n    bullheaded: boolean;\n    /**\n     * @generated from protobuf field: int32 grace_of_the_mantis = 18;\n     */\n    graceOfTheMantis: number;\n    /**\n     * @generated from protobuf field: int32 wild_hunt = 19;\n     */\n    wildHunt: number;\n    /**\n     * @generated from protobuf field: bool roar_of_sacrifice = 20;\n     */\n    roarOfSacrifice: boolean;\n    /**\n     * Ferocity\n     *\n     * @generated from protobuf field: int32 improved_cower = 21;\n     */\n    improvedCower: number;\n    /**\n     * @generated from protobuf field: int32 bloodthirsty = 22;\n     */\n    bloodthirsty: number;\n    /**\n     * @generated from protobuf field: bool heart_of_the_pheonix = 23;\n     */\n    heartOfThePheonix: boolean;\n    /**\n     * @generated from protobuf field: int32 spiders_bite = 24;\n     */\n    spidersBite: number;\n    /**\n     * @generated from protobuf field: bool rabid = 25;\n     */\n    rabid: boolean;\n    /**\n     * @generated from protobuf field: bool lick_your_wounds = 26;\n     */\n    lickYourWounds: boolean;\n    /**\n     * @generated from protobuf field: bool call_of_the_wild = 27;\n     */\n    callOfTheWild: boolean;\n    /**\n     * @generated from protobuf field: int32 shark_attack = 28;\n     */\n    sharkAttack: number;\n    /**\n     * Tenacity\n     *\n     * @generated from protobuf field: bool charge = 29;\n     */\n    charge: boolean;\n    /**\n     * @generated from protobuf field: int32 blood_of_the_rhino = 30;\n     */\n    bloodOfTheRhino: number;\n    /**\n     * @generated from protobuf field: int32 pet_barding = 31;\n     */\n    petBarding: number;\n    /**\n     * @generated from protobuf field: int32 guard_dog = 32;\n     */\n    guardDog: number;\n    /**\n     * @generated from protobuf field: bool thunderstomp = 33;\n     */\n    thunderstomp: boolean;\n    /**\n     * @generated from protobuf field: bool last_stand = 34;\n     */\n    lastStand: boolean;\n    /**\n     * @generated from protobuf field: bool taunt = 35;\n     */\n    taunt: boolean;\n    /**\n     * @generated from protobuf field: bool intervene = 36;\n     */\n    intervene: boolean;\n    /**\n     * @generated from protobuf field: int32 silverback = 37;\n     */\n    silverback: number;\n}\n/**\n * @generated from protobuf message proto.Hunter\n */\nexport interface Hunter {\n    /**\n     * @generated from protobuf field: proto.Hunter.Rotation rotation = 1;\n     */\n    rotation?: Hunter_Rotation;\n    /**\n     * @generated from protobuf field: proto.HunterTalents talents = 2;\n     */\n    talents?: HunterTalents;\n    /**\n     * @generated from protobuf field: proto.Hunter.Options options = 3;\n     */\n    options?: Hunter_Options;\n}\n/**\n * @generated from protobuf message proto.Hunter.Rotation\n */\nexport interface Hunter_Rotation {\n    /**\n     * @generated from protobuf field: proto.Hunter.Rotation.RotationType type = 9;\n     */\n    type: Hunter_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: proto.Hunter.Rotation.StingType sting = 5;\n     */\n    sting: Hunter_Rotation_StingType;\n    /**\n     * @generated from protobuf field: bool trap_weave = 1;\n     */\n    trapWeave: boolean;\n    /**\n     * @generated from protobuf field: double time_to_trap_weave_ms = 2;\n     */\n    timeToTrapWeaveMs: number;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 8;\n     */\n    customRotation?: CustomRotation;\n    /**\n     * Switch to Aspect of the Viper when mana goes below this percent.\n     *\n     * @generated from protobuf field: double viper_start_mana_percent = 6;\n     */\n    viperStartManaPercent: number;\n    /**\n     * Switch back to Aspect of the Hawk when mana goes above this percent.\n     *\n     * @generated from protobuf field: double viper_stop_mana_percent = 7;\n     */\n    viperStopManaPercent: number;\n}\n/**\n * @generated from protobuf enum proto.Hunter.Rotation.RotationType\n */\nexport enum Hunter_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: UnknownType = 0;\n     */\n    UnknownType = 0,\n    /**\n     * @generated from protobuf enum value: SingleTarget = 1;\n     */\n    SingleTarget = 1,\n    /**\n     * @generated from protobuf enum value: Aoe = 3;\n     */\n    Aoe = 3,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2\n}\n/**\n * @generated from protobuf enum proto.Hunter.Rotation.StingType\n */\nexport enum Hunter_Rotation_StingType {\n    /**\n     * @generated from protobuf enum value: NoSting = 0;\n     */\n    NoSting = 0,\n    /**\n     * @generated from protobuf enum value: ScorpidSting = 1;\n     */\n    ScorpidSting = 1,\n    /**\n     * @generated from protobuf enum value: SerpentSting = 2;\n     */\n    SerpentSting = 2\n}\n/**\n * @generated from protobuf enum proto.Hunter.Rotation.SpellOption\n */\nexport enum Hunter_Rotation_SpellOption {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: SteadyShot = 1;\n     */\n    SteadyShot = 1,\n    /**\n     * @generated from protobuf enum value: ArcaneShot = 2;\n     */\n    ArcaneShot = 2,\n    /**\n     * @generated from protobuf enum value: AimedShot = 3;\n     */\n    AimedShot = 3,\n    /**\n     * @generated from protobuf enum value: MultiShot = 4;\n     */\n    MultiShot = 4,\n    /**\n     * @generated from protobuf enum value: SerpentStingSpell = 5;\n     */\n    SerpentStingSpell = 5,\n    /**\n     * @generated from protobuf enum value: ScorpidStingSpell = 6;\n     */\n    ScorpidStingSpell = 6,\n    /**\n     * @generated from protobuf enum value: KillShot = 7;\n     */\n    KillShot = 7,\n    /**\n     * @generated from protobuf enum value: BlackArrow = 8;\n     */\n    BlackArrow = 8,\n    /**\n     * @generated from protobuf enum value: ChimeraShot = 9;\n     */\n    ChimeraShot = 9,\n    /**\n     * @generated from protobuf enum value: ExplosiveShot = 10;\n     */\n    ExplosiveShot = 10,\n    /**\n     * @generated from protobuf enum value: ExplosiveTrap = 11;\n     */\n    ExplosiveTrap = 11,\n    /**\n     * @generated from protobuf enum value: Volley = 12;\n     */\n    Volley = 12\n}\n/**\n * @generated from protobuf message proto.Hunter.Options\n */\nexport interface Hunter_Options {\n    /**\n     * @generated from protobuf field: proto.Hunter.Options.Ammo ammo = 1;\n     */\n    ammo: Hunter_Options_Ammo;\n    /**\n     * @generated from protobuf field: proto.Hunter.Options.PetType pet_type = 2;\n     */\n    petType: Hunter_Options_PetType;\n    /**\n     * @generated from protobuf field: proto.HunterPetTalents pet_talents = 3;\n     */\n    petTalents?: HunterPetTalents;\n    /**\n     * @generated from protobuf field: double pet_uptime = 4;\n     */\n    petUptime: number;\n    /**\n     * @generated from protobuf field: double sniper_training_uptime = 7;\n     */\n    sniperTrainingUptime: number;\n    /**\n     * @generated from protobuf field: bool use_hunters_mark = 5;\n     */\n    useHuntersMark: boolean;\n}\n/**\n * @generated from protobuf enum proto.Hunter.Options.Ammo\n */\nexport enum Hunter_Options_Ammo {\n    /**\n     * @generated from protobuf enum value: AmmoNone = 0;\n     */\n    AmmoNone = 0,\n    /**\n     * @generated from protobuf enum value: IcebladeArrow = 1;\n     */\n    IcebladeArrow = 1,\n    /**\n     * @generated from protobuf enum value: SaroniteRazorheads = 2;\n     */\n    SaroniteRazorheads = 2,\n    /**\n     * @generated from protobuf enum value: TerrorshaftArrow = 3;\n     */\n    TerrorshaftArrow = 3,\n    /**\n     * @generated from protobuf enum value: TimelessArrow = 4;\n     */\n    TimelessArrow = 4,\n    /**\n     * @generated from protobuf enum value: MysteriousArrow = 5;\n     */\n    MysteriousArrow = 5,\n    /**\n     * @generated from protobuf enum value: AdamantiteStinger = 6;\n     */\n    AdamantiteStinger = 6,\n    /**\n     * @generated from protobuf enum value: BlackflightArrow = 7;\n     */\n    BlackflightArrow = 7\n}\n/**\n * @generated from protobuf enum proto.Hunter.Options.PetType\n */\nexport enum Hunter_Options_PetType {\n    /**\n     * @generated from protobuf enum value: PetNone = 0;\n     */\n    PetNone = 0,\n    /**\n     * @generated from protobuf enum value: Bat = 1;\n     */\n    Bat = 1,\n    /**\n     * @generated from protobuf enum value: Bear = 2;\n     */\n    Bear = 2,\n    /**\n     * @generated from protobuf enum value: BirdOfPrey = 3;\n     */\n    BirdOfPrey = 3,\n    /**\n     * @generated from protobuf enum value: Boar = 4;\n     */\n    Boar = 4,\n    /**\n     * @generated from protobuf enum value: CarrionBird = 5;\n     */\n    CarrionBird = 5,\n    /**\n     * @generated from protobuf enum value: Cat = 6;\n     */\n    Cat = 6,\n    /**\n     * @generated from protobuf enum value: Chimaera = 7;\n     */\n    Chimaera = 7,\n    /**\n     * @generated from protobuf enum value: CoreHound = 8;\n     */\n    CoreHound = 8,\n    /**\n     * @generated from protobuf enum value: Crab = 9;\n     */\n    Crab = 9,\n    /**\n     * @generated from protobuf enum value: Crocolisk = 10;\n     */\n    Crocolisk = 10,\n    /**\n     * @generated from protobuf enum value: Devilsaur = 11;\n     */\n    Devilsaur = 11,\n    /**\n     * @generated from protobuf enum value: Dragonhawk = 12;\n     */\n    Dragonhawk = 12,\n    /**\n     * @generated from protobuf enum value: Gorilla = 13;\n     */\n    Gorilla = 13,\n    /**\n     * @generated from protobuf enum value: Hyena = 14;\n     */\n    Hyena = 14,\n    /**\n     * @generated from protobuf enum value: Moth = 15;\n     */\n    Moth = 15,\n    /**\n     * @generated from protobuf enum value: NetherRay = 16;\n     */\n    NetherRay = 16,\n    /**\n     * @generated from protobuf enum value: Raptor = 17;\n     */\n    Raptor = 17,\n    /**\n     * @generated from protobuf enum value: Ravager = 18;\n     */\n    Ravager = 18,\n    /**\n     * @generated from protobuf enum value: Rhino = 19;\n     */\n    Rhino = 19,\n    /**\n     * @generated from protobuf enum value: Scorpid = 20;\n     */\n    Scorpid = 20,\n    /**\n     * @generated from protobuf enum value: Serpent = 21;\n     */\n    Serpent = 21,\n    /**\n     * @generated from protobuf enum value: Silithid = 22;\n     */\n    Silithid = 22,\n    /**\n     * @generated from protobuf enum value: Spider = 23;\n     */\n    Spider = 23,\n    /**\n     * @generated from protobuf enum value: SpiritBeast = 24;\n     */\n    SpiritBeast = 24,\n    /**\n     * @generated from protobuf enum value: SporeBat = 25;\n     */\n    SporeBat = 25,\n    /**\n     * @generated from protobuf enum value: Tallstrider = 26;\n     */\n    Tallstrider = 26,\n    /**\n     * @generated from protobuf enum value: Turtle = 27;\n     */\n    Turtle = 27,\n    /**\n     * @generated from protobuf enum value: WarpStalker = 28;\n     */\n    WarpStalker = 28,\n    /**\n     * @generated from protobuf enum value: Wasp = 29;\n     */\n    Wasp = 29,\n    /**\n     * @generated from protobuf enum value: WindSerpent = 30;\n     */\n    WindSerpent = 30,\n    /**\n     * @generated from protobuf enum value: Wolf = 31;\n     */\n    Wolf = 31,\n    /**\n     * @generated from protobuf enum value: Worm = 32;\n     */\n    Worm = 32\n}\n/**\n * @generated from protobuf enum proto.HunterMajorGlyph\n */\nexport enum HunterMajorGlyph {\n    /**\n     * @generated from protobuf enum value: HunterMajorGlyphNone = 0;\n     */\n    HunterMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAimedShot = 42897;\n     */\n    GlyphOfAimedShot = 42897,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneShot = 42898;\n     */\n    GlyphOfArcaneShot = 42898,\n    /**\n     * @generated from protobuf enum value: GlyphOfAspectOfTheViper = 42901;\n     */\n    GlyphOfAspectOfTheViper = 42901,\n    /**\n     * @generated from protobuf enum value: GlyphOfBestialWrath = 42902;\n     */\n    GlyphOfBestialWrath = 42902,\n    /**\n     * @generated from protobuf enum value: GlyphOfChimeraShot = 45625;\n     */\n    GlyphOfChimeraShot = 45625,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeterrence = 42903;\n     */\n    GlyphOfDeterrence = 42903,\n    /**\n     * @generated from protobuf enum value: GlyphOfDisengage = 42904;\n     */\n    GlyphOfDisengage = 42904,\n    /**\n     * @generated from protobuf enum value: GlyphOfExplosiveShot = 45731;\n     */\n    GlyphOfExplosiveShot = 45731,\n    /**\n     * @generated from protobuf enum value: GlyphOfExplosiveTrap = 45733;\n     */\n    GlyphOfExplosiveTrap = 45733,\n    /**\n     * @generated from protobuf enum value: GlyphOfFreezingTrap = 42905;\n     */\n    GlyphOfFreezingTrap = 42905,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostTrap = 42906;\n     */\n    GlyphOfFrostTrap = 42906,\n    /**\n     * @generated from protobuf enum value: GlyphOfHuntersMark = 42907;\n     */\n    GlyphOfHuntersMark = 42907,\n    /**\n     * @generated from protobuf enum value: GlyphOfImmolationTrap = 42908;\n     */\n    GlyphOfImmolationTrap = 42908,\n    /**\n     * @generated from protobuf enum value: GlyphOfKillShot = 45732;\n     */\n    GlyphOfKillShot = 45732,\n    /**\n     * @generated from protobuf enum value: GlyphOfMending = 42900;\n     */\n    GlyphOfMending = 42900,\n    /**\n     * @generated from protobuf enum value: GlyphOfMultiShot = 42910;\n     */\n    GlyphOfMultiShot = 42910,\n    /**\n     * @generated from protobuf enum value: GlyphOfRapidFire = 42911;\n     */\n    GlyphOfRapidFire = 42911,\n    /**\n     * @generated from protobuf enum value: GlyphOfRaptorStrike = 45735;\n     */\n    GlyphOfRaptorStrike = 45735,\n    /**\n     * @generated from protobuf enum value: GlyphOfScatterShot = 45734;\n     */\n    GlyphOfScatterShot = 45734,\n    /**\n     * @generated from protobuf enum value: GlyphOfSerpentSting = 42912;\n     */\n    GlyphOfSerpentSting = 42912,\n    /**\n     * @generated from protobuf enum value: GlyphOfSnakeTrap = 42913;\n     */\n    GlyphOfSnakeTrap = 42913,\n    /**\n     * @generated from protobuf enum value: GlyphOfSteadyShot = 42914;\n     */\n    GlyphOfSteadyShot = 42914,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheBeast = 42899;\n     */\n    GlyphOfTheBeast = 42899,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheHawk = 42909;\n     */\n    GlyphOfTheHawk = 42909,\n    /**\n     * @generated from protobuf enum value: GlyphOfTrueshotAura = 42915;\n     */\n    GlyphOfTrueshotAura = 42915,\n    /**\n     * @generated from protobuf enum value: GlyphOfVolley = 42916;\n     */\n    GlyphOfVolley = 42916,\n    /**\n     * @generated from protobuf enum value: GlyphOfWyvernSting = 42917;\n     */\n    GlyphOfWyvernSting = 42917\n}\n/**\n * @generated from protobuf enum proto.HunterMinorGlyph\n */\nexport enum HunterMinorGlyph {\n    /**\n     * @generated from protobuf enum value: HunterMinorGlyphNone = 0;\n     */\n    HunterMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeignDeath = 43351;\n     */\n    GlyphOfFeignDeath = 43351,\n    /**\n     * @generated from protobuf enum value: GlyphOfMendPet = 43350;\n     */\n    GlyphOfMendPet = 43350,\n    /**\n     * @generated from protobuf enum value: GlyphOfPossessedStrength = 43354;\n     */\n    GlyphOfPossessedStrength = 43354,\n    /**\n     * @generated from protobuf enum value: GlyphOfRevivePet = 43338;\n     */\n    GlyphOfRevivePet = 43338,\n    /**\n     * @generated from protobuf enum value: GlyphOfScareBeast = 43356;\n     */\n    GlyphOfScareBeast = 43356,\n    /**\n     * @generated from protobuf enum value: GlyphOfThePack = 43355;\n     */\n    GlyphOfThePack = 43355\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass HunterTalents$Type extends MessageType<HunterTalents> {\n    constructor() {\n        super(\"proto.HunterTalents\", [\n            { no: 1, name: \"improved_aspect_of_the_hawk\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"endurance_training\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"focused_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"improved_aspect_of_the_monkey\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"thick_hide\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"improved_revive_pet\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"pathfinding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"aspect_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"unleashed_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"improved_mend_pet\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"ferocity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"spirit_bond\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"intimidation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"bestial_discipline\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"animal_handler\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"ferocious_inspiration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"bestial_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"catlike_reflexes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"invigoration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"serpents_swiftness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"longevity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"the_beast_within\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"cobra_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"kindred_spirits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"beast_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"improved_concussive_shot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"focused_aim\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"lethal_shots\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"careful_aim\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"improved_hunters_mark\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"mortal_shots\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"go_for_the_throat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"improved_arcane_shot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"aimed_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"rapid_killing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"improved_stings\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"efficiency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"concussive_barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"readiness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 41, name: \"barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"combat_experience\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"ranged_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"piercing_shots\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"trueshot_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 46, name: \"improved_barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"master_marksman\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"rapid_recuperation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"wild_quiver\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"silencing_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"improved_steady_shot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"marked_for_death\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"chimera_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 54, name: \"improved_tracking\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"hawk_eye\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"savage_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"surefooted\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"entrapment\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"trap_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"survival_instincts\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"survivalist\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"scatter_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 63, name: \"deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"survival_tactics\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"t_n_t\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"lock_and_load\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"hunter_vs_wild\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"killer_instinct\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"counterattack\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 70, name: \"lightning_reflexes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"resourcefulness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"expose_weakness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"wyvern_sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 74, name: \"thrill_of_the_hunt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"master_tactician\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"noxious_stings\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"point_of_no_escape\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"black_arrow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 79, name: \"sniper_training\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"hunting_party\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"explosive_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HunterTalents>): HunterTalents {\n        const message = { improvedAspectOfTheHawk: 0, enduranceTraining: 0, focusedFire: 0, improvedAspectOfTheMonkey: 0, thickHide: 0, improvedRevivePet: 0, pathfinding: 0, aspectMastery: false, unleashedFury: 0, improvedMendPet: 0, ferocity: 0, spiritBond: 0, intimidation: false, bestialDiscipline: 0, animalHandler: 0, frenzy: 0, ferociousInspiration: 0, bestialWrath: false, catlikeReflexes: 0, invigoration: 0, serpentsSwiftness: 0, longevity: 0, theBeastWithin: false, cobraStrikes: 0, kindredSpirits: 0, beastMastery: false, improvedConcussiveShot: 0, focusedAim: 0, lethalShots: 0, carefulAim: 0, improvedHuntersMark: 0, mortalShots: 0, goForTheThroat: 0, improvedArcaneShot: 0, aimedShot: false, rapidKilling: 0, improvedStings: 0, efficiency: 0, concussiveBarrage: 0, readiness: false, barrage: 0, combatExperience: 0, rangedWeaponSpecialization: 0, piercingShots: 0, trueshotAura: false, improvedBarrage: 0, masterMarksman: 0, rapidRecuperation: 0, wildQuiver: 0, silencingShot: false, improvedSteadyShot: 0, markedForDeath: 0, chimeraShot: false, improvedTracking: 0, hawkEye: 0, savageStrikes: 0, surefooted: 0, entrapment: 0, trapMastery: 0, survivalInstincts: 0, survivalist: 0, scatterShot: false, deflection: 0, survivalTactics: 0, tNT: 0, lockAndLoad: 0, hunterVsWild: 0, killerInstinct: 0, counterattack: false, lightningReflexes: 0, resourcefulness: 0, exposeWeakness: 0, wyvernSting: false, thrillOfTheHunt: 0, masterTactician: 0, noxiousStings: 0, pointOfNoEscape: 0, blackArrow: false, sniperTraining: 0, huntingParty: 0, explosiveShot: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HunterTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HunterTalents): HunterTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_aspect_of_the_hawk */ 1:\n                    message.improvedAspectOfTheHawk = reader.int32();\n                    break;\n                case /* int32 endurance_training */ 2:\n                    message.enduranceTraining = reader.int32();\n                    break;\n                case /* int32 focused_fire */ 3:\n                    message.focusedFire = reader.int32();\n                    break;\n                case /* int32 improved_aspect_of_the_monkey */ 4:\n                    message.improvedAspectOfTheMonkey = reader.int32();\n                    break;\n                case /* int32 thick_hide */ 5:\n                    message.thickHide = reader.int32();\n                    break;\n                case /* int32 improved_revive_pet */ 6:\n                    message.improvedRevivePet = reader.int32();\n                    break;\n                case /* int32 pathfinding */ 7:\n                    message.pathfinding = reader.int32();\n                    break;\n                case /* bool aspect_mastery */ 8:\n                    message.aspectMastery = reader.bool();\n                    break;\n                case /* int32 unleashed_fury */ 9:\n                    message.unleashedFury = reader.int32();\n                    break;\n                case /* int32 improved_mend_pet */ 10:\n                    message.improvedMendPet = reader.int32();\n                    break;\n                case /* int32 ferocity */ 11:\n                    message.ferocity = reader.int32();\n                    break;\n                case /* int32 spirit_bond */ 12:\n                    message.spiritBond = reader.int32();\n                    break;\n                case /* bool intimidation */ 13:\n                    message.intimidation = reader.bool();\n                    break;\n                case /* int32 bestial_discipline */ 14:\n                    message.bestialDiscipline = reader.int32();\n                    break;\n                case /* int32 animal_handler */ 15:\n                    message.animalHandler = reader.int32();\n                    break;\n                case /* int32 frenzy */ 16:\n                    message.frenzy = reader.int32();\n                    break;\n                case /* int32 ferocious_inspiration */ 17:\n                    message.ferociousInspiration = reader.int32();\n                    break;\n                case /* bool bestial_wrath */ 18:\n                    message.bestialWrath = reader.bool();\n                    break;\n                case /* int32 catlike_reflexes */ 19:\n                    message.catlikeReflexes = reader.int32();\n                    break;\n                case /* int32 invigoration */ 20:\n                    message.invigoration = reader.int32();\n                    break;\n                case /* int32 serpents_swiftness */ 21:\n                    message.serpentsSwiftness = reader.int32();\n                    break;\n                case /* int32 longevity */ 22:\n                    message.longevity = reader.int32();\n                    break;\n                case /* bool the_beast_within */ 23:\n                    message.theBeastWithin = reader.bool();\n                    break;\n                case /* int32 cobra_strikes */ 24:\n                    message.cobraStrikes = reader.int32();\n                    break;\n                case /* int32 kindred_spirits */ 25:\n                    message.kindredSpirits = reader.int32();\n                    break;\n                case /* bool beast_mastery */ 26:\n                    message.beastMastery = reader.bool();\n                    break;\n                case /* int32 improved_concussive_shot */ 27:\n                    message.improvedConcussiveShot = reader.int32();\n                    break;\n                case /* int32 focused_aim */ 28:\n                    message.focusedAim = reader.int32();\n                    break;\n                case /* int32 lethal_shots */ 29:\n                    message.lethalShots = reader.int32();\n                    break;\n                case /* int32 careful_aim */ 30:\n                    message.carefulAim = reader.int32();\n                    break;\n                case /* int32 improved_hunters_mark */ 31:\n                    message.improvedHuntersMark = reader.int32();\n                    break;\n                case /* int32 mortal_shots */ 32:\n                    message.mortalShots = reader.int32();\n                    break;\n                case /* int32 go_for_the_throat */ 33:\n                    message.goForTheThroat = reader.int32();\n                    break;\n                case /* int32 improved_arcane_shot */ 34:\n                    message.improvedArcaneShot = reader.int32();\n                    break;\n                case /* bool aimed_shot */ 35:\n                    message.aimedShot = reader.bool();\n                    break;\n                case /* int32 rapid_killing */ 36:\n                    message.rapidKilling = reader.int32();\n                    break;\n                case /* int32 improved_stings */ 37:\n                    message.improvedStings = reader.int32();\n                    break;\n                case /* int32 efficiency */ 38:\n                    message.efficiency = reader.int32();\n                    break;\n                case /* int32 concussive_barrage */ 39:\n                    message.concussiveBarrage = reader.int32();\n                    break;\n                case /* bool readiness */ 40:\n                    message.readiness = reader.bool();\n                    break;\n                case /* int32 barrage */ 41:\n                    message.barrage = reader.int32();\n                    break;\n                case /* int32 combat_experience */ 42:\n                    message.combatExperience = reader.int32();\n                    break;\n                case /* int32 ranged_weapon_specialization */ 43:\n                    message.rangedWeaponSpecialization = reader.int32();\n                    break;\n                case /* int32 piercing_shots */ 44:\n                    message.piercingShots = reader.int32();\n                    break;\n                case /* bool trueshot_aura */ 45:\n                    message.trueshotAura = reader.bool();\n                    break;\n                case /* int32 improved_barrage */ 46:\n                    message.improvedBarrage = reader.int32();\n                    break;\n                case /* int32 master_marksman */ 47:\n                    message.masterMarksman = reader.int32();\n                    break;\n                case /* int32 rapid_recuperation */ 48:\n                    message.rapidRecuperation = reader.int32();\n                    break;\n                case /* int32 wild_quiver */ 49:\n                    message.wildQuiver = reader.int32();\n                    break;\n                case /* bool silencing_shot */ 50:\n                    message.silencingShot = reader.bool();\n                    break;\n                case /* int32 improved_steady_shot */ 51:\n                    message.improvedSteadyShot = reader.int32();\n                    break;\n                case /* int32 marked_for_death */ 52:\n                    message.markedForDeath = reader.int32();\n                    break;\n                case /* bool chimera_shot */ 53:\n                    message.chimeraShot = reader.bool();\n                    break;\n                case /* int32 improved_tracking */ 54:\n                    message.improvedTracking = reader.int32();\n                    break;\n                case /* int32 hawk_eye */ 55:\n                    message.hawkEye = reader.int32();\n                    break;\n                case /* int32 savage_strikes */ 56:\n                    message.savageStrikes = reader.int32();\n                    break;\n                case /* int32 surefooted */ 57:\n                    message.surefooted = reader.int32();\n                    break;\n                case /* int32 entrapment */ 58:\n                    message.entrapment = reader.int32();\n                    break;\n                case /* int32 trap_mastery */ 59:\n                    message.trapMastery = reader.int32();\n                    break;\n                case /* int32 survival_instincts */ 60:\n                    message.survivalInstincts = reader.int32();\n                    break;\n                case /* int32 survivalist */ 61:\n                    message.survivalist = reader.int32();\n                    break;\n                case /* bool scatter_shot */ 62:\n                    message.scatterShot = reader.bool();\n                    break;\n                case /* int32 deflection */ 63:\n                    message.deflection = reader.int32();\n                    break;\n                case /* int32 survival_tactics */ 64:\n                    message.survivalTactics = reader.int32();\n                    break;\n                case /* int32 t_n_t */ 65:\n                    message.tNT = reader.int32();\n                    break;\n                case /* int32 lock_and_load */ 66:\n                    message.lockAndLoad = reader.int32();\n                    break;\n                case /* int32 hunter_vs_wild */ 67:\n                    message.hunterVsWild = reader.int32();\n                    break;\n                case /* int32 killer_instinct */ 68:\n                    message.killerInstinct = reader.int32();\n                    break;\n                case /* bool counterattack */ 69:\n                    message.counterattack = reader.bool();\n                    break;\n                case /* int32 lightning_reflexes */ 70:\n                    message.lightningReflexes = reader.int32();\n                    break;\n                case /* int32 resourcefulness */ 71:\n                    message.resourcefulness = reader.int32();\n                    break;\n                case /* int32 expose_weakness */ 72:\n                    message.exposeWeakness = reader.int32();\n                    break;\n                case /* bool wyvern_sting */ 73:\n                    message.wyvernSting = reader.bool();\n                    break;\n                case /* int32 thrill_of_the_hunt */ 74:\n                    message.thrillOfTheHunt = reader.int32();\n                    break;\n                case /* int32 master_tactician */ 75:\n                    message.masterTactician = reader.int32();\n                    break;\n                case /* int32 noxious_stings */ 76:\n                    message.noxiousStings = reader.int32();\n                    break;\n                case /* int32 point_of_no_escape */ 77:\n                    message.pointOfNoEscape = reader.int32();\n                    break;\n                case /* bool black_arrow */ 78:\n                    message.blackArrow = reader.bool();\n                    break;\n                case /* int32 sniper_training */ 79:\n                    message.sniperTraining = reader.int32();\n                    break;\n                case /* int32 hunting_party */ 80:\n                    message.huntingParty = reader.int32();\n                    break;\n                case /* bool explosive_shot */ 81:\n                    message.explosiveShot = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HunterTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_aspect_of_the_hawk = 1; */\n        if (message.improvedAspectOfTheHawk !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedAspectOfTheHawk);\n        /* int32 endurance_training = 2; */\n        if (message.enduranceTraining !== 0)\n            writer.tag(2, WireType.Varint).int32(message.enduranceTraining);\n        /* int32 focused_fire = 3; */\n        if (message.focusedFire !== 0)\n            writer.tag(3, WireType.Varint).int32(message.focusedFire);\n        /* int32 improved_aspect_of_the_monkey = 4; */\n        if (message.improvedAspectOfTheMonkey !== 0)\n            writer.tag(4, WireType.Varint).int32(message.improvedAspectOfTheMonkey);\n        /* int32 thick_hide = 5; */\n        if (message.thickHide !== 0)\n            writer.tag(5, WireType.Varint).int32(message.thickHide);\n        /* int32 improved_revive_pet = 6; */\n        if (message.improvedRevivePet !== 0)\n            writer.tag(6, WireType.Varint).int32(message.improvedRevivePet);\n        /* int32 pathfinding = 7; */\n        if (message.pathfinding !== 0)\n            writer.tag(7, WireType.Varint).int32(message.pathfinding);\n        /* bool aspect_mastery = 8; */\n        if (message.aspectMastery !== false)\n            writer.tag(8, WireType.Varint).bool(message.aspectMastery);\n        /* int32 unleashed_fury = 9; */\n        if (message.unleashedFury !== 0)\n            writer.tag(9, WireType.Varint).int32(message.unleashedFury);\n        /* int32 improved_mend_pet = 10; */\n        if (message.improvedMendPet !== 0)\n            writer.tag(10, WireType.Varint).int32(message.improvedMendPet);\n        /* int32 ferocity = 11; */\n        if (message.ferocity !== 0)\n            writer.tag(11, WireType.Varint).int32(message.ferocity);\n        /* int32 spirit_bond = 12; */\n        if (message.spiritBond !== 0)\n            writer.tag(12, WireType.Varint).int32(message.spiritBond);\n        /* bool intimidation = 13; */\n        if (message.intimidation !== false)\n            writer.tag(13, WireType.Varint).bool(message.intimidation);\n        /* int32 bestial_discipline = 14; */\n        if (message.bestialDiscipline !== 0)\n            writer.tag(14, WireType.Varint).int32(message.bestialDiscipline);\n        /* int32 animal_handler = 15; */\n        if (message.animalHandler !== 0)\n            writer.tag(15, WireType.Varint).int32(message.animalHandler);\n        /* int32 frenzy = 16; */\n        if (message.frenzy !== 0)\n            writer.tag(16, WireType.Varint).int32(message.frenzy);\n        /* int32 ferocious_inspiration = 17; */\n        if (message.ferociousInspiration !== 0)\n            writer.tag(17, WireType.Varint).int32(message.ferociousInspiration);\n        /* bool bestial_wrath = 18; */\n        if (message.bestialWrath !== false)\n            writer.tag(18, WireType.Varint).bool(message.bestialWrath);\n        /* int32 catlike_reflexes = 19; */\n        if (message.catlikeReflexes !== 0)\n            writer.tag(19, WireType.Varint).int32(message.catlikeReflexes);\n        /* int32 invigoration = 20; */\n        if (message.invigoration !== 0)\n            writer.tag(20, WireType.Varint).int32(message.invigoration);\n        /* int32 serpents_swiftness = 21; */\n        if (message.serpentsSwiftness !== 0)\n            writer.tag(21, WireType.Varint).int32(message.serpentsSwiftness);\n        /* int32 longevity = 22; */\n        if (message.longevity !== 0)\n            writer.tag(22, WireType.Varint).int32(message.longevity);\n        /* bool the_beast_within = 23; */\n        if (message.theBeastWithin !== false)\n            writer.tag(23, WireType.Varint).bool(message.theBeastWithin);\n        /* int32 cobra_strikes = 24; */\n        if (message.cobraStrikes !== 0)\n            writer.tag(24, WireType.Varint).int32(message.cobraStrikes);\n        /* int32 kindred_spirits = 25; */\n        if (message.kindredSpirits !== 0)\n            writer.tag(25, WireType.Varint).int32(message.kindredSpirits);\n        /* bool beast_mastery = 26; */\n        if (message.beastMastery !== false)\n            writer.tag(26, WireType.Varint).bool(message.beastMastery);\n        /* int32 improved_concussive_shot = 27; */\n        if (message.improvedConcussiveShot !== 0)\n            writer.tag(27, WireType.Varint).int32(message.improvedConcussiveShot);\n        /* int32 focused_aim = 28; */\n        if (message.focusedAim !== 0)\n            writer.tag(28, WireType.Varint).int32(message.focusedAim);\n        /* int32 lethal_shots = 29; */\n        if (message.lethalShots !== 0)\n            writer.tag(29, WireType.Varint).int32(message.lethalShots);\n        /* int32 careful_aim = 30; */\n        if (message.carefulAim !== 0)\n            writer.tag(30, WireType.Varint).int32(message.carefulAim);\n        /* int32 improved_hunters_mark = 31; */\n        if (message.improvedHuntersMark !== 0)\n            writer.tag(31, WireType.Varint).int32(message.improvedHuntersMark);\n        /* int32 mortal_shots = 32; */\n        if (message.mortalShots !== 0)\n            writer.tag(32, WireType.Varint).int32(message.mortalShots);\n        /* int32 go_for_the_throat = 33; */\n        if (message.goForTheThroat !== 0)\n            writer.tag(33, WireType.Varint).int32(message.goForTheThroat);\n        /* int32 improved_arcane_shot = 34; */\n        if (message.improvedArcaneShot !== 0)\n            writer.tag(34, WireType.Varint).int32(message.improvedArcaneShot);\n        /* bool aimed_shot = 35; */\n        if (message.aimedShot !== false)\n            writer.tag(35, WireType.Varint).bool(message.aimedShot);\n        /* int32 rapid_killing = 36; */\n        if (message.rapidKilling !== 0)\n            writer.tag(36, WireType.Varint).int32(message.rapidKilling);\n        /* int32 improved_stings = 37; */\n        if (message.improvedStings !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedStings);\n        /* int32 efficiency = 38; */\n        if (message.efficiency !== 0)\n            writer.tag(38, WireType.Varint).int32(message.efficiency);\n        /* int32 concussive_barrage = 39; */\n        if (message.concussiveBarrage !== 0)\n            writer.tag(39, WireType.Varint).int32(message.concussiveBarrage);\n        /* bool readiness = 40; */\n        if (message.readiness !== false)\n            writer.tag(40, WireType.Varint).bool(message.readiness);\n        /* int32 barrage = 41; */\n        if (message.barrage !== 0)\n            writer.tag(41, WireType.Varint).int32(message.barrage);\n        /* int32 combat_experience = 42; */\n        if (message.combatExperience !== 0)\n            writer.tag(42, WireType.Varint).int32(message.combatExperience);\n        /* int32 ranged_weapon_specialization = 43; */\n        if (message.rangedWeaponSpecialization !== 0)\n            writer.tag(43, WireType.Varint).int32(message.rangedWeaponSpecialization);\n        /* int32 piercing_shots = 44; */\n        if (message.piercingShots !== 0)\n            writer.tag(44, WireType.Varint).int32(message.piercingShots);\n        /* bool trueshot_aura = 45; */\n        if (message.trueshotAura !== false)\n            writer.tag(45, WireType.Varint).bool(message.trueshotAura);\n        /* int32 improved_barrage = 46; */\n        if (message.improvedBarrage !== 0)\n            writer.tag(46, WireType.Varint).int32(message.improvedBarrage);\n        /* int32 master_marksman = 47; */\n        if (message.masterMarksman !== 0)\n            writer.tag(47, WireType.Varint).int32(message.masterMarksman);\n        /* int32 rapid_recuperation = 48; */\n        if (message.rapidRecuperation !== 0)\n            writer.tag(48, WireType.Varint).int32(message.rapidRecuperation);\n        /* int32 wild_quiver = 49; */\n        if (message.wildQuiver !== 0)\n            writer.tag(49, WireType.Varint).int32(message.wildQuiver);\n        /* bool silencing_shot = 50; */\n        if (message.silencingShot !== false)\n            writer.tag(50, WireType.Varint).bool(message.silencingShot);\n        /* int32 improved_steady_shot = 51; */\n        if (message.improvedSteadyShot !== 0)\n            writer.tag(51, WireType.Varint).int32(message.improvedSteadyShot);\n        /* int32 marked_for_death = 52; */\n        if (message.markedForDeath !== 0)\n            writer.tag(52, WireType.Varint).int32(message.markedForDeath);\n        /* bool chimera_shot = 53; */\n        if (message.chimeraShot !== false)\n            writer.tag(53, WireType.Varint).bool(message.chimeraShot);\n        /* int32 improved_tracking = 54; */\n        if (message.improvedTracking !== 0)\n            writer.tag(54, WireType.Varint).int32(message.improvedTracking);\n        /* int32 hawk_eye = 55; */\n        if (message.hawkEye !== 0)\n            writer.tag(55, WireType.Varint).int32(message.hawkEye);\n        /* int32 savage_strikes = 56; */\n        if (message.savageStrikes !== 0)\n            writer.tag(56, WireType.Varint).int32(message.savageStrikes);\n        /* int32 surefooted = 57; */\n        if (message.surefooted !== 0)\n            writer.tag(57, WireType.Varint).int32(message.surefooted);\n        /* int32 entrapment = 58; */\n        if (message.entrapment !== 0)\n            writer.tag(58, WireType.Varint).int32(message.entrapment);\n        /* int32 trap_mastery = 59; */\n        if (message.trapMastery !== 0)\n            writer.tag(59, WireType.Varint).int32(message.trapMastery);\n        /* int32 survival_instincts = 60; */\n        if (message.survivalInstincts !== 0)\n            writer.tag(60, WireType.Varint).int32(message.survivalInstincts);\n        /* int32 survivalist = 61; */\n        if (message.survivalist !== 0)\n            writer.tag(61, WireType.Varint).int32(message.survivalist);\n        /* bool scatter_shot = 62; */\n        if (message.scatterShot !== false)\n            writer.tag(62, WireType.Varint).bool(message.scatterShot);\n        /* int32 deflection = 63; */\n        if (message.deflection !== 0)\n            writer.tag(63, WireType.Varint).int32(message.deflection);\n        /* int32 survival_tactics = 64; */\n        if (message.survivalTactics !== 0)\n            writer.tag(64, WireType.Varint).int32(message.survivalTactics);\n        /* int32 t_n_t = 65; */\n        if (message.tNT !== 0)\n            writer.tag(65, WireType.Varint).int32(message.tNT);\n        /* int32 lock_and_load = 66; */\n        if (message.lockAndLoad !== 0)\n            writer.tag(66, WireType.Varint).int32(message.lockAndLoad);\n        /* int32 hunter_vs_wild = 67; */\n        if (message.hunterVsWild !== 0)\n            writer.tag(67, WireType.Varint).int32(message.hunterVsWild);\n        /* int32 killer_instinct = 68; */\n        if (message.killerInstinct !== 0)\n            writer.tag(68, WireType.Varint).int32(message.killerInstinct);\n        /* bool counterattack = 69; */\n        if (message.counterattack !== false)\n            writer.tag(69, WireType.Varint).bool(message.counterattack);\n        /* int32 lightning_reflexes = 70; */\n        if (message.lightningReflexes !== 0)\n            writer.tag(70, WireType.Varint).int32(message.lightningReflexes);\n        /* int32 resourcefulness = 71; */\n        if (message.resourcefulness !== 0)\n            writer.tag(71, WireType.Varint).int32(message.resourcefulness);\n        /* int32 expose_weakness = 72; */\n        if (message.exposeWeakness !== 0)\n            writer.tag(72, WireType.Varint).int32(message.exposeWeakness);\n        /* bool wyvern_sting = 73; */\n        if (message.wyvernSting !== false)\n            writer.tag(73, WireType.Varint).bool(message.wyvernSting);\n        /* int32 thrill_of_the_hunt = 74; */\n        if (message.thrillOfTheHunt !== 0)\n            writer.tag(74, WireType.Varint).int32(message.thrillOfTheHunt);\n        /* int32 master_tactician = 75; */\n        if (message.masterTactician !== 0)\n            writer.tag(75, WireType.Varint).int32(message.masterTactician);\n        /* int32 noxious_stings = 76; */\n        if (message.noxiousStings !== 0)\n            writer.tag(76, WireType.Varint).int32(message.noxiousStings);\n        /* int32 point_of_no_escape = 77; */\n        if (message.pointOfNoEscape !== 0)\n            writer.tag(77, WireType.Varint).int32(message.pointOfNoEscape);\n        /* bool black_arrow = 78; */\n        if (message.blackArrow !== false)\n            writer.tag(78, WireType.Varint).bool(message.blackArrow);\n        /* int32 sniper_training = 79; */\n        if (message.sniperTraining !== 0)\n            writer.tag(79, WireType.Varint).int32(message.sniperTraining);\n        /* int32 hunting_party = 80; */\n        if (message.huntingParty !== 0)\n            writer.tag(80, WireType.Varint).int32(message.huntingParty);\n        /* bool explosive_shot = 81; */\n        if (message.explosiveShot !== false)\n            writer.tag(81, WireType.Varint).bool(message.explosiveShot);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HunterTalents\n */\nexport const HunterTalents = new HunterTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HunterPetTalents$Type extends MessageType<HunterPetTalents> {\n    constructor() {\n        super(\"proto.HunterPetTalents\", [\n            { no: 1, name: \"cobra_reflexes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"dive\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"great_stamina\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"natural_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"boars_speed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"mobility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"owls_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"spiked_collar\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"culling_the_herd\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"lionhearted\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"carrion_feeder\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"great_resistance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"cornered\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"feeding_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"wolverine_bite\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"roar_of_recovery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"bullheaded\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"grace_of_the_mantis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"wild_hunt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"roar_of_sacrifice\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"improved_cower\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"bloodthirsty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"heart_of_the_pheonix\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"spiders_bite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"rabid\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"lick_your_wounds\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"call_of_the_wild\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"shark_attack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"charge\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"blood_of_the_rhino\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"pet_barding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"guard_dog\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"thunderstomp\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"last_stand\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"taunt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"intervene\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"silverback\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HunterPetTalents>): HunterPetTalents {\n        const message = { cobraReflexes: 0, dive: false, greatStamina: 0, naturalArmor: 0, boarsSpeed: false, mobility: 0, owlsFocus: 0, spikedCollar: 0, cullingTheHerd: 0, lionhearted: 0, carrionFeeder: false, greatResistance: 0, cornered: 0, feedingFrenzy: 0, wolverineBite: false, roarOfRecovery: false, bullheaded: false, graceOfTheMantis: 0, wildHunt: 0, roarOfSacrifice: false, improvedCower: 0, bloodthirsty: 0, heartOfThePheonix: false, spidersBite: 0, rabid: false, lickYourWounds: false, callOfTheWild: false, sharkAttack: 0, charge: false, bloodOfTheRhino: 0, petBarding: 0, guardDog: 0, thunderstomp: false, lastStand: false, taunt: false, intervene: false, silverback: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HunterPetTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HunterPetTalents): HunterPetTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 cobra_reflexes */ 1:\n                    message.cobraReflexes = reader.int32();\n                    break;\n                case /* bool dive */ 2:\n                    message.dive = reader.bool();\n                    break;\n                case /* int32 great_stamina */ 3:\n                    message.greatStamina = reader.int32();\n                    break;\n                case /* int32 natural_armor */ 4:\n                    message.naturalArmor = reader.int32();\n                    break;\n                case /* bool boars_speed */ 5:\n                    message.boarsSpeed = reader.bool();\n                    break;\n                case /* int32 mobility */ 6:\n                    message.mobility = reader.int32();\n                    break;\n                case /* int32 owls_focus */ 7:\n                    message.owlsFocus = reader.int32();\n                    break;\n                case /* int32 spiked_collar */ 8:\n                    message.spikedCollar = reader.int32();\n                    break;\n                case /* int32 culling_the_herd */ 9:\n                    message.cullingTheHerd = reader.int32();\n                    break;\n                case /* int32 lionhearted */ 10:\n                    message.lionhearted = reader.int32();\n                    break;\n                case /* bool carrion_feeder */ 11:\n                    message.carrionFeeder = reader.bool();\n                    break;\n                case /* int32 great_resistance */ 12:\n                    message.greatResistance = reader.int32();\n                    break;\n                case /* int32 cornered */ 13:\n                    message.cornered = reader.int32();\n                    break;\n                case /* int32 feeding_frenzy */ 14:\n                    message.feedingFrenzy = reader.int32();\n                    break;\n                case /* bool wolverine_bite */ 15:\n                    message.wolverineBite = reader.bool();\n                    break;\n                case /* bool roar_of_recovery */ 16:\n                    message.roarOfRecovery = reader.bool();\n                    break;\n                case /* bool bullheaded */ 17:\n                    message.bullheaded = reader.bool();\n                    break;\n                case /* int32 grace_of_the_mantis */ 18:\n                    message.graceOfTheMantis = reader.int32();\n                    break;\n                case /* int32 wild_hunt */ 19:\n                    message.wildHunt = reader.int32();\n                    break;\n                case /* bool roar_of_sacrifice */ 20:\n                    message.roarOfSacrifice = reader.bool();\n                    break;\n                case /* int32 improved_cower */ 21:\n                    message.improvedCower = reader.int32();\n                    break;\n                case /* int32 bloodthirsty */ 22:\n                    message.bloodthirsty = reader.int32();\n                    break;\n                case /* bool heart_of_the_pheonix */ 23:\n                    message.heartOfThePheonix = reader.bool();\n                    break;\n                case /* int32 spiders_bite */ 24:\n                    message.spidersBite = reader.int32();\n                    break;\n                case /* bool rabid */ 25:\n                    message.rabid = reader.bool();\n                    break;\n                case /* bool lick_your_wounds */ 26:\n                    message.lickYourWounds = reader.bool();\n                    break;\n                case /* bool call_of_the_wild */ 27:\n                    message.callOfTheWild = reader.bool();\n                    break;\n                case /* int32 shark_attack */ 28:\n                    message.sharkAttack = reader.int32();\n                    break;\n                case /* bool charge */ 29:\n                    message.charge = reader.bool();\n                    break;\n                case /* int32 blood_of_the_rhino */ 30:\n                    message.bloodOfTheRhino = reader.int32();\n                    break;\n                case /* int32 pet_barding */ 31:\n                    message.petBarding = reader.int32();\n                    break;\n                case /* int32 guard_dog */ 32:\n                    message.guardDog = reader.int32();\n                    break;\n                case /* bool thunderstomp */ 33:\n                    message.thunderstomp = reader.bool();\n                    break;\n                case /* bool last_stand */ 34:\n                    message.lastStand = reader.bool();\n                    break;\n                case /* bool taunt */ 35:\n                    message.taunt = reader.bool();\n                    break;\n                case /* bool intervene */ 36:\n                    message.intervene = reader.bool();\n                    break;\n                case /* int32 silverback */ 37:\n                    message.silverback = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HunterPetTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 cobra_reflexes = 1; */\n        if (message.cobraReflexes !== 0)\n            writer.tag(1, WireType.Varint).int32(message.cobraReflexes);\n        /* bool dive = 2; */\n        if (message.dive !== false)\n            writer.tag(2, WireType.Varint).bool(message.dive);\n        /* int32 great_stamina = 3; */\n        if (message.greatStamina !== 0)\n            writer.tag(3, WireType.Varint).int32(message.greatStamina);\n        /* int32 natural_armor = 4; */\n        if (message.naturalArmor !== 0)\n            writer.tag(4, WireType.Varint).int32(message.naturalArmor);\n        /* bool boars_speed = 5; */\n        if (message.boarsSpeed !== false)\n            writer.tag(5, WireType.Varint).bool(message.boarsSpeed);\n        /* int32 mobility = 6; */\n        if (message.mobility !== 0)\n            writer.tag(6, WireType.Varint).int32(message.mobility);\n        /* int32 owls_focus = 7; */\n        if (message.owlsFocus !== 0)\n            writer.tag(7, WireType.Varint).int32(message.owlsFocus);\n        /* int32 spiked_collar = 8; */\n        if (message.spikedCollar !== 0)\n            writer.tag(8, WireType.Varint).int32(message.spikedCollar);\n        /* int32 culling_the_herd = 9; */\n        if (message.cullingTheHerd !== 0)\n            writer.tag(9, WireType.Varint).int32(message.cullingTheHerd);\n        /* int32 lionhearted = 10; */\n        if (message.lionhearted !== 0)\n            writer.tag(10, WireType.Varint).int32(message.lionhearted);\n        /* bool carrion_feeder = 11; */\n        if (message.carrionFeeder !== false)\n            writer.tag(11, WireType.Varint).bool(message.carrionFeeder);\n        /* int32 great_resistance = 12; */\n        if (message.greatResistance !== 0)\n            writer.tag(12, WireType.Varint).int32(message.greatResistance);\n        /* int32 cornered = 13; */\n        if (message.cornered !== 0)\n            writer.tag(13, WireType.Varint).int32(message.cornered);\n        /* int32 feeding_frenzy = 14; */\n        if (message.feedingFrenzy !== 0)\n            writer.tag(14, WireType.Varint).int32(message.feedingFrenzy);\n        /* bool wolverine_bite = 15; */\n        if (message.wolverineBite !== false)\n            writer.tag(15, WireType.Varint).bool(message.wolverineBite);\n        /* bool roar_of_recovery = 16; */\n        if (message.roarOfRecovery !== false)\n            writer.tag(16, WireType.Varint).bool(message.roarOfRecovery);\n        /* bool bullheaded = 17; */\n        if (message.bullheaded !== false)\n            writer.tag(17, WireType.Varint).bool(message.bullheaded);\n        /* int32 grace_of_the_mantis = 18; */\n        if (message.graceOfTheMantis !== 0)\n            writer.tag(18, WireType.Varint).int32(message.graceOfTheMantis);\n        /* int32 wild_hunt = 19; */\n        if (message.wildHunt !== 0)\n            writer.tag(19, WireType.Varint).int32(message.wildHunt);\n        /* bool roar_of_sacrifice = 20; */\n        if (message.roarOfSacrifice !== false)\n            writer.tag(20, WireType.Varint).bool(message.roarOfSacrifice);\n        /* int32 improved_cower = 21; */\n        if (message.improvedCower !== 0)\n            writer.tag(21, WireType.Varint).int32(message.improvedCower);\n        /* int32 bloodthirsty = 22; */\n        if (message.bloodthirsty !== 0)\n            writer.tag(22, WireType.Varint).int32(message.bloodthirsty);\n        /* bool heart_of_the_pheonix = 23; */\n        if (message.heartOfThePheonix !== false)\n            writer.tag(23, WireType.Varint).bool(message.heartOfThePheonix);\n        /* int32 spiders_bite = 24; */\n        if (message.spidersBite !== 0)\n            writer.tag(24, WireType.Varint).int32(message.spidersBite);\n        /* bool rabid = 25; */\n        if (message.rabid !== false)\n            writer.tag(25, WireType.Varint).bool(message.rabid);\n        /* bool lick_your_wounds = 26; */\n        if (message.lickYourWounds !== false)\n            writer.tag(26, WireType.Varint).bool(message.lickYourWounds);\n        /* bool call_of_the_wild = 27; */\n        if (message.callOfTheWild !== false)\n            writer.tag(27, WireType.Varint).bool(message.callOfTheWild);\n        /* int32 shark_attack = 28; */\n        if (message.sharkAttack !== 0)\n            writer.tag(28, WireType.Varint).int32(message.sharkAttack);\n        /* bool charge = 29; */\n        if (message.charge !== false)\n            writer.tag(29, WireType.Varint).bool(message.charge);\n        /* int32 blood_of_the_rhino = 30; */\n        if (message.bloodOfTheRhino !== 0)\n            writer.tag(30, WireType.Varint).int32(message.bloodOfTheRhino);\n        /* int32 pet_barding = 31; */\n        if (message.petBarding !== 0)\n            writer.tag(31, WireType.Varint).int32(message.petBarding);\n        /* int32 guard_dog = 32; */\n        if (message.guardDog !== 0)\n            writer.tag(32, WireType.Varint).int32(message.guardDog);\n        /* bool thunderstomp = 33; */\n        if (message.thunderstomp !== false)\n            writer.tag(33, WireType.Varint).bool(message.thunderstomp);\n        /* bool last_stand = 34; */\n        if (message.lastStand !== false)\n            writer.tag(34, WireType.Varint).bool(message.lastStand);\n        /* bool taunt = 35; */\n        if (message.taunt !== false)\n            writer.tag(35, WireType.Varint).bool(message.taunt);\n        /* bool intervene = 36; */\n        if (message.intervene !== false)\n            writer.tag(36, WireType.Varint).bool(message.intervene);\n        /* int32 silverback = 37; */\n        if (message.silverback !== 0)\n            writer.tag(37, WireType.Varint).int32(message.silverback);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HunterPetTalents\n */\nexport const HunterPetTalents = new HunterPetTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Hunter$Type extends MessageType<Hunter> {\n    constructor() {\n        super(\"proto.Hunter\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Hunter_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => HunterTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Hunter_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Hunter>): Hunter {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Hunter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hunter): Hunter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Hunter.Rotation rotation */ 1:\n                    message.rotation = Hunter_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.HunterTalents talents */ 2:\n                    message.talents = HunterTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.Hunter.Options options */ 3:\n                    message.options = Hunter_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Hunter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Hunter.Rotation rotation = 1; */\n        if (message.rotation)\n            Hunter_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.HunterTalents talents = 2; */\n        if (message.talents)\n            HunterTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Hunter.Options options = 3; */\n        if (message.options)\n            Hunter_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Hunter\n */\nexport const Hunter = new Hunter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Hunter_Rotation$Type extends MessageType<Hunter_Rotation> {\n    constructor() {\n        super(\"proto.Hunter.Rotation\", [\n            { no: 9, name: \"type\", kind: \"enum\", T: () => [\"proto.Hunter.Rotation.RotationType\", Hunter_Rotation_RotationType] },\n            { no: 5, name: \"sting\", kind: \"enum\", T: () => [\"proto.Hunter.Rotation.StingType\", Hunter_Rotation_StingType] },\n            { no: 1, name: \"trap_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"time_to_trap_weave_ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation },\n            { no: 6, name: \"viper_start_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"viper_stop_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Hunter_Rotation>): Hunter_Rotation {\n        const message = { type: 0, sting: 0, trapWeave: false, timeToTrapWeaveMs: 0, viperStartManaPercent: 0, viperStopManaPercent: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Hunter_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hunter_Rotation): Hunter_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Hunter.Rotation.RotationType type */ 9:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.Hunter.Rotation.StingType sting */ 5:\n                    message.sting = reader.int32();\n                    break;\n                case /* bool trap_weave */ 1:\n                    message.trapWeave = reader.bool();\n                    break;\n                case /* double time_to_trap_weave_ms */ 2:\n                    message.timeToTrapWeaveMs = reader.double();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 8:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                case /* double viper_start_mana_percent */ 6:\n                    message.viperStartManaPercent = reader.double();\n                    break;\n                case /* double viper_stop_mana_percent */ 7:\n                    message.viperStopManaPercent = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Hunter_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Hunter.Rotation.RotationType type = 9; */\n        if (message.type !== 0)\n            writer.tag(9, WireType.Varint).int32(message.type);\n        /* proto.Hunter.Rotation.StingType sting = 5; */\n        if (message.sting !== 0)\n            writer.tag(5, WireType.Varint).int32(message.sting);\n        /* bool trap_weave = 1; */\n        if (message.trapWeave !== false)\n            writer.tag(1, WireType.Varint).bool(message.trapWeave);\n        /* double time_to_trap_weave_ms = 2; */\n        if (message.timeToTrapWeaveMs !== 0)\n            writer.tag(2, WireType.Bit64).double(message.timeToTrapWeaveMs);\n        /* proto.CustomRotation custom_rotation = 8; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* double viper_start_mana_percent = 6; */\n        if (message.viperStartManaPercent !== 0)\n            writer.tag(6, WireType.Bit64).double(message.viperStartManaPercent);\n        /* double viper_stop_mana_percent = 7; */\n        if (message.viperStopManaPercent !== 0)\n            writer.tag(7, WireType.Bit64).double(message.viperStopManaPercent);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Hunter.Rotation\n */\nexport const Hunter_Rotation = new Hunter_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Hunter_Options$Type extends MessageType<Hunter_Options> {\n    constructor() {\n        super(\"proto.Hunter.Options\", [\n            { no: 1, name: \"ammo\", kind: \"enum\", T: () => [\"proto.Hunter.Options.Ammo\", Hunter_Options_Ammo] },\n            { no: 2, name: \"pet_type\", kind: \"enum\", T: () => [\"proto.Hunter.Options.PetType\", Hunter_Options_PetType] },\n            { no: 3, name: \"pet_talents\", kind: \"message\", T: () => HunterPetTalents },\n            { no: 4, name: \"pet_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"sniper_training_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_hunters_mark\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Hunter_Options>): Hunter_Options {\n        const message = { ammo: 0, petType: 0, petUptime: 0, sniperTrainingUptime: 0, useHuntersMark: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Hunter_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hunter_Options): Hunter_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Hunter.Options.Ammo ammo */ 1:\n                    message.ammo = reader.int32();\n                    break;\n                case /* proto.Hunter.Options.PetType pet_type */ 2:\n                    message.petType = reader.int32();\n                    break;\n                case /* proto.HunterPetTalents pet_talents */ 3:\n                    message.petTalents = HunterPetTalents.internalBinaryRead(reader, reader.uint32(), options, message.petTalents);\n                    break;\n                case /* double pet_uptime */ 4:\n                    message.petUptime = reader.double();\n                    break;\n                case /* double sniper_training_uptime */ 7:\n                    message.sniperTrainingUptime = reader.double();\n                    break;\n                case /* bool use_hunters_mark */ 5:\n                    message.useHuntersMark = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Hunter_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Hunter.Options.Ammo ammo = 1; */\n        if (message.ammo !== 0)\n            writer.tag(1, WireType.Varint).int32(message.ammo);\n        /* proto.Hunter.Options.PetType pet_type = 2; */\n        if (message.petType !== 0)\n            writer.tag(2, WireType.Varint).int32(message.petType);\n        /* proto.HunterPetTalents pet_talents = 3; */\n        if (message.petTalents)\n            HunterPetTalents.internalBinaryWrite(message.petTalents, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* double pet_uptime = 4; */\n        if (message.petUptime !== 0)\n            writer.tag(4, WireType.Bit64).double(message.petUptime);\n        /* double sniper_training_uptime = 7; */\n        if (message.sniperTrainingUptime !== 0)\n            writer.tag(7, WireType.Bit64).double(message.sniperTrainingUptime);\n        /* bool use_hunters_mark = 5; */\n        if (message.useHuntersMark !== false)\n            writer.tag(5, WireType.Varint).bool(message.useHuntersMark);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Hunter.Options\n */\nexport const Hunter_Options = new Hunter_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"druid.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidTarget } from \"./common\";\n/**\n * @generated from protobuf message proto.DruidTalents\n */\nexport interface DruidTalents {\n    /**\n     * Balance\n     *\n     * @generated from protobuf field: int32 starlight_wrath = 1;\n     */\n    starlightWrath: number;\n    /**\n     * @generated from protobuf field: int32 genesis = 2;\n     */\n    genesis: number;\n    /**\n     * @generated from protobuf field: int32 moonglow = 3;\n     */\n    moonglow: number;\n    /**\n     * @generated from protobuf field: int32 natures_majesty = 4;\n     */\n    naturesMajesty: number;\n    /**\n     * @generated from protobuf field: int32 improved_moonfire = 5;\n     */\n    improvedMoonfire: number;\n    /**\n     * @generated from protobuf field: int32 brambles = 6;\n     */\n    brambles: number;\n    /**\n     * @generated from protobuf field: int32 natures_grace = 7;\n     */\n    naturesGrace: number;\n    /**\n     * @generated from protobuf field: bool natures_splendor = 8;\n     */\n    naturesSplendor: boolean;\n    /**\n     * @generated from protobuf field: int32 natures_reach = 9;\n     */\n    naturesReach: number;\n    /**\n     * @generated from protobuf field: int32 vengeance = 10;\n     */\n    vengeance: number;\n    /**\n     * @generated from protobuf field: int32 celestial_focus = 11;\n     */\n    celestialFocus: number;\n    /**\n     * @generated from protobuf field: int32 lunar_guidance = 12;\n     */\n    lunarGuidance: number;\n    /**\n     * @generated from protobuf field: bool insect_swarm = 13;\n     */\n    insectSwarm: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_insect_swarm = 14;\n     */\n    improvedInsectSwarm: number;\n    /**\n     * @generated from protobuf field: int32 dreamstate = 15;\n     */\n    dreamstate: number;\n    /**\n     * @generated from protobuf field: int32 moonfury = 16;\n     */\n    moonfury: number;\n    /**\n     * @generated from protobuf field: int32 balance_of_power = 17;\n     */\n    balanceOfPower: number;\n    /**\n     * @generated from protobuf field: bool moonkin_form = 18;\n     */\n    moonkinForm: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_moonkin_form = 19;\n     */\n    improvedMoonkinForm: number;\n    /**\n     * @generated from protobuf field: int32 improved_faerie_fire = 20;\n     */\n    improvedFaerieFire: number;\n    /**\n     * @generated from protobuf field: int32 owlkin_frenzy = 21;\n     */\n    owlkinFrenzy: number;\n    /**\n     * @generated from protobuf field: int32 wrath_of_cenarius = 22;\n     */\n    wrathOfCenarius: number;\n    /**\n     * @generated from protobuf field: int32 eclipse = 23;\n     */\n    eclipse: number;\n    /**\n     * @generated from protobuf field: bool typhoon = 24;\n     */\n    typhoon: boolean;\n    /**\n     * @generated from protobuf field: bool force_of_nature = 25;\n     */\n    forceOfNature: boolean;\n    /**\n     * @generated from protobuf field: int32 gale_winds = 26;\n     */\n    galeWinds: number;\n    /**\n     * @generated from protobuf field: int32 earth_and_moon = 27;\n     */\n    earthAndMoon: number;\n    /**\n     * @generated from protobuf field: bool starfall = 28;\n     */\n    starfall: boolean;\n    /**\n     * Feral Combat\n     *\n     * @generated from protobuf field: int32 ferocity = 29;\n     */\n    ferocity: number;\n    /**\n     * @generated from protobuf field: int32 feral_aggression = 30;\n     */\n    feralAggression: number;\n    /**\n     * @generated from protobuf field: int32 feral_instinct = 31;\n     */\n    feralInstinct: number;\n    /**\n     * @generated from protobuf field: int32 savage_fury = 32;\n     */\n    savageFury: number;\n    /**\n     * @generated from protobuf field: int32 thick_hide = 33;\n     */\n    thickHide: number;\n    /**\n     * @generated from protobuf field: int32 feral_swiftness = 34;\n     */\n    feralSwiftness: number;\n    /**\n     * @generated from protobuf field: bool survival_instincts = 35;\n     */\n    survivalInstincts: boolean;\n    /**\n     * @generated from protobuf field: int32 sharpened_claws = 36;\n     */\n    sharpenedClaws: number;\n    /**\n     * @generated from protobuf field: int32 shredding_attacks = 37;\n     */\n    shreddingAttacks: number;\n    /**\n     * @generated from protobuf field: int32 predatory_strikes = 38;\n     */\n    predatoryStrikes: number;\n    /**\n     * @generated from protobuf field: int32 primal_fury = 39;\n     */\n    primalFury: number;\n    /**\n     * @generated from protobuf field: int32 primal_precision = 40;\n     */\n    primalPrecision: number;\n    /**\n     * @generated from protobuf field: int32 brutal_impact = 41;\n     */\n    brutalImpact: number;\n    /**\n     * @generated from protobuf field: bool feral_charge = 42;\n     */\n    feralCharge: boolean;\n    /**\n     * @generated from protobuf field: int32 nurturing_instinct = 43;\n     */\n    nurturingInstinct: number;\n    /**\n     * @generated from protobuf field: int32 natural_reaction = 44;\n     */\n    naturalReaction: number;\n    /**\n     * @generated from protobuf field: int32 heart_of_the_wild = 45;\n     */\n    heartOfTheWild: number;\n    /**\n     * @generated from protobuf field: int32 survival_of_the_fittest = 46;\n     */\n    survivalOfTheFittest: number;\n    /**\n     * @generated from protobuf field: bool leader_of_the_pack = 47;\n     */\n    leaderOfThePack: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_leader_of_the_pack = 48;\n     */\n    improvedLeaderOfThePack: number;\n    /**\n     * @generated from protobuf field: int32 primal_tenacity = 49;\n     */\n    primalTenacity: number;\n    /**\n     * @generated from protobuf field: int32 protector_of_the_pack = 50;\n     */\n    protectorOfThePack: number;\n    /**\n     * @generated from protobuf field: int32 predatory_instincts = 51;\n     */\n    predatoryInstincts: number;\n    /**\n     * @generated from protobuf field: int32 infected_wounds = 52;\n     */\n    infectedWounds: number;\n    /**\n     * @generated from protobuf field: int32 king_of_the_jungle = 53;\n     */\n    kingOfTheJungle: number;\n    /**\n     * @generated from protobuf field: bool mangle = 54;\n     */\n    mangle: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_mangle = 55;\n     */\n    improvedMangle: number;\n    /**\n     * @generated from protobuf field: int32 rend_and_tear = 56;\n     */\n    rendAndTear: number;\n    /**\n     * @generated from protobuf field: bool primal_gore = 57;\n     */\n    primalGore: boolean;\n    /**\n     * @generated from protobuf field: bool berserk = 58;\n     */\n    berserk: boolean;\n    /**\n     * Restoration\n     *\n     * @generated from protobuf field: int32 improved_mark_of_the_wild = 59;\n     */\n    improvedMarkOfTheWild: number;\n    /**\n     * @generated from protobuf field: int32 natures_focus = 60;\n     */\n    naturesFocus: number;\n    /**\n     * @generated from protobuf field: int32 furor = 61;\n     */\n    furor: number;\n    /**\n     * @generated from protobuf field: int32 naturalist = 62;\n     */\n    naturalist: number;\n    /**\n     * @generated from protobuf field: int32 subtlety = 63;\n     */\n    subtlety: number;\n    /**\n     * @generated from protobuf field: int32 natural_shapeshifter = 64;\n     */\n    naturalShapeshifter: number;\n    /**\n     * @generated from protobuf field: int32 intensity = 65;\n     */\n    intensity: number;\n    /**\n     * @generated from protobuf field: bool omen_of_clarity = 66;\n     */\n    omenOfClarity: boolean;\n    /**\n     * @generated from protobuf field: int32 master_shapeshifter = 67;\n     */\n    masterShapeshifter: number;\n    /**\n     * @generated from protobuf field: int32 tranquil_spirit = 68;\n     */\n    tranquilSpirit: number;\n    /**\n     * @generated from protobuf field: int32 improved_rejuvenation = 69;\n     */\n    improvedRejuvenation: number;\n    /**\n     * @generated from protobuf field: bool natures_swiftness = 70;\n     */\n    naturesSwiftness: boolean;\n    /**\n     * @generated from protobuf field: int32 gift_of_nature = 71;\n     */\n    giftOfNature: number;\n    /**\n     * @generated from protobuf field: int32 improved_tranquility = 72;\n     */\n    improvedTranquility: number;\n    /**\n     * @generated from protobuf field: int32 empowered_touch = 73;\n     */\n    empoweredTouch: number;\n    /**\n     * @generated from protobuf field: int32 natures_bounty = 74;\n     */\n    naturesBounty: number;\n    /**\n     * @generated from protobuf field: int32 living_spirit = 75;\n     */\n    livingSpirit: number;\n    /**\n     * @generated from protobuf field: bool swiftmend = 76;\n     */\n    swiftmend: boolean;\n    /**\n     * @generated from protobuf field: int32 natural_perfection = 77;\n     */\n    naturalPerfection: number;\n    /**\n     * @generated from protobuf field: int32 empowered_rejuvenation = 78;\n     */\n    empoweredRejuvenation: number;\n    /**\n     * @generated from protobuf field: int32 living_seed = 79;\n     */\n    livingSeed: number;\n    /**\n     * @generated from protobuf field: int32 revitalize = 80;\n     */\n    revitalize: number;\n    /**\n     * @generated from protobuf field: bool tree_of_life = 81;\n     */\n    treeOfLife: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_tree_of_life = 82;\n     */\n    improvedTreeOfLife: number;\n    /**\n     * @generated from protobuf field: int32 improved_barkskin = 83;\n     */\n    improvedBarkskin: number;\n    /**\n     * @generated from protobuf field: int32 gift_of_the_earthmother = 84;\n     */\n    giftOfTheEarthmother: number;\n    /**\n     * @generated from protobuf field: bool wild_growth = 85;\n     */\n    wildGrowth: boolean;\n}\n/**\n * @generated from protobuf message proto.BalanceDruid\n */\nexport interface BalanceDruid {\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Rotation rotation = 1;\n     */\n    rotation?: BalanceDruid_Rotation;\n    /**\n     * @generated from protobuf field: proto.DruidTalents talents = 2;\n     */\n    talents?: DruidTalents;\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Options options = 3;\n     */\n    options?: BalanceDruid_Options;\n}\n/**\n * @generated from protobuf message proto.BalanceDruid.Rotation\n */\nexport interface BalanceDruid_Rotation {\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Rotation.Type type = 1;\n     */\n    type: BalanceDruid_Rotation_Type;\n    /**\n     * @generated from protobuf field: bool use_battle_res = 2;\n     */\n    useBattleRes: boolean;\n    /**\n     * @generated from protobuf field: bool use_is = 3;\n     */\n    useIs: boolean;\n    /**\n     * @generated from protobuf field: bool use_mf = 4;\n     */\n    useMf: boolean;\n    /**\n     * @generated from protobuf field: bool use_wrath = 5;\n     */\n    useWrath: boolean;\n    /**\n     * @generated from protobuf field: bool use_starfire = 6;\n     */\n    useStarfire: boolean;\n    /**\n     * @generated from protobuf field: bool use_typhoon = 7;\n     */\n    useTyphoon: boolean;\n    /**\n     * @generated from protobuf field: bool use_hurricane = 8;\n     */\n    useHurricane: boolean;\n    /**\n     * @generated from protobuf field: float mf_inside_eclipse_threshold = 9;\n     */\n    mfInsideEclipseThreshold: number;\n    /**\n     * @generated from protobuf field: float is_inside_eclipse_threshold = 10;\n     */\n    isInsideEclipseThreshold: number;\n    /**\n     * @generated from protobuf field: bool use_smart_cooldowns = 11;\n     */\n    useSmartCooldowns: boolean;\n    /**\n     * @generated from protobuf field: bool maximize_mf_uptime = 12;\n     */\n    maximizeMfUptime: boolean;\n    /**\n     * @generated from protobuf field: bool maximize_is_uptime = 13;\n     */\n    maximizeIsUptime: boolean;\n    /**\n     * @generated from protobuf field: bool maintain_faerie_fire = 14;\n     */\n    maintainFaerieFire: boolean;\n}\n/**\n * @generated from protobuf enum proto.BalanceDruid.Rotation.Type\n */\nexport enum BalanceDruid_Rotation_Type {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Adaptive = 1;\n     */\n    Adaptive = 1,\n    /**\n     * @generated from protobuf enum value: Manual = 2;\n     */\n    Manual = 2\n}\n/**\n * @generated from protobuf message proto.BalanceDruid.Options\n */\nexport interface BalanceDruid_Options {\n    /**\n     * @generated from protobuf field: proto.RaidTarget innervate_target = 1;\n     */\n    innervateTarget?: RaidTarget;\n}\n/**\n * @generated from protobuf message proto.FeralDruid\n */\nexport interface FeralDruid {\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation rotation = 1;\n     */\n    rotation?: FeralDruid_Rotation;\n    /**\n     * @generated from protobuf field: proto.DruidTalents talents = 2;\n     */\n    talents?: DruidTalents;\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Options options = 3;\n     */\n    options?: FeralDruid_Options;\n}\n/**\n * @generated from protobuf message proto.FeralDruid.Rotation\n */\nexport interface FeralDruid_Rotation {\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation.BearweaveType bear_weave_type = 1;\n     */\n    bearWeaveType: FeralDruid_Rotation_BearweaveType;\n    /**\n     * @generated from protobuf field: bool maintain_faerie_fire = 2;\n     */\n    maintainFaerieFire: boolean;\n    /**\n     * @generated from protobuf field: int32 min_combos_for_rip = 3;\n     */\n    minCombosForRip: number;\n    /**\n     * @generated from protobuf field: bool use_rake = 4;\n     */\n    useRake: boolean;\n    /**\n     * @generated from protobuf field: bool use_bite = 5;\n     */\n    useBite: boolean;\n    /**\n     * @generated from protobuf field: bool mangle_spam = 6;\n     */\n    mangleSpam: boolean;\n    /**\n     * @generated from protobuf field: float bite_time = 7;\n     */\n    biteTime: number;\n    /**\n     * @generated from protobuf field: int32 min_combos_for_bite = 8;\n     */\n    minCombosForBite: number;\n    /**\n     * @generated from protobuf field: int32 berserk_bite_thresh = 9;\n     */\n    berserkBiteThresh: number;\n    /**\n     * @generated from protobuf field: bool powerbear = 10;\n     */\n    powerbear: boolean;\n    /**\n     * @generated from protobuf field: float max_roar_offset = 11;\n     */\n    maxRoarOffset: number;\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation.BiteModeType bite_mode_type = 12;\n     */\n    biteModeType: FeralDruid_Rotation_BiteModeType;\n    /**\n     * @generated from protobuf field: float hot_uptime = 13;\n     */\n    hotUptime: number;\n}\n/**\n * @generated from protobuf enum proto.FeralDruid.Rotation.BearweaveType\n */\nexport enum FeralDruid_Rotation_BearweaveType {\n    /**\n     * @generated from protobuf enum value: None = 0;\n     */\n    None = 0,\n    /**\n     * @generated from protobuf enum value: Mangle = 1;\n     */\n    Mangle = 1,\n    /**\n     * @generated from protobuf enum value: Lacerate = 2;\n     */\n    Lacerate = 2\n}\n/**\n * @generated from protobuf enum proto.FeralDruid.Rotation.BiteModeType\n */\nexport enum FeralDruid_Rotation_BiteModeType {\n    /**\n     * @generated from protobuf enum value: Emperical = 0;\n     */\n    Emperical = 0,\n    /**\n     * @generated from protobuf enum value: Analytical = 1;\n     */\n    Analytical = 1\n}\n/**\n * @generated from protobuf message proto.FeralDruid.Options\n */\nexport interface FeralDruid_Options {\n    /**\n     * @generated from protobuf field: proto.RaidTarget innervate_target = 1;\n     */\n    innervateTarget?: RaidTarget;\n    /**\n     * @generated from protobuf field: int32 latency_ms = 2;\n     */\n    latencyMs: number;\n    /**\n     * @generated from protobuf field: bool prepop_ooc = 3;\n     */\n    prepopOoc: boolean;\n    /**\n     * @generated from protobuf field: bool assume_bleed_active = 4;\n     */\n    assumeBleedActive: boolean;\n}\n/**\n * @generated from protobuf message proto.FeralTankDruid\n */\nexport interface FeralTankDruid {\n    /**\n     * @generated from protobuf field: proto.FeralTankDruid.Rotation rotation = 1;\n     */\n    rotation?: FeralTankDruid_Rotation;\n    /**\n     * @generated from protobuf field: proto.DruidTalents talents = 2;\n     */\n    talents?: DruidTalents;\n    /**\n     * @generated from protobuf field: proto.FeralTankDruid.Options options = 3;\n     */\n    options?: FeralTankDruid_Options;\n}\n/**\n * @generated from protobuf message proto.FeralTankDruid.Rotation\n */\nexport interface FeralTankDruid_Rotation {\n    /**\n     * Minimum rage to queue HS or Cleave.\n     *\n     * @generated from protobuf field: int32 maul_rage_threshold = 1;\n     */\n    maulRageThreshold: number;\n    /**\n     * @generated from protobuf field: bool maintain_demoralizing_roar = 2;\n     */\n    maintainDemoralizingRoar: boolean;\n    /**\n     * @generated from protobuf field: bool maintain_faerie_fire = 3;\n     */\n    maintainFaerieFire: boolean;\n    /**\n     * @generated from protobuf field: proto.FeralTankDruid.Rotation.Swipe swipe = 4;\n     */\n    swipe: FeralTankDruid_Rotation_Swipe;\n    /**\n     * @generated from protobuf field: double swipe_ap_threshold = 5;\n     */\n    swipeApThreshold: number;\n}\n/**\n * @generated from protobuf enum proto.FeralTankDruid.Rotation.Swipe\n */\nexport enum FeralTankDruid_Rotation_Swipe {\n    /**\n     * @generated from protobuf enum value: SwipeNone = 0;\n     */\n    SwipeNone = 0,\n    /**\n     * @generated from protobuf enum value: SwipeWithEnoughAP = 1;\n     */\n    SwipeWithEnoughAP = 1,\n    /**\n     * @generated from protobuf enum value: SwipeSpam = 2;\n     */\n    SwipeSpam = 2\n}\n/**\n * @generated from protobuf message proto.FeralTankDruid.Options\n */\nexport interface FeralTankDruid_Options {\n    /**\n     * @generated from protobuf field: proto.RaidTarget innervate_target = 1;\n     */\n    innervateTarget?: RaidTarget;\n    /**\n     * @generated from protobuf field: double starting_rage = 2;\n     */\n    startingRage: number;\n}\n/**\n * @generated from protobuf enum proto.DruidMajorGlyph\n */\nexport enum DruidMajorGlyph {\n    /**\n     * @generated from protobuf enum value: DruidMajorGlyphNone = 0;\n     */\n    DruidMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBarkskin = 45623;\n     */\n    GlyphOfBarkskin = 45623,\n    /**\n     * @generated from protobuf enum value: GlyphOfBerserk = 45601;\n     */\n    GlyphOfBerserk = 45601,\n    /**\n     * @generated from protobuf enum value: GlyphOfClaw = 48720;\n     */\n    GlyphOfClaw = 48720,\n    /**\n     * @generated from protobuf enum value: GlyphOfEntanglingRoots = 40924;\n     */\n    GlyphOfEntanglingRoots = 40924,\n    /**\n     * @generated from protobuf enum value: GlyphOfFocus = 44928;\n     */\n    GlyphOfFocus = 44928,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrenziedRegeneration = 40896;\n     */\n    GlyphOfFrenziedRegeneration = 40896,\n    /**\n     * @generated from protobuf enum value: GlyphOfGrowling = 40899;\n     */\n    GlyphOfGrowling = 40899,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealingTouch = 40914;\n     */\n    GlyphOfHealingTouch = 40914,\n    /**\n     * @generated from protobuf enum value: GlyphOfHurricane = 40920;\n     */\n    GlyphOfHurricane = 40920,\n    /**\n     * @generated from protobuf enum value: GlyphOfInnervate = 40908;\n     */\n    GlyphOfInnervate = 40908,\n    /**\n     * @generated from protobuf enum value: GlyphOfInsectSwarm = 40919;\n     */\n    GlyphOfInsectSwarm = 40919,\n    /**\n     * @generated from protobuf enum value: GlyphOfLifebloom = 40915;\n     */\n    GlyphOfLifebloom = 40915,\n    /**\n     * @generated from protobuf enum value: GlyphOfMangle = 40900;\n     */\n    GlyphOfMangle = 40900,\n    /**\n     * @generated from protobuf enum value: GlyphOfMaul = 40897;\n     */\n    GlyphOfMaul = 40897,\n    /**\n     * @generated from protobuf enum value: GlyphOfMonsoon = 45622;\n     */\n    GlyphOfMonsoon = 45622,\n    /**\n     * @generated from protobuf enum value: GlyphOfMoonfire = 40923;\n     */\n    GlyphOfMoonfire = 40923,\n    /**\n     * @generated from protobuf enum value: GlyphOfNourish = 45603;\n     */\n    GlyphOfNourish = 45603,\n    /**\n     * @generated from protobuf enum value: GlyphOfRake = 40903;\n     */\n    GlyphOfRake = 40903,\n    /**\n     * @generated from protobuf enum value: GlyphOfRapidRejuvenation = 50125;\n     */\n    GlyphOfRapidRejuvenation = 50125,\n    /**\n     * @generated from protobuf enum value: GlyphOfRebirth = 40909;\n     */\n    GlyphOfRebirth = 40909,\n    /**\n     * @generated from protobuf enum value: GlyphOfRegrowth = 40912;\n     */\n    GlyphOfRegrowth = 40912,\n    /**\n     * @generated from protobuf enum value: GlyphOfRejuvenation = 40913;\n     */\n    GlyphOfRejuvenation = 40913,\n    /**\n     * @generated from protobuf enum value: GlyphOfRip = 40902;\n     */\n    GlyphOfRip = 40902,\n    /**\n     * @generated from protobuf enum value: GlyphOfSavageRoar = 45604;\n     */\n    GlyphOfSavageRoar = 45604,\n    /**\n     * @generated from protobuf enum value: GlyphOfShred = 40901;\n     */\n    GlyphOfShred = 40901,\n    /**\n     * @generated from protobuf enum value: GlyphOfStarfall = 40921;\n     */\n    GlyphOfStarfall = 40921,\n    /**\n     * @generated from protobuf enum value: GlyphOfStarfire = 40916;\n     */\n    GlyphOfStarfire = 40916,\n    /**\n     * @generated from protobuf enum value: GlyphOfSurvivalInstincts = 46372;\n     */\n    GlyphOfSurvivalInstincts = 46372,\n    /**\n     * @generated from protobuf enum value: GlyphOfSwiftmend = 40906;\n     */\n    GlyphOfSwiftmend = 40906,\n    /**\n     * @generated from protobuf enum value: GlyphOfWildGrowth = 45602;\n     */\n    GlyphOfWildGrowth = 45602,\n    /**\n     * @generated from protobuf enum value: GlyphOfWrath = 40922;\n     */\n    GlyphOfWrath = 40922\n}\n/**\n * @generated from protobuf enum proto.DruidMinorGlyph\n */\nexport enum DruidMinorGlyph {\n    /**\n     * @generated from protobuf enum value: DruidMinorGlyphNone = 0;\n     */\n    DruidMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAquaticForm = 43316;\n     */\n    GlyphOfAquaticForm = 43316,\n    /**\n     * @generated from protobuf enum value: GlyphOfChallengingRoar = 43334;\n     */\n    GlyphOfChallengingRoar = 43334,\n    /**\n     * @generated from protobuf enum value: GlyphOfDash = 43674;\n     */\n    GlyphOfDash = 43674,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheWild = 43335;\n     */\n    GlyphOfTheWild = 43335,\n    /**\n     * @generated from protobuf enum value: GlyphOfThorns = 43332;\n     */\n    GlyphOfThorns = 43332,\n    /**\n     * @generated from protobuf enum value: GlyphOfTyphoon = 44922;\n     */\n    GlyphOfTyphoon = 44922,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnburdenedRebirth = 43331;\n     */\n    GlyphOfUnburdenedRebirth = 43331\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass DruidTalents$Type extends MessageType<DruidTalents> {\n    constructor() {\n        super(\"proto.DruidTalents\", [\n            { no: 1, name: \"starlight_wrath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"genesis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"moonglow\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"natures_majesty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"improved_moonfire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"brambles\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"natures_grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"natures_splendor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"natures_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"vengeance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"celestial_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"lunar_guidance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"insect_swarm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"improved_insect_swarm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"dreamstate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"moonfury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"balance_of_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"moonkin_form\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"improved_moonkin_form\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"improved_faerie_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"owlkin_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"wrath_of_cenarius\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"eclipse\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"typhoon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"force_of_nature\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"gale_winds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"earth_and_moon\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"starfall\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"ferocity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"feral_aggression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"feral_instinct\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"savage_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"thick_hide\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"feral_swiftness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"survival_instincts\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"sharpened_claws\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"shredding_attacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"predatory_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"primal_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"primal_precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"brutal_impact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"feral_charge\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 43, name: \"nurturing_instinct\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"natural_reaction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"heart_of_the_wild\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"survival_of_the_fittest\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"leader_of_the_pack\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"improved_leader_of_the_pack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"primal_tenacity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"protector_of_the_pack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"predatory_instincts\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"infected_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"king_of_the_jungle\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"mangle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"improved_mangle\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"rend_and_tear\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"primal_gore\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 58, name: \"berserk\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 59, name: \"improved_mark_of_the_wild\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"natures_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"furor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"naturalist\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"subtlety\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"natural_shapeshifter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"intensity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"omen_of_clarity\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 67, name: \"master_shapeshifter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"tranquil_spirit\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"improved_rejuvenation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"natures_swiftness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 71, name: \"gift_of_nature\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"improved_tranquility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"empowered_touch\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"natures_bounty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"living_spirit\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"swiftmend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 77, name: \"natural_perfection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"empowered_rejuvenation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"living_seed\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"revitalize\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"tree_of_life\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 82, name: \"improved_tree_of_life\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"improved_barkskin\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 84, name: \"gift_of_the_earthmother\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 85, name: \"wild_growth\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DruidTalents>): DruidTalents {\n        const message = { starlightWrath: 0, genesis: 0, moonglow: 0, naturesMajesty: 0, improvedMoonfire: 0, brambles: 0, naturesGrace: 0, naturesSplendor: false, naturesReach: 0, vengeance: 0, celestialFocus: 0, lunarGuidance: 0, insectSwarm: false, improvedInsectSwarm: 0, dreamstate: 0, moonfury: 0, balanceOfPower: 0, moonkinForm: false, improvedMoonkinForm: 0, improvedFaerieFire: 0, owlkinFrenzy: 0, wrathOfCenarius: 0, eclipse: 0, typhoon: false, forceOfNature: false, galeWinds: 0, earthAndMoon: 0, starfall: false, ferocity: 0, feralAggression: 0, feralInstinct: 0, savageFury: 0, thickHide: 0, feralSwiftness: 0, survivalInstincts: false, sharpenedClaws: 0, shreddingAttacks: 0, predatoryStrikes: 0, primalFury: 0, primalPrecision: 0, brutalImpact: 0, feralCharge: false, nurturingInstinct: 0, naturalReaction: 0, heartOfTheWild: 0, survivalOfTheFittest: 0, leaderOfThePack: false, improvedLeaderOfThePack: 0, primalTenacity: 0, protectorOfThePack: 0, predatoryInstincts: 0, infectedWounds: 0, kingOfTheJungle: 0, mangle: false, improvedMangle: 0, rendAndTear: 0, primalGore: false, berserk: false, improvedMarkOfTheWild: 0, naturesFocus: 0, furor: 0, naturalist: 0, subtlety: 0, naturalShapeshifter: 0, intensity: 0, omenOfClarity: false, masterShapeshifter: 0, tranquilSpirit: 0, improvedRejuvenation: 0, naturesSwiftness: false, giftOfNature: 0, improvedTranquility: 0, empoweredTouch: 0, naturesBounty: 0, livingSpirit: 0, swiftmend: false, naturalPerfection: 0, empoweredRejuvenation: 0, livingSeed: 0, revitalize: 0, treeOfLife: false, improvedTreeOfLife: 0, improvedBarkskin: 0, giftOfTheEarthmother: 0, wildGrowth: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DruidTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DruidTalents): DruidTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 starlight_wrath */ 1:\n                    message.starlightWrath = reader.int32();\n                    break;\n                case /* int32 genesis */ 2:\n                    message.genesis = reader.int32();\n                    break;\n                case /* int32 moonglow */ 3:\n                    message.moonglow = reader.int32();\n                    break;\n                case /* int32 natures_majesty */ 4:\n                    message.naturesMajesty = reader.int32();\n                    break;\n                case /* int32 improved_moonfire */ 5:\n                    message.improvedMoonfire = reader.int32();\n                    break;\n                case /* int32 brambles */ 6:\n                    message.brambles = reader.int32();\n                    break;\n                case /* int32 natures_grace */ 7:\n                    message.naturesGrace = reader.int32();\n                    break;\n                case /* bool natures_splendor */ 8:\n                    message.naturesSplendor = reader.bool();\n                    break;\n                case /* int32 natures_reach */ 9:\n                    message.naturesReach = reader.int32();\n                    break;\n                case /* int32 vengeance */ 10:\n                    message.vengeance = reader.int32();\n                    break;\n                case /* int32 celestial_focus */ 11:\n                    message.celestialFocus = reader.int32();\n                    break;\n                case /* int32 lunar_guidance */ 12:\n                    message.lunarGuidance = reader.int32();\n                    break;\n                case /* bool insect_swarm */ 13:\n                    message.insectSwarm = reader.bool();\n                    break;\n                case /* int32 improved_insect_swarm */ 14:\n                    message.improvedInsectSwarm = reader.int32();\n                    break;\n                case /* int32 dreamstate */ 15:\n                    message.dreamstate = reader.int32();\n                    break;\n                case /* int32 moonfury */ 16:\n                    message.moonfury = reader.int32();\n                    break;\n                case /* int32 balance_of_power */ 17:\n                    message.balanceOfPower = reader.int32();\n                    break;\n                case /* bool moonkin_form */ 18:\n                    message.moonkinForm = reader.bool();\n                    break;\n                case /* int32 improved_moonkin_form */ 19:\n                    message.improvedMoonkinForm = reader.int32();\n                    break;\n                case /* int32 improved_faerie_fire */ 20:\n                    message.improvedFaerieFire = reader.int32();\n                    break;\n                case /* int32 owlkin_frenzy */ 21:\n                    message.owlkinFrenzy = reader.int32();\n                    break;\n                case /* int32 wrath_of_cenarius */ 22:\n                    message.wrathOfCenarius = reader.int32();\n                    break;\n                case /* int32 eclipse */ 23:\n                    message.eclipse = reader.int32();\n                    break;\n                case /* bool typhoon */ 24:\n                    message.typhoon = reader.bool();\n                    break;\n                case /* bool force_of_nature */ 25:\n                    message.forceOfNature = reader.bool();\n                    break;\n                case /* int32 gale_winds */ 26:\n                    message.galeWinds = reader.int32();\n                    break;\n                case /* int32 earth_and_moon */ 27:\n                    message.earthAndMoon = reader.int32();\n                    break;\n                case /* bool starfall */ 28:\n                    message.starfall = reader.bool();\n                    break;\n                case /* int32 ferocity */ 29:\n                    message.ferocity = reader.int32();\n                    break;\n                case /* int32 feral_aggression */ 30:\n                    message.feralAggression = reader.int32();\n                    break;\n                case /* int32 feral_instinct */ 31:\n                    message.feralInstinct = reader.int32();\n                    break;\n                case /* int32 savage_fury */ 32:\n                    message.savageFury = reader.int32();\n                    break;\n                case /* int32 thick_hide */ 33:\n                    message.thickHide = reader.int32();\n                    break;\n                case /* int32 feral_swiftness */ 34:\n                    message.feralSwiftness = reader.int32();\n                    break;\n                case /* bool survival_instincts */ 35:\n                    message.survivalInstincts = reader.bool();\n                    break;\n                case /* int32 sharpened_claws */ 36:\n                    message.sharpenedClaws = reader.int32();\n                    break;\n                case /* int32 shredding_attacks */ 37:\n                    message.shreddingAttacks = reader.int32();\n                    break;\n                case /* int32 predatory_strikes */ 38:\n                    message.predatoryStrikes = reader.int32();\n                    break;\n                case /* int32 primal_fury */ 39:\n                    message.primalFury = reader.int32();\n                    break;\n                case /* int32 primal_precision */ 40:\n                    message.primalPrecision = reader.int32();\n                    break;\n                case /* int32 brutal_impact */ 41:\n                    message.brutalImpact = reader.int32();\n                    break;\n                case /* bool feral_charge */ 42:\n                    message.feralCharge = reader.bool();\n                    break;\n                case /* int32 nurturing_instinct */ 43:\n                    message.nurturingInstinct = reader.int32();\n                    break;\n                case /* int32 natural_reaction */ 44:\n                    message.naturalReaction = reader.int32();\n                    break;\n                case /* int32 heart_of_the_wild */ 45:\n                    message.heartOfTheWild = reader.int32();\n                    break;\n                case /* int32 survival_of_the_fittest */ 46:\n                    message.survivalOfTheFittest = reader.int32();\n                    break;\n                case /* bool leader_of_the_pack */ 47:\n                    message.leaderOfThePack = reader.bool();\n                    break;\n                case /* int32 improved_leader_of_the_pack */ 48:\n                    message.improvedLeaderOfThePack = reader.int32();\n                    break;\n                case /* int32 primal_tenacity */ 49:\n                    message.primalTenacity = reader.int32();\n                    break;\n                case /* int32 protector_of_the_pack */ 50:\n                    message.protectorOfThePack = reader.int32();\n                    break;\n                case /* int32 predatory_instincts */ 51:\n                    message.predatoryInstincts = reader.int32();\n                    break;\n                case /* int32 infected_wounds */ 52:\n                    message.infectedWounds = reader.int32();\n                    break;\n                case /* int32 king_of_the_jungle */ 53:\n                    message.kingOfTheJungle = reader.int32();\n                    break;\n                case /* bool mangle */ 54:\n                    message.mangle = reader.bool();\n                    break;\n                case /* int32 improved_mangle */ 55:\n                    message.improvedMangle = reader.int32();\n                    break;\n                case /* int32 rend_and_tear */ 56:\n                    message.rendAndTear = reader.int32();\n                    break;\n                case /* bool primal_gore */ 57:\n                    message.primalGore = reader.bool();\n                    break;\n                case /* bool berserk */ 58:\n                    message.berserk = reader.bool();\n                    break;\n                case /* int32 improved_mark_of_the_wild */ 59:\n                    message.improvedMarkOfTheWild = reader.int32();\n                    break;\n                case /* int32 natures_focus */ 60:\n                    message.naturesFocus = reader.int32();\n                    break;\n                case /* int32 furor */ 61:\n                    message.furor = reader.int32();\n                    break;\n                case /* int32 naturalist */ 62:\n                    message.naturalist = reader.int32();\n                    break;\n                case /* int32 subtlety */ 63:\n                    message.subtlety = reader.int32();\n                    break;\n                case /* int32 natural_shapeshifter */ 64:\n                    message.naturalShapeshifter = reader.int32();\n                    break;\n                case /* int32 intensity */ 65:\n                    message.intensity = reader.int32();\n                    break;\n                case /* bool omen_of_clarity */ 66:\n                    message.omenOfClarity = reader.bool();\n                    break;\n                case /* int32 master_shapeshifter */ 67:\n                    message.masterShapeshifter = reader.int32();\n                    break;\n                case /* int32 tranquil_spirit */ 68:\n                    message.tranquilSpirit = reader.int32();\n                    break;\n                case /* int32 improved_rejuvenation */ 69:\n                    message.improvedRejuvenation = reader.int32();\n                    break;\n                case /* bool natures_swiftness */ 70:\n                    message.naturesSwiftness = reader.bool();\n                    break;\n                case /* int32 gift_of_nature */ 71:\n                    message.giftOfNature = reader.int32();\n                    break;\n                case /* int32 improved_tranquility */ 72:\n                    message.improvedTranquility = reader.int32();\n                    break;\n                case /* int32 empowered_touch */ 73:\n                    message.empoweredTouch = reader.int32();\n                    break;\n                case /* int32 natures_bounty */ 74:\n                    message.naturesBounty = reader.int32();\n                    break;\n                case /* int32 living_spirit */ 75:\n                    message.livingSpirit = reader.int32();\n                    break;\n                case /* bool swiftmend */ 76:\n                    message.swiftmend = reader.bool();\n                    break;\n                case /* int32 natural_perfection */ 77:\n                    message.naturalPerfection = reader.int32();\n                    break;\n                case /* int32 empowered_rejuvenation */ 78:\n                    message.empoweredRejuvenation = reader.int32();\n                    break;\n                case /* int32 living_seed */ 79:\n                    message.livingSeed = reader.int32();\n                    break;\n                case /* int32 revitalize */ 80:\n                    message.revitalize = reader.int32();\n                    break;\n                case /* bool tree_of_life */ 81:\n                    message.treeOfLife = reader.bool();\n                    break;\n                case /* int32 improved_tree_of_life */ 82:\n                    message.improvedTreeOfLife = reader.int32();\n                    break;\n                case /* int32 improved_barkskin */ 83:\n                    message.improvedBarkskin = reader.int32();\n                    break;\n                case /* int32 gift_of_the_earthmother */ 84:\n                    message.giftOfTheEarthmother = reader.int32();\n                    break;\n                case /* bool wild_growth */ 85:\n                    message.wildGrowth = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DruidTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 starlight_wrath = 1; */\n        if (message.starlightWrath !== 0)\n            writer.tag(1, WireType.Varint).int32(message.starlightWrath);\n        /* int32 genesis = 2; */\n        if (message.genesis !== 0)\n            writer.tag(2, WireType.Varint).int32(message.genesis);\n        /* int32 moonglow = 3; */\n        if (message.moonglow !== 0)\n            writer.tag(3, WireType.Varint).int32(message.moonglow);\n        /* int32 natures_majesty = 4; */\n        if (message.naturesMajesty !== 0)\n            writer.tag(4, WireType.Varint).int32(message.naturesMajesty);\n        /* int32 improved_moonfire = 5; */\n        if (message.improvedMoonfire !== 0)\n            writer.tag(5, WireType.Varint).int32(message.improvedMoonfire);\n        /* int32 brambles = 6; */\n        if (message.brambles !== 0)\n            writer.tag(6, WireType.Varint).int32(message.brambles);\n        /* int32 natures_grace = 7; */\n        if (message.naturesGrace !== 0)\n            writer.tag(7, WireType.Varint).int32(message.naturesGrace);\n        /* bool natures_splendor = 8; */\n        if (message.naturesSplendor !== false)\n            writer.tag(8, WireType.Varint).bool(message.naturesSplendor);\n        /* int32 natures_reach = 9; */\n        if (message.naturesReach !== 0)\n            writer.tag(9, WireType.Varint).int32(message.naturesReach);\n        /* int32 vengeance = 10; */\n        if (message.vengeance !== 0)\n            writer.tag(10, WireType.Varint).int32(message.vengeance);\n        /* int32 celestial_focus = 11; */\n        if (message.celestialFocus !== 0)\n            writer.tag(11, WireType.Varint).int32(message.celestialFocus);\n        /* int32 lunar_guidance = 12; */\n        if (message.lunarGuidance !== 0)\n            writer.tag(12, WireType.Varint).int32(message.lunarGuidance);\n        /* bool insect_swarm = 13; */\n        if (message.insectSwarm !== false)\n            writer.tag(13, WireType.Varint).bool(message.insectSwarm);\n        /* int32 improved_insect_swarm = 14; */\n        if (message.improvedInsectSwarm !== 0)\n            writer.tag(14, WireType.Varint).int32(message.improvedInsectSwarm);\n        /* int32 dreamstate = 15; */\n        if (message.dreamstate !== 0)\n            writer.tag(15, WireType.Varint).int32(message.dreamstate);\n        /* int32 moonfury = 16; */\n        if (message.moonfury !== 0)\n            writer.tag(16, WireType.Varint).int32(message.moonfury);\n        /* int32 balance_of_power = 17; */\n        if (message.balanceOfPower !== 0)\n            writer.tag(17, WireType.Varint).int32(message.balanceOfPower);\n        /* bool moonkin_form = 18; */\n        if (message.moonkinForm !== false)\n            writer.tag(18, WireType.Varint).bool(message.moonkinForm);\n        /* int32 improved_moonkin_form = 19; */\n        if (message.improvedMoonkinForm !== 0)\n            writer.tag(19, WireType.Varint).int32(message.improvedMoonkinForm);\n        /* int32 improved_faerie_fire = 20; */\n        if (message.improvedFaerieFire !== 0)\n            writer.tag(20, WireType.Varint).int32(message.improvedFaerieFire);\n        /* int32 owlkin_frenzy = 21; */\n        if (message.owlkinFrenzy !== 0)\n            writer.tag(21, WireType.Varint).int32(message.owlkinFrenzy);\n        /* int32 wrath_of_cenarius = 22; */\n        if (message.wrathOfCenarius !== 0)\n            writer.tag(22, WireType.Varint).int32(message.wrathOfCenarius);\n        /* int32 eclipse = 23; */\n        if (message.eclipse !== 0)\n            writer.tag(23, WireType.Varint).int32(message.eclipse);\n        /* bool typhoon = 24; */\n        if (message.typhoon !== false)\n            writer.tag(24, WireType.Varint).bool(message.typhoon);\n        /* bool force_of_nature = 25; */\n        if (message.forceOfNature !== false)\n            writer.tag(25, WireType.Varint).bool(message.forceOfNature);\n        /* int32 gale_winds = 26; */\n        if (message.galeWinds !== 0)\n            writer.tag(26, WireType.Varint).int32(message.galeWinds);\n        /* int32 earth_and_moon = 27; */\n        if (message.earthAndMoon !== 0)\n            writer.tag(27, WireType.Varint).int32(message.earthAndMoon);\n        /* bool starfall = 28; */\n        if (message.starfall !== false)\n            writer.tag(28, WireType.Varint).bool(message.starfall);\n        /* int32 ferocity = 29; */\n        if (message.ferocity !== 0)\n            writer.tag(29, WireType.Varint).int32(message.ferocity);\n        /* int32 feral_aggression = 30; */\n        if (message.feralAggression !== 0)\n            writer.tag(30, WireType.Varint).int32(message.feralAggression);\n        /* int32 feral_instinct = 31; */\n        if (message.feralInstinct !== 0)\n            writer.tag(31, WireType.Varint).int32(message.feralInstinct);\n        /* int32 savage_fury = 32; */\n        if (message.savageFury !== 0)\n            writer.tag(32, WireType.Varint).int32(message.savageFury);\n        /* int32 thick_hide = 33; */\n        if (message.thickHide !== 0)\n            writer.tag(33, WireType.Varint).int32(message.thickHide);\n        /* int32 feral_swiftness = 34; */\n        if (message.feralSwiftness !== 0)\n            writer.tag(34, WireType.Varint).int32(message.feralSwiftness);\n        /* bool survival_instincts = 35; */\n        if (message.survivalInstincts !== false)\n            writer.tag(35, WireType.Varint).bool(message.survivalInstincts);\n        /* int32 sharpened_claws = 36; */\n        if (message.sharpenedClaws !== 0)\n            writer.tag(36, WireType.Varint).int32(message.sharpenedClaws);\n        /* int32 shredding_attacks = 37; */\n        if (message.shreddingAttacks !== 0)\n            writer.tag(37, WireType.Varint).int32(message.shreddingAttacks);\n        /* int32 predatory_strikes = 38; */\n        if (message.predatoryStrikes !== 0)\n            writer.tag(38, WireType.Varint).int32(message.predatoryStrikes);\n        /* int32 primal_fury = 39; */\n        if (message.primalFury !== 0)\n            writer.tag(39, WireType.Varint).int32(message.primalFury);\n        /* int32 primal_precision = 40; */\n        if (message.primalPrecision !== 0)\n            writer.tag(40, WireType.Varint).int32(message.primalPrecision);\n        /* int32 brutal_impact = 41; */\n        if (message.brutalImpact !== 0)\n            writer.tag(41, WireType.Varint).int32(message.brutalImpact);\n        /* bool feral_charge = 42; */\n        if (message.feralCharge !== false)\n            writer.tag(42, WireType.Varint).bool(message.feralCharge);\n        /* int32 nurturing_instinct = 43; */\n        if (message.nurturingInstinct !== 0)\n            writer.tag(43, WireType.Varint).int32(message.nurturingInstinct);\n        /* int32 natural_reaction = 44; */\n        if (message.naturalReaction !== 0)\n            writer.tag(44, WireType.Varint).int32(message.naturalReaction);\n        /* int32 heart_of_the_wild = 45; */\n        if (message.heartOfTheWild !== 0)\n            writer.tag(45, WireType.Varint).int32(message.heartOfTheWild);\n        /* int32 survival_of_the_fittest = 46; */\n        if (message.survivalOfTheFittest !== 0)\n            writer.tag(46, WireType.Varint).int32(message.survivalOfTheFittest);\n        /* bool leader_of_the_pack = 47; */\n        if (message.leaderOfThePack !== false)\n            writer.tag(47, WireType.Varint).bool(message.leaderOfThePack);\n        /* int32 improved_leader_of_the_pack = 48; */\n        if (message.improvedLeaderOfThePack !== 0)\n            writer.tag(48, WireType.Varint).int32(message.improvedLeaderOfThePack);\n        /* int32 primal_tenacity = 49; */\n        if (message.primalTenacity !== 0)\n            writer.tag(49, WireType.Varint).int32(message.primalTenacity);\n        /* int32 protector_of_the_pack = 50; */\n        if (message.protectorOfThePack !== 0)\n            writer.tag(50, WireType.Varint).int32(message.protectorOfThePack);\n        /* int32 predatory_instincts = 51; */\n        if (message.predatoryInstincts !== 0)\n            writer.tag(51, WireType.Varint).int32(message.predatoryInstincts);\n        /* int32 infected_wounds = 52; */\n        if (message.infectedWounds !== 0)\n            writer.tag(52, WireType.Varint).int32(message.infectedWounds);\n        /* int32 king_of_the_jungle = 53; */\n        if (message.kingOfTheJungle !== 0)\n            writer.tag(53, WireType.Varint).int32(message.kingOfTheJungle);\n        /* bool mangle = 54; */\n        if (message.mangle !== false)\n            writer.tag(54, WireType.Varint).bool(message.mangle);\n        /* int32 improved_mangle = 55; */\n        if (message.improvedMangle !== 0)\n            writer.tag(55, WireType.Varint).int32(message.improvedMangle);\n        /* int32 rend_and_tear = 56; */\n        if (message.rendAndTear !== 0)\n            writer.tag(56, WireType.Varint).int32(message.rendAndTear);\n        /* bool primal_gore = 57; */\n        if (message.primalGore !== false)\n            writer.tag(57, WireType.Varint).bool(message.primalGore);\n        /* bool berserk = 58; */\n        if (message.berserk !== false)\n            writer.tag(58, WireType.Varint).bool(message.berserk);\n        /* int32 improved_mark_of_the_wild = 59; */\n        if (message.improvedMarkOfTheWild !== 0)\n            writer.tag(59, WireType.Varint).int32(message.improvedMarkOfTheWild);\n        /* int32 natures_focus = 60; */\n        if (message.naturesFocus !== 0)\n            writer.tag(60, WireType.Varint).int32(message.naturesFocus);\n        /* int32 furor = 61; */\n        if (message.furor !== 0)\n            writer.tag(61, WireType.Varint).int32(message.furor);\n        /* int32 naturalist = 62; */\n        if (message.naturalist !== 0)\n            writer.tag(62, WireType.Varint).int32(message.naturalist);\n        /* int32 subtlety = 63; */\n        if (message.subtlety !== 0)\n            writer.tag(63, WireType.Varint).int32(message.subtlety);\n        /* int32 natural_shapeshifter = 64; */\n        if (message.naturalShapeshifter !== 0)\n            writer.tag(64, WireType.Varint).int32(message.naturalShapeshifter);\n        /* int32 intensity = 65; */\n        if (message.intensity !== 0)\n            writer.tag(65, WireType.Varint).int32(message.intensity);\n        /* bool omen_of_clarity = 66; */\n        if (message.omenOfClarity !== false)\n            writer.tag(66, WireType.Varint).bool(message.omenOfClarity);\n        /* int32 master_shapeshifter = 67; */\n        if (message.masterShapeshifter !== 0)\n            writer.tag(67, WireType.Varint).int32(message.masterShapeshifter);\n        /* int32 tranquil_spirit = 68; */\n        if (message.tranquilSpirit !== 0)\n            writer.tag(68, WireType.Varint).int32(message.tranquilSpirit);\n        /* int32 improved_rejuvenation = 69; */\n        if (message.improvedRejuvenation !== 0)\n            writer.tag(69, WireType.Varint).int32(message.improvedRejuvenation);\n        /* bool natures_swiftness = 70; */\n        if (message.naturesSwiftness !== false)\n            writer.tag(70, WireType.Varint).bool(message.naturesSwiftness);\n        /* int32 gift_of_nature = 71; */\n        if (message.giftOfNature !== 0)\n            writer.tag(71, WireType.Varint).int32(message.giftOfNature);\n        /* int32 improved_tranquility = 72; */\n        if (message.improvedTranquility !== 0)\n            writer.tag(72, WireType.Varint).int32(message.improvedTranquility);\n        /* int32 empowered_touch = 73; */\n        if (message.empoweredTouch !== 0)\n            writer.tag(73, WireType.Varint).int32(message.empoweredTouch);\n        /* int32 natures_bounty = 74; */\n        if (message.naturesBounty !== 0)\n            writer.tag(74, WireType.Varint).int32(message.naturesBounty);\n        /* int32 living_spirit = 75; */\n        if (message.livingSpirit !== 0)\n            writer.tag(75, WireType.Varint).int32(message.livingSpirit);\n        /* bool swiftmend = 76; */\n        if (message.swiftmend !== false)\n            writer.tag(76, WireType.Varint).bool(message.swiftmend);\n        /* int32 natural_perfection = 77; */\n        if (message.naturalPerfection !== 0)\n            writer.tag(77, WireType.Varint).int32(message.naturalPerfection);\n        /* int32 empowered_rejuvenation = 78; */\n        if (message.empoweredRejuvenation !== 0)\n            writer.tag(78, WireType.Varint).int32(message.empoweredRejuvenation);\n        /* int32 living_seed = 79; */\n        if (message.livingSeed !== 0)\n            writer.tag(79, WireType.Varint).int32(message.livingSeed);\n        /* int32 revitalize = 80; */\n        if (message.revitalize !== 0)\n            writer.tag(80, WireType.Varint).int32(message.revitalize);\n        /* bool tree_of_life = 81; */\n        if (message.treeOfLife !== false)\n            writer.tag(81, WireType.Varint).bool(message.treeOfLife);\n        /* int32 improved_tree_of_life = 82; */\n        if (message.improvedTreeOfLife !== 0)\n            writer.tag(82, WireType.Varint).int32(message.improvedTreeOfLife);\n        /* int32 improved_barkskin = 83; */\n        if (message.improvedBarkskin !== 0)\n            writer.tag(83, WireType.Varint).int32(message.improvedBarkskin);\n        /* int32 gift_of_the_earthmother = 84; */\n        if (message.giftOfTheEarthmother !== 0)\n            writer.tag(84, WireType.Varint).int32(message.giftOfTheEarthmother);\n        /* bool wild_growth = 85; */\n        if (message.wildGrowth !== false)\n            writer.tag(85, WireType.Varint).bool(message.wildGrowth);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DruidTalents\n */\nexport const DruidTalents = new DruidTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BalanceDruid$Type extends MessageType<BalanceDruid> {\n    constructor() {\n        super(\"proto.BalanceDruid\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => BalanceDruid_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => DruidTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => BalanceDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<BalanceDruid>): BalanceDruid {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BalanceDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceDruid): BalanceDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.BalanceDruid.Rotation rotation */ 1:\n                    message.rotation = BalanceDruid_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.DruidTalents talents */ 2:\n                    message.talents = DruidTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.BalanceDruid.Options options */ 3:\n                    message.options = BalanceDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BalanceDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.BalanceDruid.Rotation rotation = 1; */\n        if (message.rotation)\n            BalanceDruid_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DruidTalents talents = 2; */\n        if (message.talents)\n            DruidTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BalanceDruid.Options options = 3; */\n        if (message.options)\n            BalanceDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BalanceDruid\n */\nexport const BalanceDruid = new BalanceDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BalanceDruid_Rotation$Type extends MessageType<BalanceDruid_Rotation> {\n    constructor() {\n        super(\"proto.BalanceDruid.Rotation\", [\n            { no: 1, name: \"type\", kind: \"enum\", T: () => [\"proto.BalanceDruid.Rotation.Type\", BalanceDruid_Rotation_Type] },\n            { no: 2, name: \"use_battle_res\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"use_is\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"use_mf\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"use_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"use_starfire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"use_typhoon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"use_hurricane\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"mf_inside_eclipse_threshold\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 10, name: \"is_inside_eclipse_threshold\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 11, name: \"use_smart_cooldowns\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"maximize_mf_uptime\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"maximize_is_uptime\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"maintain_faerie_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<BalanceDruid_Rotation>): BalanceDruid_Rotation {\n        const message = { type: 0, useBattleRes: false, useIs: false, useMf: false, useWrath: false, useStarfire: false, useTyphoon: false, useHurricane: false, mfInsideEclipseThreshold: 0, isInsideEclipseThreshold: 0, useSmartCooldowns: false, maximizeMfUptime: false, maximizeIsUptime: false, maintainFaerieFire: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BalanceDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceDruid_Rotation): BalanceDruid_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.BalanceDruid.Rotation.Type type */ 1:\n                    message.type = reader.int32();\n                    break;\n                case /* bool use_battle_res */ 2:\n                    message.useBattleRes = reader.bool();\n                    break;\n                case /* bool use_is */ 3:\n                    message.useIs = reader.bool();\n                    break;\n                case /* bool use_mf */ 4:\n                    message.useMf = reader.bool();\n                    break;\n                case /* bool use_wrath */ 5:\n                    message.useWrath = reader.bool();\n                    break;\n                case /* bool use_starfire */ 6:\n                    message.useStarfire = reader.bool();\n                    break;\n                case /* bool use_typhoon */ 7:\n                    message.useTyphoon = reader.bool();\n                    break;\n                case /* bool use_hurricane */ 8:\n                    message.useHurricane = reader.bool();\n                    break;\n                case /* float mf_inside_eclipse_threshold */ 9:\n                    message.mfInsideEclipseThreshold = reader.float();\n                    break;\n                case /* float is_inside_eclipse_threshold */ 10:\n                    message.isInsideEclipseThreshold = reader.float();\n                    break;\n                case /* bool use_smart_cooldowns */ 11:\n                    message.useSmartCooldowns = reader.bool();\n                    break;\n                case /* bool maximize_mf_uptime */ 12:\n                    message.maximizeMfUptime = reader.bool();\n                    break;\n                case /* bool maximize_is_uptime */ 13:\n                    message.maximizeIsUptime = reader.bool();\n                    break;\n                case /* bool maintain_faerie_fire */ 14:\n                    message.maintainFaerieFire = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BalanceDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.BalanceDruid.Rotation.Type type = 1; */\n        if (message.type !== 0)\n            writer.tag(1, WireType.Varint).int32(message.type);\n        /* bool use_battle_res = 2; */\n        if (message.useBattleRes !== false)\n            writer.tag(2, WireType.Varint).bool(message.useBattleRes);\n        /* bool use_is = 3; */\n        if (message.useIs !== false)\n            writer.tag(3, WireType.Varint).bool(message.useIs);\n        /* bool use_mf = 4; */\n        if (message.useMf !== false)\n            writer.tag(4, WireType.Varint).bool(message.useMf);\n        /* bool use_wrath = 5; */\n        if (message.useWrath !== false)\n            writer.tag(5, WireType.Varint).bool(message.useWrath);\n        /* bool use_starfire = 6; */\n        if (message.useStarfire !== false)\n            writer.tag(6, WireType.Varint).bool(message.useStarfire);\n        /* bool use_typhoon = 7; */\n        if (message.useTyphoon !== false)\n            writer.tag(7, WireType.Varint).bool(message.useTyphoon);\n        /* bool use_hurricane = 8; */\n        if (message.useHurricane !== false)\n            writer.tag(8, WireType.Varint).bool(message.useHurricane);\n        /* float mf_inside_eclipse_threshold = 9; */\n        if (message.mfInsideEclipseThreshold !== 0)\n            writer.tag(9, WireType.Bit32).float(message.mfInsideEclipseThreshold);\n        /* float is_inside_eclipse_threshold = 10; */\n        if (message.isInsideEclipseThreshold !== 0)\n            writer.tag(10, WireType.Bit32).float(message.isInsideEclipseThreshold);\n        /* bool use_smart_cooldowns = 11; */\n        if (message.useSmartCooldowns !== false)\n            writer.tag(11, WireType.Varint).bool(message.useSmartCooldowns);\n        /* bool maximize_mf_uptime = 12; */\n        if (message.maximizeMfUptime !== false)\n            writer.tag(12, WireType.Varint).bool(message.maximizeMfUptime);\n        /* bool maximize_is_uptime = 13; */\n        if (message.maximizeIsUptime !== false)\n            writer.tag(13, WireType.Varint).bool(message.maximizeIsUptime);\n        /* bool maintain_faerie_fire = 14; */\n        if (message.maintainFaerieFire !== false)\n            writer.tag(14, WireType.Varint).bool(message.maintainFaerieFire);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BalanceDruid.Rotation\n */\nexport const BalanceDruid_Rotation = new BalanceDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BalanceDruid_Options$Type extends MessageType<BalanceDruid_Options> {\n    constructor() {\n        super(\"proto.BalanceDruid.Options\", [\n            { no: 1, name: \"innervate_target\", kind: \"message\", T: () => RaidTarget }\n        ]);\n    }\n    create(value?: PartialMessage<BalanceDruid_Options>): BalanceDruid_Options {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BalanceDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceDruid_Options): BalanceDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidTarget innervate_target */ 1:\n                    message.innervateTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.innervateTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BalanceDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidTarget innervate_target = 1; */\n        if (message.innervateTarget)\n            RaidTarget.internalBinaryWrite(message.innervateTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BalanceDruid.Options\n */\nexport const BalanceDruid_Options = new BalanceDruid_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralDruid$Type extends MessageType<FeralDruid> {\n    constructor() {\n        super(\"proto.FeralDruid\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => FeralDruid_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => DruidTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => FeralDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FeralDruid>): FeralDruid {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralDruid): FeralDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralDruid.Rotation rotation */ 1:\n                    message.rotation = FeralDruid_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.DruidTalents talents */ 2:\n                    message.talents = DruidTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.FeralDruid.Options options */ 3:\n                    message.options = FeralDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralDruid.Rotation rotation = 1; */\n        if (message.rotation)\n            FeralDruid_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DruidTalents talents = 2; */\n        if (message.talents)\n            DruidTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralDruid.Options options = 3; */\n        if (message.options)\n            FeralDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralDruid\n */\nexport const FeralDruid = new FeralDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralDruid_Rotation$Type extends MessageType<FeralDruid_Rotation> {\n    constructor() {\n        super(\"proto.FeralDruid.Rotation\", [\n            { no: 1, name: \"bear_weave_type\", kind: \"enum\", T: () => [\"proto.FeralDruid.Rotation.BearweaveType\", FeralDruid_Rotation_BearweaveType] },\n            { no: 2, name: \"maintain_faerie_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"min_combos_for_rip\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"use_rake\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"use_bite\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"mangle_spam\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"bite_time\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 8, name: \"min_combos_for_bite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"berserk_bite_thresh\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"powerbear\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"max_roar_offset\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 12, name: \"bite_mode_type\", kind: \"enum\", T: () => [\"proto.FeralDruid.Rotation.BiteModeType\", FeralDruid_Rotation_BiteModeType] },\n            { no: 13, name: \"hot_uptime\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralDruid_Rotation>): FeralDruid_Rotation {\n        const message = { bearWeaveType: 0, maintainFaerieFire: false, minCombosForRip: 0, useRake: false, useBite: false, mangleSpam: false, biteTime: 0, minCombosForBite: 0, berserkBiteThresh: 0, powerbear: false, maxRoarOffset: 0, biteModeType: 0, hotUptime: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralDruid_Rotation): FeralDruid_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralDruid.Rotation.BearweaveType bear_weave_type */ 1:\n                    message.bearWeaveType = reader.int32();\n                    break;\n                case /* bool maintain_faerie_fire */ 2:\n                    message.maintainFaerieFire = reader.bool();\n                    break;\n                case /* int32 min_combos_for_rip */ 3:\n                    message.minCombosForRip = reader.int32();\n                    break;\n                case /* bool use_rake */ 4:\n                    message.useRake = reader.bool();\n                    break;\n                case /* bool use_bite */ 5:\n                    message.useBite = reader.bool();\n                    break;\n                case /* bool mangle_spam */ 6:\n                    message.mangleSpam = reader.bool();\n                    break;\n                case /* float bite_time */ 7:\n                    message.biteTime = reader.float();\n                    break;\n                case /* int32 min_combos_for_bite */ 8:\n                    message.minCombosForBite = reader.int32();\n                    break;\n                case /* int32 berserk_bite_thresh */ 9:\n                    message.berserkBiteThresh = reader.int32();\n                    break;\n                case /* bool powerbear */ 10:\n                    message.powerbear = reader.bool();\n                    break;\n                case /* float max_roar_offset */ 11:\n                    message.maxRoarOffset = reader.float();\n                    break;\n                case /* proto.FeralDruid.Rotation.BiteModeType bite_mode_type */ 12:\n                    message.biteModeType = reader.int32();\n                    break;\n                case /* float hot_uptime */ 13:\n                    message.hotUptime = reader.float();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralDruid.Rotation.BearweaveType bear_weave_type = 1; */\n        if (message.bearWeaveType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.bearWeaveType);\n        /* bool maintain_faerie_fire = 2; */\n        if (message.maintainFaerieFire !== false)\n            writer.tag(2, WireType.Varint).bool(message.maintainFaerieFire);\n        /* int32 min_combos_for_rip = 3; */\n        if (message.minCombosForRip !== 0)\n            writer.tag(3, WireType.Varint).int32(message.minCombosForRip);\n        /* bool use_rake = 4; */\n        if (message.useRake !== false)\n            writer.tag(4, WireType.Varint).bool(message.useRake);\n        /* bool use_bite = 5; */\n        if (message.useBite !== false)\n            writer.tag(5, WireType.Varint).bool(message.useBite);\n        /* bool mangle_spam = 6; */\n        if (message.mangleSpam !== false)\n            writer.tag(6, WireType.Varint).bool(message.mangleSpam);\n        /* float bite_time = 7; */\n        if (message.biteTime !== 0)\n            writer.tag(7, WireType.Bit32).float(message.biteTime);\n        /* int32 min_combos_for_bite = 8; */\n        if (message.minCombosForBite !== 0)\n            writer.tag(8, WireType.Varint).int32(message.minCombosForBite);\n        /* int32 berserk_bite_thresh = 9; */\n        if (message.berserkBiteThresh !== 0)\n            writer.tag(9, WireType.Varint).int32(message.berserkBiteThresh);\n        /* bool powerbear = 10; */\n        if (message.powerbear !== false)\n            writer.tag(10, WireType.Varint).bool(message.powerbear);\n        /* float max_roar_offset = 11; */\n        if (message.maxRoarOffset !== 0)\n            writer.tag(11, WireType.Bit32).float(message.maxRoarOffset);\n        /* proto.FeralDruid.Rotation.BiteModeType bite_mode_type = 12; */\n        if (message.biteModeType !== 0)\n            writer.tag(12, WireType.Varint).int32(message.biteModeType);\n        /* float hot_uptime = 13; */\n        if (message.hotUptime !== 0)\n            writer.tag(13, WireType.Bit32).float(message.hotUptime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralDruid.Rotation\n */\nexport const FeralDruid_Rotation = new FeralDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralDruid_Options$Type extends MessageType<FeralDruid_Options> {\n    constructor() {\n        super(\"proto.FeralDruid.Options\", [\n            { no: 1, name: \"innervate_target\", kind: \"message\", T: () => RaidTarget },\n            { no: 2, name: \"latency_ms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"prepop_ooc\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"assume_bleed_active\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralDruid_Options>): FeralDruid_Options {\n        const message = { latencyMs: 0, prepopOoc: false, assumeBleedActive: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralDruid_Options): FeralDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidTarget innervate_target */ 1:\n                    message.innervateTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.innervateTarget);\n                    break;\n                case /* int32 latency_ms */ 2:\n                    message.latencyMs = reader.int32();\n                    break;\n                case /* bool prepop_ooc */ 3:\n                    message.prepopOoc = reader.bool();\n                    break;\n                case /* bool assume_bleed_active */ 4:\n                    message.assumeBleedActive = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidTarget innervate_target = 1; */\n        if (message.innervateTarget)\n            RaidTarget.internalBinaryWrite(message.innervateTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 latency_ms = 2; */\n        if (message.latencyMs !== 0)\n            writer.tag(2, WireType.Varint).int32(message.latencyMs);\n        /* bool prepop_ooc = 3; */\n        if (message.prepopOoc !== false)\n            writer.tag(3, WireType.Varint).bool(message.prepopOoc);\n        /* bool assume_bleed_active = 4; */\n        if (message.assumeBleedActive !== false)\n            writer.tag(4, WireType.Varint).bool(message.assumeBleedActive);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralDruid.Options\n */\nexport const FeralDruid_Options = new FeralDruid_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralTankDruid$Type extends MessageType<FeralTankDruid> {\n    constructor() {\n        super(\"proto.FeralTankDruid\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => FeralTankDruid_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => DruidTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => FeralTankDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FeralTankDruid>): FeralTankDruid {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralTankDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralTankDruid): FeralTankDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralTankDruid.Rotation rotation */ 1:\n                    message.rotation = FeralTankDruid_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.DruidTalents talents */ 2:\n                    message.talents = DruidTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.FeralTankDruid.Options options */ 3:\n                    message.options = FeralTankDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralTankDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralTankDruid.Rotation rotation = 1; */\n        if (message.rotation)\n            FeralTankDruid_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DruidTalents talents = 2; */\n        if (message.talents)\n            DruidTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralTankDruid.Options options = 3; */\n        if (message.options)\n            FeralTankDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralTankDruid\n */\nexport const FeralTankDruid = new FeralTankDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralTankDruid_Rotation$Type extends MessageType<FeralTankDruid_Rotation> {\n    constructor() {\n        super(\"proto.FeralTankDruid.Rotation\", [\n            { no: 1, name: \"maul_rage_threshold\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"maintain_demoralizing_roar\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"maintain_faerie_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"swipe\", kind: \"enum\", T: () => [\"proto.FeralTankDruid.Rotation.Swipe\", FeralTankDruid_Rotation_Swipe] },\n            { no: 5, name: \"swipe_ap_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralTankDruid_Rotation>): FeralTankDruid_Rotation {\n        const message = { maulRageThreshold: 0, maintainDemoralizingRoar: false, maintainFaerieFire: false, swipe: 0, swipeApThreshold: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralTankDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralTankDruid_Rotation): FeralTankDruid_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 maul_rage_threshold */ 1:\n                    message.maulRageThreshold = reader.int32();\n                    break;\n                case /* bool maintain_demoralizing_roar */ 2:\n                    message.maintainDemoralizingRoar = reader.bool();\n                    break;\n                case /* bool maintain_faerie_fire */ 3:\n                    message.maintainFaerieFire = reader.bool();\n                    break;\n                case /* proto.FeralTankDruid.Rotation.Swipe swipe */ 4:\n                    message.swipe = reader.int32();\n                    break;\n                case /* double swipe_ap_threshold */ 5:\n                    message.swipeApThreshold = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralTankDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 maul_rage_threshold = 1; */\n        if (message.maulRageThreshold !== 0)\n            writer.tag(1, WireType.Varint).int32(message.maulRageThreshold);\n        /* bool maintain_demoralizing_roar = 2; */\n        if (message.maintainDemoralizingRoar !== false)\n            writer.tag(2, WireType.Varint).bool(message.maintainDemoralizingRoar);\n        /* bool maintain_faerie_fire = 3; */\n        if (message.maintainFaerieFire !== false)\n            writer.tag(3, WireType.Varint).bool(message.maintainFaerieFire);\n        /* proto.FeralTankDruid.Rotation.Swipe swipe = 4; */\n        if (message.swipe !== 0)\n            writer.tag(4, WireType.Varint).int32(message.swipe);\n        /* double swipe_ap_threshold = 5; */\n        if (message.swipeApThreshold !== 0)\n            writer.tag(5, WireType.Bit64).double(message.swipeApThreshold);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralTankDruid.Rotation\n */\nexport const FeralTankDruid_Rotation = new FeralTankDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralTankDruid_Options$Type extends MessageType<FeralTankDruid_Options> {\n    constructor() {\n        super(\"proto.FeralTankDruid.Options\", [\n            { no: 1, name: \"innervate_target\", kind: \"message\", T: () => RaidTarget },\n            { no: 2, name: \"starting_rage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralTankDruid_Options>): FeralTankDruid_Options {\n        const message = { startingRage: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralTankDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralTankDruid_Options): FeralTankDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidTarget innervate_target */ 1:\n                    message.innervateTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.innervateTarget);\n                    break;\n                case /* double starting_rage */ 2:\n                    message.startingRage = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralTankDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidTarget innervate_target = 1; */\n        if (message.innervateTarget)\n            RaidTarget.internalBinaryWrite(message.innervateTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double starting_rage = 2; */\n        if (message.startingRage !== 0)\n            writer.tag(2, WireType.Bit64).double(message.startingRage);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralTankDruid.Options\n */\nexport const FeralTankDruid_Options = new FeralTankDruid_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"api.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { Stat } from \"./common\";\nimport { Target } from \"./common\";\nimport { Gem } from \"./common\";\nimport { Enchant } from \"./common\";\nimport { Item } from \"./common\";\nimport { Encounter } from \"./common\";\nimport { ActionID } from \"./common\";\nimport { RaidTarget } from \"./common\";\nimport { Debuffs } from \"./common\";\nimport { RaidBuffs } from \"./common\";\nimport { PartyBuffs } from \"./common\";\nimport { HealingModel } from \"./common\";\nimport { Cooldowns } from \"./common\";\nimport { Profession } from \"./common\";\nimport { Glyphs } from \"./common\";\nimport { TankDeathknight } from \"./deathknight\";\nimport { Deathknight } from \"./deathknight\";\nimport { ProtectionWarrior } from \"./warrior\";\nimport { Warrior } from \"./warrior\";\nimport { Warlock } from \"./warlock\";\nimport { EnhancementShaman } from \"./shaman\";\nimport { ElementalShaman } from \"./shaman\";\nimport { Rogue } from \"./rogue\";\nimport { SmitePriest } from \"./priest\";\nimport { ShadowPriest } from \"./priest\";\nimport { HealingPriest } from \"./priest\";\nimport { ProtectionPaladin } from \"./paladin\";\nimport { RetributionPaladin } from \"./paladin\";\nimport { Mage } from \"./mage\";\nimport { Hunter } from \"./hunter\";\nimport { FeralTankDruid } from \"./druid\";\nimport { FeralDruid } from \"./druid\";\nimport { BalanceDruid } from \"./druid\";\nimport { IndividualBuffs } from \"./common\";\nimport { Consumes } from \"./common\";\nimport { EquipmentSpec } from \"./common\";\nimport { Class } from \"./common\";\nimport { ShattrathFaction } from \"./common\";\nimport { Race } from \"./common\";\n/**\n * @generated from protobuf message proto.Player\n */\nexport interface Player {\n    /**\n     * Label used for logging.\n     *\n     * @generated from protobuf field: string name = 16;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: proto.Race race = 1;\n     */\n    race: Race;\n    /**\n     * @generated from protobuf field: proto.ShattrathFaction shatt_faction = 24;\n     */\n    shattFaction: ShattrathFaction;\n    /**\n     * @generated from protobuf field: proto.Class class = 2;\n     */\n    class: Class;\n    /**\n     * @generated from protobuf field: proto.EquipmentSpec equipment = 3;\n     */\n    equipment?: EquipmentSpec;\n    /**\n     * @generated from protobuf field: proto.Consumes consumes = 4;\n     */\n    consumes?: Consumes;\n    /**\n     * @generated from protobuf field: repeated double bonus_stats = 5;\n     */\n    bonusStats: number[];\n    /**\n     * @generated from protobuf field: proto.IndividualBuffs buffs = 15;\n     */\n    buffs?: IndividualBuffs;\n    /**\n     * @generated from protobuf oneof: spec\n     */\n    spec: {\n        oneofKind: \"balanceDruid\";\n        /**\n         * @generated from protobuf field: proto.BalanceDruid balance_druid = 6;\n         */\n        balanceDruid: BalanceDruid;\n    } | {\n        oneofKind: \"feralDruid\";\n        /**\n         * @generated from protobuf field: proto.FeralDruid feral_druid = 22;\n         */\n        feralDruid: FeralDruid;\n    } | {\n        oneofKind: \"feralTankDruid\";\n        /**\n         * @generated from protobuf field: proto.FeralTankDruid feral_tank_druid = 26;\n         */\n        feralTankDruid: FeralTankDruid;\n    } | {\n        oneofKind: \"hunter\";\n        /**\n         * @generated from protobuf field: proto.Hunter hunter = 7;\n         */\n        hunter: Hunter;\n    } | {\n        oneofKind: \"mage\";\n        /**\n         * @generated from protobuf field: proto.Mage mage = 8;\n         */\n        mage: Mage;\n    } | {\n        oneofKind: \"retributionPaladin\";\n        /**\n         * @generated from protobuf field: proto.RetributionPaladin retribution_paladin = 9;\n         */\n        retributionPaladin: RetributionPaladin;\n    } | {\n        oneofKind: \"protectionPaladin\";\n        /**\n         * @generated from protobuf field: proto.ProtectionPaladin protection_paladin = 25;\n         */\n        protectionPaladin: ProtectionPaladin;\n    } | {\n        oneofKind: \"healingPriest\";\n        /**\n         * @generated from protobuf field: proto.HealingPriest healing_priest = 34;\n         */\n        healingPriest: HealingPriest;\n    } | {\n        oneofKind: \"shadowPriest\";\n        /**\n         * @generated from protobuf field: proto.ShadowPriest shadow_priest = 10;\n         */\n        shadowPriest: ShadowPriest;\n    } | {\n        oneofKind: \"smitePriest\";\n        /**\n         * @generated from protobuf field: proto.SmitePriest smite_priest = 20;\n         */\n        smitePriest: SmitePriest;\n    } | {\n        oneofKind: \"rogue\";\n        /**\n         * @generated from protobuf field: proto.Rogue rogue = 11;\n         */\n        rogue: Rogue;\n    } | {\n        oneofKind: \"elementalShaman\";\n        /**\n         * @generated from protobuf field: proto.ElementalShaman elemental_shaman = 12;\n         */\n        elementalShaman: ElementalShaman;\n    } | {\n        oneofKind: \"enhancementShaman\";\n        /**\n         * @generated from protobuf field: proto.EnhancementShaman enhancement_shaman = 18;\n         */\n        enhancementShaman: EnhancementShaman;\n    } | {\n        oneofKind: \"warlock\";\n        /**\n         * @generated from protobuf field: proto.Warlock warlock = 13;\n         */\n        warlock: Warlock;\n    } | {\n        oneofKind: \"warrior\";\n        /**\n         * @generated from protobuf field: proto.Warrior warrior = 14;\n         */\n        warrior: Warrior;\n    } | {\n        oneofKind: \"protectionWarrior\";\n        /**\n         * @generated from protobuf field: proto.ProtectionWarrior protection_warrior = 21;\n         */\n        protectionWarrior: ProtectionWarrior;\n    } | {\n        oneofKind: \"deathknight\";\n        /**\n         * @generated from protobuf field: proto.Deathknight deathknight = 31;\n         */\n        deathknight: Deathknight;\n    } | {\n        oneofKind: \"tankDeathknight\";\n        /**\n         * @generated from protobuf field: proto.TankDeathknight tank_deathknight = 32;\n         */\n        tankDeathknight: TankDeathknight;\n    } | {\n        oneofKind: undefined;\n    };\n    /**\n     * Only used by the UI. Sim uses talents within the spec protos.\n     *\n     * @generated from protobuf field: string talentsString = 17;\n     */\n    talentsString: string;\n    /**\n     * @generated from protobuf field: proto.Glyphs glyphs = 28;\n     */\n    glyphs?: Glyphs;\n    /**\n     * @generated from protobuf field: proto.Profession profession1 = 29;\n     */\n    profession1: Profession;\n    /**\n     * @generated from protobuf field: proto.Profession profession2 = 30;\n     */\n    profession2: Profession;\n    /**\n     * @generated from protobuf field: proto.Cooldowns cooldowns = 19;\n     */\n    cooldowns?: Cooldowns;\n    /**\n     * @generated from protobuf field: bool in_front_of_target = 23;\n     */\n    inFrontOfTarget: boolean;\n    /**\n     * @generated from protobuf field: double distance_from_target = 33;\n     */\n    distanceFromTarget: number;\n    /**\n     * @generated from protobuf field: proto.HealingModel healing_model = 27;\n     */\n    healingModel?: HealingModel;\n}\n/**\n * @generated from protobuf message proto.Party\n */\nexport interface Party {\n    /**\n     * @generated from protobuf field: repeated proto.Player players = 1;\n     */\n    players: Player[];\n    /**\n     * @generated from protobuf field: proto.PartyBuffs buffs = 2;\n     */\n    buffs?: PartyBuffs;\n}\n/**\n * @generated from protobuf message proto.Raid\n */\nexport interface Raid {\n    /**\n     * @generated from protobuf field: repeated proto.Party parties = 1;\n     */\n    parties: Party[];\n    /**\n     * @generated from protobuf field: proto.RaidBuffs buffs = 2;\n     */\n    buffs?: RaidBuffs;\n    /**\n     * Extra debuffs provided by buff bots in this raid.\n     * This is also used for debuffs in the individual sims.\n     *\n     * @generated from protobuf field: proto.Debuffs debuffs = 5;\n     */\n    debuffs?: Debuffs;\n    /**\n     * Players who will be tanking mobs.\n     *\n     * @generated from protobuf field: repeated proto.RaidTarget tanks = 4;\n     */\n    tanks: RaidTarget[];\n    /**\n     * Staggers Stormstrike casts across Enhance Shaman to maximize charge usage.\n     *\n     * @generated from protobuf field: bool stagger_stormstrikes = 3;\n     */\n    staggerStormstrikes: boolean;\n    /**\n     * Extra fake players to add. Currently only used by healing sims.\n     *\n     * @generated from protobuf field: int32 target_dummies = 6;\n     */\n    targetDummies: number;\n}\n/**\n * @generated from protobuf message proto.SimOptions\n */\nexport interface SimOptions {\n    /**\n     * @generated from protobuf field: int32 iterations = 1;\n     */\n    iterations: number;\n    /**\n     * @generated from protobuf field: int64 random_seed = 2;\n     */\n    randomSeed: bigint;\n    /**\n     * @generated from protobuf field: bool debug = 3;\n     */\n    debug: boolean; // Enables debug logging.\n    /**\n     * @generated from protobuf field: bool debug_first_iteration = 6;\n     */\n    debugFirstIteration: boolean;\n    /**\n     * @generated from protobuf field: bool is_test = 5;\n     */\n    isTest: boolean; // Only used internally.\n}\n/**\n * The aggregated results from all uses of a particular action.\n *\n * @generated from protobuf message proto.ActionMetrics\n */\nexport interface ActionMetrics {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * True if a melee action, false if a spell action.\n     *\n     * @generated from protobuf field: bool is_melee = 2;\n     */\n    isMelee: boolean;\n    /**\n     * Metrics for this action for each target.\n     * Note that some spells are untargeted, these will always have a single\n     * element in this array.\n     *\n     * @generated from protobuf field: repeated proto.TargetedActionMetrics targets = 3;\n     */\n    targets: TargetedActionMetrics[];\n}\n/**\n * Metrics for a specific action, when cast at a particular target.\n *\n * @generated from protobuf message proto.TargetedActionMetrics\n */\nexport interface TargetedActionMetrics {\n    /**\n     * Raid/Target Index of the unit these metrics are targeted at.\n     *\n     * @generated from protobuf field: int32 unit_index = 12;\n     */\n    unitIndex: number;\n    /**\n     * # of times this action was used by the agent.\n     *\n     * @generated from protobuf field: int32 casts = 1;\n     */\n    casts: number;\n    /**\n     * # of times this action hit a target. For cleave spells this can be larger than casts.\n     *\n     * @generated from protobuf field: int32 hits = 2;\n     */\n    hits: number;\n    /**\n     * # of times this action was a critical strike.\n     *\n     * @generated from protobuf field: int32 crits = 3;\n     */\n    crits: number;\n    /**\n     * # of times this action was a Miss or Resist.\n     *\n     * @generated from protobuf field: int32 misses = 4;\n     */\n    misses: number;\n    /**\n     * # of times this action was a Dodge.\n     *\n     * @generated from protobuf field: int32 dodges = 5;\n     */\n    dodges: number;\n    /**\n     * # of times this action was a Parry.\n     *\n     * @generated from protobuf field: int32 parries = 6;\n     */\n    parries: number;\n    /**\n     * # of times this action was a Block.\n     *\n     * @generated from protobuf field: int32 blocks = 7;\n     */\n    blocks: number;\n    /**\n     * # of times this action was a Glance.\n     *\n     * @generated from protobuf field: int32 glances = 8;\n     */\n    glances: number;\n    /**\n     * Total damage done to this target by this action.\n     *\n     * @generated from protobuf field: double damage = 9;\n     */\n    damage: number;\n    /**\n     * Total threat done to this target by this action.\n     *\n     * @generated from protobuf field: double threat = 10;\n     */\n    threat: number;\n    /**\n     * Total healing done to this target by this action.\n     *\n     * @generated from protobuf field: double healing = 11;\n     */\n    healing: number;\n    /**\n     * Total shielding done to this target by this action.\n     *\n     * @generated from protobuf field: double shielding = 13;\n     */\n    shielding: number;\n    /**\n     * Total time spent casting this action, in milliseconds, either from hard casts, GCD, or channeling.\n     *\n     * @generated from protobuf field: double cast_time_ms = 14;\n     */\n    castTimeMs: number;\n}\n/**\n * @generated from protobuf message proto.AuraMetrics\n */\nexport interface AuraMetrics {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * @generated from protobuf field: double uptime_seconds_avg = 2;\n     */\n    uptimeSecondsAvg: number;\n    /**\n     * @generated from protobuf field: double uptime_seconds_stdev = 3;\n     */\n    uptimeSecondsStdev: number;\n    /**\n     * @generated from protobuf field: double procs_avg = 4;\n     */\n    procsAvg: number;\n}\n/**\n * @generated from protobuf message proto.ResourceMetrics\n */\nexport interface ResourceMetrics {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * @generated from protobuf field: proto.ResourceType type = 2;\n     */\n    type: ResourceType;\n    /**\n     * # of times this action was used by the agent.\n     *\n     * @generated from protobuf field: int32 events = 3;\n     */\n    events: number;\n    /**\n     * Total resource gain from this action. Will be negative for spend actions.\n     *\n     * @generated from protobuf field: double gain = 4;\n     */\n    gain: number;\n    /**\n     * Like gain, but doesn't include gains over resource cap.\n     *\n     * @generated from protobuf field: double actual_gain = 5;\n     */\n    actualGain: number;\n}\n/**\n * @generated from protobuf message proto.DistributionMetrics\n */\nexport interface DistributionMetrics {\n    /**\n     * @generated from protobuf field: double avg = 1;\n     */\n    avg: number;\n    /**\n     * @generated from protobuf field: double stdev = 2;\n     */\n    stdev: number;\n    /**\n     * @generated from protobuf field: double max = 3;\n     */\n    max: number;\n    /**\n     * @generated from protobuf field: int64 maxSeed = 5;\n     */\n    maxSeed: bigint;\n    /**\n     * @generated from protobuf field: double min = 6;\n     */\n    min: number;\n    /**\n     * @generated from protobuf field: int64 minSeed = 7;\n     */\n    minSeed: bigint;\n    /**\n     * @generated from protobuf field: map<int32, int32> hist = 4;\n     */\n    hist: {\n        [key: number]: number;\n    };\n}\n/**\n * All the results for a single Unit (player, target, or pet).\n *\n * @generated from protobuf message proto.UnitMetrics\n */\nexport interface UnitMetrics {\n    /**\n     * @generated from protobuf field: string name = 9;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: int32 unit_index = 13;\n     */\n    unitIndex: number;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dps = 1;\n     */\n    dps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics threat = 8;\n     */\n    threat?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dtps = 11;\n     */\n    dtps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics hps = 14;\n     */\n    hps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics tto = 15;\n     */\n    tto?: DistributionMetrics; // Time To OOM, in seconds.\n    /**\n     * average seconds spent oom per iteration\n     *\n     * @generated from protobuf field: double seconds_oom_avg = 3;\n     */\n    secondsOomAvg: number;\n    /**\n     * Chance (0-1) representing probability of death. Used for tank sims.\n     *\n     * @generated from protobuf field: double chance_of_death = 12;\n     */\n    chanceOfDeath: number;\n    /**\n     * @generated from protobuf field: repeated proto.ActionMetrics actions = 5;\n     */\n    actions: ActionMetrics[];\n    /**\n     * @generated from protobuf field: repeated proto.AuraMetrics auras = 6;\n     */\n    auras: AuraMetrics[];\n    /**\n     * @generated from protobuf field: repeated proto.ResourceMetrics resources = 10;\n     */\n    resources: ResourceMetrics[];\n    /**\n     * @generated from protobuf field: repeated proto.UnitMetrics pets = 7;\n     */\n    pets: UnitMetrics[];\n}\n/**\n * Results for a whole raid.\n *\n * @generated from protobuf message proto.PartyMetrics\n */\nexport interface PartyMetrics {\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dps = 1;\n     */\n    dps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics hps = 3;\n     */\n    hps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: repeated proto.UnitMetrics players = 2;\n     */\n    players: UnitMetrics[];\n}\n/**\n * Results for a whole raid.\n *\n * @generated from protobuf message proto.RaidMetrics\n */\nexport interface RaidMetrics {\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dps = 1;\n     */\n    dps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics hps = 3;\n     */\n    hps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: repeated proto.PartyMetrics parties = 2;\n     */\n    parties: PartyMetrics[];\n}\n/**\n * @generated from protobuf message proto.EncounterMetrics\n */\nexport interface EncounterMetrics {\n    /**\n     * @generated from protobuf field: repeated proto.UnitMetrics targets = 1;\n     */\n    targets: UnitMetrics[];\n}\n/**\n * RPC RaidSim\n *\n * @generated from protobuf message proto.RaidSimRequest\n */\nexport interface RaidSimRequest {\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 2;\n     */\n    encounter?: Encounter;\n    /**\n     * @generated from protobuf field: proto.SimOptions sim_options = 3;\n     */\n    simOptions?: SimOptions;\n}\n/**\n * Result from running the raid sim.\n *\n * @generated from protobuf message proto.RaidSimResult\n */\nexport interface RaidSimResult {\n    /**\n     * @generated from protobuf field: proto.RaidMetrics raid_metrics = 1;\n     */\n    raidMetrics?: RaidMetrics;\n    /**\n     * @generated from protobuf field: proto.EncounterMetrics encounter_metrics = 2;\n     */\n    encounterMetrics?: EncounterMetrics;\n    /**\n     * @generated from protobuf field: string logs = 3;\n     */\n    logs: string;\n    /**\n     * Needed for displaying the timeline properly when the duration +/- option\n     * is used.\n     *\n     * @generated from protobuf field: double first_iteration_duration = 4;\n     */\n    firstIterationDuration: number;\n    /**\n     * @generated from protobuf field: double avg_iteration_duration = 6;\n     */\n    avgIterationDuration: number;\n    /**\n     * @generated from protobuf field: string error_result = 5;\n     */\n    errorResult: string;\n}\n/**\n * RPC GearList\n *\n * @generated from protobuf message proto.GearListRequest\n */\nexport interface GearListRequest {\n}\n/**\n * @generated from protobuf message proto.GearListResult\n */\nexport interface GearListResult {\n    /**\n     * @generated from protobuf field: repeated proto.Item items = 1;\n     */\n    items: Item[];\n    /**\n     * @generated from protobuf field: repeated proto.Enchant enchants = 2;\n     */\n    enchants: Enchant[];\n    /**\n     * @generated from protobuf field: repeated proto.Gem gems = 3;\n     */\n    gems: Gem[];\n    /**\n     * @generated from protobuf field: repeated proto.PresetEncounter encounters = 4;\n     */\n    encounters: PresetEncounter[];\n}\n/**\n * @generated from protobuf message proto.PresetTarget\n */\nexport interface PresetTarget {\n    /**\n     * @generated from protobuf field: string path = 1;\n     */\n    path: string;\n    /**\n     * @generated from protobuf field: proto.Target target = 2;\n     */\n    target?: Target;\n}\n/**\n * @generated from protobuf message proto.PresetEncounter\n */\nexport interface PresetEncounter {\n    /**\n     * @generated from protobuf field: string path = 1;\n     */\n    path: string;\n    /**\n     * @generated from protobuf field: repeated proto.PresetTarget targets = 2;\n     */\n    targets: PresetTarget[];\n}\n/**\n * RPC ComputeStats\n *\n * @generated from protobuf message proto.ComputeStatsRequest\n */\nexport interface ComputeStatsRequest {\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n}\n/**\n * @generated from protobuf message proto.PlayerStats\n */\nexport interface PlayerStats {\n    /**\n     * Stats\n     *\n     * @generated from protobuf field: repeated double base_stats = 6;\n     */\n    baseStats: number[];\n    /**\n     * @generated from protobuf field: repeated double gear_stats = 1;\n     */\n    gearStats: number[];\n    /**\n     * @generated from protobuf field: repeated double talents_stats = 7;\n     */\n    talentsStats: number[];\n    /**\n     * @generated from protobuf field: repeated double buffs_stats = 8;\n     */\n    buffsStats: number[];\n    /**\n     * @generated from protobuf field: repeated double consumes_stats = 9;\n     */\n    consumesStats: number[];\n    /**\n     * @generated from protobuf field: repeated double final_stats = 2;\n     */\n    finalStats: number[];\n    /**\n     * @generated from protobuf field: repeated string sets = 3;\n     */\n    sets: string[];\n    /**\n     * @generated from protobuf field: proto.IndividualBuffs buffs = 4;\n     */\n    buffs?: IndividualBuffs;\n    /**\n     * @generated from protobuf field: repeated proto.ActionID cooldowns = 5;\n     */\n    cooldowns: ActionID[];\n}\n/**\n * @generated from protobuf message proto.PartyStats\n */\nexport interface PartyStats {\n    /**\n     * @generated from protobuf field: repeated proto.PlayerStats players = 1;\n     */\n    players: PlayerStats[];\n}\n/**\n * @generated from protobuf message proto.RaidStats\n */\nexport interface RaidStats {\n    /**\n     * @generated from protobuf field: repeated proto.PartyStats parties = 1;\n     */\n    parties: PartyStats[];\n}\n/**\n * @generated from protobuf message proto.ComputeStatsResult\n */\nexport interface ComputeStatsResult {\n    /**\n     * @generated from protobuf field: proto.RaidStats raid_stats = 1;\n     */\n    raidStats?: RaidStats;\n    /**\n     * @generated from protobuf field: string error_result = 2;\n     */\n    errorResult: string;\n}\n/**\n * RPC StatWeights\n *\n * @generated from protobuf message proto.StatWeightsRequest\n */\nexport interface StatWeightsRequest {\n    /**\n     * @generated from protobuf field: proto.Player player = 1;\n     */\n    player?: Player;\n    /**\n     * @generated from protobuf field: proto.RaidBuffs raid_buffs = 2;\n     */\n    raidBuffs?: RaidBuffs;\n    /**\n     * @generated from protobuf field: proto.PartyBuffs party_buffs = 3;\n     */\n    partyBuffs?: PartyBuffs;\n    /**\n     * @generated from protobuf field: proto.Debuffs debuffs = 9;\n     */\n    debuffs?: Debuffs;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 4;\n     */\n    encounter?: Encounter;\n    /**\n     * @generated from protobuf field: proto.SimOptions sim_options = 5;\n     */\n    simOptions?: SimOptions;\n    /**\n     * @generated from protobuf field: repeated proto.RaidTarget tanks = 8;\n     */\n    tanks: RaidTarget[];\n    /**\n     * @generated from protobuf field: repeated proto.Stat stats_to_weigh = 6;\n     */\n    statsToWeigh: Stat[];\n    /**\n     * @generated from protobuf field: proto.Stat ep_reference_stat = 7;\n     */\n    epReferenceStat: Stat;\n}\n/**\n * @generated from protobuf message proto.StatWeightsResult\n */\nexport interface StatWeightsResult {\n    /**\n     * @generated from protobuf field: proto.StatWeightValues dps = 1;\n     */\n    dps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues hps = 4;\n     */\n    hps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues tps = 2;\n     */\n    tps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues dtps = 3;\n     */\n    dtps?: StatWeightValues;\n}\n/**\n * @generated from protobuf message proto.StatWeightValues\n */\nexport interface StatWeightValues {\n    /**\n     * @generated from protobuf field: repeated double weights = 1;\n     */\n    weights: number[];\n    /**\n     * @generated from protobuf field: repeated double weights_stdev = 2;\n     */\n    weightsStdev: number[];\n    /**\n     * @generated from protobuf field: repeated double ep_values = 3;\n     */\n    epValues: number[];\n    /**\n     * @generated from protobuf field: repeated double ep_values_stdev = 4;\n     */\n    epValuesStdev: number[];\n}\n/**\n * @generated from protobuf message proto.AsyncAPIResult\n */\nexport interface AsyncAPIResult {\n    /**\n     * @generated from protobuf field: string progress_id = 1;\n     */\n    progressId: string;\n}\n/**\n * ProgressMetrics are used by all async APIs\n *\n * @generated from protobuf message proto.ProgressMetrics\n */\nexport interface ProgressMetrics {\n    /**\n     * @generated from protobuf field: int32 completed_iterations = 1;\n     */\n    completedIterations: number;\n    /**\n     * @generated from protobuf field: int32 total_iterations = 2;\n     */\n    totalIterations: number;\n    /**\n     * @generated from protobuf field: int32 completed_sims = 3;\n     */\n    completedSims: number;\n    /**\n     * @generated from protobuf field: int32 total_sims = 4;\n     */\n    totalSims: number;\n    /**\n     * @generated from protobuf field: bool presim_running = 8;\n     */\n    presimRunning: boolean;\n    /**\n     * Partial Results\n     *\n     * @generated from protobuf field: double dps = 5;\n     */\n    dps: number;\n    /**\n     * @generated from protobuf field: double hps = 9;\n     */\n    hps: number;\n    /**\n     * Final Results\n     *\n     * @generated from protobuf field: proto.RaidSimResult final_raid_result = 6;\n     */\n    finalRaidResult?: RaidSimResult; // only set when completed\n    /**\n     * @generated from protobuf field: proto.StatWeightsResult final_weight_result = 7;\n     */\n    finalWeightResult?: StatWeightsResult;\n}\n/**\n * @generated from protobuf enum proto.ResourceType\n */\nexport enum ResourceType {\n    /**\n     * @generated from protobuf enum value: ResourceTypeNone = 0;\n     */\n    ResourceTypeNone = 0,\n    /**\n     * @generated from protobuf enum value: ResourceTypeMana = 1;\n     */\n    ResourceTypeMana = 1,\n    /**\n     * @generated from protobuf enum value: ResourceTypeEnergy = 2;\n     */\n    ResourceTypeEnergy = 2,\n    /**\n     * @generated from protobuf enum value: ResourceTypeRage = 3;\n     */\n    ResourceTypeRage = 3,\n    /**\n     * @generated from protobuf enum value: ResourceTypeComboPoints = 4;\n     */\n    ResourceTypeComboPoints = 4,\n    /**\n     * @generated from protobuf enum value: ResourceTypeFocus = 5;\n     */\n    ResourceTypeFocus = 5,\n    /**\n     * @generated from protobuf enum value: ResourceTypeHealth = 6;\n     */\n    ResourceTypeHealth = 6,\n    /**\n     * @generated from protobuf enum value: ResourceTypeRunicPower = 7;\n     */\n    ResourceTypeRunicPower = 7,\n    /**\n     * @generated from protobuf enum value: ResourceTypeBloodRune = 8;\n     */\n    ResourceTypeBloodRune = 8,\n    /**\n     * @generated from protobuf enum value: ResourceTypeFrostRune = 9;\n     */\n    ResourceTypeFrostRune = 9,\n    /**\n     * @generated from protobuf enum value: ResourceTypeUnholyRune = 10;\n     */\n    ResourceTypeUnholyRune = 10,\n    /**\n     * @generated from protobuf enum value: ResourceTypeDeathRune = 11;\n     */\n    ResourceTypeDeathRune = 11\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Player$Type extends MessageType<Player> {\n    constructor() {\n        super(\"proto.Player\", [\n            { no: 16, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 1, name: \"race\", kind: \"enum\", T: () => [\"proto.Race\", Race] },\n            { no: 24, name: \"shatt_faction\", kind: \"enum\", T: () => [\"proto.ShattrathFaction\", ShattrathFaction] },\n            { no: 2, name: \"class\", kind: \"enum\", T: () => [\"proto.Class\", Class] },\n            { no: 3, name: \"equipment\", kind: \"message\", T: () => EquipmentSpec },\n            { no: 4, name: \"consumes\", kind: \"message\", T: () => Consumes },\n            { no: 5, name: \"bonus_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 15, name: \"buffs\", kind: \"message\", T: () => IndividualBuffs },\n            { no: 6, name: \"balance_druid\", kind: \"message\", oneof: \"spec\", T: () => BalanceDruid },\n            { no: 22, name: \"feral_druid\", kind: \"message\", oneof: \"spec\", T: () => FeralDruid },\n            { no: 26, name: \"feral_tank_druid\", kind: \"message\", oneof: \"spec\", T: () => FeralTankDruid },\n            { no: 7, name: \"hunter\", kind: \"message\", oneof: \"spec\", T: () => Hunter },\n            { no: 8, name: \"mage\", kind: \"message\", oneof: \"spec\", T: () => Mage },\n            { no: 9, name: \"retribution_paladin\", kind: \"message\", oneof: \"spec\", T: () => RetributionPaladin },\n            { no: 25, name: \"protection_paladin\", kind: \"message\", oneof: \"spec\", T: () => ProtectionPaladin },\n            { no: 34, name: \"healing_priest\", kind: \"message\", oneof: \"spec\", T: () => HealingPriest },\n            { no: 10, name: \"shadow_priest\", kind: \"message\", oneof: \"spec\", T: () => ShadowPriest },\n            { no: 20, name: \"smite_priest\", kind: \"message\", oneof: \"spec\", T: () => SmitePriest },\n            { no: 11, name: \"rogue\", kind: \"message\", oneof: \"spec\", T: () => Rogue },\n            { no: 12, name: \"elemental_shaman\", kind: \"message\", oneof: \"spec\", T: () => ElementalShaman },\n            { no: 18, name: \"enhancement_shaman\", kind: \"message\", oneof: \"spec\", T: () => EnhancementShaman },\n            { no: 13, name: \"warlock\", kind: \"message\", oneof: \"spec\", T: () => Warlock },\n            { no: 14, name: \"warrior\", kind: \"message\", oneof: \"spec\", T: () => Warrior },\n            { no: 21, name: \"protection_warrior\", kind: \"message\", oneof: \"spec\", T: () => ProtectionWarrior },\n            { no: 31, name: \"deathknight\", kind: \"message\", oneof: \"spec\", T: () => Deathknight },\n            { no: 32, name: \"tank_deathknight\", kind: \"message\", oneof: \"spec\", T: () => TankDeathknight },\n            { no: 17, name: \"talentsString\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 28, name: \"glyphs\", kind: \"message\", T: () => Glyphs },\n            { no: 29, name: \"profession1\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 30, name: \"profession2\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 19, name: \"cooldowns\", kind: \"message\", T: () => Cooldowns },\n            { no: 23, name: \"in_front_of_target\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"distance_from_target\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 27, name: \"healing_model\", kind: \"message\", T: () => HealingModel }\n        ]);\n    }\n    create(value?: PartialMessage<Player>): Player {\n        const message = { name: \"\", race: 0, shattFaction: 0, class: 0, bonusStats: [], spec: { oneofKind: undefined }, talentsString: \"\", profession1: 0, profession2: 0, inFrontOfTarget: false, distanceFromTarget: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Player>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player): Player {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 16:\n                    message.name = reader.string();\n                    break;\n                case /* proto.Race race */ 1:\n                    message.race = reader.int32();\n                    break;\n                case /* proto.ShattrathFaction shatt_faction */ 24:\n                    message.shattFaction = reader.int32();\n                    break;\n                case /* proto.Class class */ 2:\n                    message.class = reader.int32();\n                    break;\n                case /* proto.EquipmentSpec equipment */ 3:\n                    message.equipment = EquipmentSpec.internalBinaryRead(reader, reader.uint32(), options, message.equipment);\n                    break;\n                case /* proto.Consumes consumes */ 4:\n                    message.consumes = Consumes.internalBinaryRead(reader, reader.uint32(), options, message.consumes);\n                    break;\n                case /* repeated double bonus_stats */ 5:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.bonusStats.push(reader.double());\n                    else\n                        message.bonusStats.push(reader.double());\n                    break;\n                case /* proto.IndividualBuffs buffs */ 15:\n                    message.buffs = IndividualBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                case /* proto.BalanceDruid balance_druid */ 6:\n                    message.spec = {\n                        oneofKind: \"balanceDruid\",\n                        balanceDruid: BalanceDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).balanceDruid)\n                    };\n                    break;\n                case /* proto.FeralDruid feral_druid */ 22:\n                    message.spec = {\n                        oneofKind: \"feralDruid\",\n                        feralDruid: FeralDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).feralDruid)\n                    };\n                    break;\n                case /* proto.FeralTankDruid feral_tank_druid */ 26:\n                    message.spec = {\n                        oneofKind: \"feralTankDruid\",\n                        feralTankDruid: FeralTankDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).feralTankDruid)\n                    };\n                    break;\n                case /* proto.Hunter hunter */ 7:\n                    message.spec = {\n                        oneofKind: \"hunter\",\n                        hunter: Hunter.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).hunter)\n                    };\n                    break;\n                case /* proto.Mage mage */ 8:\n                    message.spec = {\n                        oneofKind: \"mage\",\n                        mage: Mage.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).mage)\n                    };\n                    break;\n                case /* proto.RetributionPaladin retribution_paladin */ 9:\n                    message.spec = {\n                        oneofKind: \"retributionPaladin\",\n                        retributionPaladin: RetributionPaladin.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).retributionPaladin)\n                    };\n                    break;\n                case /* proto.ProtectionPaladin protection_paladin */ 25:\n                    message.spec = {\n                        oneofKind: \"protectionPaladin\",\n                        protectionPaladin: ProtectionPaladin.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).protectionPaladin)\n                    };\n                    break;\n                case /* proto.HealingPriest healing_priest */ 34:\n                    message.spec = {\n                        oneofKind: \"healingPriest\",\n                        healingPriest: HealingPriest.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).healingPriest)\n                    };\n                    break;\n                case /* proto.ShadowPriest shadow_priest */ 10:\n                    message.spec = {\n                        oneofKind: \"shadowPriest\",\n                        shadowPriest: ShadowPriest.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).shadowPriest)\n                    };\n                    break;\n                case /* proto.SmitePriest smite_priest */ 20:\n                    message.spec = {\n                        oneofKind: \"smitePriest\",\n                        smitePriest: SmitePriest.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).smitePriest)\n                    };\n                    break;\n                case /* proto.Rogue rogue */ 11:\n                    message.spec = {\n                        oneofKind: \"rogue\",\n                        rogue: Rogue.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).rogue)\n                    };\n                    break;\n                case /* proto.ElementalShaman elemental_shaman */ 12:\n                    message.spec = {\n                        oneofKind: \"elementalShaman\",\n                        elementalShaman: ElementalShaman.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).elementalShaman)\n                    };\n                    break;\n                case /* proto.EnhancementShaman enhancement_shaman */ 18:\n                    message.spec = {\n                        oneofKind: \"enhancementShaman\",\n                        enhancementShaman: EnhancementShaman.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).enhancementShaman)\n                    };\n                    break;\n                case /* proto.Warlock warlock */ 13:\n                    message.spec = {\n                        oneofKind: \"warlock\",\n                        warlock: Warlock.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).warlock)\n                    };\n                    break;\n                case /* proto.Warrior warrior */ 14:\n                    message.spec = {\n                        oneofKind: \"warrior\",\n                        warrior: Warrior.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).warrior)\n                    };\n                    break;\n                case /* proto.ProtectionWarrior protection_warrior */ 21:\n                    message.spec = {\n                        oneofKind: \"protectionWarrior\",\n                        protectionWarrior: ProtectionWarrior.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).protectionWarrior)\n                    };\n                    break;\n                case /* proto.Deathknight deathknight */ 31:\n                    message.spec = {\n                        oneofKind: \"deathknight\",\n                        deathknight: Deathknight.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).deathknight)\n                    };\n                    break;\n                case /* proto.TankDeathknight tank_deathknight */ 32:\n                    message.spec = {\n                        oneofKind: \"tankDeathknight\",\n                        tankDeathknight: TankDeathknight.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).tankDeathknight)\n                    };\n                    break;\n                case /* string talentsString */ 17:\n                    message.talentsString = reader.string();\n                    break;\n                case /* proto.Glyphs glyphs */ 28:\n                    message.glyphs = Glyphs.internalBinaryRead(reader, reader.uint32(), options, message.glyphs);\n                    break;\n                case /* proto.Profession profession1 */ 29:\n                    message.profession1 = reader.int32();\n                    break;\n                case /* proto.Profession profession2 */ 30:\n                    message.profession2 = reader.int32();\n                    break;\n                case /* proto.Cooldowns cooldowns */ 19:\n                    message.cooldowns = Cooldowns.internalBinaryRead(reader, reader.uint32(), options, message.cooldowns);\n                    break;\n                case /* bool in_front_of_target */ 23:\n                    message.inFrontOfTarget = reader.bool();\n                    break;\n                case /* double distance_from_target */ 33:\n                    message.distanceFromTarget = reader.double();\n                    break;\n                case /* proto.HealingModel healing_model */ 27:\n                    message.healingModel = HealingModel.internalBinaryRead(reader, reader.uint32(), options, message.healingModel);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Player, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 16; */\n        if (message.name !== \"\")\n            writer.tag(16, WireType.LengthDelimited).string(message.name);\n        /* proto.Race race = 1; */\n        if (message.race !== 0)\n            writer.tag(1, WireType.Varint).int32(message.race);\n        /* proto.ShattrathFaction shatt_faction = 24; */\n        if (message.shattFaction !== 0)\n            writer.tag(24, WireType.Varint).int32(message.shattFaction);\n        /* proto.Class class = 2; */\n        if (message.class !== 0)\n            writer.tag(2, WireType.Varint).int32(message.class);\n        /* proto.EquipmentSpec equipment = 3; */\n        if (message.equipment)\n            EquipmentSpec.internalBinaryWrite(message.equipment, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Consumes consumes = 4; */\n        if (message.consumes)\n            Consumes.internalBinaryWrite(message.consumes, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* repeated double bonus_stats = 5; */\n        if (message.bonusStats.length) {\n            writer.tag(5, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.bonusStats.length; i++)\n                writer.double(message.bonusStats[i]);\n            writer.join();\n        }\n        /* proto.IndividualBuffs buffs = 15; */\n        if (message.buffs)\n            IndividualBuffs.internalBinaryWrite(message.buffs, writer.tag(15, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BalanceDruid balance_druid = 6; */\n        if (message.spec.oneofKind === \"balanceDruid\")\n            BalanceDruid.internalBinaryWrite(message.spec.balanceDruid, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralDruid feral_druid = 22; */\n        if (message.spec.oneofKind === \"feralDruid\")\n            FeralDruid.internalBinaryWrite(message.spec.feralDruid, writer.tag(22, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralTankDruid feral_tank_druid = 26; */\n        if (message.spec.oneofKind === \"feralTankDruid\")\n            FeralTankDruid.internalBinaryWrite(message.spec.feralTankDruid, writer.tag(26, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Hunter hunter = 7; */\n        if (message.spec.oneofKind === \"hunter\")\n            Hunter.internalBinaryWrite(message.spec.hunter, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Mage mage = 8; */\n        if (message.spec.oneofKind === \"mage\")\n            Mage.internalBinaryWrite(message.spec.mage, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RetributionPaladin retribution_paladin = 9; */\n        if (message.spec.oneofKind === \"retributionPaladin\")\n            RetributionPaladin.internalBinaryWrite(message.spec.retributionPaladin, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionPaladin protection_paladin = 25; */\n        if (message.spec.oneofKind === \"protectionPaladin\")\n            ProtectionPaladin.internalBinaryWrite(message.spec.protectionPaladin, writer.tag(25, WireType.LengthDelimited).fork(), options).join();\n        /* proto.HealingPriest healing_priest = 34; */\n        if (message.spec.oneofKind === \"healingPriest\")\n            HealingPriest.internalBinaryWrite(message.spec.healingPriest, writer.tag(34, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShadowPriest shadow_priest = 10; */\n        if (message.spec.oneofKind === \"shadowPriest\")\n            ShadowPriest.internalBinaryWrite(message.spec.shadowPriest, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SmitePriest smite_priest = 20; */\n        if (message.spec.oneofKind === \"smitePriest\")\n            SmitePriest.internalBinaryWrite(message.spec.smitePriest, writer.tag(20, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Rogue rogue = 11; */\n        if (message.spec.oneofKind === \"rogue\")\n            Rogue.internalBinaryWrite(message.spec.rogue, writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ElementalShaman elemental_shaman = 12; */\n        if (message.spec.oneofKind === \"elementalShaman\")\n            ElementalShaman.internalBinaryWrite(message.spec.elementalShaman, writer.tag(12, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EnhancementShaman enhancement_shaman = 18; */\n        if (message.spec.oneofKind === \"enhancementShaman\")\n            EnhancementShaman.internalBinaryWrite(message.spec.enhancementShaman, writer.tag(18, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Warlock warlock = 13; */\n        if (message.spec.oneofKind === \"warlock\")\n            Warlock.internalBinaryWrite(message.spec.warlock, writer.tag(13, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Warrior warrior = 14; */\n        if (message.spec.oneofKind === \"warrior\")\n            Warrior.internalBinaryWrite(message.spec.warrior, writer.tag(14, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionWarrior protection_warrior = 21; */\n        if (message.spec.oneofKind === \"protectionWarrior\")\n            ProtectionWarrior.internalBinaryWrite(message.spec.protectionWarrior, writer.tag(21, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Deathknight deathknight = 31; */\n        if (message.spec.oneofKind === \"deathknight\")\n            Deathknight.internalBinaryWrite(message.spec.deathknight, writer.tag(31, WireType.LengthDelimited).fork(), options).join();\n        /* proto.TankDeathknight tank_deathknight = 32; */\n        if (message.spec.oneofKind === \"tankDeathknight\")\n            TankDeathknight.internalBinaryWrite(message.spec.tankDeathknight, writer.tag(32, WireType.LengthDelimited).fork(), options).join();\n        /* string talentsString = 17; */\n        if (message.talentsString !== \"\")\n            writer.tag(17, WireType.LengthDelimited).string(message.talentsString);\n        /* proto.Glyphs glyphs = 28; */\n        if (message.glyphs)\n            Glyphs.internalBinaryWrite(message.glyphs, writer.tag(28, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Profession profession1 = 29; */\n        if (message.profession1 !== 0)\n            writer.tag(29, WireType.Varint).int32(message.profession1);\n        /* proto.Profession profession2 = 30; */\n        if (message.profession2 !== 0)\n            writer.tag(30, WireType.Varint).int32(message.profession2);\n        /* proto.Cooldowns cooldowns = 19; */\n        if (message.cooldowns)\n            Cooldowns.internalBinaryWrite(message.cooldowns, writer.tag(19, WireType.LengthDelimited).fork(), options).join();\n        /* bool in_front_of_target = 23; */\n        if (message.inFrontOfTarget !== false)\n            writer.tag(23, WireType.Varint).bool(message.inFrontOfTarget);\n        /* double distance_from_target = 33; */\n        if (message.distanceFromTarget !== 0)\n            writer.tag(33, WireType.Bit64).double(message.distanceFromTarget);\n        /* proto.HealingModel healing_model = 27; */\n        if (message.healingModel)\n            HealingModel.internalBinaryWrite(message.healingModel, writer.tag(27, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Player\n */\nexport const Player = new Player$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Party$Type extends MessageType<Party> {\n    constructor() {\n        super(\"proto.Party\", [\n            { no: 1, name: \"players\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Player },\n            { no: 2, name: \"buffs\", kind: \"message\", T: () => PartyBuffs }\n        ]);\n    }\n    create(value?: PartialMessage<Party>): Party {\n        const message = { players: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Party>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Party): Party {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Player players */ 1:\n                    message.players.push(Player.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.PartyBuffs buffs */ 2:\n                    message.buffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Party, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Player players = 1; */\n        for (let i = 0; i < message.players.length; i++)\n            Player.internalBinaryWrite(message.players[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs buffs = 2; */\n        if (message.buffs)\n            PartyBuffs.internalBinaryWrite(message.buffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Party\n */\nexport const Party = new Party$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Raid$Type extends MessageType<Raid> {\n    constructor() {\n        super(\"proto.Raid\", [\n            { no: 1, name: \"parties\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Party },\n            { no: 2, name: \"buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 5, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 4, name: \"tanks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RaidTarget },\n            { no: 3, name: \"stagger_stormstrikes\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"target_dummies\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Raid>): Raid {\n        const message = { parties: [], tanks: [], staggerStormstrikes: false, targetDummies: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Raid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Raid): Raid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Party parties */ 1:\n                    message.parties.push(Party.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.RaidBuffs buffs */ 2:\n                    message.buffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 5:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* repeated proto.RaidTarget tanks */ 4:\n                    message.tanks.push(RaidTarget.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* bool stagger_stormstrikes */ 3:\n                    message.staggerStormstrikes = reader.bool();\n                    break;\n                case /* int32 target_dummies */ 6:\n                    message.targetDummies = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Raid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Party parties = 1; */\n        for (let i = 0; i < message.parties.length; i++)\n            Party.internalBinaryWrite(message.parties[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidBuffs buffs = 2; */\n        if (message.buffs)\n            RaidBuffs.internalBinaryWrite(message.buffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 5; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.RaidTarget tanks = 4; */\n        for (let i = 0; i < message.tanks.length; i++)\n            RaidTarget.internalBinaryWrite(message.tanks[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* bool stagger_stormstrikes = 3; */\n        if (message.staggerStormstrikes !== false)\n            writer.tag(3, WireType.Varint).bool(message.staggerStormstrikes);\n        /* int32 target_dummies = 6; */\n        if (message.targetDummies !== 0)\n            writer.tag(6, WireType.Varint).int32(message.targetDummies);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Raid\n */\nexport const Raid = new Raid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimOptions$Type extends MessageType<SimOptions> {\n    constructor() {\n        super(\"proto.SimOptions\", [\n            { no: 1, name: \"iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"random_seed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"debug\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"debug_first_iteration\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"is_test\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SimOptions>): SimOptions {\n        const message = { iterations: 0, randomSeed: 0n, debug: false, debugFirstIteration: false, isTest: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimOptions): SimOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 iterations */ 1:\n                    message.iterations = reader.int32();\n                    break;\n                case /* int64 random_seed */ 2:\n                    message.randomSeed = reader.int64().toBigInt();\n                    break;\n                case /* bool debug */ 3:\n                    message.debug = reader.bool();\n                    break;\n                case /* bool debug_first_iteration */ 6:\n                    message.debugFirstIteration = reader.bool();\n                    break;\n                case /* bool is_test */ 5:\n                    message.isTest = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 iterations = 1; */\n        if (message.iterations !== 0)\n            writer.tag(1, WireType.Varint).int32(message.iterations);\n        /* int64 random_seed = 2; */\n        if (message.randomSeed !== 0n)\n            writer.tag(2, WireType.Varint).int64(message.randomSeed);\n        /* bool debug = 3; */\n        if (message.debug !== false)\n            writer.tag(3, WireType.Varint).bool(message.debug);\n        /* bool debug_first_iteration = 6; */\n        if (message.debugFirstIteration !== false)\n            writer.tag(6, WireType.Varint).bool(message.debugFirstIteration);\n        /* bool is_test = 5; */\n        if (message.isTest !== false)\n            writer.tag(5, WireType.Varint).bool(message.isTest);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimOptions\n */\nexport const SimOptions = new SimOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ActionMetrics$Type extends MessageType<ActionMetrics> {\n    constructor() {\n        super(\"proto.ActionMetrics\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"is_melee\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => TargetedActionMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<ActionMetrics>): ActionMetrics {\n        const message = { isMelee: false, targets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ActionMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionMetrics): ActionMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* bool is_melee */ 2:\n                    message.isMelee = reader.bool();\n                    break;\n                case /* repeated proto.TargetedActionMetrics targets */ 3:\n                    message.targets.push(TargetedActionMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ActionMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool is_melee = 2; */\n        if (message.isMelee !== false)\n            writer.tag(2, WireType.Varint).bool(message.isMelee);\n        /* repeated proto.TargetedActionMetrics targets = 3; */\n        for (let i = 0; i < message.targets.length; i++)\n            TargetedActionMetrics.internalBinaryWrite(message.targets[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ActionMetrics\n */\nexport const ActionMetrics = new ActionMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TargetedActionMetrics$Type extends MessageType<TargetedActionMetrics> {\n    constructor() {\n        super(\"proto.TargetedActionMetrics\", [\n            { no: 12, name: \"unit_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 1, name: \"casts\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"hits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"crits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"misses\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"dodges\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"parries\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"blocks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"glances\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"damage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"threat\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 11, name: \"healing\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"shielding\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 14, name: \"cast_time_ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<TargetedActionMetrics>): TargetedActionMetrics {\n        const message = { unitIndex: 0, casts: 0, hits: 0, crits: 0, misses: 0, dodges: 0, parries: 0, blocks: 0, glances: 0, damage: 0, threat: 0, healing: 0, shielding: 0, castTimeMs: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TargetedActionMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TargetedActionMetrics): TargetedActionMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 unit_index */ 12:\n                    message.unitIndex = reader.int32();\n                    break;\n                case /* int32 casts */ 1:\n                    message.casts = reader.int32();\n                    break;\n                case /* int32 hits */ 2:\n                    message.hits = reader.int32();\n                    break;\n                case /* int32 crits */ 3:\n                    message.crits = reader.int32();\n                    break;\n                case /* int32 misses */ 4:\n                    message.misses = reader.int32();\n                    break;\n                case /* int32 dodges */ 5:\n                    message.dodges = reader.int32();\n                    break;\n                case /* int32 parries */ 6:\n                    message.parries = reader.int32();\n                    break;\n                case /* int32 blocks */ 7:\n                    message.blocks = reader.int32();\n                    break;\n                case /* int32 glances */ 8:\n                    message.glances = reader.int32();\n                    break;\n                case /* double damage */ 9:\n                    message.damage = reader.double();\n                    break;\n                case /* double threat */ 10:\n                    message.threat = reader.double();\n                    break;\n                case /* double healing */ 11:\n                    message.healing = reader.double();\n                    break;\n                case /* double shielding */ 13:\n                    message.shielding = reader.double();\n                    break;\n                case /* double cast_time_ms */ 14:\n                    message.castTimeMs = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TargetedActionMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 unit_index = 12; */\n        if (message.unitIndex !== 0)\n            writer.tag(12, WireType.Varint).int32(message.unitIndex);\n        /* int32 casts = 1; */\n        if (message.casts !== 0)\n            writer.tag(1, WireType.Varint).int32(message.casts);\n        /* int32 hits = 2; */\n        if (message.hits !== 0)\n            writer.tag(2, WireType.Varint).int32(message.hits);\n        /* int32 crits = 3; */\n        if (message.crits !== 0)\n            writer.tag(3, WireType.Varint).int32(message.crits);\n        /* int32 misses = 4; */\n        if (message.misses !== 0)\n            writer.tag(4, WireType.Varint).int32(message.misses);\n        /* int32 dodges = 5; */\n        if (message.dodges !== 0)\n            writer.tag(5, WireType.Varint).int32(message.dodges);\n        /* int32 parries = 6; */\n        if (message.parries !== 0)\n            writer.tag(6, WireType.Varint).int32(message.parries);\n        /* int32 blocks = 7; */\n        if (message.blocks !== 0)\n            writer.tag(7, WireType.Varint).int32(message.blocks);\n        /* int32 glances = 8; */\n        if (message.glances !== 0)\n            writer.tag(8, WireType.Varint).int32(message.glances);\n        /* double damage = 9; */\n        if (message.damage !== 0)\n            writer.tag(9, WireType.Bit64).double(message.damage);\n        /* double threat = 10; */\n        if (message.threat !== 0)\n            writer.tag(10, WireType.Bit64).double(message.threat);\n        /* double healing = 11; */\n        if (message.healing !== 0)\n            writer.tag(11, WireType.Bit64).double(message.healing);\n        /* double shielding = 13; */\n        if (message.shielding !== 0)\n            writer.tag(13, WireType.Bit64).double(message.shielding);\n        /* double cast_time_ms = 14; */\n        if (message.castTimeMs !== 0)\n            writer.tag(14, WireType.Bit64).double(message.castTimeMs);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TargetedActionMetrics\n */\nexport const TargetedActionMetrics = new TargetedActionMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AuraMetrics$Type extends MessageType<AuraMetrics> {\n    constructor() {\n        super(\"proto.AuraMetrics\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"uptime_seconds_avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"uptime_seconds_stdev\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"procs_avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<AuraMetrics>): AuraMetrics {\n        const message = { uptimeSecondsAvg: 0, uptimeSecondsStdev: 0, procsAvg: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AuraMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuraMetrics): AuraMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* double uptime_seconds_avg */ 2:\n                    message.uptimeSecondsAvg = reader.double();\n                    break;\n                case /* double uptime_seconds_stdev */ 3:\n                    message.uptimeSecondsStdev = reader.double();\n                    break;\n                case /* double procs_avg */ 4:\n                    message.procsAvg = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AuraMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double uptime_seconds_avg = 2; */\n        if (message.uptimeSecondsAvg !== 0)\n            writer.tag(2, WireType.Bit64).double(message.uptimeSecondsAvg);\n        /* double uptime_seconds_stdev = 3; */\n        if (message.uptimeSecondsStdev !== 0)\n            writer.tag(3, WireType.Bit64).double(message.uptimeSecondsStdev);\n        /* double procs_avg = 4; */\n        if (message.procsAvg !== 0)\n            writer.tag(4, WireType.Bit64).double(message.procsAvg);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AuraMetrics\n */\nexport const AuraMetrics = new AuraMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ResourceMetrics$Type extends MessageType<ResourceMetrics> {\n    constructor() {\n        super(\"proto.ResourceMetrics\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"type\", kind: \"enum\", T: () => [\"proto.ResourceType\", ResourceType] },\n            { no: 3, name: \"events\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"gain\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"actual_gain\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ResourceMetrics>): ResourceMetrics {\n        const message = { type: 0, events: 0, gain: 0, actualGain: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ResourceMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceMetrics): ResourceMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* proto.ResourceType type */ 2:\n                    message.type = reader.int32();\n                    break;\n                case /* int32 events */ 3:\n                    message.events = reader.int32();\n                    break;\n                case /* double gain */ 4:\n                    message.gain = reader.double();\n                    break;\n                case /* double actual_gain */ 5:\n                    message.actualGain = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ResourceMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ResourceType type = 2; */\n        if (message.type !== 0)\n            writer.tag(2, WireType.Varint).int32(message.type);\n        /* int32 events = 3; */\n        if (message.events !== 0)\n            writer.tag(3, WireType.Varint).int32(message.events);\n        /* double gain = 4; */\n        if (message.gain !== 0)\n            writer.tag(4, WireType.Bit64).double(message.gain);\n        /* double actual_gain = 5; */\n        if (message.actualGain !== 0)\n            writer.tag(5, WireType.Bit64).double(message.actualGain);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ResourceMetrics\n */\nexport const ResourceMetrics = new ResourceMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DistributionMetrics$Type extends MessageType<DistributionMetrics> {\n    constructor() {\n        super(\"proto.DistributionMetrics\", [\n            { no: 1, name: \"avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"stdev\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"max\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"maxSeed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 6, name: \"min\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"minSeed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 4, name: \"hist\", kind: \"map\", K: 5 /*ScalarType.INT32*/, V: { kind: \"scalar\", T: 5 /*ScalarType.INT32*/ } }\n        ]);\n    }\n    create(value?: PartialMessage<DistributionMetrics>): DistributionMetrics {\n        const message = { avg: 0, stdev: 0, max: 0, maxSeed: 0n, min: 0, minSeed: 0n, hist: {} };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DistributionMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DistributionMetrics): DistributionMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double avg */ 1:\n                    message.avg = reader.double();\n                    break;\n                case /* double stdev */ 2:\n                    message.stdev = reader.double();\n                    break;\n                case /* double max */ 3:\n                    message.max = reader.double();\n                    break;\n                case /* int64 maxSeed */ 5:\n                    message.maxSeed = reader.int64().toBigInt();\n                    break;\n                case /* double min */ 6:\n                    message.min = reader.double();\n                    break;\n                case /* int64 minSeed */ 7:\n                    message.minSeed = reader.int64().toBigInt();\n                    break;\n                case /* map<int32, int32> hist */ 4:\n                    this.binaryReadMap4(message.hist, reader, options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    private binaryReadMap4(map: DistributionMetrics[\"hist\"], reader: IBinaryReader, options: BinaryReadOptions): void {\n        let len = reader.uint32(), end = reader.pos + len, key: keyof DistributionMetrics[\"hist\"] | undefined, val: DistributionMetrics[\"hist\"][any] | undefined;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case 1:\n                    key = reader.int32();\n                    break;\n                case 2:\n                    val = reader.int32();\n                    break;\n                default: throw new globalThis.Error(\"unknown map entry field for field proto.DistributionMetrics.hist\");\n            }\n        }\n        map[key ?? 0] = val ?? 0;\n    }\n    internalBinaryWrite(message: DistributionMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double avg = 1; */\n        if (message.avg !== 0)\n            writer.tag(1, WireType.Bit64).double(message.avg);\n        /* double stdev = 2; */\n        if (message.stdev !== 0)\n            writer.tag(2, WireType.Bit64).double(message.stdev);\n        /* double max = 3; */\n        if (message.max !== 0)\n            writer.tag(3, WireType.Bit64).double(message.max);\n        /* int64 maxSeed = 5; */\n        if (message.maxSeed !== 0n)\n            writer.tag(5, WireType.Varint).int64(message.maxSeed);\n        /* double min = 6; */\n        if (message.min !== 0)\n            writer.tag(6, WireType.Bit64).double(message.min);\n        /* int64 minSeed = 7; */\n        if (message.minSeed !== 0n)\n            writer.tag(7, WireType.Varint).int64(message.minSeed);\n        /* map<int32, int32> hist = 4; */\n        for (let k of Object.keys(message.hist))\n            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k)).tag(2, WireType.Varint).int32(message.hist[k as any]).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DistributionMetrics\n */\nexport const DistributionMetrics = new DistributionMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnitMetrics$Type extends MessageType<UnitMetrics> {\n    constructor() {\n        super(\"proto.UnitMetrics\", [\n            { no: 9, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 13, name: \"unit_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 1, name: \"dps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 8, name: \"threat\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 11, name: \"dtps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 14, name: \"hps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 15, name: \"tto\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 3, name: \"seconds_oom_avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"chance_of_death\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"actions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ActionMetrics },\n            { no: 6, name: \"auras\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => AuraMetrics },\n            { no: 10, name: \"resources\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ResourceMetrics },\n            { no: 7, name: \"pets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<UnitMetrics>): UnitMetrics {\n        const message = { name: \"\", unitIndex: 0, secondsOomAvg: 0, chanceOfDeath: 0, actions: [], auras: [], resources: [], pets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnitMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitMetrics): UnitMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 9:\n                    message.name = reader.string();\n                    break;\n                case /* int32 unit_index */ 13:\n                    message.unitIndex = reader.int32();\n                    break;\n                case /* proto.DistributionMetrics dps */ 1:\n                    message.dps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.DistributionMetrics threat */ 8:\n                    message.threat = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.threat);\n                    break;\n                case /* proto.DistributionMetrics dtps */ 11:\n                    message.dtps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dtps);\n                    break;\n                case /* proto.DistributionMetrics hps */ 14:\n                    message.hps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* proto.DistributionMetrics tto */ 15:\n                    message.tto = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.tto);\n                    break;\n                case /* double seconds_oom_avg */ 3:\n                    message.secondsOomAvg = reader.double();\n                    break;\n                case /* double chance_of_death */ 12:\n                    message.chanceOfDeath = reader.double();\n                    break;\n                case /* repeated proto.ActionMetrics actions */ 5:\n                    message.actions.push(ActionMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.AuraMetrics auras */ 6:\n                    message.auras.push(AuraMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.ResourceMetrics resources */ 10:\n                    message.resources.push(ResourceMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UnitMetrics pets */ 7:\n                    message.pets.push(UnitMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UnitMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 9; */\n        if (message.name !== \"\")\n            writer.tag(9, WireType.LengthDelimited).string(message.name);\n        /* int32 unit_index = 13; */\n        if (message.unitIndex !== 0)\n            writer.tag(13, WireType.Varint).int32(message.unitIndex);\n        /* proto.DistributionMetrics dps = 1; */\n        if (message.dps)\n            DistributionMetrics.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics threat = 8; */\n        if (message.threat)\n            DistributionMetrics.internalBinaryWrite(message.threat, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics dtps = 11; */\n        if (message.dtps)\n            DistributionMetrics.internalBinaryWrite(message.dtps, writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics hps = 14; */\n        if (message.hps)\n            DistributionMetrics.internalBinaryWrite(message.hps, writer.tag(14, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics tto = 15; */\n        if (message.tto)\n            DistributionMetrics.internalBinaryWrite(message.tto, writer.tag(15, WireType.LengthDelimited).fork(), options).join();\n        /* double seconds_oom_avg = 3; */\n        if (message.secondsOomAvg !== 0)\n            writer.tag(3, WireType.Bit64).double(message.secondsOomAvg);\n        /* double chance_of_death = 12; */\n        if (message.chanceOfDeath !== 0)\n            writer.tag(12, WireType.Bit64).double(message.chanceOfDeath);\n        /* repeated proto.ActionMetrics actions = 5; */\n        for (let i = 0; i < message.actions.length; i++)\n            ActionMetrics.internalBinaryWrite(message.actions[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.AuraMetrics auras = 6; */\n        for (let i = 0; i < message.auras.length; i++)\n            AuraMetrics.internalBinaryWrite(message.auras[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ResourceMetrics resources = 10; */\n        for (let i = 0; i < message.resources.length; i++)\n            ResourceMetrics.internalBinaryWrite(message.resources[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UnitMetrics pets = 7; */\n        for (let i = 0; i < message.pets.length; i++)\n            UnitMetrics.internalBinaryWrite(message.pets[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnitMetrics\n */\nexport const UnitMetrics = new UnitMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PartyMetrics$Type extends MessageType<PartyMetrics> {\n    constructor() {\n        super(\"proto.PartyMetrics\", [\n            { no: 1, name: \"dps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 3, name: \"hps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 2, name: \"players\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<PartyMetrics>): PartyMetrics {\n        const message = { players: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PartyMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartyMetrics): PartyMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DistributionMetrics dps */ 1:\n                    message.dps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.DistributionMetrics hps */ 3:\n                    message.hps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* repeated proto.UnitMetrics players */ 2:\n                    message.players.push(UnitMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PartyMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DistributionMetrics dps = 1; */\n        if (message.dps)\n            DistributionMetrics.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics hps = 3; */\n        if (message.hps)\n            DistributionMetrics.internalBinaryWrite(message.hps, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UnitMetrics players = 2; */\n        for (let i = 0; i < message.players.length; i++)\n            UnitMetrics.internalBinaryWrite(message.players[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PartyMetrics\n */\nexport const PartyMetrics = new PartyMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidMetrics$Type extends MessageType<RaidMetrics> {\n    constructor() {\n        super(\"proto.RaidMetrics\", [\n            { no: 1, name: \"dps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 3, name: \"hps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 2, name: \"parties\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PartyMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<RaidMetrics>): RaidMetrics {\n        const message = { parties: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidMetrics): RaidMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DistributionMetrics dps */ 1:\n                    message.dps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.DistributionMetrics hps */ 3:\n                    message.hps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* repeated proto.PartyMetrics parties */ 2:\n                    message.parties.push(PartyMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DistributionMetrics dps = 1; */\n        if (message.dps)\n            DistributionMetrics.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics hps = 3; */\n        if (message.hps)\n            DistributionMetrics.internalBinaryWrite(message.hps, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.PartyMetrics parties = 2; */\n        for (let i = 0; i < message.parties.length; i++)\n            PartyMetrics.internalBinaryWrite(message.parties[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidMetrics\n */\nexport const RaidMetrics = new RaidMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EncounterMetrics$Type extends MessageType<EncounterMetrics> {\n    constructor() {\n        super(\"proto.EncounterMetrics\", [\n            { no: 1, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<EncounterMetrics>): EncounterMetrics {\n        const message = { targets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EncounterMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EncounterMetrics): EncounterMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.UnitMetrics targets */ 1:\n                    message.targets.push(UnitMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EncounterMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.UnitMetrics targets = 1; */\n        for (let i = 0; i < message.targets.length; i++)\n            UnitMetrics.internalBinaryWrite(message.targets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EncounterMetrics\n */\nexport const EncounterMetrics = new EncounterMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidSimRequest$Type extends MessageType<RaidSimRequest> {\n    constructor() {\n        super(\"proto.RaidSimRequest\", [\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 2, name: \"encounter\", kind: \"message\", T: () => Encounter },\n            { no: 3, name: \"sim_options\", kind: \"message\", T: () => SimOptions }\n        ]);\n    }\n    create(value?: PartialMessage<RaidSimRequest>): RaidSimRequest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidSimRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidSimRequest): RaidSimRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* proto.Encounter encounter */ 2:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                case /* proto.SimOptions sim_options */ 3:\n                    message.simOptions = SimOptions.internalBinaryRead(reader, reader.uint32(), options, message.simOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidSimRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 2; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimOptions sim_options = 3; */\n        if (message.simOptions)\n            SimOptions.internalBinaryWrite(message.simOptions, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidSimRequest\n */\nexport const RaidSimRequest = new RaidSimRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidSimResult$Type extends MessageType<RaidSimResult> {\n    constructor() {\n        super(\"proto.RaidSimResult\", [\n            { no: 1, name: \"raid_metrics\", kind: \"message\", T: () => RaidMetrics },\n            { no: 2, name: \"encounter_metrics\", kind: \"message\", T: () => EncounterMetrics },\n            { no: 3, name: \"logs\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"first_iteration_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"avg_iteration_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"error_result\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RaidSimResult>): RaidSimResult {\n        const message = { logs: \"\", firstIterationDuration: 0, avgIterationDuration: 0, errorResult: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidSimResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidSimResult): RaidSimResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidMetrics raid_metrics */ 1:\n                    message.raidMetrics = RaidMetrics.internalBinaryRead(reader, reader.uint32(), options, message.raidMetrics);\n                    break;\n                case /* proto.EncounterMetrics encounter_metrics */ 2:\n                    message.encounterMetrics = EncounterMetrics.internalBinaryRead(reader, reader.uint32(), options, message.encounterMetrics);\n                    break;\n                case /* string logs */ 3:\n                    message.logs = reader.string();\n                    break;\n                case /* double first_iteration_duration */ 4:\n                    message.firstIterationDuration = reader.double();\n                    break;\n                case /* double avg_iteration_duration */ 6:\n                    message.avgIterationDuration = reader.double();\n                    break;\n                case /* string error_result */ 5:\n                    message.errorResult = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidSimResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidMetrics raid_metrics = 1; */\n        if (message.raidMetrics)\n            RaidMetrics.internalBinaryWrite(message.raidMetrics, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EncounterMetrics encounter_metrics = 2; */\n        if (message.encounterMetrics)\n            EncounterMetrics.internalBinaryWrite(message.encounterMetrics, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* string logs = 3; */\n        if (message.logs !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.logs);\n        /* double first_iteration_duration = 4; */\n        if (message.firstIterationDuration !== 0)\n            writer.tag(4, WireType.Bit64).double(message.firstIterationDuration);\n        /* double avg_iteration_duration = 6; */\n        if (message.avgIterationDuration !== 0)\n            writer.tag(6, WireType.Bit64).double(message.avgIterationDuration);\n        /* string error_result = 5; */\n        if (message.errorResult !== \"\")\n            writer.tag(5, WireType.LengthDelimited).string(message.errorResult);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidSimResult\n */\nexport const RaidSimResult = new RaidSimResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GearListRequest$Type extends MessageType<GearListRequest> {\n    constructor() {\n        super(\"proto.GearListRequest\", []);\n    }\n    create(value?: PartialMessage<GearListRequest>): GearListRequest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<GearListRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GearListRequest): GearListRequest {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: GearListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.GearListRequest\n */\nexport const GearListRequest = new GearListRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GearListResult$Type extends MessageType<GearListResult> {\n    constructor() {\n        super(\"proto.GearListResult\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Item },\n            { no: 2, name: \"enchants\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Enchant },\n            { no: 3, name: \"gems\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Gem },\n            { no: 4, name: \"encounters\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PresetEncounter }\n        ]);\n    }\n    create(value?: PartialMessage<GearListResult>): GearListResult {\n        const message = { items: [], enchants: [], gems: [], encounters: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<GearListResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GearListResult): GearListResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Item items */ 1:\n                    message.items.push(Item.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.Enchant enchants */ 2:\n                    message.enchants.push(Enchant.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.Gem gems */ 3:\n                    message.gems.push(Gem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.PresetEncounter encounters */ 4:\n                    message.encounters.push(PresetEncounter.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: GearListResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Item items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            Item.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.Enchant enchants = 2; */\n        for (let i = 0; i < message.enchants.length; i++)\n            Enchant.internalBinaryWrite(message.enchants[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.Gem gems = 3; */\n        for (let i = 0; i < message.gems.length; i++)\n            Gem.internalBinaryWrite(message.gems[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.PresetEncounter encounters = 4; */\n        for (let i = 0; i < message.encounters.length; i++)\n            PresetEncounter.internalBinaryWrite(message.encounters[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.GearListResult\n */\nexport const GearListResult = new GearListResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PresetTarget$Type extends MessageType<PresetTarget> {\n    constructor() {\n        super(\"proto.PresetTarget\", [\n            { no: 1, name: \"path\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"target\", kind: \"message\", T: () => Target }\n        ]);\n    }\n    create(value?: PartialMessage<PresetTarget>): PresetTarget {\n        const message = { path: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PresetTarget>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PresetTarget): PresetTarget {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string path */ 1:\n                    message.path = reader.string();\n                    break;\n                case /* proto.Target target */ 2:\n                    message.target = Target.internalBinaryRead(reader, reader.uint32(), options, message.target);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PresetTarget, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string path = 1; */\n        if (message.path !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.path);\n        /* proto.Target target = 2; */\n        if (message.target)\n            Target.internalBinaryWrite(message.target, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PresetTarget\n */\nexport const PresetTarget = new PresetTarget$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PresetEncounter$Type extends MessageType<PresetEncounter> {\n    constructor() {\n        super(\"proto.PresetEncounter\", [\n            { no: 1, name: \"path\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PresetTarget }\n        ]);\n    }\n    create(value?: PartialMessage<PresetEncounter>): PresetEncounter {\n        const message = { path: \"\", targets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PresetEncounter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PresetEncounter): PresetEncounter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string path */ 1:\n                    message.path = reader.string();\n                    break;\n                case /* repeated proto.PresetTarget targets */ 2:\n                    message.targets.push(PresetTarget.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PresetEncounter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string path = 1; */\n        if (message.path !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.path);\n        /* repeated proto.PresetTarget targets = 2; */\n        for (let i = 0; i < message.targets.length; i++)\n            PresetTarget.internalBinaryWrite(message.targets[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PresetEncounter\n */\nexport const PresetEncounter = new PresetEncounter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ComputeStatsRequest$Type extends MessageType<ComputeStatsRequest> {\n    constructor() {\n        super(\"proto.ComputeStatsRequest\", [\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid }\n        ]);\n    }\n    create(value?: PartialMessage<ComputeStatsRequest>): ComputeStatsRequest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ComputeStatsRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComputeStatsRequest): ComputeStatsRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ComputeStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ComputeStatsRequest\n */\nexport const ComputeStatsRequest = new ComputeStatsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PlayerStats$Type extends MessageType<PlayerStats> {\n    constructor() {\n        super(\"proto.PlayerStats\", [\n            { no: 6, name: \"base_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 1, name: \"gear_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"talents_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"buffs_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"consumes_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"final_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"sets\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"buffs\", kind: \"message\", T: () => IndividualBuffs },\n            { no: 5, name: \"cooldowns\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<PlayerStats>): PlayerStats {\n        const message = { baseStats: [], gearStats: [], talentsStats: [], buffsStats: [], consumesStats: [], finalStats: [], sets: [], cooldowns: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PlayerStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerStats): PlayerStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated double base_stats */ 6:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.baseStats.push(reader.double());\n                    else\n                        message.baseStats.push(reader.double());\n                    break;\n                case /* repeated double gear_stats */ 1:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.gearStats.push(reader.double());\n                    else\n                        message.gearStats.push(reader.double());\n                    break;\n                case /* repeated double talents_stats */ 7:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.talentsStats.push(reader.double());\n                    else\n                        message.talentsStats.push(reader.double());\n                    break;\n                case /* repeated double buffs_stats */ 8:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.buffsStats.push(reader.double());\n                    else\n                        message.buffsStats.push(reader.double());\n                    break;\n                case /* repeated double consumes_stats */ 9:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.consumesStats.push(reader.double());\n                    else\n                        message.consumesStats.push(reader.double());\n                    break;\n                case /* repeated double final_stats */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.finalStats.push(reader.double());\n                    else\n                        message.finalStats.push(reader.double());\n                    break;\n                case /* repeated string sets */ 3:\n                    message.sets.push(reader.string());\n                    break;\n                case /* proto.IndividualBuffs buffs */ 4:\n                    message.buffs = IndividualBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                case /* repeated proto.ActionID cooldowns */ 5:\n                    message.cooldowns.push(ActionID.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PlayerStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated double base_stats = 6; */\n        if (message.baseStats.length) {\n            writer.tag(6, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.baseStats.length; i++)\n                writer.double(message.baseStats[i]);\n            writer.join();\n        }\n        /* repeated double gear_stats = 1; */\n        if (message.gearStats.length) {\n            writer.tag(1, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.gearStats.length; i++)\n                writer.double(message.gearStats[i]);\n            writer.join();\n        }\n        /* repeated double talents_stats = 7; */\n        if (message.talentsStats.length) {\n            writer.tag(7, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.talentsStats.length; i++)\n                writer.double(message.talentsStats[i]);\n            writer.join();\n        }\n        /* repeated double buffs_stats = 8; */\n        if (message.buffsStats.length) {\n            writer.tag(8, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.buffsStats.length; i++)\n                writer.double(message.buffsStats[i]);\n            writer.join();\n        }\n        /* repeated double consumes_stats = 9; */\n        if (message.consumesStats.length) {\n            writer.tag(9, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.consumesStats.length; i++)\n                writer.double(message.consumesStats[i]);\n            writer.join();\n        }\n        /* repeated double final_stats = 2; */\n        if (message.finalStats.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.finalStats.length; i++)\n                writer.double(message.finalStats[i]);\n            writer.join();\n        }\n        /* repeated string sets = 3; */\n        for (let i = 0; i < message.sets.length; i++)\n            writer.tag(3, WireType.LengthDelimited).string(message.sets[i]);\n        /* proto.IndividualBuffs buffs = 4; */\n        if (message.buffs)\n            IndividualBuffs.internalBinaryWrite(message.buffs, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ActionID cooldowns = 5; */\n        for (let i = 0; i < message.cooldowns.length; i++)\n            ActionID.internalBinaryWrite(message.cooldowns[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PlayerStats\n */\nexport const PlayerStats = new PlayerStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PartyStats$Type extends MessageType<PartyStats> {\n    constructor() {\n        super(\"proto.PartyStats\", [\n            { no: 1, name: \"players\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerStats }\n        ]);\n    }\n    create(value?: PartialMessage<PartyStats>): PartyStats {\n        const message = { players: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PartyStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartyStats): PartyStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.PlayerStats players */ 1:\n                    message.players.push(PlayerStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PartyStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.PlayerStats players = 1; */\n        for (let i = 0; i < message.players.length; i++)\n            PlayerStats.internalBinaryWrite(message.players[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PartyStats\n */\nexport const PartyStats = new PartyStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidStats$Type extends MessageType<RaidStats> {\n    constructor() {\n        super(\"proto.RaidStats\", [\n            { no: 1, name: \"parties\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PartyStats }\n        ]);\n    }\n    create(value?: PartialMessage<RaidStats>): RaidStats {\n        const message = { parties: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidStats): RaidStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.PartyStats parties */ 1:\n                    message.parties.push(PartyStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.PartyStats parties = 1; */\n        for (let i = 0; i < message.parties.length; i++)\n            PartyStats.internalBinaryWrite(message.parties[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidStats\n */\nexport const RaidStats = new RaidStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ComputeStatsResult$Type extends MessageType<ComputeStatsResult> {\n    constructor() {\n        super(\"proto.ComputeStatsResult\", [\n            { no: 1, name: \"raid_stats\", kind: \"message\", T: () => RaidStats },\n            { no: 2, name: \"error_result\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ComputeStatsResult>): ComputeStatsResult {\n        const message = { errorResult: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ComputeStatsResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComputeStatsResult): ComputeStatsResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidStats raid_stats */ 1:\n                    message.raidStats = RaidStats.internalBinaryRead(reader, reader.uint32(), options, message.raidStats);\n                    break;\n                case /* string error_result */ 2:\n                    message.errorResult = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ComputeStatsResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidStats raid_stats = 1; */\n        if (message.raidStats)\n            RaidStats.internalBinaryWrite(message.raidStats, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* string error_result = 2; */\n        if (message.errorResult !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.errorResult);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ComputeStatsResult\n */\nexport const ComputeStatsResult = new ComputeStatsResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StatWeightsRequest$Type extends MessageType<StatWeightsRequest> {\n    constructor() {\n        super(\"proto.StatWeightsRequest\", [\n            { no: 1, name: \"player\", kind: \"message\", T: () => Player },\n            { no: 2, name: \"raid_buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 3, name: \"party_buffs\", kind: \"message\", T: () => PartyBuffs },\n            { no: 9, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 4, name: \"encounter\", kind: \"message\", T: () => Encounter },\n            { no: 5, name: \"sim_options\", kind: \"message\", T: () => SimOptions },\n            { no: 8, name: \"tanks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RaidTarget },\n            { no: 6, name: \"stats_to_weigh\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Stat\", Stat] },\n            { no: 7, name: \"ep_reference_stat\", kind: \"enum\", T: () => [\"proto.Stat\", Stat] }\n        ]);\n    }\n    create(value?: PartialMessage<StatWeightsRequest>): StatWeightsRequest {\n        const message = { tanks: [], statsToWeigh: [], epReferenceStat: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<StatWeightsRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatWeightsRequest): StatWeightsRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Player player */ 1:\n                    message.player = Player.internalBinaryRead(reader, reader.uint32(), options, message.player);\n                    break;\n                case /* proto.RaidBuffs raid_buffs */ 2:\n                    message.raidBuffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.raidBuffs);\n                    break;\n                case /* proto.PartyBuffs party_buffs */ 3:\n                    message.partyBuffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.partyBuffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 9:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* proto.Encounter encounter */ 4:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                case /* proto.SimOptions sim_options */ 5:\n                    message.simOptions = SimOptions.internalBinaryRead(reader, reader.uint32(), options, message.simOptions);\n                    break;\n                case /* repeated proto.RaidTarget tanks */ 8:\n                    message.tanks.push(RaidTarget.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.Stat stats_to_weigh */ 6:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.statsToWeigh.push(reader.int32());\n                    else\n                        message.statsToWeigh.push(reader.int32());\n                    break;\n                case /* proto.Stat ep_reference_stat */ 7:\n                    message.epReferenceStat = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: StatWeightsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Player player = 1; */\n        if (message.player)\n            Player.internalBinaryWrite(message.player, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidBuffs raid_buffs = 2; */\n        if (message.raidBuffs)\n            RaidBuffs.internalBinaryWrite(message.raidBuffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs party_buffs = 3; */\n        if (message.partyBuffs)\n            PartyBuffs.internalBinaryWrite(message.partyBuffs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 9; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 4; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimOptions sim_options = 5; */\n        if (message.simOptions)\n            SimOptions.internalBinaryWrite(message.simOptions, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.RaidTarget tanks = 8; */\n        for (let i = 0; i < message.tanks.length; i++)\n            RaidTarget.internalBinaryWrite(message.tanks[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.Stat stats_to_weigh = 6; */\n        if (message.statsToWeigh.length) {\n            writer.tag(6, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.statsToWeigh.length; i++)\n                writer.int32(message.statsToWeigh[i]);\n            writer.join();\n        }\n        /* proto.Stat ep_reference_stat = 7; */\n        if (message.epReferenceStat !== 0)\n            writer.tag(7, WireType.Varint).int32(message.epReferenceStat);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.StatWeightsRequest\n */\nexport const StatWeightsRequest = new StatWeightsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StatWeightsResult$Type extends MessageType<StatWeightsResult> {\n    constructor() {\n        super(\"proto.StatWeightsResult\", [\n            { no: 1, name: \"dps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 4, name: \"hps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 2, name: \"tps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 3, name: \"dtps\", kind: \"message\", T: () => StatWeightValues }\n        ]);\n    }\n    create(value?: PartialMessage<StatWeightsResult>): StatWeightsResult {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<StatWeightsResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatWeightsResult): StatWeightsResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.StatWeightValues dps */ 1:\n                    message.dps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.StatWeightValues hps */ 4:\n                    message.hps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* proto.StatWeightValues tps */ 2:\n                    message.tps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.tps);\n                    break;\n                case /* proto.StatWeightValues dtps */ 3:\n                    message.dtps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.dtps);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: StatWeightsResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.StatWeightValues dps = 1; */\n        if (message.dps)\n            StatWeightValues.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues hps = 4; */\n        if (message.hps)\n            StatWeightValues.internalBinaryWrite(message.hps, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues tps = 2; */\n        if (message.tps)\n            StatWeightValues.internalBinaryWrite(message.tps, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues dtps = 3; */\n        if (message.dtps)\n            StatWeightValues.internalBinaryWrite(message.dtps, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.StatWeightsResult\n */\nexport const StatWeightsResult = new StatWeightsResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StatWeightValues$Type extends MessageType<StatWeightValues> {\n    constructor() {\n        super(\"proto.StatWeightValues\", [\n            { no: 1, name: \"weights\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"weights_stdev\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"ep_values\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"ep_values_stdev\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<StatWeightValues>): StatWeightValues {\n        const message = { weights: [], weightsStdev: [], epValues: [], epValuesStdev: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<StatWeightValues>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatWeightValues): StatWeightValues {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated double weights */ 1:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.weights.push(reader.double());\n                    else\n                        message.weights.push(reader.double());\n                    break;\n                case /* repeated double weights_stdev */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.weightsStdev.push(reader.double());\n                    else\n                        message.weightsStdev.push(reader.double());\n                    break;\n                case /* repeated double ep_values */ 3:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.epValues.push(reader.double());\n                    else\n                        message.epValues.push(reader.double());\n                    break;\n                case /* repeated double ep_values_stdev */ 4:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.epValuesStdev.push(reader.double());\n                    else\n                        message.epValuesStdev.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: StatWeightValues, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated double weights = 1; */\n        if (message.weights.length) {\n            writer.tag(1, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.weights.length; i++)\n                writer.double(message.weights[i]);\n            writer.join();\n        }\n        /* repeated double weights_stdev = 2; */\n        if (message.weightsStdev.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.weightsStdev.length; i++)\n                writer.double(message.weightsStdev[i]);\n            writer.join();\n        }\n        /* repeated double ep_values = 3; */\n        if (message.epValues.length) {\n            writer.tag(3, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.epValues.length; i++)\n                writer.double(message.epValues[i]);\n            writer.join();\n        }\n        /* repeated double ep_values_stdev = 4; */\n        if (message.epValuesStdev.length) {\n            writer.tag(4, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.epValuesStdev.length; i++)\n                writer.double(message.epValuesStdev[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.StatWeightValues\n */\nexport const StatWeightValues = new StatWeightValues$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AsyncAPIResult$Type extends MessageType<AsyncAPIResult> {\n    constructor() {\n        super(\"proto.AsyncAPIResult\", [\n            { no: 1, name: \"progress_id\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<AsyncAPIResult>): AsyncAPIResult {\n        const message = { progressId: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AsyncAPIResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsyncAPIResult): AsyncAPIResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string progress_id */ 1:\n                    message.progressId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AsyncAPIResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string progress_id = 1; */\n        if (message.progressId !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.progressId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AsyncAPIResult\n */\nexport const AsyncAPIResult = new AsyncAPIResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProgressMetrics$Type extends MessageType<ProgressMetrics> {\n    constructor() {\n        super(\"proto.ProgressMetrics\", [\n            { no: 1, name: \"completed_iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"total_iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"completed_sims\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"total_sims\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"presim_running\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"dps\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"hps\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"final_raid_result\", kind: \"message\", T: () => RaidSimResult },\n            { no: 7, name: \"final_weight_result\", kind: \"message\", T: () => StatWeightsResult }\n        ]);\n    }\n    create(value?: PartialMessage<ProgressMetrics>): ProgressMetrics {\n        const message = { completedIterations: 0, totalIterations: 0, completedSims: 0, totalSims: 0, presimRunning: false, dps: 0, hps: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProgressMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProgressMetrics): ProgressMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 completed_iterations */ 1:\n                    message.completedIterations = reader.int32();\n                    break;\n                case /* int32 total_iterations */ 2:\n                    message.totalIterations = reader.int32();\n                    break;\n                case /* int32 completed_sims */ 3:\n                    message.completedSims = reader.int32();\n                    break;\n                case /* int32 total_sims */ 4:\n                    message.totalSims = reader.int32();\n                    break;\n                case /* bool presim_running */ 8:\n                    message.presimRunning = reader.bool();\n                    break;\n                case /* double dps */ 5:\n                    message.dps = reader.double();\n                    break;\n                case /* double hps */ 9:\n                    message.hps = reader.double();\n                    break;\n                case /* proto.RaidSimResult final_raid_result */ 6:\n                    message.finalRaidResult = RaidSimResult.internalBinaryRead(reader, reader.uint32(), options, message.finalRaidResult);\n                    break;\n                case /* proto.StatWeightsResult final_weight_result */ 7:\n                    message.finalWeightResult = StatWeightsResult.internalBinaryRead(reader, reader.uint32(), options, message.finalWeightResult);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProgressMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 completed_iterations = 1; */\n        if (message.completedIterations !== 0)\n            writer.tag(1, WireType.Varint).int32(message.completedIterations);\n        /* int32 total_iterations = 2; */\n        if (message.totalIterations !== 0)\n            writer.tag(2, WireType.Varint).int32(message.totalIterations);\n        /* int32 completed_sims = 3; */\n        if (message.completedSims !== 0)\n            writer.tag(3, WireType.Varint).int32(message.completedSims);\n        /* int32 total_sims = 4; */\n        if (message.totalSims !== 0)\n            writer.tag(4, WireType.Varint).int32(message.totalSims);\n        /* bool presim_running = 8; */\n        if (message.presimRunning !== false)\n            writer.tag(8, WireType.Varint).bool(message.presimRunning);\n        /* double dps = 5; */\n        if (message.dps !== 0)\n            writer.tag(5, WireType.Bit64).double(message.dps);\n        /* double hps = 9; */\n        if (message.hps !== 0)\n            writer.tag(9, WireType.Bit64).double(message.hps);\n        /* proto.RaidSimResult final_raid_result = 6; */\n        if (message.finalRaidResult)\n            RaidSimResult.internalBinaryWrite(message.finalRaidResult, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightsResult final_weight_result = 7; */\n        if (message.finalWeightResult)\n            StatWeightsResult.internalBinaryWrite(message.finalWeightResult, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProgressMetrics\n */\nexport const ProgressMetrics = new ProgressMetrics$Type();\n","// @generated by protobuf-ts 2.0.4\n// @generated from protobuf file \"ui.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidSimResult } from \"./api\";\nimport { RaidSimRequest } from \"./api\";\nimport { Raid } from \"./api\";\nimport { Blessings } from \"./paladin\";\nimport { Glyphs } from \"./common\";\nimport { Cooldowns } from \"./common\";\nimport { Race } from \"./common\";\nimport { Consumes } from \"./common\";\nimport { IndividualBuffs } from \"./common\";\nimport { EquipmentSpec } from \"./common\";\nimport { Encounter } from \"./common\";\nimport { Player } from \"./api\";\nimport { PartyBuffs } from \"./common\";\nimport { RaidTarget } from \"./common\";\nimport { Debuffs } from \"./common\";\nimport { RaidBuffs } from \"./common\";\nimport { Faction } from \"./common\";\n/**\n * @generated from protobuf message proto.SimSettings\n */\nexport interface SimSettings {\n    /**\n     * @generated from protobuf field: int32 iterations = 1;\n     */\n    iterations: number;\n    /**\n     * @generated from protobuf field: int32 phase = 2;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: int64 fixed_rng_seed = 3;\n     */\n    fixedRngSeed: bigint;\n    /**\n     * @generated from protobuf field: bool show_damage_metrics = 8;\n     */\n    showDamageMetrics: boolean;\n    /**\n     * @generated from protobuf field: bool show_threat_metrics = 4;\n     */\n    showThreatMetrics: boolean;\n    /**\n     * @generated from protobuf field: bool show_healing_metrics = 7;\n     */\n    showHealingMetrics: boolean;\n    /**\n     * @generated from protobuf field: bool show_experimental = 5;\n     */\n    showExperimental: boolean;\n    /**\n     * @generated from protobuf field: proto.Faction faction = 6;\n     */\n    faction: Faction;\n}\n/**\n * Contains all information that is imported/exported from an individual sim.\n *\n * @generated from protobuf message proto.IndividualSimSettings\n */\nexport interface IndividualSimSettings {\n    /**\n     * @generated from protobuf field: proto.SimSettings settings = 5;\n     */\n    settings?: SimSettings;\n    /**\n     * @generated from protobuf field: proto.RaidBuffs raid_buffs = 1;\n     */\n    raidBuffs?: RaidBuffs;\n    /**\n     * @generated from protobuf field: proto.Debuffs debuffs = 8;\n     */\n    debuffs?: Debuffs;\n    /**\n     * @generated from protobuf field: repeated proto.RaidTarget tanks = 7;\n     */\n    tanks: RaidTarget[];\n    /**\n     * @generated from protobuf field: proto.PartyBuffs party_buffs = 2;\n     */\n    partyBuffs?: PartyBuffs;\n    /**\n     * @generated from protobuf field: proto.Player player = 3;\n     */\n    player?: Player;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 4;\n     */\n    encounter?: Encounter;\n    /**\n     * @generated from protobuf field: repeated double ep_weights = 6;\n     */\n    epWeights: number[];\n    /**\n     * @generated from protobuf field: int32 target_dummies = 9;\n     */\n    targetDummies: number;\n}\n/**\n * Local storage data for gear settings.\n *\n * @generated from protobuf message proto.SavedGearSet\n */\nexport interface SavedGearSet {\n    /**\n     * @generated from protobuf field: proto.EquipmentSpec gear = 1;\n     */\n    gear?: EquipmentSpec;\n    /**\n     * @generated from protobuf field: repeated double bonus_stats = 2;\n     */\n    bonusStats: number[];\n}\n/**\n * Local storage data for other settings.\n *\n * @generated from protobuf message proto.SavedSettings\n */\nexport interface SavedSettings {\n    /**\n     * @generated from protobuf field: proto.RaidBuffs raid_buffs = 1;\n     */\n    raidBuffs?: RaidBuffs;\n    /**\n     * @generated from protobuf field: proto.PartyBuffs party_buffs = 2;\n     */\n    partyBuffs?: PartyBuffs;\n    /**\n     * @generated from protobuf field: proto.Debuffs debuffs = 7;\n     */\n    debuffs?: Debuffs;\n    /**\n     * @generated from protobuf field: proto.IndividualBuffs player_buffs = 3;\n     */\n    playerBuffs?: IndividualBuffs;\n    /**\n     * @generated from protobuf field: proto.Consumes consumes = 4;\n     */\n    consumes?: Consumes;\n    /**\n     * @generated from protobuf field: proto.Race race = 5;\n     */\n    race: Race;\n    /**\n     * @generated from protobuf field: proto.Cooldowns cooldowns = 6;\n     */\n    cooldowns?: Cooldowns;\n    /**\n     * @generated from protobuf field: string rotation_json = 8;\n     */\n    rotationJson: string;\n}\n/**\n * @generated from protobuf message proto.SavedTalents\n */\nexport interface SavedTalents {\n    /**\n     * @generated from protobuf field: string talents_string = 1;\n     */\n    talentsString: string;\n    /**\n     * @generated from protobuf field: proto.Glyphs glyphs = 2;\n     */\n    glyphs?: Glyphs;\n}\n/**\n * A buff bot placed in a raid.\n *\n * @generated from protobuf message proto.BuffBot\n */\nexport interface BuffBot {\n    /**\n     * Uniquely identifies which buffbot this is.\n     *\n     * @generated from protobuf field: string id = 1;\n     */\n    id: string;\n    /**\n     * @generated from protobuf field: int32 raid_index = 2;\n     */\n    raidIndex: number;\n    /**\n     * The assigned player to innervate. Only used for druid buffbots.\n     *\n     * @generated from protobuf field: proto.RaidTarget innervate_assignment = 3;\n     */\n    innervateAssignment?: RaidTarget;\n    /**\n     * The assigned player to PI. Only used for disc priest buffbots.\n     *\n     * @generated from protobuf field: proto.RaidTarget power_infusion_assignment = 4;\n     */\n    powerInfusionAssignment?: RaidTarget;\n    /**\n     * @generated from protobuf field: proto.RaidTarget tricks_of_the_trade_assignment = 5;\n     */\n    tricksOfTheTradeAssignment?: RaidTarget;\n    /**\n     * @generated from protobuf field: proto.RaidTarget unholy_frenzy_assignment = 6;\n     */\n    unholyFrenzyAssignment?: RaidTarget;\n}\n/**\n * @generated from protobuf message proto.BlessingsAssignment\n */\nexport interface BlessingsAssignment {\n    /**\n     * Index corresponds to Spec that the blessing should be applied to.\n     *\n     * @generated from protobuf field: repeated proto.Blessings blessings = 1;\n     */\n    blessings: Blessings[];\n}\n/**\n * @generated from protobuf message proto.BlessingsAssignments\n */\nexport interface BlessingsAssignments {\n    /**\n     * Assignments for each paladin.\n     *\n     * @generated from protobuf field: repeated proto.BlessingsAssignment paladins = 1;\n     */\n    paladins: BlessingsAssignment[];\n}\n/**\n * Local storage data for a saved encounter.\n *\n * @generated from protobuf message proto.SavedEncounter\n */\nexport interface SavedEncounter {\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 1;\n     */\n    encounter?: Encounter;\n}\n/**\n * Local storage data for raid sim settings.\n *\n * @generated from protobuf message proto.SavedRaid\n */\nexport interface SavedRaid {\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: repeated proto.BuffBot buff_bots = 2;\n     */\n    buffBots: BuffBot[];\n    /**\n     * @generated from protobuf field: proto.BlessingsAssignments blessings = 3;\n     */\n    blessings?: BlessingsAssignments;\n    /**\n     * @generated from protobuf field: proto.Faction faction = 4;\n     */\n    faction: Faction;\n    /**\n     * @generated from protobuf field: int32 phase = 5;\n     */\n    phase: number;\n}\n/**\n * Contains all information that is imported/exported from a raid sim.\n *\n * @generated from protobuf message proto.RaidSimSettings\n */\nexport interface RaidSimSettings {\n    /**\n     * @generated from protobuf field: proto.SimSettings settings = 5;\n     */\n    settings?: SimSettings;\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: repeated proto.BuffBot buff_bots = 2;\n     */\n    buffBots: BuffBot[];\n    /**\n     * @generated from protobuf field: proto.BlessingsAssignments blessings = 3;\n     */\n    blessings?: BlessingsAssignments;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 4;\n     */\n    encounter?: Encounter;\n}\n/**\n * All the data related to running the sim once.\n *\n * @generated from protobuf message proto.SimRun\n */\nexport interface SimRun {\n    /**\n     * @generated from protobuf field: proto.RaidSimRequest request = 1;\n     */\n    request?: RaidSimRequest;\n    /**\n     * @generated from protobuf field: proto.RaidSimResult result = 2;\n     */\n    result?: RaidSimResult;\n}\n/**\n * Contains a sim run and also other context data.\n *\n * @generated from protobuf message proto.SimRunData\n */\nexport interface SimRunData {\n    /**\n     * @generated from protobuf field: proto.SimRun run = 1;\n     */\n    run?: SimRun;\n    /**\n     * The run stored as a reference, for comparison to the current run.\n     *\n     * @generated from protobuf field: proto.SimRun reference_run = 2;\n     */\n    referenceRun?: SimRun;\n}\n/**\n * Sent by the sim to the detailed results page.\n *\n * @generated from protobuf message proto.DetailedResultsUpdate\n */\nexport interface DetailedResultsUpdate {\n    /**\n     * @generated from protobuf oneof: data\n     */\n    data: {\n        oneofKind: \"runData\";\n        /**\n         * Show results from a run.\n         *\n         * @generated from protobuf field: proto.SimRunData run_data = 1;\n         */\n        runData: SimRunData;\n    } | {\n        oneofKind: \"settings\";\n        /**\n         * Update sim settings.\n         *\n         * @generated from protobuf field: proto.SimSettings settings = 2;\n         */\n        settings: SimSettings;\n    } | {\n        oneofKind: undefined;\n    };\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimSettings$Type extends MessageType<SimSettings> {\n    constructor() {\n        super(\"proto.SimSettings\", [\n            { no: 1, name: \"iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"fixed_rng_seed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 8, name: \"show_damage_metrics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"show_threat_metrics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"show_healing_metrics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"show_experimental\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"faction\", kind: \"enum\", T: () => [\"proto.Faction\", Faction] }\n        ]);\n    }\n    create(value?: PartialMessage<SimSettings>): SimSettings {\n        const message = { iterations: 0, phase: 0, fixedRngSeed: 0n, showDamageMetrics: false, showThreatMetrics: false, showHealingMetrics: false, showExperimental: false, faction: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimSettings): SimSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 iterations */ 1:\n                    message.iterations = reader.int32();\n                    break;\n                case /* int32 phase */ 2:\n                    message.phase = reader.int32();\n                    break;\n                case /* int64 fixed_rng_seed */ 3:\n                    message.fixedRngSeed = reader.int64().toBigInt();\n                    break;\n                case /* bool show_damage_metrics */ 8:\n                    message.showDamageMetrics = reader.bool();\n                    break;\n                case /* bool show_threat_metrics */ 4:\n                    message.showThreatMetrics = reader.bool();\n                    break;\n                case /* bool show_healing_metrics */ 7:\n                    message.showHealingMetrics = reader.bool();\n                    break;\n                case /* bool show_experimental */ 5:\n                    message.showExperimental = reader.bool();\n                    break;\n                case /* proto.Faction faction */ 6:\n                    message.faction = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 iterations = 1; */\n        if (message.iterations !== 0)\n            writer.tag(1, WireType.Varint).int32(message.iterations);\n        /* int32 phase = 2; */\n        if (message.phase !== 0)\n            writer.tag(2, WireType.Varint).int32(message.phase);\n        /* int64 fixed_rng_seed = 3; */\n        if (message.fixedRngSeed !== 0n)\n            writer.tag(3, WireType.Varint).int64(message.fixedRngSeed);\n        /* bool show_damage_metrics = 8; */\n        if (message.showDamageMetrics !== false)\n            writer.tag(8, WireType.Varint).bool(message.showDamageMetrics);\n        /* bool show_threat_metrics = 4; */\n        if (message.showThreatMetrics !== false)\n            writer.tag(4, WireType.Varint).bool(message.showThreatMetrics);\n        /* bool show_healing_metrics = 7; */\n        if (message.showHealingMetrics !== false)\n            writer.tag(7, WireType.Varint).bool(message.showHealingMetrics);\n        /* bool show_experimental = 5; */\n        if (message.showExperimental !== false)\n            writer.tag(5, WireType.Varint).bool(message.showExperimental);\n        /* proto.Faction faction = 6; */\n        if (message.faction !== 0)\n            writer.tag(6, WireType.Varint).int32(message.faction);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimSettings\n */\nexport const SimSettings = new SimSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IndividualSimSettings$Type extends MessageType<IndividualSimSettings> {\n    constructor() {\n        super(\"proto.IndividualSimSettings\", [\n            { no: 5, name: \"settings\", kind: \"message\", T: () => SimSettings },\n            { no: 1, name: \"raid_buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 8, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 7, name: \"tanks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RaidTarget },\n            { no: 2, name: \"party_buffs\", kind: \"message\", T: () => PartyBuffs },\n            { no: 3, name: \"player\", kind: \"message\", T: () => Player },\n            { no: 4, name: \"encounter\", kind: \"message\", T: () => Encounter },\n            { no: 6, name: \"ep_weights\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"target_dummies\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<IndividualSimSettings>): IndividualSimSettings {\n        const message = { tanks: [], epWeights: [], targetDummies: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<IndividualSimSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndividualSimSettings): IndividualSimSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimSettings settings */ 5:\n                    message.settings = SimSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);\n                    break;\n                case /* proto.RaidBuffs raid_buffs */ 1:\n                    message.raidBuffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.raidBuffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 8:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* repeated proto.RaidTarget tanks */ 7:\n                    message.tanks.push(RaidTarget.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.PartyBuffs party_buffs */ 2:\n                    message.partyBuffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.partyBuffs);\n                    break;\n                case /* proto.Player player */ 3:\n                    message.player = Player.internalBinaryRead(reader, reader.uint32(), options, message.player);\n                    break;\n                case /* proto.Encounter encounter */ 4:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                case /* repeated double ep_weights */ 6:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.epWeights.push(reader.double());\n                    else\n                        message.epWeights.push(reader.double());\n                    break;\n                case /* int32 target_dummies */ 9:\n                    message.targetDummies = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: IndividualSimSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimSettings settings = 5; */\n        if (message.settings)\n            SimSettings.internalBinaryWrite(message.settings, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidBuffs raid_buffs = 1; */\n        if (message.raidBuffs)\n            RaidBuffs.internalBinaryWrite(message.raidBuffs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 8; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.RaidTarget tanks = 7; */\n        for (let i = 0; i < message.tanks.length; i++)\n            RaidTarget.internalBinaryWrite(message.tanks[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs party_buffs = 2; */\n        if (message.partyBuffs)\n            PartyBuffs.internalBinaryWrite(message.partyBuffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Player player = 3; */\n        if (message.player)\n            Player.internalBinaryWrite(message.player, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 4; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* repeated double ep_weights = 6; */\n        if (message.epWeights.length) {\n            writer.tag(6, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.epWeights.length; i++)\n                writer.double(message.epWeights[i]);\n            writer.join();\n        }\n        /* int32 target_dummies = 9; */\n        if (message.targetDummies !== 0)\n            writer.tag(9, WireType.Varint).int32(message.targetDummies);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.IndividualSimSettings\n */\nexport const IndividualSimSettings = new IndividualSimSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedGearSet$Type extends MessageType<SavedGearSet> {\n    constructor() {\n        super(\"proto.SavedGearSet\", [\n            { no: 1, name: \"gear\", kind: \"message\", T: () => EquipmentSpec },\n            { no: 2, name: \"bonus_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SavedGearSet>): SavedGearSet {\n        const message = { bonusStats: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedGearSet>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedGearSet): SavedGearSet {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.EquipmentSpec gear */ 1:\n                    message.gear = EquipmentSpec.internalBinaryRead(reader, reader.uint32(), options, message.gear);\n                    break;\n                case /* repeated double bonus_stats */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.bonusStats.push(reader.double());\n                    else\n                        message.bonusStats.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedGearSet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.EquipmentSpec gear = 1; */\n        if (message.gear)\n            EquipmentSpec.internalBinaryWrite(message.gear, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated double bonus_stats = 2; */\n        if (message.bonusStats.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.bonusStats.length; i++)\n                writer.double(message.bonusStats[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedGearSet\n */\nexport const SavedGearSet = new SavedGearSet$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedSettings$Type extends MessageType<SavedSettings> {\n    constructor() {\n        super(\"proto.SavedSettings\", [\n            { no: 1, name: \"raid_buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 2, name: \"party_buffs\", kind: \"message\", T: () => PartyBuffs },\n            { no: 7, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 3, name: \"player_buffs\", kind: \"message\", T: () => IndividualBuffs },\n            { no: 4, name: \"consumes\", kind: \"message\", T: () => Consumes },\n            { no: 5, name: \"race\", kind: \"enum\", T: () => [\"proto.Race\", Race] },\n            { no: 6, name: \"cooldowns\", kind: \"message\", T: () => Cooldowns },\n            { no: 8, name: \"rotation_json\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SavedSettings>): SavedSettings {\n        const message = { race: 0, rotationJson: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedSettings): SavedSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidBuffs raid_buffs */ 1:\n                    message.raidBuffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.raidBuffs);\n                    break;\n                case /* proto.PartyBuffs party_buffs */ 2:\n                    message.partyBuffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.partyBuffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 7:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* proto.IndividualBuffs player_buffs */ 3:\n                    message.playerBuffs = IndividualBuffs.internalBinaryRead(reader, reader.uint32(), options, message.playerBuffs);\n                    break;\n                case /* proto.Consumes consumes */ 4:\n                    message.consumes = Consumes.internalBinaryRead(reader, reader.uint32(), options, message.consumes);\n                    break;\n                case /* proto.Race race */ 5:\n                    message.race = reader.int32();\n                    break;\n                case /* proto.Cooldowns cooldowns */ 6:\n                    message.cooldowns = Cooldowns.internalBinaryRead(reader, reader.uint32(), options, message.cooldowns);\n                    break;\n                case /* string rotation_json */ 8:\n                    message.rotationJson = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidBuffs raid_buffs = 1; */\n        if (message.raidBuffs)\n            RaidBuffs.internalBinaryWrite(message.raidBuffs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs party_buffs = 2; */\n        if (message.partyBuffs)\n            PartyBuffs.internalBinaryWrite(message.partyBuffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 7; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.IndividualBuffs player_buffs = 3; */\n        if (message.playerBuffs)\n            IndividualBuffs.internalBinaryWrite(message.playerBuffs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Consumes consumes = 4; */\n        if (message.consumes)\n            Consumes.internalBinaryWrite(message.consumes, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Race race = 5; */\n        if (message.race !== 0)\n            writer.tag(5, WireType.Varint).int32(message.race);\n        /* proto.Cooldowns cooldowns = 6; */\n        if (message.cooldowns)\n            Cooldowns.internalBinaryWrite(message.cooldowns, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* string rotation_json = 8; */\n        if (message.rotationJson !== \"\")\n            writer.tag(8, WireType.LengthDelimited).string(message.rotationJson);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedSettings\n */\nexport const SavedSettings = new SavedSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedTalents$Type extends MessageType<SavedTalents> {\n    constructor() {\n        super(\"proto.SavedTalents\", [\n            { no: 1, name: \"talents_string\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"glyphs\", kind: \"message\", T: () => Glyphs }\n        ]);\n    }\n    create(value?: PartialMessage<SavedTalents>): SavedTalents {\n        const message = { talentsString: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedTalents): SavedTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string talents_string */ 1:\n                    message.talentsString = reader.string();\n                    break;\n                case /* proto.Glyphs glyphs */ 2:\n                    message.glyphs = Glyphs.internalBinaryRead(reader, reader.uint32(), options, message.glyphs);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string talents_string = 1; */\n        if (message.talentsString !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.talentsString);\n        /* proto.Glyphs glyphs = 2; */\n        if (message.glyphs)\n            Glyphs.internalBinaryWrite(message.glyphs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedTalents\n */\nexport const SavedTalents = new SavedTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BuffBot$Type extends MessageType<BuffBot> {\n    constructor() {\n        super(\"proto.BuffBot\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"raid_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"innervate_assignment\", kind: \"message\", T: () => RaidTarget },\n            { no: 4, name: \"power_infusion_assignment\", kind: \"message\", T: () => RaidTarget },\n            { no: 5, name: \"tricks_of_the_trade_assignment\", kind: \"message\", T: () => RaidTarget },\n            { no: 6, name: \"unholy_frenzy_assignment\", kind: \"message\", T: () => RaidTarget }\n        ]);\n    }\n    create(value?: PartialMessage<BuffBot>): BuffBot {\n        const message = { id: \"\", raidIndex: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BuffBot>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuffBot): BuffBot {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string id */ 1:\n                    message.id = reader.string();\n                    break;\n                case /* int32 raid_index */ 2:\n                    message.raidIndex = reader.int32();\n                    break;\n                case /* proto.RaidTarget innervate_assignment */ 3:\n                    message.innervateAssignment = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.innervateAssignment);\n                    break;\n                case /* proto.RaidTarget power_infusion_assignment */ 4:\n                    message.powerInfusionAssignment = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.powerInfusionAssignment);\n                    break;\n                case /* proto.RaidTarget tricks_of_the_trade_assignment */ 5:\n                    message.tricksOfTheTradeAssignment = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.tricksOfTheTradeAssignment);\n                    break;\n                case /* proto.RaidTarget unholy_frenzy_assignment */ 6:\n                    message.unholyFrenzyAssignment = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.unholyFrenzyAssignment);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BuffBot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string id = 1; */\n        if (message.id !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.id);\n        /* int32 raid_index = 2; */\n        if (message.raidIndex !== 0)\n            writer.tag(2, WireType.Varint).int32(message.raidIndex);\n        /* proto.RaidTarget innervate_assignment = 3; */\n        if (message.innervateAssignment)\n            RaidTarget.internalBinaryWrite(message.innervateAssignment, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidTarget power_infusion_assignment = 4; */\n        if (message.powerInfusionAssignment)\n            RaidTarget.internalBinaryWrite(message.powerInfusionAssignment, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidTarget tricks_of_the_trade_assignment = 5; */\n        if (message.tricksOfTheTradeAssignment)\n            RaidTarget.internalBinaryWrite(message.tricksOfTheTradeAssignment, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidTarget unholy_frenzy_assignment = 6; */\n        if (message.unholyFrenzyAssignment)\n            RaidTarget.internalBinaryWrite(message.unholyFrenzyAssignment, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BuffBot\n */\nexport const BuffBot = new BuffBot$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlessingsAssignment$Type extends MessageType<BlessingsAssignment> {\n    constructor() {\n        super(\"proto.BlessingsAssignment\", [\n            { no: 1, name: \"blessings\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Blessings\", Blessings] }\n        ]);\n    }\n    create(value?: PartialMessage<BlessingsAssignment>): BlessingsAssignment {\n        const message = { blessings: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BlessingsAssignment>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingsAssignment): BlessingsAssignment {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Blessings blessings */ 1:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.blessings.push(reader.int32());\n                    else\n                        message.blessings.push(reader.int32());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BlessingsAssignment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Blessings blessings = 1; */\n        if (message.blessings.length) {\n            writer.tag(1, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.blessings.length; i++)\n                writer.int32(message.blessings[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BlessingsAssignment\n */\nexport const BlessingsAssignment = new BlessingsAssignment$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlessingsAssignments$Type extends MessageType<BlessingsAssignments> {\n    constructor() {\n        super(\"proto.BlessingsAssignments\", [\n            { no: 1, name: \"paladins\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BlessingsAssignment }\n        ]);\n    }\n    create(value?: PartialMessage<BlessingsAssignments>): BlessingsAssignments {\n        const message = { paladins: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BlessingsAssignments>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingsAssignments): BlessingsAssignments {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.BlessingsAssignment paladins */ 1:\n                    message.paladins.push(BlessingsAssignment.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BlessingsAssignments, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.BlessingsAssignment paladins = 1; */\n        for (let i = 0; i < message.paladins.length; i++)\n            BlessingsAssignment.internalBinaryWrite(message.paladins[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BlessingsAssignments\n */\nexport const BlessingsAssignments = new BlessingsAssignments$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedEncounter$Type extends MessageType<SavedEncounter> {\n    constructor() {\n        super(\"proto.SavedEncounter\", [\n            { no: 1, name: \"encounter\", kind: \"message\", T: () => Encounter }\n        ]);\n    }\n    create(value?: PartialMessage<SavedEncounter>): SavedEncounter {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedEncounter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedEncounter): SavedEncounter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Encounter encounter */ 1:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedEncounter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Encounter encounter = 1; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedEncounter\n */\nexport const SavedEncounter = new SavedEncounter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedRaid$Type extends MessageType<SavedRaid> {\n    constructor() {\n        super(\"proto.SavedRaid\", [\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 2, name: \"buff_bots\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BuffBot },\n            { no: 3, name: \"blessings\", kind: \"message\", T: () => BlessingsAssignments },\n            { no: 4, name: \"faction\", kind: \"enum\", T: () => [\"proto.Faction\", Faction] },\n            { no: 5, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SavedRaid>): SavedRaid {\n        const message = { buffBots: [], faction: 0, phase: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedRaid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedRaid): SavedRaid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* repeated proto.BuffBot buff_bots */ 2:\n                    message.buffBots.push(BuffBot.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.BlessingsAssignments blessings */ 3:\n                    message.blessings = BlessingsAssignments.internalBinaryRead(reader, reader.uint32(), options, message.blessings);\n                    break;\n                case /* proto.Faction faction */ 4:\n                    message.faction = reader.int32();\n                    break;\n                case /* int32 phase */ 5:\n                    message.phase = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedRaid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.BuffBot buff_bots = 2; */\n        for (let i = 0; i < message.buffBots.length; i++)\n            BuffBot.internalBinaryWrite(message.buffBots[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BlessingsAssignments blessings = 3; */\n        if (message.blessings)\n            BlessingsAssignments.internalBinaryWrite(message.blessings, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Faction faction = 4; */\n        if (message.faction !== 0)\n            writer.tag(4, WireType.Varint).int32(message.faction);\n        /* int32 phase = 5; */\n        if (message.phase !== 0)\n            writer.tag(5, WireType.Varint).int32(message.phase);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedRaid\n */\nexport const SavedRaid = new SavedRaid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidSimSettings$Type extends MessageType<RaidSimSettings> {\n    constructor() {\n        super(\"proto.RaidSimSettings\", [\n            { no: 5, name: \"settings\", kind: \"message\", T: () => SimSettings },\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 2, name: \"buff_bots\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BuffBot },\n            { no: 3, name: \"blessings\", kind: \"message\", T: () => BlessingsAssignments },\n            { no: 4, name: \"encounter\", kind: \"message\", T: () => Encounter }\n        ]);\n    }\n    create(value?: PartialMessage<RaidSimSettings>): RaidSimSettings {\n        const message = { buffBots: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidSimSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidSimSettings): RaidSimSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimSettings settings */ 5:\n                    message.settings = SimSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);\n                    break;\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* repeated proto.BuffBot buff_bots */ 2:\n                    message.buffBots.push(BuffBot.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.BlessingsAssignments blessings */ 3:\n                    message.blessings = BlessingsAssignments.internalBinaryRead(reader, reader.uint32(), options, message.blessings);\n                    break;\n                case /* proto.Encounter encounter */ 4:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidSimSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimSettings settings = 5; */\n        if (message.settings)\n            SimSettings.internalBinaryWrite(message.settings, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.BuffBot buff_bots = 2; */\n        for (let i = 0; i < message.buffBots.length; i++)\n            BuffBot.internalBinaryWrite(message.buffBots[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BlessingsAssignments blessings = 3; */\n        if (message.blessings)\n            BlessingsAssignments.internalBinaryWrite(message.blessings, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 4; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidSimSettings\n */\nexport const RaidSimSettings = new RaidSimSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimRun$Type extends MessageType<SimRun> {\n    constructor() {\n        super(\"proto.SimRun\", [\n            { no: 1, name: \"request\", kind: \"message\", T: () => RaidSimRequest },\n            { no: 2, name: \"result\", kind: \"message\", T: () => RaidSimResult }\n        ]);\n    }\n    create(value?: PartialMessage<SimRun>): SimRun {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimRun>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimRun): SimRun {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidSimRequest request */ 1:\n                    message.request = RaidSimRequest.internalBinaryRead(reader, reader.uint32(), options, message.request);\n                    break;\n                case /* proto.RaidSimResult result */ 2:\n                    message.result = RaidSimResult.internalBinaryRead(reader, reader.uint32(), options, message.result);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimRun, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidSimRequest request = 1; */\n        if (message.request)\n            RaidSimRequest.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidSimResult result = 2; */\n        if (message.result)\n            RaidSimResult.internalBinaryWrite(message.result, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimRun\n */\nexport const SimRun = new SimRun$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimRunData$Type extends MessageType<SimRunData> {\n    constructor() {\n        super(\"proto.SimRunData\", [\n            { no: 1, name: \"run\", kind: \"message\", T: () => SimRun },\n            { no: 2, name: \"reference_run\", kind: \"message\", T: () => SimRun }\n        ]);\n    }\n    create(value?: PartialMessage<SimRunData>): SimRunData {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimRunData>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimRunData): SimRunData {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimRun run */ 1:\n                    message.run = SimRun.internalBinaryRead(reader, reader.uint32(), options, message.run);\n                    break;\n                case /* proto.SimRun reference_run */ 2:\n                    message.referenceRun = SimRun.internalBinaryRead(reader, reader.uint32(), options, message.referenceRun);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimRunData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimRun run = 1; */\n        if (message.run)\n            SimRun.internalBinaryWrite(message.run, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimRun reference_run = 2; */\n        if (message.referenceRun)\n            SimRun.internalBinaryWrite(message.referenceRun, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimRunData\n */\nexport const SimRunData = new SimRunData$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DetailedResultsUpdate$Type extends MessageType<DetailedResultsUpdate> {\n    constructor() {\n        super(\"proto.DetailedResultsUpdate\", [\n            { no: 1, name: \"run_data\", kind: \"message\", oneof: \"data\", T: () => SimRunData },\n            { no: 2, name: \"settings\", kind: \"message\", oneof: \"data\", T: () => SimSettings }\n        ]);\n    }\n    create(value?: PartialMessage<DetailedResultsUpdate>): DetailedResultsUpdate {\n        const message = { data: { oneofKind: undefined } };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DetailedResultsUpdate>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DetailedResultsUpdate): DetailedResultsUpdate {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimRunData run_data */ 1:\n                    message.data = {\n                        oneofKind: \"runData\",\n                        runData: SimRunData.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).runData)\n                    };\n                    break;\n                case /* proto.SimSettings settings */ 2:\n                    message.data = {\n                        oneofKind: \"settings\",\n                        settings: SimSettings.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).settings)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DetailedResultsUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimRunData run_data = 1; */\n        if (message.data.oneofKind === \"runData\")\n            SimRunData.internalBinaryWrite(message.data.runData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimSettings settings = 2; */\n        if (message.data.oneofKind === \"settings\")\n            SimSettings.internalBinaryWrite(message.data.settings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DetailedResultsUpdate\n */\nexport const DetailedResultsUpdate = new DetailedResultsUpdate$Type();\n","export const CURRENT_PHASE = 1;\n\n// Github pages serves our site under the /wotlk directory (because the repo name is wotlk)\nexport const REPO_NAME = 'wotlk';\n\n// Get 'elemental_shaman', the pathname part after the repo name\nconst pathnameParts = window.location.pathname.split('/');\nconst repoPartIdx = pathnameParts.findIndex(part => part == REPO_NAME);\nexport const SPEC_DIRECTORY = repoPartIdx == -1 ? '' : pathnameParts[repoPartIdx + 1];\n","// Returns if the two items are equal, or if both are null / undefined.\nexport function equalsOrBothNull<T>(a: T, b: T, comparator?: (_a: NonNullable<T>, _b: NonNullable<T>) => boolean): boolean {\n\tif (a == null && b == null)\n\t\treturn true;\n\n\tif (a == null || b == null)\n\t\treturn false;\n\n\treturn (comparator || ((_a: NonNullable<T>, _b: NonNullable<T>) => a == b))(a!, b!);\n}\n\n// Default comparator function for strings. Used with functions like Array.sort().\nexport function stringComparator(a: string, b: string): number {\n\tif (a < b) {\n\t\treturn -1;\n\t} else if (b < a) {\n\t\treturn 1;\n\t} else {\n\t\treturn 0;\n\t}\n}\n\nexport function sum(arr: Array<number>): number {\n\treturn arr.reduce((total, cur) => total + cur, 0);\n}\n\n// Returns the index of maximum value, or null if empty.\nexport function maxIndex(arr: Array<number>): number | null {\n\treturn arr.reduce((cur, v, i, arr) => v > arr[cur] ? i : cur, 0);\n}\n\n// Swaps two elements in the given array.\nexport function swap<T>(arr: Array<T>, i: number, j: number) {\n\t[arr[i], arr[j]] = [arr[j], arr[i]];\n}\n\n// Returns a new array containing only elements present in both a and b.\nexport function arrayEquals<T>(a: Array<T>, b: Array<T>, comparator?: (a: T, b: T) => boolean): boolean {\n\tcomparator = comparator || ((a: T, b: T) => a == b);\n\treturn a.length == b.length && a.every((val, i) => comparator!(val, b[i]));\n}\n\n// Returns a new array containing only elements present in both a and b.\nexport function intersection<T>(a: Array<T>, b: Array<T>): Array<T> {\n\treturn a.filter(value => b.includes(value));\n}\n\n// Returns a new array containing only distinct elements of arr.\nexport function distinct<T>(arr: Array<T>, comparator?: (a: T, b: T) => boolean): Array<T> {\n\tcomparator = comparator || ((a: T, b: T) => a == b);\n\tconst distinctArr: Array<T> = [];\n\tarr.forEach(val => {\n\t\tif (distinctArr.find(dVal => comparator!(dVal, val)) == null) {\n\t\t\tdistinctArr.push(val);\n\t\t}\n\t});\n\treturn distinctArr;\n}\n\n// Splits an array into buckets, where elements are placed in the same bucket if the\n// toString function returns the same value.\nexport function bucket<T>(arr: Array<T>, toString: (val: T) => string): Record<string, Array<T>> {\n\tconst buckets: Record<string, Array<T>> = {};\n\tarr.forEach(val => {\n\t\tconst valString = toString(val);\n\t\tif (buckets[valString]) {\n\t\t\tbuckets[valString].push(val);\n\t\t} else {\n\t\t\tbuckets[valString] = [val];\n\t\t}\n\t});\n\treturn buckets;\n}\n\nexport function stDevToConf90(stDev: number, N: number) {\n\treturn 1.645 * stDev / Math.sqrt(N);\n}\n\nexport async function wait(ms: number): Promise<void> {\n\treturn new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// Only works for numeric enums\nexport function getEnumValues<E>(enumType: any): Array<E> {\n\treturn Object.keys(enumType)\n\t\t.filter(key => !isNaN(Number(enumType[key])))\n\t\t.map(key => parseInt(enumType[key]) as unknown as E);\n}\n\n// Whether a click event was a right click.\nexport function isRightClick(event: MouseEvent): boolean {\n\treturn event.button == 2;\n}\n\n// Converts from '#ffffff' --> 'rgba(255, 255, 255, alpha)'\nexport function hexToRgba(hex: string, alpha: number): string {\n\tif (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n\t\tlet parts = hex.substring(1).split('');\n\t\tif (parts.length == 3) {\n\t\t\tparts = [parts[0], parts[0], parts[1], parts[1], parts[2], parts[2]];\n\t\t}\n\t\tconst c: any = '0x' + parts.join('');\n\t\treturn 'rgba(' + [(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',') + ',' + alpha + ')';\n\t}\n\tthrow new Error('Invalid hex color: ' + hex);\n}\n\nexport function camelToSnakeCase(str: string): string {\n\tlet result = str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n\tif (result.startsWith('_')) {\n\t\tresult = result.substring(1);\n\t}\n\treturn result;\n}\n\nexport function downloadJson(json: any, fileName: string) {\n\tdownloadString(JSON.stringify(json, null, 2), fileName);\n}\nexport function downloadString(data: string, fileName: string) {\n\tconst dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(data);\n\tconst downloadAnchorNode = document.createElement('a');\n\tdownloadAnchorNode.setAttribute(\"href\", dataStr);\n\tdownloadAnchorNode.setAttribute(\"download\", fileName);\n\tdocument.body.appendChild(downloadAnchorNode); // required for firefox\n\tdownloadAnchorNode.click();\n\tdownloadAnchorNode.remove();\n}\n\nexport function formatDeltaTextElem(elem: HTMLElement, before: number, after: number, precision: number) {\n\tconst delta = after - before;\n\tconst deltaStr = delta.toFixed(precision);\n\tif (delta >= 0) {\n\t\telem.textContent = '+' + deltaStr;\n\t\telem.classList.remove('negative');\n\t\telem.classList.add('positive');\n\t} else {\n\t\telem.textContent = '' + deltaStr;\n\t\telem.classList.remove('positive');\n\t\telem.classList.add('negative');\n\t}\n}\n\n// Returns all N pick K permutations of the elements in arr of size N.\nexport function permutations<T>(arr: Array<T>, k: number): Array<Array<T>> {\n\tif (k == 0) {\n\t\treturn [];\n\t} else if (k == 1) {\n\t\treturn arr.map(v => [v]);\n\t} else {\n\t\treturn arr.map((v, i) => {\n\t\t\tconst withoutThisElem = arr.slice();\n\t\t\twithoutThisElem.splice(i, 1);\n\t\t\tconst permutationsWithoutThisElem = permutations(withoutThisElem, k - 1);\n\t\t\treturn permutationsWithoutThisElem.map(perm => [v].concat(perm));\n\t\t}).flat();\n\t}\n}\n\n// Returns all N choose K combinations of the elements in arr of size N.\nexport function combinations<T>(arr: Array<T>, k: number, comparator?: (_a: T, _b: T) => number): Array<Array<T>> {\n\tconst perms = permutations(arr, k);\n\tconst sorted = perms.map(permutation => permutation.sort(comparator));\n\n\tconst equals: ((_a: T, _b: T) => boolean) = comparator ? ((a, b) => comparator(a, b) == 0) : ((a, b) => a == b);\n\treturn distinct(sorted, (permutationA, permutationB) => permutationA.every((elem, i) => equals(elem, permutationB[i])));\n}\n\n// Returns all N pick K permutations of the elements in arr of size N, allowing duplicates.\nexport function permutationsWithDups<T>(arr: Array<T>, k: number): Array<Array<T>> {\n\tif (k == 0) {\n\t\treturn [];\n\t} else if (k == 1) {\n\t\treturn arr.map(v => [v]);\n\t} else {\n\t\tconst smaller = permutationsWithDups(arr, k - 1);\n\t\treturn arr.map(v => {\n\t\t\treturn smaller.map(permutation => {\n\t\t\t\tconst newPerm = permutation.slice();\n\t\t\t\tnewPerm.push(v);\n\t\t\t\treturn newPerm;\n\t\t\t});\n\t\t}).flat();\n\t}\n}\n\n// Returns all N choose K combinations of the elements in arr of size N, allowing duplicates.\nexport function combinationsWithDups<T>(arr: Array<T>, k: number): Array<Array<T>> {\n\tconst perms = permutationsWithDups(arr, k);\n\tconst sorted = perms.map(permutation => permutation.sort());\n\treturn distinct(sorted, (permutationA, permutationB) => permutationA.every((elem, i) => elem == permutationB[i]));\n}\n","import { Gem } from '../proto/common.js';\nimport { GemColor } from '../proto/common.js';\nimport { Profession } from '../proto/common.js';\nimport { getEnumValues } from '../utils.js';\n\nexport const GEM_COLORS = (getEnumValues(GemColor) as Array<GemColor>).filter(color => color != GemColor.GemColorUnknown);\nexport const PRIMARY_COLORS = [GemColor.GemColorRed, GemColor.GemColorYellow, GemColor.GemColorBlue];\n// Secondary is intentionally ordered so that it matches the inverse of PRIMARY_COLORS.\nexport const SECONDARY_COLORS = [GemColor.GemColorGreen, GemColor.GemColorPurple, GemColor.GemColorOrange];\n\nexport const socketToMatchingColors = new Map<GemColor, Array<GemColor>>();\nsocketToMatchingColors.set(GemColor.GemColorMeta, [GemColor.GemColorMeta]);\nsocketToMatchingColors.set(GemColor.GemColorBlue, [GemColor.GemColorBlue, GemColor.GemColorPurple, GemColor.GemColorGreen, GemColor.GemColorPrismatic]);\nsocketToMatchingColors.set(GemColor.GemColorRed, [GemColor.GemColorRed, GemColor.GemColorPurple, GemColor.GemColorOrange, GemColor.GemColorPrismatic]);\nsocketToMatchingColors.set(GemColor.GemColorYellow, [GemColor.GemColorYellow, GemColor.GemColorOrange, GemColor.GemColorGreen, GemColor.GemColorPrismatic]);\nsocketToMatchingColors.set(GemColor.GemColorPrismatic, [\n\tGemColor.GemColorRed,\n\tGemColor.GemColorOrange,\n\tGemColor.GemColorYellow,\n\tGemColor.GemColorGreen,\n\tGemColor.GemColorBlue,\n\tGemColor.GemColorPurple,\n\tGemColor.GemColorPrismatic,\n]);\n\nexport function gemColorMatchesSocket(gemColor: GemColor, socketColor: GemColor) {\n\treturn gemColor == socketColor || (socketToMatchingColors.has(socketColor) && socketToMatchingColors.get(socketColor)!.includes(gemColor));\n}\n\n// Whether the gem matches the given socket color, for the purposes of gaining the socket bonuses.\nexport function gemMatchesSocket(gem: Gem, socketColor: GemColor) {\n\treturn gemColorMatchesSocket(gem.color, socketColor);\n}\n\n// Whether the gem is capable of slotting into a socket of the given color.\nexport function gemEligibleForSocket(gem: Gem, socketColor: GemColor) {\n\treturn (gem.color == GemColor.GemColorMeta) == (socketColor == GemColor.GemColorMeta);\n}\n\nexport function isUnrestrictedGem(gem: Gem, phase?: number): boolean {\n\treturn !gem.unique &&\n\t\tgem.requiredProfession == Profession.ProfessionUnknown &&\n\t\t(phase == null || gem.phase <= phase);\n}\n\n\nexport class MetaGemCondition {\n\treadonly id: number;\n\treadonly description: string;\n\n\treadonly minRed: number;\n\treadonly minYellow: number;\n\treadonly minBlue: number;\n\n\treadonly compareColorGreater: GemColor;\n\treadonly compareColorLesser: GemColor;\n\n\tconstructor(id: number, description: string, minRed: number, minYellow: number, minBlue: number, compareColorGreater: GemColor, compareColorLesser: GemColor) {\n\t\tthis.id = id;\n\t\tthis.description = description;\n\t\tthis.minRed = minRed;\n\t\tthis.minYellow = minYellow;\n\t\tthis.minBlue = minBlue;\n\t\tthis.compareColorGreater = compareColorGreater;\n\t\tthis.compareColorLesser = compareColorLesser;\n\n\t\tmetaGemConditions.set(this.id, this);\n\t}\n\n\t// Whether the condition is met, i.e. the meta gem is activated.\n\tisMet(numRed: number, numYellow: number, numBlue: number): boolean {\n\t\tif (!(numRed >= this.minRed && numYellow >= this.minYellow && numBlue >= this.minBlue)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.compareColorGreater == GemColor.GemColorUnknown) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst numGreater = MetaGemCondition.getNumInCategory(this.compareColorGreater, numRed, numYellow, numBlue);\n\t\tconst numLesser = MetaGemCondition.getNumInCategory(this.compareColorLesser, numRed, numYellow, numBlue);\n\t\treturn numGreater > numLesser;\n\t}\n\n\tisCompareColorCondition(): boolean {\n\t\treturn this.minRed == 0 && this.minYellow == 0 && this.minBlue == 0;\n\t}\n\n\tisOneOfEach(): boolean {\n\t\treturn this.minRed == 1 && this.minYellow == 1 && this.minBlue == 1;\n\t}\n\n\tisTwoAndOne(): boolean {\n\t\treturn [this.minRed, this.minYellow, this.minBlue].includes(2);\n\t}\n\n\tisThreeOfAColor(): boolean {\n\t\treturn this.minRed == 3 || this.minYellow == 3 || this.minBlue == 3;\n\t}\n\n\tprivate static getNumInCategory(gemColor: GemColor, numRed: number, numYellow: number, numBlue: number): number {\n\t\tif (gemColor == GemColor.GemColorRed) {\n\t\t\treturn numRed;\n\t\t} else if (gemColor == GemColor.GemColorYellow) {\n\t\t\treturn numYellow;\n\t\t} else if (gemColor == GemColor.GemColorBlue) {\n\t\t\treturn numBlue;\n\t\t} else {\n\t\t\tthrow new Error('Invalid gem color for category check: ' + gemColor);\n\t\t}\n\t}\n\n\tstatic fromMinColors(id: number, description: string, minRed: number, minYellow: number, minBlue: number): MetaGemCondition {\n\t\treturn new MetaGemCondition(id, description, minRed, minYellow, minBlue, GemColor.GemColorUnknown, GemColor.GemColorUnknown);\n\t}\n\n\tstatic fromCompareColors(id: number, description: string, compareColorGreater: GemColor, compareColorLesser: GemColor): MetaGemCondition {\n\t\treturn new MetaGemCondition(id, description, 0, 0, 0, compareColorGreater, compareColorLesser);\n\t}\n}\n\nconst metaGemConditions = new Map<number, MetaGemCondition>();\n\nexport function getMetaGemCondition(id: number): MetaGemCondition {\n\tif (!metaGemConditions.has(id)) {\n\t\tthrow new Error('Missing meta gem condition for gem: ' + id);\n\t}\n\n\treturn metaGemConditions.get(id)!;\n}\n\nexport function isMetaGemActive(metaGem: Gem, numRed: number, numYellow: number, numBlue: number): boolean {\n\treturn getMetaGemCondition(metaGem.id).isMet(numRed, numYellow, numBlue);\n}\n\nexport function getMetaGemConditionDescription(metaGem: Gem): string {\n\treturn getMetaGemCondition(metaGem.id).description;\n}\n\n// Keep these lists in order by item ID.\nexport const CHAOTIC_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41285, 'Requires at least 2 Blue Gems.', 0, 0, 2);\nexport const DESTRUCTIVE_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41307, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const EMBER_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41333, 'Requires at least 3 Red Gems.', 3, 0, 0);\nexport const ENIGMATIC_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41335, 'Requires at least 2 Red Gems and at least 1 Yellow Gem.', 2, 1, 0);\nexport const EFFULGENT_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41377, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const SWIFT_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41339, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const TIRELESS_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41375, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const REVITALIZING_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41376, 'Requires at least 2 Red Gems.', 2, 0, 0);\nexport const FORLORN_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41378, 'Requires at least 2 Yellow Gems and at least 1 Blue Gem.', 0, 2, 1);\nexport const IMPASSIVE_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41379, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\n\nexport const AUSTERE_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41380, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const PERSISTENT_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41381, 'Requires at least 2 Yellow Gems and at least 1 Blue Gem.', 0, 2, 1);\nexport const TRENCHANT_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41382, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const INVIGORATING_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41385, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const BEAMING_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41389, 'Requires at least 2 Red Gems and at least 1 Yellow Gem.', 2, 1, 0);\nexport const BRACING_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41395, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\nexport const ETERNAL_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41396, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\nexport const POWERFUL_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41397, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const RELENTLESS_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41398, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const THUNDERING_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41400, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const INSIGHTFUL_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41401, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const SWIFT_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44076, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const TIRELESS_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44078, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const ENIGMATIC_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44081, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\nexport const IMPASSIVE_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44082, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const FORLORN_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44084, 'Requires at least 2 Yellow Gems and at least 1 Blue Gem.', 0, 2, 1);\nexport const PERSISTENT_EARTHSHATTER_DIAMOND = MetaGemCondition.fromMinColors(44087, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const POWERFUL_EARTHSHATTER_DIAMOND = MetaGemCondition.fromMinColors(44088, 'Requires at least 2 Blue Gems and at least 1 Yellow Gem.', 0, 1, 2);\nexport const TRENCHANT_EARTHSHATTER_DIAMOND = MetaGemCondition.fromMinColors(44089, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\n\n// TBC GEMS\nexport const BRUTAL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25899, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const CHAOTIC_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(34220, 'Requires at least 2 Blue Gems.', 0, 0, 2);\nexport const DESTRUCTIVE_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(25890, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const EMBER_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(35503, 'Requires at least 3 Red Gems.', 3, 0, 0);\nexport const ETERNAL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(35501, 'Requires at least 2 Blue Gems and at least 1 Yellow Gem.', 0, 1, 2);\nexport const IMBUED_UNSTABLE_DIAMOND = MetaGemCondition.fromMinColors(32641, 'Requires at least 3 Yellow Gems.', 0, 3, 0);\nexport const INSIGHTFUL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25901, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const POWERFUL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25896, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const RELENTLESS_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(32409, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const SWIFT_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(25894, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const SWIFT_STARFIRE_DIAMOND = MetaGemCondition.fromMinColors(28557, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const SWIFT_WINDFIRE_DIAMOND = MetaGemCondition.fromMinColors(28556, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const TENACIOUS_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25898, 'Requires at least 5 Blue Gems.', 0, 0, 5);\nexport const THUNDERING_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(32410, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\n\nexport const BRACING_EARTHSTORM_DIAMOND = MetaGemCondition.fromCompareColors(25897, 'Requires more Red Gems than Blue Gems.', GemColor.GemColorRed, GemColor.GemColorBlue);\nexport const ENIGMATIC_SKYFIRE_DIAMOND = MetaGemCondition.fromCompareColors(25895, 'Requires more Red Gems than Yellow Gems.', GemColor.GemColorRed, GemColor.GemColorYellow);\nexport const MYSTICAL_SKYFIRE_DIAMOND = MetaGemCondition.fromCompareColors(25893, 'Requires more Blue Gems than Yellow Gems.', GemColor.GemColorBlue, GemColor.GemColorYellow);\nexport const POTENT_UNSTABLE_DIAMOND = MetaGemCondition.fromCompareColors(32640, 'Requires more Blue Gems than Yellow Gems.', GemColor.GemColorBlue, GemColor.GemColorYellow);\n\nconst gemSocketCssClasses: Partial<Record<GemColor, string>> = {\n\t[GemColor.GemColorBlue]: 'socket-color-blue',\n\t[GemColor.GemColorMeta]: 'socket-color-meta',\n\t[GemColor.GemColorRed]: 'socket-color-red',\n\t[GemColor.GemColorYellow]: 'socket-color-yellow',\n\t[GemColor.GemColorPrismatic]: 'socket-color-prismatic',\n};\nexport function setGemSocketCssClass(elem: HTMLElement, color: GemColor) {\n\tObject.values(gemSocketCssClasses).forEach(cssClass => elem.classList.remove(cssClass));\n\n\tif (gemSocketCssClasses[color]) {\n\t\telem.classList.add(gemSocketCssClasses[color] as string);\n\t\treturn;\n\t}\n\n\tthrow new Error('No css class for gem socket color: ' + color);\n}\n\nconst emptyGemSocketIcons: Partial<Record<GemColor, string>> = {\n\t[GemColor.GemColorBlue]: 'https://wow.zamimg.com/images/icons/socket-blue.gif',\n\t[GemColor.GemColorMeta]: 'https://wow.zamimg.com/images/icons/socket-meta.gif',\n\t[GemColor.GemColorRed]: 'https://wow.zamimg.com/images/icons/socket-red.gif',\n\t[GemColor.GemColorYellow]: 'https://wow.zamimg.com/images/icons/socket-yellow.gif',\n\t[GemColor.GemColorPrismatic]: 'https://wow.zamimg.com/images/icons/socket-prismatic.gif',\n};\nexport function getEmptyGemSocketIconUrl(color: GemColor): string {\n\tif (emptyGemSocketIcons[color])\n\t\treturn emptyGemSocketIcons[color] as string;\n\n\tthrow new Error('No empty socket url for gem socket color: ' + color);\n}\n","import { REPO_NAME } from '../constants/other.js'\nimport { camelToSnakeCase } from '../utils.js';\nimport { getEnumValues } from '../utils.js';\nimport { intersection } from '../utils.js';\nimport { maxIndex } from '../utils.js';\nimport { sum } from '../utils.js';\n\nimport { Player } from '../proto/api.js';\nimport { ResourceType } from '../proto/api.js';\nimport { ArmorType } from '../proto/common.js';\nimport { Class } from '../proto/common.js';\nimport { Enchant } from '../proto/common.js';\nimport { EnchantType } from '../proto/common.js';\nimport { Gem } from '../proto/common.js';\nimport { GemColor } from '../proto/common.js';\nimport { HandType } from '../proto/common.js';\nimport { ItemSlot } from '../proto/common.js';\nimport { ItemType } from '../proto/common.js';\nimport { Item } from '../proto/common.js';\nimport { Race } from '../proto/common.js';\nimport { Faction } from '../proto/common.js';\nimport { RaidTarget } from '../proto/common.js';\nimport { RangedWeaponType } from '../proto/common.js';\nimport { Spec } from '../proto/common.js';\nimport { Stat } from '../proto/common.js';\nimport { WeaponType } from '../proto/common.js';\nimport { Blessings } from '../proto/paladin.js';\nimport { BlessingsAssignment } from '../proto/ui.js';\nimport { BlessingsAssignments } from '../proto/ui.js';\n\nimport { Stats } from './stats.js';\n\nimport * as Gems from '../proto_utils/gems.js';\n\nimport {\n\tBalanceDruid,\n\tFeralDruid,\n\tFeralTankDruid,\n\tBalanceDruid_Rotation as BalanceDruidRotation,\n\tFeralDruid_Rotation as FeralDruidRotation,\n\tFeralTankDruid_Rotation as FeralTankDruidRotation,\n\tDruidTalents,\n\tBalanceDruid_Options as BalanceDruidOptions,\n\tFeralDruid_Options as FeralDruidOptions,\n\tFeralTankDruid_Options as FeralTankDruidOptions\n} from '../proto/druid.js';\nimport { ElementalShaman, EnhancementShaman_Rotation as EnhancementShamanRotation, ElementalShaman_Rotation as ElementalShamanRotation, ShamanTalents, ElementalShaman_Options as ElementalShamanOptions, EnhancementShaman_Options as EnhancementShamanOptions, EnhancementShaman } from '../proto/shaman.js';\nimport { Hunter, Hunter_Rotation as HunterRotation, HunterTalents, Hunter_Options as HunterOptions } from '../proto/hunter.js';\nimport { Mage, Mage_Rotation as MageRotation, MageTalents, Mage_Options as MageOptions } from '../proto/mage.js';\nimport { Rogue, Rogue_Rotation as RogueRotation, RogueTalents, Rogue_Options as RogueOptions } from '../proto/rogue.js';\nimport { RetributionPaladin, RetributionPaladin_Rotation as RetributionPaladinRotation, PaladinTalents, RetributionPaladin_Options as RetributionPaladinOptions } from '../proto/paladin.js';\nimport { ProtectionPaladin, ProtectionPaladin_Rotation as ProtectionPaladinRotation, ProtectionPaladin_Options as ProtectionPaladinOptions } from '../proto/paladin.js';\nimport {\n\tPriestTalents,\n\tHealingPriest,\n\tHealingPriest_Rotation as HealingPriestRotation,\n\tHealingPriest_Options as HealingPriestOptions,\n\tShadowPriest,\n\tShadowPriest_Rotation as ShadowPriestRotation,\n\tShadowPriest_Options as ShadowPriestOptions,\n\tSmitePriest,\n\tSmitePriest_Rotation as SmitePriestRotation,\n\tSmitePriest_Options as SmitePriestOptions,\n} from '../proto/priest.js';\nimport { Warlock, Warlock_Rotation as WarlockRotation, WarlockTalents, Warlock_Options as WarlockOptions } from '../proto/warlock.js';\nimport { Warrior, Warrior_Rotation as WarriorRotation, WarriorTalents, Warrior_Options as WarriorOptions } from '../proto/warrior.js';\nimport { Deathknight, Deathknight_Rotation as DeathknightRotation, DeathknightTalents, Deathknight_Options as DeathknightOptions } from '../proto/deathknight.js';\nimport { TankDeathknight, TankDeathknight_Rotation as TankDeathknightRotation, TankDeathknight_Options as TankDeathknightOptions } from '../proto/deathknight.js';\nimport { ProtectionWarrior, ProtectionWarrior_Rotation as ProtectionWarriorRotation, ProtectionWarrior_Options as ProtectionWarriorOptions } from '../proto/warrior.js';\n\nexport type DeathknightSpecs = [Spec.SpecDeathknight, Spec.SpecTankDeathknight];\nexport type DruidSpecs = [Spec.SpecBalanceDruid, Spec.SpecFeralDruid, Spec.SpecFeralTankDruid];\nexport type HunterSpecs = Spec.SpecHunter;\nexport type MageSpecs = Spec.SpecMage;\nexport type RogueSpecs = Spec.SpecRogue;\nexport type PaladinSpecs = [Spec.SpecRetributionPaladin, Spec.SpecProtectionPaladin];\nexport type PriestSpecs = [Spec.SpecHealingPriest, Spec.SpecShadowPriest, Spec.SpecSmitePriest];\nexport type ShamanSpecs = [Spec.SpecElementalShaman, Spec.SpecEnhancementShaman];\nexport type WarlockSpecs = Spec.SpecWarlock;\nexport type WarriorSpecs = [Spec.SpecWarrior, Spec.SpecProtectionWarrior];\n\nexport const NUM_SPECS = getEnumValues(Spec).length;\n\n// The order in which specs should be presented, when it matters.\n// Currently this is only used for the order of the paladin blessings UI.\nexport const naturalSpecOrder: Array<Spec> = [\n\tSpec.SpecBalanceDruid,\n\tSpec.SpecFeralDruid,\n\tSpec.SpecFeralTankDruid,\n\tSpec.SpecHunter,\n\tSpec.SpecMage,\n\tSpec.SpecRetributionPaladin,\n\tSpec.SpecProtectionPaladin,\n\tSpec.SpecHealingPriest,\n\tSpec.SpecShadowPriest,\n\tSpec.SpecSmitePriest,\n\tSpec.SpecRogue,\n\tSpec.SpecElementalShaman,\n\tSpec.SpecEnhancementShaman,\n\tSpec.SpecWarlock,\n\tSpec.SpecWarrior,\n\tSpec.SpecProtectionWarrior,\n\tSpec.SpecDeathknight,\n\tSpec.SpecTankDeathknight,\n];\n\nexport const specNames: Record<Spec, string> = {\n\t[Spec.SpecBalanceDruid]: 'Balance Druid',\n\t[Spec.SpecElementalShaman]: 'Elemental Shaman',\n\t[Spec.SpecEnhancementShaman]: 'Enhancement Shaman',\n\t[Spec.SpecFeralDruid]: 'Feral Druid',\n\t[Spec.SpecFeralTankDruid]: 'Feral Tank Druid',\n\t[Spec.SpecHunter]: 'Hunter',\n\t[Spec.SpecMage]: 'Mage',\n\t[Spec.SpecRogue]: 'Rogue',\n\t[Spec.SpecRetributionPaladin]: 'Retribution Paladin',\n\t[Spec.SpecProtectionPaladin]: 'Protection Paladin',\n\t[Spec.SpecHealingPriest]: 'Priest',\n\t[Spec.SpecShadowPriest]: 'Shadow Priest',\n\t[Spec.SpecSmitePriest]: 'Smite Priest',\n\t[Spec.SpecWarlock]: 'Warlock',\n\t[Spec.SpecWarrior]: 'Warrior',\n\t[Spec.SpecProtectionWarrior]: 'Protection Warrior',\n\t[Spec.SpecDeathknight]: 'Death Knight',\n\t[Spec.SpecTankDeathknight]: 'Death Knight Tank',\n};\n\nexport const classColors: Record<Class, string> = {\n\t[Class.ClassUnknown]: '#fff',\n\t[Class.ClassDruid]: '#ff7d0a',\n\t[Class.ClassHunter]: '#abd473',\n\t[Class.ClassMage]: '#69ccf0',\n\t[Class.ClassPaladin]: '#f58cba',\n\t[Class.ClassPriest]: '#fff',\n\t[Class.ClassRogue]: '#fff569',\n\t[Class.ClassShaman]: '#2459ff',\n\t[Class.ClassWarlock]: '#9482c9',\n\t[Class.ClassWarrior]: '#c79c6e',\n\t[Class.ClassDeathknight]: '#c41e3a'\n}\n\nexport const specIconsLarge: Record<Spec, string> = {\n\t[Spec.SpecBalanceDruid]: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_starfall.jpg',\n\t[Spec.SpecElementalShaman]: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_lightning.jpg',\n\t[Spec.SpecEnhancementShaman]: 'https://wow.zamimg.com/images/wow/icons/large/ability_shaman_stormstrike.jpg',\n\t[Spec.SpecFeralDruid]: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_catform.jpg',\n\t[Spec.SpecFeralTankDruid]: 'https://wow.zamimg.com/images/wow/icons/large/ability_racial_bearform.jpg',\n\t[Spec.SpecHunter]: 'https://wow.zamimg.com/images/wow/icons/large/ability_marksmanship.jpg',\n\t[Spec.SpecMage]: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_magicalsentry.jpg',\n\t[Spec.SpecRogue]: 'https://wow.zamimg.com/images/wow/icons/large/classicon_rogue.jpg',\n\t[Spec.SpecRetributionPaladin]: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_auraoflight.jpg',\n\t[Spec.SpecProtectionPaladin]: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_devotionaura.jpg',\n\t[Spec.SpecHealingPriest]: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_guardianspirit.jpg',\n\t[Spec.SpecShadowPriest]: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_shadowwordpain.jpg',\n\t[Spec.SpecSmitePriest]: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_holysmite.jpg',\n\t[Spec.SpecWarlock]: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_metamorphosis.jpg',\n\t[Spec.SpecWarrior]: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_innerrage.jpg',\n\t[Spec.SpecProtectionWarrior]: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_defensivestance.jpg',\n\t[Spec.SpecDeathknight]: 'https://wow.zamimg.com/images/wow/icons/medium/class_deathknight.jpg',\n\t[Spec.SpecTankDeathknight]: 'https://wow.zamimg.com/images/wow/icons/medium/class_deathknight.jpg',\n};\n\nexport const talentTreeIcons: Record<Class, Array<string>> = {\n\t[Class.ClassUnknown]: [],\n\t[Class.ClassDruid]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_nature_starfall.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_racial_bearform.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_nature_healingtouch.jpg',\n\t],\n\t[Class.ClassHunter]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_beasttaming.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_marksmanship.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_swiftstrike.jpg',\n\t],\n\t[Class.ClassMage]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_magicalsentry.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_fire_firebolt02.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_frost_frostbolt02.jpg',\n\t],\n\t[Class.ClassPaladin]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_holybolt.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_devotionaura.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_auraoflight.jpg',\n\t],\n\t[Class.ClassPriest]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_powerinfusion.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_holybolt.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_shadow_shadowwordpain.jpg',\n\t],\n\t[Class.ClassRogue]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_rogue_eviscerate.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_backstab.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_stealth.jpg',\n\t],\n\t[Class.ClassShaman]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_nature_lightning.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_shaman_stormstrike.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_nature_magicimmunity.jpg',\n\t],\n\t[Class.ClassWarlock]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_shadow_deathcoil.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_shadow_metamorphosis.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_shadow_rainoffire.jpg',\n\t],\n\t[Class.ClassWarrior]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_warrior_savageblow.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_warrior_innerrage.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/inv_shield_06.jpg',\n\t],\n\t[Class.ClassDeathknight]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_bloodpresence.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_frostpresence.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_unholypresence.jpg',\n\t],\n};\n\nexport const titleIcons: Record<Spec, string> = {\n\t[Spec.SpecBalanceDruid]: '/wotlk/assets/img/balance_druid_icon.png',\n\t[Spec.SpecElementalShaman]: '/wotlk/assets/img/elemental_shaman_icon.png',\n\t[Spec.SpecEnhancementShaman]: '/wotlk/assets/img/enhancement_shaman_icon.png',\n\t[Spec.SpecFeralDruid]: '/wotlk/assets/img/feral_druid_icon.png',\n\t[Spec.SpecFeralTankDruid]: '/wotlk/assets/img/feral_druid_tank_icon.png',\n\t[Spec.SpecHunter]: '/wotlk/assets/img/hunter_icon.png',\n\t[Spec.SpecMage]: '/wotlk/assets/img/mage_icon.png',\n\t[Spec.SpecRogue]: '/wotlk/assets/img/rogue_icon.png',\n\t[Spec.SpecRetributionPaladin]: '/wotlk/assets/img/retribution_icon.png',\n\t[Spec.SpecProtectionPaladin]: '/wotlk/assets/img/protection_paladin_icon.png',\n\t[Spec.SpecHealingPriest]: '/wotlk/assets/img/shadow_priest_icon.png',\n\t[Spec.SpecShadowPriest]: '/wotlk/assets/img/shadow_priest_icon.png',\n\t[Spec.SpecSmitePriest]: '/wotlk/assets/img/smite_priest_icon.png',\n\t[Spec.SpecWarlock]: '/wotlk/assets/img/warlock_icon.png',\n\t[Spec.SpecWarrior]: '/wotlk/assets/img/warrior_icon.png',\n\t[Spec.SpecProtectionWarrior]: '/wotlk/assets/img/protection_warrior_icon.png',\n\t[Spec.SpecDeathknight]: '/wotlk/assets/img/death_knight_icon.png',\n\t[Spec.SpecTankDeathknight]: '/wotlk/assets/img/death_knight_icon.png',\n};\n\nexport const raidSimIcon: string = '/wotlk/assets/img/raid_icon.png';\n\nexport function getTalentTreePoints(talentsString: string): Array<number> {\n\tconst trees = talentsString.split('-');\n\treturn trees.map(tree => sum([...tree].map(char => parseInt(char))));\n}\n\nexport function getTalentPoints(talentsString: string): number {\n\treturn sum(getTalentTreePoints(talentsString));\n}\n\n// Returns the index of the talent tree (0, 1, or 2) that has the most points.\nexport function getTalentTree(talentsString: string): number {\n\tconst points = getTalentTreePoints(talentsString);\n\treturn maxIndex(points) || 0;\n}\n\n// Returns the index of the talent tree (0, 1, or 2) that has the most points.\nexport function getTalentTreeIcon(spec: Spec, talentsString: string): string {\n\tconst talentTreeIdx = getTalentTree(talentsString);\n\treturn talentTreeIcons[specToClass[spec]][talentTreeIdx];\n}\n\n// Gets the URL for the individual sim corresponding to the given spec.\nconst specSiteUrlTemplate = new URL(`${window.location.protocol}//${window.location.host}/${REPO_NAME}/SPEC/`);\nexport function getSpecSiteUrl(spec: Spec): string {\n\tlet specString = Spec[spec]; // Returns 'SpecBalanceDruid' for BalanceDruid.\n\tspecString = specString.substring('Spec'.length); // 'BalanceDruid'\n\tspecString = camelToSnakeCase(specString); // 'balance_druid'\n\treturn specSiteUrlTemplate.toString().replace('SPEC', specString);\n}\nexport const raidSimSiteUrl = new URL(`${window.location.protocol}//${window.location.host}/${REPO_NAME}/raid/`).toString();\n\nexport type RotationUnion =\n\tBalanceDruidRotation |\n\tFeralDruidRotation |\n\tFeralTankDruidRotation |\n\tHunterRotation |\n\tMageRotation |\n\tElementalShamanRotation |\n\tEnhancementShamanRotation |\n\tRogueRotation |\n\tRetributionPaladinRotation |\n\tProtectionPaladinRotation |\n\tHealingPriestRotation |\n\tShadowPriestRotation |\n\tSmitePriestRotation |\n\tWarlockRotation |\n\tWarriorRotation |\n\tProtectionWarriorRotation |\n\tDeathknightRotation |\n\tTankDeathknightRotation;\nexport type SpecRotation<T extends Spec> =\n\tT extends Spec.SpecBalanceDruid ? BalanceDruidRotation :\n\tT extends Spec.SpecElementalShaman ? ElementalShamanRotation :\n\tT extends Spec.SpecEnhancementShaman ? EnhancementShamanRotation :\n\tT extends Spec.SpecFeralDruid ? FeralDruidRotation :\n\tT extends Spec.SpecFeralTankDruid ? FeralTankDruidRotation :\n\tT extends Spec.SpecHunter ? HunterRotation :\n\tT extends Spec.SpecMage ? MageRotation :\n\tT extends Spec.SpecRogue ? RogueRotation :\n\tT extends Spec.SpecRetributionPaladin ? RetributionPaladinRotation :\n\tT extends Spec.SpecProtectionPaladin ? ProtectionPaladinRotation :\n\tT extends Spec.SpecHealingPriest ? HealingPriestRotation :\n\tT extends Spec.SpecShadowPriest ? ShadowPriestRotation :\n\tT extends Spec.SpecSmitePriest ? SmitePriestRotation :\n\tT extends Spec.SpecWarlock ? WarlockRotation :\n\tT extends Spec.SpecWarrior ? WarriorRotation :\n\tT extends Spec.SpecProtectionWarrior ? ProtectionWarriorRotation :\n\tT extends Spec.SpecDeathknight ? DeathknightRotation :\n\tT extends Spec.SpecTankDeathknight ? TankDeathknightRotation :\n\tElementalShamanRotation; // Should never reach this case\n\nexport type TalentsUnion =\n\tDruidTalents |\n\tHunterTalents |\n\tMageTalents |\n\tRogueTalents |\n\tPaladinTalents |\n\tPriestTalents |\n\tShamanTalents |\n\tWarlockTalents |\n\tWarriorTalents |\n\tDeathknightTalents;\nexport type SpecTalents<T extends Spec> =\n\tT extends Spec.SpecBalanceDruid ? DruidTalents :\n\tT extends Spec.SpecElementalShaman ? ShamanTalents :\n\tT extends Spec.SpecEnhancementShaman ? ShamanTalents :\n\tT extends Spec.SpecFeralDruid ? DruidTalents :\n\tT extends Spec.SpecFeralTankDruid ? DruidTalents :\n\tT extends Spec.SpecHunter ? HunterTalents :\n\tT extends Spec.SpecMage ? MageTalents :\n\tT extends Spec.SpecRogue ? RogueTalents :\n\tT extends Spec.SpecRetributionPaladin ? PaladinTalents :\n\tT extends Spec.SpecProtectionPaladin ? PaladinTalents :\n\tT extends Spec.SpecHealingPriest ? PriestTalents :\n\tT extends Spec.SpecShadowPriest ? PriestTalents :\n\tT extends Spec.SpecSmitePriest ? PriestTalents :\n\tT extends Spec.SpecWarlock ? WarlockTalents :\n\tT extends Spec.SpecWarrior ? WarriorTalents :\n\tT extends Spec.SpecProtectionWarrior ? WarriorTalents :\n\tT extends Spec.SpecDeathknight ? DeathknightTalents :\n\tT extends Spec.SpecTankDeathknight ? DeathknightTalents :\n\tShamanTalents; // Should never reach this case\n\nexport type SpecOptionsUnion =\n\tBalanceDruidOptions |\n\tElementalShamanOptions |\n\tEnhancementShamanOptions |\n\tFeralDruidOptions |\n\tFeralTankDruidOptions |\n\tHunterOptions |\n\tMageOptions |\n\tRogueOptions |\n\tRetributionPaladinOptions |\n\tProtectionPaladinOptions |\n\tHealingPriestOptions |\n\tShadowPriestOptions |\n\tSmitePriestOptions |\n\tWarlockOptions |\n\tWarriorOptions |\n\tProtectionWarriorOptions |\n\tDeathknightOptions |\n\tTankDeathknightOptions;\nexport type SpecOptions<T extends Spec> =\n\tT extends Spec.SpecBalanceDruid ? BalanceDruidOptions :\n\tT extends Spec.SpecElementalShaman ? ElementalShamanOptions :\n\tT extends Spec.SpecEnhancementShaman ? EnhancementShamanOptions :\n\tT extends Spec.SpecFeralDruid ? FeralDruidOptions :\n\tT extends Spec.SpecFeralTankDruid ? FeralTankDruidOptions :\n\tT extends Spec.SpecHunter ? HunterOptions :\n\tT extends Spec.SpecMage ? MageOptions :\n\tT extends Spec.SpecRogue ? RogueOptions :\n\tT extends Spec.SpecRetributionPaladin ? RetributionPaladinOptions :\n\tT extends Spec.SpecProtectionPaladin ? ProtectionPaladinOptions :\n\tT extends Spec.SpecHealingPriest ? HealingPriestOptions :\n\tT extends Spec.SpecShadowPriest ? ShadowPriestOptions :\n\tT extends Spec.SpecSmitePriest ? SmitePriestOptions :\n\tT extends Spec.SpecWarlock ? WarlockOptions :\n\tT extends Spec.SpecWarrior ? WarriorOptions :\n\tT extends Spec.SpecProtectionWarrior ? ProtectionWarriorOptions :\n\tT extends Spec.SpecDeathknight ? DeathknightOptions :\n\tT extends Spec.SpecTankDeathknight ? TankDeathknightOptions :\n\tElementalShamanOptions; // Should never reach this case\n\nexport type SpecProtoUnion =\n\tBalanceDruid |\n\tElementalShaman |\n\tEnhancementShaman |\n\tFeralDruid |\n\tFeralTankDruid |\n\tHunter |\n\tMage |\n\tRogue |\n\tRetributionPaladin |\n\tProtectionPaladin |\n\tHealingPriest |\n\tShadowPriest |\n\tSmitePriest |\n\tWarlock |\n\tWarrior |\n\tProtectionWarrior |\n\tDeathknight |\n\tTankDeathknight;\nexport type SpecProto<T extends Spec> =\n\tT extends Spec.SpecBalanceDruid ? BalanceDruid :\n\tT extends Spec.SpecElementalShaman ? ElementalShaman :\n\tT extends Spec.SpecEnhancementShaman ? EnhancementShaman :\n\tT extends Spec.SpecFeralDruid ? FeralDruid :\n\tT extends Spec.SpecFeralTankDruid ? FeralTankDruid :\n\tT extends Spec.SpecHunter ? Hunter :\n\tT extends Spec.SpecMage ? Mage :\n\tT extends Spec.SpecRogue ? Rogue :\n\tT extends Spec.SpecRetributionPaladin ? RetributionPaladin :\n\tT extends Spec.SpecProtectionPaladin ? ProtectionPaladin :\n\tT extends Spec.SpecHealingPriest ? HealingPriest :\n\tT extends Spec.SpecShadowPriest ? ShadowPriest :\n\tT extends Spec.SpecSmitePriest ? SmitePriest :\n\tT extends Spec.SpecWarlock ? Warlock :\n\tT extends Spec.SpecWarrior ? Warrior :\n\tT extends Spec.SpecProtectionWarrior ? ProtectionWarrior :\n\tT extends Spec.SpecDeathknight ? Deathknight :\n\tT extends Spec.SpecTankDeathknight ? TankDeathknight :\n\tElementalShaman; // Should never reach this case\n\nexport type SpecTypeFunctions<SpecType extends Spec> = {\n\trotationCreate: () => SpecRotation<SpecType>;\n\trotationEquals: (a: SpecRotation<SpecType>, b: SpecRotation<SpecType>) => boolean;\n\trotationCopy: (a: SpecRotation<SpecType>) => SpecRotation<SpecType>;\n\trotationToJson: (a: SpecRotation<SpecType>) => any;\n\trotationFromJson: (obj: any) => SpecRotation<SpecType>;\n\trotationFromPlayer: (player: Player) => SpecRotation<SpecType>;\n\n\ttalentsCreate: () => SpecTalents<SpecType>;\n\ttalentsEquals: (a: SpecTalents<SpecType>, b: SpecTalents<SpecType>) => boolean;\n\ttalentsCopy: (a: SpecTalents<SpecType>) => SpecTalents<SpecType>;\n\ttalentsToJson: (a: SpecTalents<SpecType>) => any;\n\ttalentsFromJson: (obj: any) => SpecTalents<SpecType>;\n\ttalentsFromPlayer: (player: Player) => SpecTalents<SpecType>;\n\n\toptionsCreate: () => SpecOptions<SpecType>;\n\toptionsEquals: (a: SpecOptions<SpecType>, b: SpecOptions<SpecType>) => boolean;\n\toptionsCopy: (a: SpecOptions<SpecType>) => SpecOptions<SpecType>;\n\toptionsToJson: (a: SpecOptions<SpecType>) => any;\n\toptionsFromJson: (obj: any) => SpecOptions<SpecType>;\n\toptionsFromPlayer: (player: Player) => SpecOptions<SpecType>;\n};\n\nexport const specTypeFunctions: Record<Spec, SpecTypeFunctions<any>> = {\n\t[Spec.SpecBalanceDruid]: {\n\t\trotationCreate: () => BalanceDruidRotation.create(),\n\t\trotationEquals: (a, b) => BalanceDruidRotation.equals(a as BalanceDruidRotation, b as BalanceDruidRotation),\n\t\trotationCopy: (a) => BalanceDruidRotation.clone(a as BalanceDruidRotation),\n\t\trotationToJson: (a) => BalanceDruidRotation.toJson(a as BalanceDruidRotation),\n\t\trotationFromJson: (obj) => BalanceDruidRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'balanceDruid'\n\t\t\t? player.spec.balanceDruid.rotation || BalanceDruidRotation.create()\n\t\t\t: BalanceDruidRotation.create(),\n\n\t\ttalentsCreate: () => DruidTalents.create(),\n\t\ttalentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n\t\ttalentsCopy: (a) => DruidTalents.clone(a as DruidTalents),\n\t\ttalentsToJson: (a) => DruidTalents.toJson(a as DruidTalents),\n\t\ttalentsFromJson: (obj) => DruidTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'balanceDruid'\n\t\t\t? player.spec.balanceDruid.talents || DruidTalents.create()\n\t\t\t: DruidTalents.create(),\n\n\t\toptionsCreate: () => BalanceDruidOptions.create(),\n\t\toptionsEquals: (a, b) => BalanceDruidOptions.equals(a as BalanceDruidOptions, b as BalanceDruidOptions),\n\t\toptionsCopy: (a) => BalanceDruidOptions.clone(a as BalanceDruidOptions),\n\t\toptionsToJson: (a) => BalanceDruidOptions.toJson(a as BalanceDruidOptions),\n\t\toptionsFromJson: (obj) => BalanceDruidOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'balanceDruid'\n\t\t\t? player.spec.balanceDruid.options || BalanceDruidOptions.create()\n\t\t\t: BalanceDruidOptions.create(),\n\t},\n\t[Spec.SpecElementalShaman]: {\n\t\trotationCreate: () => ElementalShamanRotation.create(),\n\t\trotationEquals: (a, b) => ElementalShamanRotation.equals(a as ElementalShamanRotation, b as ElementalShamanRotation),\n\t\trotationCopy: (a) => ElementalShamanRotation.clone(a as ElementalShamanRotation),\n\t\trotationToJson: (a) => ElementalShamanRotation.toJson(a as ElementalShamanRotation),\n\t\trotationFromJson: (obj) => ElementalShamanRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'elementalShaman'\n\t\t\t? player.spec.elementalShaman.rotation || ElementalShamanRotation.create()\n\t\t\t: ElementalShamanRotation.create(),\n\n\t\ttalentsCreate: () => ShamanTalents.create(),\n\t\ttalentsEquals: (a, b) => ShamanTalents.equals(a as ShamanTalents, b as ShamanTalents),\n\t\ttalentsCopy: (a) => ShamanTalents.clone(a as ShamanTalents),\n\t\ttalentsToJson: (a) => ShamanTalents.toJson(a as ShamanTalents),\n\t\ttalentsFromJson: (obj) => ShamanTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'elementalShaman'\n\t\t\t? player.spec.elementalShaman.talents || ShamanTalents.create()\n\t\t\t: ShamanTalents.create(),\n\n\t\toptionsCreate: () => ElementalShamanOptions.create(),\n\t\toptionsEquals: (a, b) => ElementalShamanOptions.equals(a as ElementalShamanOptions, b as ElementalShamanOptions),\n\t\toptionsCopy: (a) => ElementalShamanOptions.clone(a as ElementalShamanOptions),\n\t\toptionsToJson: (a) => ElementalShamanOptions.toJson(a as ElementalShamanOptions),\n\t\toptionsFromJson: (obj) => ElementalShamanOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'elementalShaman'\n\t\t\t? player.spec.elementalShaman.options || ElementalShamanOptions.create()\n\t\t\t: ElementalShamanOptions.create(),\n\t},\n\t[Spec.SpecEnhancementShaman]: {\n\t\trotationCreate: () => EnhancementShamanRotation.create(),\n\t\trotationEquals: (a, b) => EnhancementShamanRotation.equals(a as EnhancementShamanRotation, b as EnhancementShamanRotation),\n\t\trotationCopy: (a) => EnhancementShamanRotation.clone(a as EnhancementShamanRotation),\n\t\trotationToJson: (a) => EnhancementShamanRotation.toJson(a as EnhancementShamanRotation),\n\t\trotationFromJson: (obj) => EnhancementShamanRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'enhancementShaman'\n\t\t\t? player.spec.enhancementShaman.rotation || EnhancementShamanRotation.create()\n\t\t\t: EnhancementShamanRotation.create(),\n\n\t\ttalentsCreate: () => ShamanTalents.create(),\n\t\ttalentsEquals: (a, b) => ShamanTalents.equals(a as ShamanTalents, b as ShamanTalents),\n\t\ttalentsCopy: (a) => ShamanTalents.clone(a as ShamanTalents),\n\t\ttalentsToJson: (a) => ShamanTalents.toJson(a as ShamanTalents),\n\t\ttalentsFromJson: (obj) => ShamanTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'enhancementShaman'\n\t\t\t? player.spec.enhancementShaman.talents || ShamanTalents.create()\n\t\t\t: ShamanTalents.create(),\n\n\t\toptionsCreate: () => EnhancementShamanOptions.create(),\n\t\toptionsEquals: (a, b) => EnhancementShamanOptions.equals(a as EnhancementShamanOptions, b as EnhancementShamanOptions),\n\t\toptionsCopy: (a) => EnhancementShamanOptions.clone(a as EnhancementShamanOptions),\n\t\toptionsToJson: (a) => EnhancementShamanOptions.toJson(a as EnhancementShamanOptions),\n\t\toptionsFromJson: (obj) => EnhancementShamanOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'enhancementShaman'\n\t\t\t? player.spec.enhancementShaman.options || EnhancementShamanOptions.create()\n\t\t\t: EnhancementShamanOptions.create(),\n\t},\n\t[Spec.SpecFeralDruid]: {\n\t\trotationCreate: () => FeralDruidRotation.create(),\n\t\trotationEquals: (a, b) => FeralDruidRotation.equals(a as FeralDruidRotation, b as FeralDruidRotation),\n\t\trotationCopy: (a) => FeralDruidRotation.clone(a as FeralDruidRotation),\n\t\trotationToJson: (a) => FeralDruidRotation.toJson(a as FeralDruidRotation),\n\t\trotationFromJson: (obj) => FeralDruidRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'feralDruid'\n\t\t\t? player.spec.feralDruid.rotation || FeralDruidRotation.create()\n\t\t\t: FeralDruidRotation.create(),\n\n\t\ttalentsCreate: () => DruidTalents.create(),\n\t\ttalentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n\t\ttalentsCopy: (a) => DruidTalents.clone(a as DruidTalents),\n\t\ttalentsToJson: (a) => DruidTalents.toJson(a as DruidTalents),\n\t\ttalentsFromJson: (obj) => DruidTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'feralDruid'\n\t\t\t? player.spec.feralDruid.talents || DruidTalents.create()\n\t\t\t: DruidTalents.create(),\n\n\t\toptionsCreate: () => FeralDruidOptions.create(),\n\t\toptionsEquals: (a, b) => FeralDruidOptions.equals(a as FeralDruidOptions, b as FeralDruidOptions),\n\t\toptionsCopy: (a) => FeralDruidOptions.clone(a as FeralDruidOptions),\n\t\toptionsToJson: (a) => FeralDruidOptions.toJson(a as FeralDruidOptions),\n\t\toptionsFromJson: (obj) => FeralDruidOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'feralDruid'\n\t\t\t? player.spec.feralDruid.options || FeralDruidOptions.create()\n\t\t\t: FeralDruidOptions.create(),\n\t},\n\t[Spec.SpecFeralTankDruid]: {\n\t\trotationCreate: () => FeralTankDruidRotation.create(),\n\t\trotationEquals: (a, b) => FeralTankDruidRotation.equals(a as FeralTankDruidRotation, b as FeralTankDruidRotation),\n\t\trotationCopy: (a) => FeralTankDruidRotation.clone(a as FeralTankDruidRotation),\n\t\trotationToJson: (a) => FeralTankDruidRotation.toJson(a as FeralTankDruidRotation),\n\t\trotationFromJson: (obj) => FeralTankDruidRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'feralTankDruid'\n\t\t\t? player.spec.feralTankDruid.rotation || FeralTankDruidRotation.create()\n\t\t\t: FeralTankDruidRotation.create(),\n\n\t\ttalentsCreate: () => DruidTalents.create(),\n\t\ttalentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n\t\ttalentsCopy: (a) => DruidTalents.clone(a as DruidTalents),\n\t\ttalentsToJson: (a) => DruidTalents.toJson(a as DruidTalents),\n\t\ttalentsFromJson: (obj) => DruidTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'feralTankDruid'\n\t\t\t? player.spec.feralTankDruid.talents || DruidTalents.create()\n\t\t\t: DruidTalents.create(),\n\n\t\toptionsCreate: () => FeralTankDruidOptions.create(),\n\t\toptionsEquals: (a, b) => FeralTankDruidOptions.equals(a as FeralTankDruidOptions, b as FeralTankDruidOptions),\n\t\toptionsCopy: (a) => FeralTankDruidOptions.clone(a as FeralTankDruidOptions),\n\t\toptionsToJson: (a) => FeralTankDruidOptions.toJson(a as FeralTankDruidOptions),\n\t\toptionsFromJson: (obj) => FeralTankDruidOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'feralTankDruid'\n\t\t\t? player.spec.feralTankDruid.options || FeralTankDruidOptions.create()\n\t\t\t: FeralTankDruidOptions.create(),\n\t},\n\t[Spec.SpecHunter]: {\n\t\trotationCreate: () => HunterRotation.create(),\n\t\trotationEquals: (a, b) => HunterRotation.equals(a as HunterRotation, b as HunterRotation),\n\t\trotationCopy: (a) => HunterRotation.clone(a as HunterRotation),\n\t\trotationToJson: (a) => HunterRotation.toJson(a as HunterRotation),\n\t\trotationFromJson: (obj) => HunterRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'hunter'\n\t\t\t? player.spec.hunter.rotation || HunterRotation.create()\n\t\t\t: HunterRotation.create(),\n\n\t\ttalentsCreate: () => HunterTalents.create(),\n\t\ttalentsEquals: (a, b) => HunterTalents.equals(a as HunterTalents, b as HunterTalents),\n\t\ttalentsCopy: (a) => HunterTalents.clone(a as HunterTalents),\n\t\ttalentsToJson: (a) => HunterTalents.toJson(a as HunterTalents),\n\t\ttalentsFromJson: (obj) => HunterTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'hunter'\n\t\t\t? player.spec.hunter.talents || HunterTalents.create()\n\t\t\t: HunterTalents.create(),\n\n\t\toptionsCreate: () => HunterOptions.create(),\n\t\toptionsEquals: (a, b) => HunterOptions.equals(a as HunterOptions, b as HunterOptions),\n\t\toptionsCopy: (a) => HunterOptions.clone(a as HunterOptions),\n\t\toptionsToJson: (a) => HunterOptions.toJson(a as HunterOptions),\n\t\toptionsFromJson: (obj) => HunterOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'hunter'\n\t\t\t? player.spec.hunter.options || HunterOptions.create()\n\t\t\t: HunterOptions.create(),\n\t},\n\t[Spec.SpecMage]: {\n\t\trotationCreate: () => MageRotation.create(),\n\t\trotationEquals: (a, b) => MageRotation.equals(a as MageRotation, b as MageRotation),\n\t\trotationCopy: (a) => MageRotation.clone(a as MageRotation),\n\t\trotationToJson: (a) => MageRotation.toJson(a as MageRotation),\n\t\trotationFromJson: (obj) => MageRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'mage'\n\t\t\t? player.spec.mage.rotation || MageRotation.create()\n\t\t\t: MageRotation.create(),\n\n\t\ttalentsCreate: () => MageTalents.create(),\n\t\ttalentsEquals: (a, b) => MageTalents.equals(a as MageTalents, b as MageTalents),\n\t\ttalentsCopy: (a) => MageTalents.clone(a as MageTalents),\n\t\ttalentsToJson: (a) => MageTalents.toJson(a as MageTalents),\n\t\ttalentsFromJson: (obj) => MageTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'mage'\n\t\t\t? player.spec.mage.talents || MageTalents.create()\n\t\t\t: MageTalents.create(),\n\n\t\toptionsCreate: () => MageOptions.create(),\n\t\toptionsEquals: (a, b) => MageOptions.equals(a as MageOptions, b as MageOptions),\n\t\toptionsCopy: (a) => MageOptions.clone(a as MageOptions),\n\t\toptionsToJson: (a) => MageOptions.toJson(a as MageOptions),\n\t\toptionsFromJson: (obj) => MageOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'mage'\n\t\t\t? player.spec.mage.options || MageOptions.create()\n\t\t\t: MageOptions.create(),\n\t},\n\t[Spec.SpecRetributionPaladin]: {\n\t\trotationCreate: () => RetributionPaladinRotation.create(),\n\t\trotationEquals: (a, b) => RetributionPaladinRotation.equals(a as RetributionPaladinRotation, b as RetributionPaladinRotation),\n\t\trotationCopy: (a) => RetributionPaladinRotation.clone(a as RetributionPaladinRotation),\n\t\trotationToJson: (a) => RetributionPaladinRotation.toJson(a as RetributionPaladinRotation),\n\t\trotationFromJson: (obj) => RetributionPaladinRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'retributionPaladin'\n\t\t\t? player.spec.retributionPaladin.rotation || RetributionPaladinRotation.create()\n\t\t\t: RetributionPaladinRotation.create(),\n\n\t\ttalentsCreate: () => PaladinTalents.create(),\n\t\ttalentsEquals: (a, b) => PaladinTalents.equals(a as PaladinTalents, b as PaladinTalents),\n\t\ttalentsCopy: (a) => PaladinTalents.clone(a as PaladinTalents),\n\t\ttalentsToJson: (a) => PaladinTalents.toJson(a as PaladinTalents),\n\t\ttalentsFromJson: (obj) => PaladinTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'retributionPaladin'\n\t\t\t? player.spec.retributionPaladin.talents || PaladinTalents.create()\n\t\t\t: PaladinTalents.create(),\n\n\t\toptionsCreate: () => RetributionPaladinOptions.create(),\n\t\toptionsEquals: (a, b) => RetributionPaladinOptions.equals(a as RetributionPaladinOptions, b as RetributionPaladinOptions),\n\t\toptionsCopy: (a) => RetributionPaladinOptions.clone(a as RetributionPaladinOptions),\n\t\toptionsToJson: (a) => RetributionPaladinOptions.toJson(a as RetributionPaladinOptions),\n\t\toptionsFromJson: (obj) => RetributionPaladinOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'retributionPaladin'\n\t\t\t? player.spec.retributionPaladin.options || RetributionPaladinOptions.create()\n\t\t\t: RetributionPaladinOptions.create(),\n\t},\n\t[Spec.SpecProtectionPaladin]: {\n\t\trotationCreate: () => ProtectionPaladinRotation.create(),\n\t\trotationEquals: (a, b) => ProtectionPaladinRotation.equals(a as ProtectionPaladinRotation, b as ProtectionPaladinRotation),\n\t\trotationCopy: (a) => ProtectionPaladinRotation.clone(a as ProtectionPaladinRotation),\n\t\trotationToJson: (a) => ProtectionPaladinRotation.toJson(a as ProtectionPaladinRotation),\n\t\trotationFromJson: (obj) => ProtectionPaladinRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'protectionPaladin'\n\t\t\t? player.spec.protectionPaladin.rotation || ProtectionPaladinRotation.create()\n\t\t\t: ProtectionPaladinRotation.create(),\n\n\t\ttalentsCreate: () => PaladinTalents.create(),\n\t\ttalentsEquals: (a, b) => PaladinTalents.equals(a as PaladinTalents, b as PaladinTalents),\n\t\ttalentsCopy: (a) => PaladinTalents.clone(a as PaladinTalents),\n\t\ttalentsToJson: (a) => PaladinTalents.toJson(a as PaladinTalents),\n\t\ttalentsFromJson: (obj) => PaladinTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'protectionPaladin'\n\t\t\t? player.spec.protectionPaladin.talents || PaladinTalents.create()\n\t\t\t: PaladinTalents.create(),\n\n\t\toptionsCreate: () => ProtectionPaladinOptions.create(),\n\t\toptionsEquals: (a, b) => ProtectionPaladinOptions.equals(a as ProtectionPaladinOptions, b as ProtectionPaladinOptions),\n\t\toptionsCopy: (a) => ProtectionPaladinOptions.clone(a as ProtectionPaladinOptions),\n\t\toptionsToJson: (a) => ProtectionPaladinOptions.toJson(a as ProtectionPaladinOptions),\n\t\toptionsFromJson: (obj) => ProtectionPaladinOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'protectionPaladin'\n\t\t\t? player.spec.protectionPaladin.options || ProtectionPaladinOptions.create()\n\t\t\t: ProtectionPaladinOptions.create(),\n\t},\n\t[Spec.SpecRogue]: {\n\t\trotationCreate: () => RogueRotation.create(),\n\t\trotationEquals: (a, b) => RogueRotation.equals(a as RogueRotation, b as RogueRotation),\n\t\trotationCopy: (a) => RogueRotation.clone(a as RogueRotation),\n\t\trotationToJson: (a) => RogueRotation.toJson(a as RogueRotation),\n\t\trotationFromJson: (obj) => RogueRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'rogue'\n\t\t\t? player.spec.rogue.rotation || RogueRotation.create()\n\t\t\t: RogueRotation.create(),\n\n\t\ttalentsCreate: () => RogueTalents.create(),\n\t\ttalentsEquals: (a, b) => RogueTalents.equals(a as RogueTalents, b as RogueTalents),\n\t\ttalentsCopy: (a) => RogueTalents.clone(a as RogueTalents),\n\t\ttalentsToJson: (a) => RogueTalents.toJson(a as RogueTalents),\n\t\ttalentsFromJson: (obj) => RogueTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'rogue'\n\t\t\t? player.spec.rogue.talents || RogueTalents.create()\n\t\t\t: RogueTalents.create(),\n\n\t\toptionsCreate: () => RogueOptions.create(),\n\t\toptionsEquals: (a, b) => RogueOptions.equals(a as RogueOptions, b as RogueOptions),\n\t\toptionsCopy: (a) => RogueOptions.clone(a as RogueOptions),\n\t\toptionsToJson: (a) => RogueOptions.toJson(a as RogueOptions),\n\t\toptionsFromJson: (obj) => RogueOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'rogue'\n\t\t\t? player.spec.rogue.options || RogueOptions.create()\n\t\t\t: RogueOptions.create(),\n\t},\n\t[Spec.SpecHealingPriest]: {\n\t\trotationCreate: () => HealingPriestRotation.create(),\n\t\trotationEquals: (a, b) => HealingPriestRotation.equals(a as HealingPriestRotation, b as HealingPriestRotation),\n\t\trotationCopy: (a) => HealingPriestRotation.clone(a as HealingPriestRotation),\n\t\trotationToJson: (a) => HealingPriestRotation.toJson(a as HealingPriestRotation),\n\t\trotationFromJson: (obj) => HealingPriestRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'healingPriest'\n\t\t\t? player.spec.healingPriest.rotation || HealingPriestRotation.create()\n\t\t\t: HealingPriestRotation.create(),\n\n\t\ttalentsCreate: () => PriestTalents.create(),\n\t\ttalentsEquals: (a, b) => PriestTalents.equals(a as PriestTalents, b as PriestTalents),\n\t\ttalentsCopy: (a) => PriestTalents.clone(a as PriestTalents),\n\t\ttalentsToJson: (a) => PriestTalents.toJson(a as PriestTalents),\n\t\ttalentsFromJson: (obj) => PriestTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'healingPriest'\n\t\t\t? player.spec.healingPriest.talents || PriestTalents.create()\n\t\t\t: PriestTalents.create(),\n\n\t\toptionsCreate: () => HealingPriestOptions.create(),\n\t\toptionsEquals: (a, b) => HealingPriestOptions.equals(a as HealingPriestOptions, b as HealingPriestOptions),\n\t\toptionsCopy: (a) => HealingPriestOptions.clone(a as HealingPriestOptions),\n\t\toptionsToJson: (a) => HealingPriestOptions.toJson(a as HealingPriestOptions),\n\t\toptionsFromJson: (obj) => HealingPriestOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'healingPriest'\n\t\t\t? player.spec.healingPriest.options || HealingPriestOptions.create()\n\t\t\t: HealingPriestOptions.create(),\n\t},\n\t[Spec.SpecShadowPriest]: {\n\t\trotationCreate: () => ShadowPriestRotation.create(),\n\t\trotationEquals: (a, b) => ShadowPriestRotation.equals(a as ShadowPriestRotation, b as ShadowPriestRotation),\n\t\trotationCopy: (a) => ShadowPriestRotation.clone(a as ShadowPriestRotation),\n\t\trotationToJson: (a) => ShadowPriestRotation.toJson(a as ShadowPriestRotation),\n\t\trotationFromJson: (obj) => ShadowPriestRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'shadowPriest'\n\t\t\t? player.spec.shadowPriest.rotation || ShadowPriestRotation.create()\n\t\t\t: ShadowPriestRotation.create(),\n\n\t\ttalentsCreate: () => PriestTalents.create(),\n\t\ttalentsEquals: (a, b) => PriestTalents.equals(a as PriestTalents, b as PriestTalents),\n\t\ttalentsCopy: (a) => PriestTalents.clone(a as PriestTalents),\n\t\ttalentsToJson: (a) => PriestTalents.toJson(a as PriestTalents),\n\t\ttalentsFromJson: (obj) => PriestTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'shadowPriest'\n\t\t\t? player.spec.shadowPriest.talents || PriestTalents.create()\n\t\t\t: PriestTalents.create(),\n\n\t\toptionsCreate: () => ShadowPriestOptions.create(),\n\t\toptionsEquals: (a, b) => ShadowPriestOptions.equals(a as ShadowPriestOptions, b as ShadowPriestOptions),\n\t\toptionsCopy: (a) => ShadowPriestOptions.clone(a as ShadowPriestOptions),\n\t\toptionsToJson: (a) => ShadowPriestOptions.toJson(a as ShadowPriestOptions),\n\t\toptionsFromJson: (obj) => ShadowPriestOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'shadowPriest'\n\t\t\t? player.spec.shadowPriest.options || ShadowPriestOptions.create()\n\t\t\t: ShadowPriestOptions.create(),\n\t},\n\t[Spec.SpecSmitePriest]: {\n\t\trotationCreate: () => SmitePriestRotation.create(),\n\t\trotationEquals: (a, b) => SmitePriestRotation.equals(a as SmitePriestRotation, b as SmitePriestRotation),\n\t\trotationCopy: (a) => SmitePriestRotation.clone(a as SmitePriestRotation),\n\t\trotationToJson: (a) => SmitePriestRotation.toJson(a as SmitePriestRotation),\n\t\trotationFromJson: (obj) => SmitePriestRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'smitePriest'\n\t\t\t? player.spec.smitePriest.rotation || SmitePriestRotation.create()\n\t\t\t: SmitePriestRotation.create(),\n\n\t\ttalentsCreate: () => PriestTalents.create(),\n\t\ttalentsEquals: (a, b) => PriestTalents.equals(a as PriestTalents, b as PriestTalents),\n\t\ttalentsCopy: (a) => PriestTalents.clone(a as PriestTalents),\n\t\ttalentsToJson: (a) => PriestTalents.toJson(a as PriestTalents),\n\t\ttalentsFromJson: (obj) => PriestTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'smitePriest'\n\t\t\t? player.spec.smitePriest.talents || PriestTalents.create()\n\t\t\t: PriestTalents.create(),\n\n\t\toptionsCreate: () => SmitePriestOptions.create(),\n\t\toptionsEquals: (a, b) => SmitePriestOptions.equals(a as SmitePriestOptions, b as SmitePriestOptions),\n\t\toptionsCopy: (a) => SmitePriestOptions.clone(a as SmitePriestOptions),\n\t\toptionsToJson: (a) => SmitePriestOptions.toJson(a as SmitePriestOptions),\n\t\toptionsFromJson: (obj) => SmitePriestOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'smitePriest'\n\t\t\t? player.spec.smitePriest.options || SmitePriestOptions.create()\n\t\t\t: SmitePriestOptions.create(),\n\t},\n\t[Spec.SpecWarlock]: {\n\t\trotationCreate: () => WarlockRotation.create(),\n\t\trotationEquals: (a, b) => WarlockRotation.equals(a as WarlockRotation, b as WarlockRotation),\n\t\trotationCopy: (a) => WarlockRotation.clone(a as WarlockRotation),\n\t\trotationToJson: (a) => WarlockRotation.toJson(a as WarlockRotation),\n\t\trotationFromJson: (obj) => WarlockRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'warlock'\n\t\t\t? player.spec.warlock.rotation || WarlockRotation.create()\n\t\t\t: WarlockRotation.create(),\n\n\t\ttalentsCreate: () => WarlockTalents.create(),\n\t\ttalentsEquals: (a, b) => WarlockTalents.equals(a as WarlockTalents, b as WarlockTalents),\n\t\ttalentsCopy: (a) => WarlockTalents.clone(a as WarlockTalents),\n\t\ttalentsToJson: (a) => WarlockTalents.toJson(a as WarlockTalents),\n\t\ttalentsFromJson: (obj) => WarlockTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'warlock'\n\t\t\t? player.spec.warlock.talents || WarlockTalents.create()\n\t\t\t: WarlockTalents.create(),\n\n\t\toptionsCreate: () => WarlockOptions.create(),\n\t\toptionsEquals: (a, b) => WarlockOptions.equals(a as WarlockOptions, b as WarlockOptions),\n\t\toptionsCopy: (a) => WarlockOptions.clone(a as WarlockOptions),\n\t\toptionsToJson: (a) => WarlockOptions.toJson(a as WarlockOptions),\n\t\toptionsFromJson: (obj) => WarlockOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'warlock'\n\t\t\t? player.spec.warlock.options || WarlockOptions.create()\n\t\t\t: WarlockOptions.create(),\n\t},\n\t[Spec.SpecWarrior]: {\n\t\trotationCreate: () => WarriorRotation.create(),\n\t\trotationEquals: (a, b) => WarriorRotation.equals(a as WarriorRotation, b as WarriorRotation),\n\t\trotationCopy: (a) => WarriorRotation.clone(a as WarriorRotation),\n\t\trotationToJson: (a) => WarriorRotation.toJson(a as WarriorRotation),\n\t\trotationFromJson: (obj) => WarriorRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'warrior'\n\t\t\t? player.spec.warrior.rotation || WarriorRotation.create()\n\t\t\t: WarriorRotation.create(),\n\n\t\ttalentsCreate: () => WarriorTalents.create(),\n\t\ttalentsEquals: (a, b) => WarriorTalents.equals(a as WarriorTalents, b as WarriorTalents),\n\t\ttalentsCopy: (a) => WarriorTalents.clone(a as WarriorTalents),\n\t\ttalentsToJson: (a) => WarriorTalents.toJson(a as WarriorTalents),\n\t\ttalentsFromJson: (obj) => WarriorTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'warrior'\n\t\t\t? player.spec.warrior.talents || WarriorTalents.create()\n\t\t\t: WarriorTalents.create(),\n\n\t\toptionsCreate: () => WarriorOptions.create(),\n\t\toptionsEquals: (a, b) => WarriorOptions.equals(a as WarriorOptions, b as WarriorOptions),\n\t\toptionsCopy: (a) => WarriorOptions.clone(a as WarriorOptions),\n\t\toptionsToJson: (a) => WarriorOptions.toJson(a as WarriorOptions),\n\t\toptionsFromJson: (obj) => WarriorOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'warrior'\n\t\t\t? player.spec.warrior.options || WarriorOptions.create()\n\t\t\t: WarriorOptions.create(),\n\t},\n\t[Spec.SpecProtectionWarrior]: {\n\t\trotationCreate: () => ProtectionWarriorRotation.create(),\n\t\trotationEquals: (a, b) => ProtectionWarriorRotation.equals(a as ProtectionWarriorRotation, b as ProtectionWarriorRotation),\n\t\trotationCopy: (a) => ProtectionWarriorRotation.clone(a as ProtectionWarriorRotation),\n\t\trotationToJson: (a) => ProtectionWarriorRotation.toJson(a as ProtectionWarriorRotation),\n\t\trotationFromJson: (obj) => ProtectionWarriorRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'protectionWarrior'\n\t\t\t? player.spec.protectionWarrior.rotation || ProtectionWarriorRotation.create()\n\t\t\t: ProtectionWarriorRotation.create(),\n\n\t\ttalentsCreate: () => WarriorTalents.create(),\n\t\ttalentsEquals: (a, b) => WarriorTalents.equals(a as WarriorTalents, b as WarriorTalents),\n\t\ttalentsCopy: (a) => WarriorTalents.clone(a as WarriorTalents),\n\t\ttalentsToJson: (a) => WarriorTalents.toJson(a as WarriorTalents),\n\t\ttalentsFromJson: (obj) => WarriorTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'protectionWarrior'\n\t\t\t? player.spec.protectionWarrior.talents || WarriorTalents.create()\n\t\t\t: WarriorTalents.create(),\n\n\t\toptionsCreate: () => ProtectionWarriorOptions.create(),\n\t\toptionsEquals: (a, b) => ProtectionWarriorOptions.equals(a as ProtectionWarriorOptions, b as ProtectionWarriorOptions),\n\t\toptionsCopy: (a) => ProtectionWarriorOptions.clone(a as ProtectionWarriorOptions),\n\t\toptionsToJson: (a) => ProtectionWarriorOptions.toJson(a as ProtectionWarriorOptions),\n\t\toptionsFromJson: (obj) => ProtectionWarriorOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'protectionWarrior'\n\t\t\t? player.spec.protectionWarrior.options || ProtectionWarriorOptions.create()\n\t\t\t: ProtectionWarriorOptions.create(),\n\t},\n\t[Spec.SpecDeathknight]: {\n\t\trotationCreate: () => DeathknightRotation.create(),\n\t\trotationEquals: (a, b) => DeathknightRotation.equals(a as DeathknightRotation, b as DeathknightRotation),\n\t\trotationCopy: (a) => DeathknightRotation.clone(a as DeathknightRotation),\n\t\trotationToJson: (a) => DeathknightRotation.toJson(a as DeathknightRotation),\n\t\trotationFromJson: (obj) => DeathknightRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'deathknight'\n\t\t\t? player.spec.deathknight.rotation || DeathknightRotation.create()\n\t\t\t: DeathknightRotation.create(),\n\n\t\ttalentsCreate: () => DeathknightTalents.create(),\n\t\ttalentsEquals: (a, b) => DeathknightTalents.equals(a as DeathknightTalents, b as DeathknightTalents),\n\t\ttalentsCopy: (a) => DeathknightTalents.clone(a as DeathknightTalents),\n\t\ttalentsToJson: (a) => DeathknightTalents.toJson(a as DeathknightTalents),\n\t\ttalentsFromJson: (obj) => DeathknightTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'deathknight'\n\t\t\t? player.spec.deathknight.talents || DeathknightTalents.create()\n\t\t\t: DeathknightTalents.create(),\n\n\t\toptionsCreate: () => DeathknightOptions.create(),\n\t\toptionsEquals: (a, b) => DeathknightOptions.equals(a as DeathknightOptions, b as DeathknightOptions),\n\t\toptionsCopy: (a) => DeathknightOptions.clone(a as DeathknightOptions),\n\t\toptionsToJson: (a) => DeathknightOptions.toJson(a as DeathknightOptions),\n\t\toptionsFromJson: (obj) => DeathknightOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'deathknight'\n\t\t\t? player.spec.deathknight.options || DeathknightOptions.create()\n\t\t\t: DeathknightOptions.create(),\n\t},\n\t[Spec.SpecTankDeathknight]: {\n\t\trotationCreate: () => TankDeathknightRotation.create(),\n\t\trotationEquals: (a, b) => TankDeathknightRotation.equals(a as TankDeathknightRotation, b as TankDeathknightRotation),\n\t\trotationCopy: (a) => TankDeathknightRotation.clone(a as TankDeathknightRotation),\n\t\trotationToJson: (a) => TankDeathknightRotation.toJson(a as TankDeathknightRotation),\n\t\trotationFromJson: (obj) => TankDeathknightRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'tankDeathknight'\n\t\t\t? player.spec.tankDeathknight.rotation || TankDeathknightRotation.create()\n\t\t\t: TankDeathknightRotation.create(),\n\n\t\ttalentsCreate: () => DeathknightTalents.create(),\n\t\ttalentsEquals: (a, b) => DeathknightTalents.equals(a as DeathknightTalents, b as DeathknightTalents),\n\t\ttalentsCopy: (a) => DeathknightTalents.clone(a as DeathknightTalents),\n\t\ttalentsToJson: (a) => DeathknightTalents.toJson(a as DeathknightTalents),\n\t\ttalentsFromJson: (obj) => DeathknightTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'tankDeathknight'\n\t\t\t? player.spec.tankDeathknight.talents || DeathknightTalents.create()\n\t\t\t: DeathknightTalents.create(),\n\n\t\toptionsCreate: () => TankDeathknightOptions.create(),\n\t\toptionsEquals: (a, b) => TankDeathknightOptions.equals(a as TankDeathknightOptions, b as TankDeathknightOptions),\n\t\toptionsCopy: (a) => TankDeathknightOptions.clone(a as TankDeathknightOptions),\n\t\toptionsToJson: (a) => TankDeathknightOptions.toJson(a as TankDeathknightOptions),\n\t\toptionsFromJson: (obj) => TankDeathknightOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'tankDeathknight'\n\t\t\t? player.spec.tankDeathknight.options || TankDeathknightOptions.create()\n\t\t\t: TankDeathknightOptions.create(),\n\t},\n};\n\nexport const raceToFaction: Record<Race, Faction> = {\n\t[Race.RaceUnknown]: Faction.Unknown,\n\t[Race.RaceBloodElf]: Faction.Horde,\n\t[Race.RaceDraenei]: Faction.Alliance,\n\t[Race.RaceDwarf]: Faction.Alliance,\n\t[Race.RaceGnome]: Faction.Alliance,\n\t[Race.RaceHuman]: Faction.Alliance,\n\t[Race.RaceNightElf]: Faction.Alliance,\n\t[Race.RaceOrc]: Faction.Horde,\n\t[Race.RaceTauren]: Faction.Horde,\n\t[Race.RaceTroll]: Faction.Horde,\n\t[Race.RaceUndead]: Faction.Horde,\n};\n\nexport const specToClass: Record<Spec, Class> = {\n\t[Spec.SpecBalanceDruid]: Class.ClassDruid,\n\t[Spec.SpecFeralDruid]: Class.ClassDruid,\n\t[Spec.SpecFeralTankDruid]: Class.ClassDruid,\n\t[Spec.SpecHunter]: Class.ClassHunter,\n\t[Spec.SpecMage]: Class.ClassMage,\n\t[Spec.SpecRogue]: Class.ClassRogue,\n\t[Spec.SpecRetributionPaladin]: Class.ClassPaladin,\n\t[Spec.SpecProtectionPaladin]: Class.ClassPaladin,\n\t[Spec.SpecHealingPriest]: Class.ClassPriest,\n\t[Spec.SpecShadowPriest]: Class.ClassPriest,\n\t[Spec.SpecSmitePriest]: Class.ClassPriest,\n\t[Spec.SpecElementalShaman]: Class.ClassShaman,\n\t[Spec.SpecEnhancementShaman]: Class.ClassShaman,\n\t[Spec.SpecWarlock]: Class.ClassWarlock,\n\t[Spec.SpecWarrior]: Class.ClassWarrior,\n\t[Spec.SpecProtectionWarrior]: Class.ClassWarrior,\n\t[Spec.SpecDeathknight]: Class.ClassDeathknight,\n\t[Spec.SpecTankDeathknight]: Class.ClassDeathknight,\n};\n\nconst druidRaces = [\n\tRace.RaceNightElf,\n\tRace.RaceTauren,\n];\nconst hunterRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDraenei,\n\tRace.RaceDwarf,\n\tRace.RaceNightElf,\n\tRace.RaceOrc,\n\tRace.RaceTauren,\n\tRace.RaceTroll,\n];\nconst mageRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDraenei,\n\tRace.RaceGnome,\n\tRace.RaceHuman,\n\tRace.RaceTroll,\n\tRace.RaceUndead,\n];\nconst paladinRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDraenei,\n\tRace.RaceDwarf,\n\tRace.RaceHuman,\n];\nconst priestRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDraenei,\n\tRace.RaceDwarf,\n\tRace.RaceHuman,\n\tRace.RaceNightElf,\n\tRace.RaceTroll,\n\tRace.RaceUndead,\n];\nconst rogueRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDwarf,\n\tRace.RaceGnome,\n\tRace.RaceHuman,\n\tRace.RaceNightElf,\n\tRace.RaceOrc,\n\tRace.RaceTroll,\n\tRace.RaceUndead,\n];\nconst shamanRaces = [\n\tRace.RaceDraenei,\n\tRace.RaceOrc,\n\tRace.RaceTauren,\n\tRace.RaceTroll,\n];\nconst warlockRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceGnome,\n\tRace.RaceHuman,\n\tRace.RaceOrc,\n\tRace.RaceUndead,\n];\nconst warriorRaces = [\n\tRace.RaceDraenei,\n\tRace.RaceDwarf,\n\tRace.RaceGnome,\n\tRace.RaceHuman,\n\tRace.RaceNightElf,\n\tRace.RaceOrc,\n\tRace.RaceTauren,\n\tRace.RaceTroll,\n\tRace.RaceUndead,\n];\nconst deathKnightRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDraenei,\n\tRace.RaceDwarf,\n\tRace.RaceGnome,\n\tRace.RaceHuman,\n\tRace.RaceNightElf,\n\tRace.RaceOrc,\n\tRace.RaceTauren,\n\tRace.RaceTroll,\n\tRace.RaceUndead,\n];\n\nexport const specToEligibleRaces: Record<Spec, Array<Race>> = {\n\t[Spec.SpecBalanceDruid]: druidRaces,\n\t[Spec.SpecElementalShaman]: shamanRaces,\n\t[Spec.SpecEnhancementShaman]: shamanRaces,\n\t[Spec.SpecFeralDruid]: druidRaces,\n\t[Spec.SpecFeralTankDruid]: druidRaces,\n\t[Spec.SpecHunter]: hunterRaces,\n\t[Spec.SpecMage]: mageRaces,\n\t[Spec.SpecRetributionPaladin]: paladinRaces,\n\t[Spec.SpecProtectionPaladin]: paladinRaces,\n\t[Spec.SpecRogue]: rogueRaces,\n\t[Spec.SpecHealingPriest]: priestRaces,\n\t[Spec.SpecShadowPriest]: priestRaces,\n\t[Spec.SpecSmitePriest]: priestRaces,\n\t[Spec.SpecWarlock]: warlockRaces,\n\t[Spec.SpecWarrior]: warriorRaces,\n\t[Spec.SpecProtectionWarrior]: warriorRaces,\n\t[Spec.SpecDeathknight]: deathKnightRaces,\n\t[Spec.SpecTankDeathknight]: deathKnightRaces,\n};\n\n// Specs that can dual wield. This could be based on class, except that\n// Enhancement Shaman learn dual wield from a talent.\nconst dualWieldSpecs: Array<Spec> = [\n\tSpec.SpecEnhancementShaman,\n\tSpec.SpecHunter,\n\tSpec.SpecRogue,\n\tSpec.SpecWarrior,\n\tSpec.SpecProtectionWarrior,\n\tSpec.SpecDeathknight,\n\tSpec.SpecTankDeathknight,\n];\nexport function isDualWieldSpec(spec: Spec): boolean {\n\treturn dualWieldSpecs.includes(spec);\n}\n\nconst tankSpecs: Array<Spec> = [\n\tSpec.SpecFeralTankDruid,\n\tSpec.SpecProtectionPaladin,\n\tSpec.SpecProtectionWarrior,\n\tSpec.SpecTankDeathknight,\n];\nexport function isTankSpec(spec: Spec): boolean {\n\treturn tankSpecs.includes(spec);\n}\n\nconst healingSpecs: Array<Spec> = [\n\tSpec.SpecHealingPriest,\n];\nexport function isHealingSpec(spec: Spec): boolean {\n\treturn healingSpecs.includes(spec);\n}\n\n// Prefixes used for storing browser data for each site. Even if a Spec is\n// renamed, DO NOT change these values or people will lose their saved data.\nexport const specToLocalStorageKey: Record<Spec, string> = {\n\t[Spec.SpecBalanceDruid]: '__wotlk_balance_druid',\n\t[Spec.SpecElementalShaman]: '__wotlk_elemental_shaman',\n\t[Spec.SpecEnhancementShaman]: '__wotlk_enhacement_shaman',\n\t[Spec.SpecFeralDruid]: '__wotlk_feral_druid',\n\t[Spec.SpecFeralTankDruid]: '__wotlk_feral_tank_druid',\n\t[Spec.SpecHunter]: '__wotlk_hunter',\n\t[Spec.SpecMage]: '__wotlk_mage',\n\t[Spec.SpecRetributionPaladin]: '__wotlk_retribution_paladin',\n\t[Spec.SpecProtectionPaladin]: '__wotlk_protection_paladin',\n\t[Spec.SpecRogue]: '__wotlk_rogue',\n\t[Spec.SpecHealingPriest]: '__wotlk_healing_priest',\n\t[Spec.SpecShadowPriest]: '__wotlk_shadow_priest',\n\t[Spec.SpecSmitePriest]: '__wotlk_smite_priest',\n\t[Spec.SpecWarlock]: '__wotlk_warlock',\n\t[Spec.SpecWarrior]: '__wotlk_warrior',\n\t[Spec.SpecProtectionWarrior]: '__wotlk_protection_warrior',\n\t[Spec.SpecDeathknight]: '__wotlk_deathknight',\n\t[Spec.SpecTankDeathknight]: '__wotlk_tank_deathknight',\n};\n\n// Returns a copy of playerOptions, with the class field set.\nexport function withSpecProto<SpecType extends Spec>(\n\tspec: Spec,\n\tplayer: Player,\n\trotation: SpecRotation<SpecType>,\n\ttalents: SpecTalents<SpecType>,\n\tspecOptions: SpecOptions<SpecType>): Player {\n\tconst copy = Player.clone(player);\n\n\tswitch (spec) {\n\t\tcase Spec.SpecBalanceDruid:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'balanceDruid',\n\t\t\t\tbalanceDruid: BalanceDruid.create({\n\t\t\t\t\trotation: rotation as BalanceDruidRotation,\n\t\t\t\t\ttalents: talents as DruidTalents,\n\t\t\t\t\toptions: specOptions as BalanceDruidOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecElementalShaman:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'elementalShaman',\n\t\t\t\telementalShaman: ElementalShaman.create({\n\t\t\t\t\trotation: rotation as ElementalShamanRotation,\n\t\t\t\t\ttalents: talents as ShamanTalents,\n\t\t\t\t\toptions: specOptions as ElementalShamanOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecEnhancementShaman:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'enhancementShaman',\n\t\t\t\tenhancementShaman: EnhancementShaman.create({\n\t\t\t\t\trotation: rotation as EnhancementShamanRotation,\n\t\t\t\t\ttalents: talents as ShamanTalents,\n\t\t\t\t\toptions: specOptions as ElementalShamanOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecFeralDruid:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'feralDruid',\n\t\t\t\tferalDruid: FeralDruid.create({\n\t\t\t\t\trotation: rotation as FeralDruidRotation,\n\t\t\t\t\ttalents: talents as DruidTalents,\n\t\t\t\t\toptions: specOptions as FeralDruidOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecFeralTankDruid:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'feralTankDruid',\n\t\t\t\tferalTankDruid: FeralTankDruid.create({\n\t\t\t\t\trotation: rotation as FeralTankDruidRotation,\n\t\t\t\t\ttalents: talents as DruidTalents,\n\t\t\t\t\toptions: specOptions as FeralTankDruidOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecHunter:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'hunter',\n\t\t\t\thunter: Hunter.create({\n\t\t\t\t\trotation: rotation as HunterRotation,\n\t\t\t\t\ttalents: talents as HunterTalents,\n\t\t\t\t\toptions: specOptions as HunterOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecMage:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'mage',\n\t\t\t\tmage: Mage.create({\n\t\t\t\t\trotation: rotation as MageRotation,\n\t\t\t\t\ttalents: talents as MageTalents,\n\t\t\t\t\toptions: specOptions as MageOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecRetributionPaladin:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'retributionPaladin',\n\t\t\t\tretributionPaladin: RetributionPaladin.create({\n\t\t\t\t\trotation: rotation as RetributionPaladinRotation,\n\t\t\t\t\ttalents: talents as PaladinTalents,\n\t\t\t\t\toptions: specOptions as RetributionPaladinOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecProtectionPaladin:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'protectionPaladin',\n\t\t\t\tprotectionPaladin: ProtectionPaladin.create({\n\t\t\t\t\trotation: rotation as ProtectionPaladinRotation,\n\t\t\t\t\ttalents: talents as PaladinTalents,\n\t\t\t\t\toptions: specOptions as ProtectionPaladinOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecRogue:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'rogue',\n\t\t\t\trogue: Rogue.create({\n\t\t\t\t\trotation: rotation as RogueRotation,\n\t\t\t\t\ttalents: talents as RogueTalents,\n\t\t\t\t\toptions: specOptions as RogueOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecHealingPriest:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'healingPriest',\n\t\t\t\thealingPriest: HealingPriest.create({\n\t\t\t\t\trotation: rotation as HealingPriestRotation,\n\t\t\t\t\ttalents: talents as PriestTalents,\n\t\t\t\t\toptions: specOptions as HealingPriestOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecShadowPriest:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'shadowPriest',\n\t\t\t\tshadowPriest: ShadowPriest.create({\n\t\t\t\t\trotation: rotation as ShadowPriestRotation,\n\t\t\t\t\ttalents: talents as PriestTalents,\n\t\t\t\t\toptions: specOptions as ShadowPriestOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecSmitePriest:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'smitePriest',\n\t\t\t\tsmitePriest: SmitePriest.create({\n\t\t\t\t\trotation: rotation as SmitePriestRotation,\n\t\t\t\t\ttalents: talents as PriestTalents,\n\t\t\t\t\toptions: specOptions as SmitePriestOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecWarlock:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'warlock',\n\t\t\t\twarlock: Warlock.create({\n\t\t\t\t\trotation: rotation as WarlockRotation,\n\t\t\t\t\ttalents: talents as WarlockTalents,\n\t\t\t\t\toptions: specOptions as WarlockOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecWarrior:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'warrior',\n\t\t\t\twarrior: Warrior.create({\n\t\t\t\t\trotation: rotation as WarriorRotation,\n\t\t\t\t\ttalents: talents as WarriorTalents,\n\t\t\t\t\toptions: specOptions as WarriorOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecProtectionWarrior:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'protectionWarrior',\n\t\t\t\tprotectionWarrior: ProtectionWarrior.create({\n\t\t\t\t\trotation: rotation as ProtectionWarriorRotation,\n\t\t\t\t\ttalents: talents as WarriorTalents,\n\t\t\t\t\toptions: specOptions as ProtectionWarriorOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecDeathknight:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'deathknight',\n\t\t\t\tdeathknight: Deathknight.create({\n\t\t\t\t\trotation: rotation as DeathknightRotation,\n\t\t\t\t\ttalents: talents as DeathknightTalents,\n\t\t\t\t\toptions: specOptions as DeathknightOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecTankDeathknight:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'tankDeathknight',\n\t\t\t\ttankDeathknight: TankDeathknight.create({\n\t\t\t\t\trotation: rotation as TankDeathknightRotation,\n\t\t\t\t\ttalents: talents as DeathknightTalents,\n\t\t\t\t\toptions: specOptions as TankDeathknightOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t}\n}\n\nexport function playerToSpec(player: Player): Spec {\n\tconst specValues = getEnumValues(Spec);\n\tfor (let i = 0; i < specValues.length; i++) {\n\t\tconst spec = specValues[i] as Spec;\n\t\tlet specString = Spec[spec]; // Returns 'SpecBalanceDruid' for BalanceDruid.\n\t\tspecString = specString.substring('Spec'.length); // 'BalanceDruid'\n\t\tspecString = specString.charAt(0).toLowerCase() + specString.slice(1); // 'balanceDruid'\n\n\t\tif (player.spec.oneofKind == specString) {\n\t\t\treturn spec;\n\t\t}\n\t}\n\n\tthrow new Error('Unable to parse spec from player proto: ' + JSON.stringify(Player.toJson(player), null, 2));\n}\n\nconst classToMaxArmorType: Record<Class, ArmorType> = {\n\t[Class.ClassUnknown]: ArmorType.ArmorTypeUnknown,\n\t[Class.ClassDruid]: ArmorType.ArmorTypeLeather,\n\t[Class.ClassHunter]: ArmorType.ArmorTypeMail,\n\t[Class.ClassMage]: ArmorType.ArmorTypeCloth,\n\t[Class.ClassPaladin]: ArmorType.ArmorTypePlate,\n\t[Class.ClassPriest]: ArmorType.ArmorTypeCloth,\n\t[Class.ClassRogue]: ArmorType.ArmorTypeLeather,\n\t[Class.ClassShaman]: ArmorType.ArmorTypeMail,\n\t[Class.ClassWarlock]: ArmorType.ArmorTypeCloth,\n\t[Class.ClassWarrior]: ArmorType.ArmorTypePlate,\n\t[Class.ClassDeathknight]: ArmorType.ArmorTypePlate,\n};\n\nconst classToEligibleRangedWeaponTypes: Record<Class, Array<RangedWeaponType>> = {\n\t[Class.ClassUnknown]: [],\n\t[Class.ClassDruid]: [RangedWeaponType.RangedWeaponTypeIdol],\n\t[Class.ClassHunter]: [\n\t\tRangedWeaponType.RangedWeaponTypeBow,\n\t\tRangedWeaponType.RangedWeaponTypeCrossbow,\n\t\tRangedWeaponType.RangedWeaponTypeGun,\n\t\tRangedWeaponType.RangedWeaponTypeThrown,\n\t],\n\t[Class.ClassMage]: [RangedWeaponType.RangedWeaponTypeWand],\n\t[Class.ClassPaladin]: [RangedWeaponType.RangedWeaponTypeLibram],\n\t[Class.ClassPriest]: [RangedWeaponType.RangedWeaponTypeWand],\n\t[Class.ClassRogue]: [\n\t\tRangedWeaponType.RangedWeaponTypeBow,\n\t\tRangedWeaponType.RangedWeaponTypeCrossbow,\n\t\tRangedWeaponType.RangedWeaponTypeGun,\n\t\tRangedWeaponType.RangedWeaponTypeThrown,\n\t],\n\t[Class.ClassShaman]: [RangedWeaponType.RangedWeaponTypeTotem],\n\t[Class.ClassWarlock]: [RangedWeaponType.RangedWeaponTypeWand],\n\t[Class.ClassWarrior]: [\n\t\tRangedWeaponType.RangedWeaponTypeBow,\n\t\tRangedWeaponType.RangedWeaponTypeCrossbow,\n\t\tRangedWeaponType.RangedWeaponTypeGun,\n\t\tRangedWeaponType.RangedWeaponTypeThrown,\n\t],\n\t[Class.ClassDeathknight]: [\n\t\tRangedWeaponType.RangedWeaponTypeSigil,\n\t],\n};\n\ninterface EligibleWeaponType {\n\tweaponType: WeaponType,\n\tcanUseTwoHand?: boolean,\n}\n\nconst classToEligibleWeaponTypes: Record<Class, Array<EligibleWeaponType>> = {\n\t[Class.ClassUnknown]: [],\n\t[Class.ClassDruid]: [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t],\n\t[Class.ClassHunter]: [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t],\n\t[Class.ClassMage]: [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword },\n\t],\n\t[Class.ClassPaladin]: [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeShield },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t],\n\t[Class.ClassPriest]: [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeMace },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t],\n\t[Class.ClassRogue]: [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: false },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeSword },\n\t],\n\t[Class.ClassShaman]: [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeShield },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t],\n\t[Class.ClassWarlock]: [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword },\n\t],\n\t[Class.ClassWarrior]: [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeShield },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t],\n\t[Class.ClassDeathknight]: [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t\t// TODO: validate proficiencies\n\t],\n};\n\nexport function isSharpWeaponType(weaponType: WeaponType): boolean {\n\treturn [\n\t\tWeaponType.WeaponTypeAxe,\n\t\tWeaponType.WeaponTypeDagger,\n\t\tWeaponType.WeaponTypePolearm,\n\t\tWeaponType.WeaponTypeSword,\n\t].includes(weaponType);\n}\n\nexport function isBluntWeaponType(weaponType: WeaponType): boolean {\n\treturn [\n\t\tWeaponType.WeaponTypeFist,\n\t\tWeaponType.WeaponTypeMace,\n\t\tWeaponType.WeaponTypeStaff,\n\t].includes(weaponType);\n}\n\n// Custom functions for determining the EP value of meta gem effects.\n// Default meta effect EP value is 0, so just handle the ones relevant to your spec.\nconst metaGemEffectEPs: Partial<Record<Spec, (gem: Gem, playerStats: Stats) => number>> = {\n\t[Spec.SpecBalanceDruid]: (gem, playerStats) => {\n\t\tif (gem.id == Gems.CHAOTIC_SKYFIRE_DIAMOND.id) {\n\t\t\t// TODO: Fix this\n\t\t\treturn (12 * 0.65) + (3 * 45);\n\t\t}\n\t\tif (gem.id == Gems.CHAOTIC_SKYFLARE_DIAMOND.id) {\n\t\t\treturn (21 * 0.65) + (3 * 45);\n\t\t}\n\t\treturn 0;\n\t},\n\t[Spec.SpecElementalShaman]: (gem, playerStats) => {\n\t\tif (gem.id == Gems.CHAOTIC_SKYFIRE_DIAMOND.id) {\n\t\t\treturn (((playerStats.getStat(Stat.StatSpellPower) * 0.795) + 603) * 2 * (playerStats.getStat(Stat.StatSpellCrit) / 2208) * 0.045) / 0.795;\n\t\t}\n\n\t\treturn 0;\n\t},\n\t[Spec.SpecWarlock]: (gem, playerStats) => {\n\t\t// TODO: make it gear dependant\n\t\tif (gem.id == Gems.CHAOTIC_SKYFLARE_DIAMOND.id) {\n\t\t\treturn 84;\n\t\t}\n\t\tif (gem.id == Gems.CHAOTIC_SKYFIRE_DIAMOND.id) {\n\t\t\treturn 80;\n\t\t}\n\n\t\treturn 0;\n\t},\n};\n\nexport function getMetaGemEffectEP(spec: Spec, gem: Gem, playerStats: Stats) {\n\tif (metaGemEffectEPs[spec]) {\n\t\treturn metaGemEffectEPs[spec]!(gem, playerStats);\n\t} else {\n\t\treturn 0;\n\t}\n}\n\n// Returns true if this item may be equipped in at least 1 slot for the given Spec.\nexport function canEquipItem(item: Item, spec: Spec, slot: ItemSlot | undefined): boolean {\n\tconst playerClass = specToClass[spec];\n\tif (item.classAllowlist.length > 0 && !item.classAllowlist.includes(playerClass)) {\n\t\treturn false;\n\t}\n\n\tif ([ItemType.ItemTypeFinger, ItemType.ItemTypeTrinket].includes(item.type)) {\n\t\treturn true;\n\t}\n\n\tif (item.type == ItemType.ItemTypeWeapon) {\n\t\tconst eligibleWeaponType = classToEligibleWeaponTypes[playerClass].find(wt => wt.weaponType == item.weaponType);\n\t\tif (!eligibleWeaponType) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ((item.handType == HandType.HandTypeOffHand || (item.handType == HandType.HandTypeOneHand && slot == ItemSlot.ItemSlotOffHand))\n\t\t\t&& ![WeaponType.WeaponTypeShield, WeaponType.WeaponTypeOffHand].includes(item.weaponType)\n\t\t\t&& !dualWieldSpecs.includes(spec)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (item.handType == HandType.HandTypeTwoHand && !eligibleWeaponType.canUseTwoHand) {\n\t\t\treturn false;\n\t\t}\n\t\tif (item.handType == HandType.HandTypeTwoHand && slot == ItemSlot.ItemSlotOffHand && spec != Spec.SpecWarrior) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tif (item.type == ItemType.ItemTypeRanged) {\n\t\treturn classToEligibleRangedWeaponTypes[playerClass].includes(item.rangedWeaponType);\n\t}\n\n\t// At this point, we know the item is an armor piece (feet, chest, legs, etc).\n\treturn classToMaxArmorType[playerClass] >= item.armorType;\n}\n\nconst itemTypeToSlotsMap: Partial<Record<ItemType, Array<ItemSlot>>> = {\n\t[ItemType.ItemTypeUnknown]: [],\n\t[ItemType.ItemTypeHead]: [ItemSlot.ItemSlotHead],\n\t[ItemType.ItemTypeNeck]: [ItemSlot.ItemSlotNeck],\n\t[ItemType.ItemTypeShoulder]: [ItemSlot.ItemSlotShoulder],\n\t[ItemType.ItemTypeBack]: [ItemSlot.ItemSlotBack],\n\t[ItemType.ItemTypeChest]: [ItemSlot.ItemSlotChest],\n\t[ItemType.ItemTypeWrist]: [ItemSlot.ItemSlotWrist],\n\t[ItemType.ItemTypeHands]: [ItemSlot.ItemSlotHands],\n\t[ItemType.ItemTypeWaist]: [ItemSlot.ItemSlotWaist],\n\t[ItemType.ItemTypeLegs]: [ItemSlot.ItemSlotLegs],\n\t[ItemType.ItemTypeFeet]: [ItemSlot.ItemSlotFeet],\n\t[ItemType.ItemTypeFinger]: [ItemSlot.ItemSlotFinger1, ItemSlot.ItemSlotFinger2],\n\t[ItemType.ItemTypeTrinket]: [ItemSlot.ItemSlotTrinket1, ItemSlot.ItemSlotTrinket2],\n\t[ItemType.ItemTypeRanged]: [ItemSlot.ItemSlotRanged],\n};\n\nexport function getEligibleItemSlots(item: Item): Array<ItemSlot> {\n\tif (itemTypeToSlotsMap[item.type]) {\n\t\treturn itemTypeToSlotsMap[item.type]!;\n\t}\n\n\tif (item.type == ItemType.ItemTypeWeapon) {\n\t\tif (item.handType == HandType.HandTypeMainHand) {\n\t\t\treturn [ItemSlot.ItemSlotMainHand];\n\t\t} else if (item.handType == HandType.HandTypeOffHand) {\n\t\t\treturn [ItemSlot.ItemSlotOffHand];\n\t\t} else {\n\t\t\treturn [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand];\n\t\t}\n\t}\n\n\t// Should never reach here\n\tthrow new Error('Could not find item slots for item: ' + Item.toJsonString(item));\n};\n\n// Returns whether the given main-hand and off-hand items can be worn at the\n// same time.\nexport function validWeaponCombo(mainHand: Item | null | undefined, offHand: Item | null | undefined, canDW2h: boolean): boolean {\n\tif (mainHand == null || offHand == null) {\n\t\treturn true;\n\t}\n\n\tif (mainHand.handType == HandType.HandTypeTwoHand && !canDW2h) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n// Returns all item slots to which the enchant might be applied.\n// \n// Note that this alone is not enough; some items have further restrictions,\n// e.g. some weapon enchants may only be applied to 2H weapons.\nexport function getEligibleEnchantSlots(enchant: Enchant): Array<ItemSlot> {\n\tif (itemTypeToSlotsMap[enchant.type]) {\n\t\treturn itemTypeToSlotsMap[enchant.type]!;\n\t}\n\n\tif (enchant.type == ItemType.ItemTypeWeapon) {\n\t\treturn [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand];\n\t}\n\n\t// Should never reach here\n\tthrow new Error('Could not find item slots for enchant: ' + Enchant.toJsonString(enchant));\n};\n\nexport function enchantAppliesToItem(enchant: Enchant, item: Item): boolean {\n\tconst sharedSlots = intersection(getEligibleEnchantSlots(enchant), getEligibleItemSlots(item));\n\tif (sharedSlots.length == 0)\n\t\treturn false;\n\n\tif (enchant.enchantType == EnchantType.EnchantTypeTwoHand && item.handType != HandType.HandTypeTwoHand)\n\t\treturn false;\n\n\tif ((enchant.enchantType == EnchantType.EnchantTypeShield) != (item.weaponType == WeaponType.WeaponTypeShield))\n\t\treturn false;\n\n\tif (item.weaponType == WeaponType.WeaponTypeOffHand)\n\t\treturn false;\n\n\tif (sharedSlots.includes(ItemSlot.ItemSlotRanged)) {\n\t\tif (![\n\t\t\tRangedWeaponType.RangedWeaponTypeBow,\n\t\t\tRangedWeaponType.RangedWeaponTypeCrossbow,\n\t\t\tRangedWeaponType.RangedWeaponTypeGun,\n\t\t].includes(item.rangedWeaponType))\n\t\t\treturn false;\n\t}\n\n\treturn true;\n};\n\nexport function canEquipEnchant(enchant: Enchant, spec: Spec): boolean {\n\tconst playerClass = specToClass[spec];\n\tif (enchant.classAllowlist.length > 0 && !enchant.classAllowlist.includes(playerClass)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport const NO_TARGET = -1;\n\nexport function newRaidTarget(raidIndex: number): RaidTarget {\n\treturn RaidTarget.create({\n\t\ttargetIndex: raidIndex,\n\t});\n}\n\nexport function emptyRaidTarget(): RaidTarget {\n\treturn newRaidTarget(NO_TARGET);\n}\n\n// Makes a new set of assignments with everything 0'd out.\nexport function makeBlankBlessingsAssignments(numPaladins: number): BlessingsAssignments {\n\tconst assignments = BlessingsAssignments.create();\n\tfor (let i = 0; i < numPaladins; i++) {\n\t\tassignments.paladins.push(BlessingsAssignment.create({\n\t\t\tblessings: new Array(NUM_SPECS).fill(Blessings.BlessingUnknown),\n\t\t}));\n\t}\n\treturn assignments;\n}\n\nexport function makeBlessingsAssignments(numPaladins: number, data: Array<{ spec: Spec, blessings: Array<Blessings> }>): BlessingsAssignments {\n\tconst assignments = makeBlankBlessingsAssignments(numPaladins);\n\tfor (let i = 0; i < data.length; i++) {\n\t\tconst spec = data[i].spec;\n\t\tconst blessings = data[i].blessings;\n\t\tfor (let j = 0; j < blessings.length; j++) {\n\t\t\tif (j >= assignments.paladins.length) {\n\t\t\t\t// Can't assign more blessings since we ran out of paladins\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tassignments.paladins[j].blessings[spec] = blessings[j];\n\t\t}\n\t}\n\treturn assignments;\n}\n\n// Default blessings settings in the raid sim UI.\nexport function makeDefaultBlessings(numPaladins: number): BlessingsAssignments {\n\treturn makeBlessingsAssignments(numPaladins, [\n\t\t{ spec: Spec.SpecBalanceDruid, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecFeralDruid, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecFeralTankDruid, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfSanctuary] },\n\t\t{ spec: Spec.SpecHunter, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecMage, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecRetributionPaladin, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecProtectionPaladin, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfSanctuary, Blessings.BlessingOfWisdom, Blessings.BlessingOfMight] },\n\t\t{ spec: Spec.SpecHealingPriest, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecShadowPriest, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecSmitePriest, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecRogue, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight] },\n\t\t{ spec: Spec.SpecElementalShaman, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecEnhancementShaman, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecWarlock, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecWarrior, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight] },\n\t\t{ spec: Spec.SpecProtectionWarrior, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfSanctuary] },\n\t\t{ spec: Spec.SpecDeathknight, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfSalvation] },\n\t\t{ spec: Spec.SpecTankDeathknight, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight] },\n\t]);\n};\n\nexport const orderedResourceTypes: Array<ResourceType> = [\n\tResourceType.ResourceTypeHealth,\n\tResourceType.ResourceTypeMana,\n\tResourceType.ResourceTypeEnergy,\n\tResourceType.ResourceTypeRage,\n\tResourceType.ResourceTypeComboPoints,\n\tResourceType.ResourceTypeFocus,\n\tResourceType.ResourceTypeRunicPower,\n\tResourceType.ResourceTypeBloodRune,\n\tResourceType.ResourceTypeFrostRune,\n\tResourceType.ResourceTypeUnholyRune,\n\tResourceType.ResourceTypeDeathRune,\n];\n","import { ActionID as ActionIdProto } from '../proto/common.js';\nimport { ResourceType } from '../proto/api.js';\nimport { Item } from '../proto/common.js';\nimport { OtherAction } from '../proto/common.js';\nimport { getWowheadItemId } from '../proto_utils/equipped_item.js';\nimport { NO_TARGET } from '../proto_utils/utils.js';\n\n// If true uses wotlkdb.com, else uses wowhead.com.\nexport const USE_WOTLK_DB = false;\n\n\ntype ItemData = {\n\tID: number,\n\tName: string,\n\tIcon: string,\n};\ntype ItemDB = Record<number, ItemData>;\n\n// Uniquely identifies a specific item / spell / thing in WoW. This object is immutable.\nexport class ActionId {\n\treadonly itemId: number;\n\treadonly spellId: number;\n\treadonly otherId: OtherAction;\n\treadonly tag: number;\n\n\treadonly baseName: string; // The name without any tag additions.\n\treadonly name: string;\n\treadonly iconUrl: string;\n\n\tprivate constructor(itemId: number, spellId: number, otherId: OtherAction, tag: number, baseName: string, name: string, iconUrl: string) {\n\t\tthis.itemId = itemId;\n\t\tthis.spellId = spellId;\n\t\tthis.otherId = otherId;\n\t\tthis.tag = tag;\n\n\t\tswitch (otherId) {\n\t\t\tcase OtherAction.OtherActionNone:\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionWait:\n\t\t\t\tbaseName = 'Wait';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_misc_pocketwatch_01.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionManaRegen:\n\t\t\t\tname = 'Mana Tick';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeMana];\n\t\t\t\tif (tag == 1) {\n\t\t\t\t\tname += ' (Casting)';\n\t\t\t\t} else if (tag == 2) {\n\t\t\t\t\tname += ' (Not Casting)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionEnergyRegen:\n\t\t\t\tbaseName = 'Energy Tick';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeEnergy];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionFocusRegen:\n\t\t\t\tbaseName = 'Focus Tick';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeFocus];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionManaGain:\n\t\t\t\tbaseName = 'Mana Gain';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeMana];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionRageGain:\n\t\t\t\tbaseName = 'Rage Gain';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeRage];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionAttack:\n\t\t\t\tname = 'Attack';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_sword_04.jpg';\n\t\t\t\tif (tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)';\n\t\t\t\t} else if (tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionShoot:\n\t\t\t\tname = 'Shoot';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/ability_marksmanship.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionPet:\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionRefund:\n\t\t\t\tbaseName = 'Refund';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_misc_coin_01.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionDamageTaken:\n\t\t\t\tbaseName = 'Damage Taken';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_sword_04.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionHealingModel:\n\t\t\t\tbaseName = 'Incoming HPS';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_renew.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionBloodRuneGain:\n\t\t\t\tbaseName = 'Blood Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_deathstrike.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionFrostRuneGain:\n\t\t\t\tbaseName = 'Frost Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_deathstrike2.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionUnholyRuneGain:\n\t\t\t\tbaseName = 'Unholy Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_empowerruneblade.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionDeathRuneGain:\n\t\t\t\tbaseName = 'Death Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_empowerruneblade.jpg';\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.baseName = baseName;\n\t\tthis.name = name || baseName;\n\t\tthis.iconUrl = iconUrl;\n\t}\n\n\tanyId(): number {\n\t\treturn this.itemId || this.spellId || this.otherId;\n\t}\n\n\tequals(other: ActionId): boolean {\n\t\treturn this.equalsIgnoringTag(other) && this.tag == other.tag;\n\t}\n\n\tequalsIgnoringTag(other: ActionId): boolean {\n\t\treturn (\n\t\t\tthis.itemId == other.itemId\n\t\t\t&& this.spellId == other.spellId\n\t\t\t&& this.otherId == other.otherId);\n\t}\n\n\tsetBackground(elem: HTMLElement) {\n\t\tif (this.iconUrl) {\n\t\t\telem.style.backgroundImage = `url('${this.iconUrl}')`;\n\t\t}\n\t}\n\n\tstatic makeItemUrl(id: number): string {\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn 'https://wotlkdb.com/?item=' + id;\n\t\t} else {\n\t\t\treturn 'https://wowhead.com/wotlk/item=' + id;\n\t\t}\n\t}\n\tstatic makeSpellUrl(id: number): string {\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn 'https://wotlkdb.com/?spell=' + id;\n\t\t} else {\n\t\t\treturn 'https://wowhead.com/wotlk/spell=' + id;\n\t\t}\n\t}\n\n\tsetWowheadHref(elem: HTMLAnchorElement) {\n\t\tif (this.itemId) {\n\t\t\telem.href = ActionId.makeItemUrl(this.itemId);\n\t\t} else if (this.spellId) {\n\t\t\telem.href = ActionId.makeSpellUrl(this.spellId);\n\t\t}\n\t}\n\n\tsetBackgroundAndHref(elem: HTMLAnchorElement) {\n\t\tthis.setBackground(elem);\n\t\tthis.setWowheadHref(elem);\n\t}\n\n\tasync fillAndSet(elem: HTMLAnchorElement, setHref: boolean, setBackground: boolean): Promise<ActionId> {\n\t\tconst filled = await this.fill();\n\t\tif (setHref) {\n\t\t\tfilled.setWowheadHref(elem);\n\t\t}\n\t\tif (setBackground) {\n\t\t\tfilled.setBackground(elem);\n\t\t}\n\t\treturn filled;\n\t}\n\n\t// Returns an ActionId with the name and iconUrl fields filled.\n\t// playerIndex is the optional index of the player to whom this ID corresponds.\n\tasync fill(playerIndex?: number): Promise<ActionId> {\n\t\tif (this.name || this.iconUrl) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (this.otherId) {\n\t\t\treturn this;\n\t\t}\n\n\t\tconst tooltipData = await ActionId.getTooltipData(this);\n\n\t\tconst baseName = tooltipData['name'];\n\t\tlet name = baseName;\n\t\tswitch (baseName) {\n\t\t\tcase 'Arcane Blast':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (No Stacks)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ` (1 Stack)`;\n\t\t\t\t} else if (this.tag > 2) {\n\t\t\t\t\tname += ` (${this.tag - 1} Stacks)`;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Fireball':\n\t\t\tcase 'Flamestrike':\n\t\t\tcase 'Pyroblast':\n\t\t\t\tif (this.tag) name += ' (DoT)';\n\t\t\t\tbreak;\n\t\t\tcase 'Mind Flay':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (1 Tick)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (2 Tick)';\n\t\t\t\t} else if (this.tag == 3) {\n\t\t\t\t\tname += ' (3 Tick)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Envenom':\n\t\t\tcase 'Eviscerate':\n\t\t\tcase 'Expose Armor':\n\t\t\tcase 'Rupture':\n\t\t\tcase 'Slice and Dice':\n\t\t\t\tif (this.tag) name += ` (${this.tag} CP)`;\n\t\t\t\tbreak;\n\t\t\tcase 'Instant Poison IX':\n\t\t\tcase 'Wound Poison VII':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Deadly)'\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Shiv)'\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Fan of Knives':\n\t\t\tcase 'Killing Spree':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)'\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)'\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Tricks of the Trade':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Not Self)'\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Chain Lightning':\n\t\t\tcase 'Lightning Bolt':\n\t\t\t\tif (this.tag == 6) {\n\t\t\t\t\tname += ' (LO)';\n\t\t\t\t} else if (this.tag) {\n\t\t\t\t\tname += ` (${this.tag} MW)`;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Holy Vengeance':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Swing Roll)'\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (DoT)'\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Holy Shield':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Proc)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t// For targetted buffs, tag is the source player's raid index or -1 if none.\n\t\t\tcase 'Bloodlust':\n\t\t\tcase 'Ferocious Inspiration':\n\t\t\tcase 'Innervate':\n      \t\t\tcase 'Focus Magic':\n\t\t\tcase 'Mana Tide Totem':\n\t\t\tcase 'Power Infusion':\n\t\t\t\tif (this.tag != NO_TARGET) {\n\t\t\t\t\tif (this.tag === playerIndex) {\n\t\t\t\t\t\tname += ` (self)`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tname += ` (from #${this.tag + 1})`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Darkmoon Card: Crusade':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Melee)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Spell)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Scourge Strike':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Physical)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Shadow)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Frost Strike':\n\t\t\tcase 'Plague Strike':\n\t\t\tcase 'Blood Strike':\n\t\t\tcase 'Death Strike':\n\t\t\tcase 'Obliterate':\n\t\t\tcase 'Blood-Caked Strike':\n\t\t\tcase 'Lightning Speed':\n\t\t\tcase 'Windfury Weapon':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Battle Shout':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Snapshot)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Seed of Corruption':\n\t\t\t\tif (this.tag == 0) {\n\t\t\t\t\tname += ' (DoT)';\n\t\t\t\t} else if (this.tag == 1) {\n\t\t\t\t\tname += ' (Explosion)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Thunderfury':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (ST)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (MT)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (this.tag) {\n\t\t\t\t\tname += ' (??)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst idString = this.toProtoString();\n\t\tconst iconOverrideId = idOverrides[idString] || null;\n\n\t\tlet iconUrl = ActionId.makeIconUrl(tooltipData['icon']);\n\t\tif (iconOverrideId) {\n\t\t\tconst overrideTooltipData = await ActionId.getTooltipData(iconOverrideId);\n\t\t\ticonUrl = ActionId.makeIconUrl(overrideTooltipData['icon']);\n\t\t}\n\n\t\treturn new ActionId(this.itemId, this.spellId, this.otherId, this.tag, baseName, name, iconUrl);\n\t}\n\n\ttoString(): string {\n\t\treturn this.toStringIgnoringTag() + (this.tag ? ('-' + this.tag) : '');\n\t}\n\n\ttoStringIgnoringTag(): string {\n\t\tif (this.itemId) {\n\t\t\treturn 'item-' + this.itemId;\n\t\t} else if (this.spellId) {\n\t\t\treturn 'spell-' + this.spellId;\n\t\t} else if (this.otherId) {\n\t\t\treturn 'other-' + this.otherId;\n\t\t} else {\n\t\t\tthrow new Error('Empty action id!');\n\t\t}\n\t}\n\n\ttoProto(): ActionIdProto {\n\t\tconst protoId = ActionIdProto.create({\n\t\t\ttag: this.tag,\n\t\t});\n\n\t\tif (this.itemId) {\n\t\t\tprotoId.rawId = {\n\t\t\t\toneofKind: 'itemId',\n\t\t\t\titemId: this.itemId,\n\t\t\t};\n\t\t} else if (this.spellId) {\n\t\t\tprotoId.rawId = {\n\t\t\t\toneofKind: 'spellId',\n\t\t\t\tspellId: this.spellId,\n\t\t\t};\n\t\t} else if (this.otherId) {\n\t\t\tprotoId.rawId = {\n\t\t\t\toneofKind: 'otherId',\n\t\t\t\totherId: this.otherId,\n\t\t\t};\n\t\t}\n\n\t\treturn protoId;\n\t}\n\n\ttoProtoString(): string {\n\t\treturn ActionIdProto.toJsonString(this.toProto());\n\t}\n\n\twithoutTag(): ActionId {\n\t\treturn new ActionId(this.itemId, this.spellId, this.otherId, 0, this.baseName, this.baseName, this.iconUrl);\n\t}\n\n\tstatic fromEmpty(): ActionId {\n\t\treturn new ActionId(0, 0, OtherAction.OtherActionNone, 0, '', '', '');\n\t}\n\n\tstatic fromItemId(itemId: number, tag?: number): ActionId {\n\t\treturn new ActionId(itemId, 0, OtherAction.OtherActionNone, tag || 0, '', '', '');\n\t}\n\n\tstatic fromSpellId(spellId: number, tag?: number): ActionId {\n\t\treturn new ActionId(0, spellId, OtherAction.OtherActionNone, tag || 0, '', '', '');\n\t}\n\n\tstatic fromOtherId(otherId: OtherAction, tag?: number): ActionId {\n\t\treturn new ActionId(0, 0, otherId, tag || 0, '', '', '');\n\t}\n\n\tstatic fromPetName(petName: string): ActionId {\n\t\treturn petNameToActionId[petName] || new ActionId(0, 0, OtherAction.OtherActionPet, 0, petName, petName, petNameToIcon[petName] || '');\n\t}\n\n\tstatic fromItem(item: Item): ActionId {\n\t\treturn ActionId.fromItemId(getWowheadItemId(item));\n\t}\n\n\tstatic fromProto(protoId: ActionIdProto): ActionId {\n\t\tif (protoId.rawId.oneofKind == 'spellId') {\n\t\t\treturn ActionId.fromSpellId(protoId.rawId.spellId, protoId.tag);\n\t\t} else if (protoId.rawId.oneofKind == 'itemId') {\n\t\t\treturn ActionId.fromItemId(protoId.rawId.itemId, protoId.tag);\n\t\t} else if (protoId.rawId.oneofKind == 'otherId') {\n\t\t\treturn ActionId.fromOtherId(protoId.rawId.otherId, protoId.tag);\n\t\t} else {\n\t\t\treturn ActionId.fromEmpty();\n\t\t}\n\t}\n\n\tstatic fromLogString(str: string): ActionId {\n\t\tconst match = str.match(/{((SpellID)|(ItemID)|(OtherID)): (\\d+)(, Tag: (-?\\d+))?}/);\n\t\tif (match) {\n\t\t\tconst idType = match[1];\n\t\t\tconst id = parseInt(match[5]);\n\t\t\treturn new ActionId(\n\t\t\t\tidType == 'ItemID' ? id : 0,\n\t\t\t\tidType == 'SpellID' ? id : 0,\n\t\t\t\tidType == 'OtherID' ? id : 0,\n\t\t\t\tmatch[7] ? parseInt(match[7]) : 0,\n\t\t\t\t'', '', '');\n\t\t} else {\n\t\t\tconsole.warn('Failed to parse action id from log: ' + str);\n\t\t\treturn ActionId.fromEmpty();\n\t\t}\n\t}\n\n\tprivate static makeIconUrl(iconLabel: string): string {\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn `https://wotlkdb.com/static/images/wow/icons/large/${iconLabel}.jpg`;\n\t\t} else {\n\t\t\treturn `https://wow.zamimg.com/images/wow/icons/large/${iconLabel}.jpg`;\n\t\t}\n\t}\n\n\tprivate static dbCache = new Map<string, Promise<ItemDB>>();\n\tprivate static async getDb(url: string): Promise<ItemDB> {\n\t\tif (!ActionId.dbCache.has(url)) {\n\t\t\tActionId.dbCache.set(url, fetch(url)\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(responseJson => {\n\t\t\t\t\tconst db: ItemDB = {};\n\t\t\t\t\t(responseJson as Array<ItemData>).forEach(item => {\n\t\t\t\t\t\tdb[item.ID] = item;\n\t\t\t\t\t});\n\t\t\t\t\treturn db;\n\t\t\t\t}));\n\t\t}\n\t\treturn ActionId.dbCache.get(url)!;\n\t}\n\tprivate static async getDbTooltipDataHelper(id: number, dbUrl: string): Promise<any> {\n\t\tconst db = await ActionId.getDb(dbUrl);\n\t\treturn db[id] ? {\n\t\t\tname: db[id].Name,\n\t\t\ticon: db[id].Icon,\n\t\t} : {\n\t\t\tname: '',\n\t\t\ticon: '',\n\t\t};\n\t}\n\tprivate static async getWowheadTooltipDataHelper(id: number, tooltipPostfix: string, cache: Map<number, Promise<any>>): Promise<any> {\n\t\tif (!cache.has(id)) {\n\t\t\tconst url = `https://wowhead.com/wotlk/tooltip/${tooltipPostfix}/${id}`;\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(url);\n\t\t\t\tcache.set(id, response.json());\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('Error while fetching url: ' + url + '\\n\\n' + e);\n\t\t\t\tcache.set(id, Promise.resolve({\n\t\t\t\t\tname: '',\n\t\t\t\t\ticon: '',\n\t\t\t\t\ttooltip: '',\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\treturn cache.get(id) as Promise<any>;\n\t}\n\tprivate static async getWotlkdbTooltipDataHelper(id: number, tooltipPostfix: string, cache: Map<number, Promise<any>>): Promise<any> {\n\t\tif (!cache.has(id)) {\n\t\t\tconst url = `https://wotlkdb.com/?${tooltipPostfix}=${id}&power`;\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(url);\n\t\t\t\tconst data = await response.text();\n\t\t\t\tconst nameMatch = data.match(/name_enus: '(.*?)'/g);\n\t\t\t\tconst iconMatch = data.match(/icon: '(.*?)'/g);\n\t\t\t\tconst tooltipMatch = data.match(/tooltip_enus: '(.*?)'/g);\n\t\t\t\tcache.set(id, Promise.resolve({\n\t\t\t\t\tname: nameMatch ? nameMatch[1] : '',\n\t\t\t\t\ticon: iconMatch ? iconMatch[1] : '',\n\t\t\t\t\ttooltip: tooltipMatch ? tooltipMatch[1] : '',\n\t\t\t\t}));\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('Error while fetching url: ' + url + '\\n\\n' + e);\n\t\t\t\tcache.set(id, Promise.resolve({\n\t\t\t\t\tname: '',\n\t\t\t\t\ticon: '',\n\t\t\t\t\ttooltip: '',\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\treturn cache.get(id) as Promise<any>;\n\t}\n\n\tstatic async getItemTooltipData(id: number): Promise<any> {\n\t\treturn await ActionId.getDbTooltipDataHelper(id, '/wotlk/assets/item_data/all_items_db.json');\n\t\t//if (USE_WOTLK_DB) {\n\t\t//\treturn await ActionId.getWotlkdbTooltipDataHelper(id, 'item', itemToTooltipDataCache);\n\t\t//} else {\n\t\t//\treturn await ActionId.getWowheadTooltipDataHelper(id, 'item', itemToTooltipDataCache);\n\t\t//}\n\t}\n\n\tstatic async getSpellTooltipData(id: number): Promise<any> {\n\t\treturn await ActionId.getDbTooltipDataHelper(id, '/wotlk/assets/spell_data/all_spells_db.json');\n\t\t//if (USE_WOTLK_DB) {\n\t\t//\treturn await ActionId.getWotlkdbTooltipDataHelper(id, 'spell', spellToTooltipDataCache);\n\t\t//} else {\n\t\t//\treturn await ActionId.getWowheadTooltipDataHelper(id, 'spell', spellToTooltipDataCache);\n\t\t//}\n\t}\n\n\tstatic async getTooltipData(actionId: ActionId): Promise<any> {\n\t\tif (actionId.itemId) {\n\t\t\treturn await ActionId.getItemTooltipData(actionId.itemId);\n\t\t} else {\n\t\t\treturn await ActionId.getSpellTooltipData(actionId.spellId);\n\t\t}\n\t}\n}\n\nconst itemToTooltipDataCache = new Map<number, Promise<any>>();\nconst spellToTooltipDataCache = new Map<number, Promise<any>>();\n\n// Some items/spells have weird icons, so use this to show a different icon instead.\nconst idOverrides: Record<string, ActionId> = {};\nidOverrides[ActionId.fromSpellId(37212).toProtoString()] = ActionId.fromItemId(29035); // Improved Wrath of Air Totem\nidOverrides[ActionId.fromSpellId(37223).toProtoString()] = ActionId.fromItemId(29040); // Improved Strength of Earth Totem\nidOverrides[ActionId.fromSpellId(37447).toProtoString()] = ActionId.fromItemId(30720); // Serpent-Coil Braid\nidOverrides[ActionId.fromSpellId(37443).toProtoString()] = ActionId.fromItemId(30196); // Robes of Tirisfal (4pc bonus)\n\nexport const defaultTargetIcon = 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_metamorphosis.jpg';\n\nconst petNameToActionId: Record<string, ActionId> = {\n\t'Gnomish Flame Turret': ActionId.fromItemId(23841),\n\t'Mirror Image': ActionId.fromSpellId(55342),\n\t'Water Elemental': ActionId.fromSpellId(31687),\n\t\"Greater Fire Elemental\": ActionId.fromSpellId(2894),\n\t'Shadowfiend': ActionId.fromSpellId(34433),\n\t'Spirit Wolf 1': ActionId.fromSpellId(51533),\n\t'Spirit Wolf 2': ActionId.fromSpellId(51533),\n\t'Rune Weapon': ActionId.fromSpellId(49028),\n\t'Bloodworm': ActionId.fromSpellId(50452),\n};\n\n// https://wowhead.com/wotlk/hunter-pets\nconst petNameToIcon: Record<string, string> = {\n\t'Bat': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_bat.jpg',\n\t'Bear': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_bear.jpg',\n\t'Bird of Prey': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_owl.jpg',\n\t'Boar': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_boar.jpg',\n\t'Carrion Bird': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_vulture.jpg',\n\t'Cat': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_cat.jpg',\n\t'Chimaera': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_chimera.jpg',\n\t'Core Hound': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_corehound.jpg',\n\t'Crab': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_crab.jpg',\n\t'Crocolisk': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_crocolisk.jpg',\n\t'Devilsaur': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_devilsaur.jpg',\n\t'Dragonhawk': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_dragonhawk.jpg',\n\t'Felguard': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonfelguard.jpg',\n\t'Felhunter': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonfelhunter.jpg',\n\t'Gargoyle': 'https://wow.zamimg.com/images/wow/icons/large/ability_hunter_pet_bat.jpg',\n\t'Ghoul': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_raisedead.jpg',\n\t'Army of the Dead': 'https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_armyofthedead.jpg',\n\t'Gorilla': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_gorilla.jpg',\n\t'Hyena': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_hyena.jpg',\n\t'Imp': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonimp.jpg',\n\t'Mirror Image': 'https://wow.zamimg.com/images/wow/icons/large/spell_magic_lesserinvisibilty.jpg',\n\t'Moth': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_moth.jpg',\n\t'Nether Ray': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_netherray.jpg',\n\t'Owl': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_owl.jpg',\n\t'Raptor': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_raptor.jpg',\n\t'Ravager': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_ravager.jpg',\n\t'Rhino': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_rhino.jpg',\n\t'Scorpid': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_scorpid.jpg',\n\t'Serpent': 'https://wow.zamimg.com/images/wow/icons/medium/spell_nature_guardianward.jpg',\n\t'Silithid': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_silithid.jpg',\n\t'Spider': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_spider.jpg',\n\t'Spirit Beast': 'https://wow.zamimg.com/images/wow/icons/medium/ability_druid_primalprecision.jpg',\n\t'Spore Bat': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_sporebat.jpg',\n\t'Succubus': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonsuccubus.jpg',\n\t'Tallstrider': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_tallstrider.jpg',\n\t'Turtle': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_turtle.jpg',\n\t'Warp Stalker': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_warpstalker.jpg',\n\t'Wasp': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_wasp.jpg',\n\t'Wind Serpent': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_windserpent.jpg',\n\t'Wolf': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_wolf.jpg',\n\t'Worm': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_worm.jpg',\n};\n\nexport const resourceTypeToIcon: Record<ResourceType, string> = {\n\t[ResourceType.ResourceTypeNone]: '',\n\t[ResourceType.ResourceTypeHealth]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_elemental_mote_life01.jpg',\n\t[ResourceType.ResourceTypeMana]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_elemental_mote_mana.jpg',\n\t[ResourceType.ResourceTypeEnergy]: 'https://wow.zamimg.com/images/wow/icons/medium/spell_shadow_shadowworddominate.jpg',\n\t[ResourceType.ResourceTypeRage]: 'https://wow.zamimg.com/images/wow/icons/medium/spell_misc_emotionangry.jpg',\n\t[ResourceType.ResourceTypeComboPoints]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_mace_2h_pvp410_c_01.jpg',\n\t[ResourceType.ResourceTypeFocus]: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_focusfire.jpg',\n\t[ResourceType.ResourceTypeRunicPower]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_sword_62.jpg',\n\t[ResourceType.ResourceTypeBloodRune]: '/wotlk/assets/img/blood_rune.png',\n\t[ResourceType.ResourceTypeFrostRune]: '/wotlk/assets/img/frost_rune.png',\n\t[ResourceType.ResourceTypeUnholyRune]: '/wotlk/assets/img/unholy_rune.png',\n\t[ResourceType.ResourceTypeDeathRune]: '/wotlk/assets/img/death_rune.png',\n};\n","import { Enchant } from '../proto/common.js';\nimport { Gem } from '../proto/common.js';\nimport { GemColor } from '../proto/common.js';\nimport { Item } from '../proto/common.js';\nimport { ItemSlot } from '../proto/common.js';\nimport { ItemSpec } from '../proto/common.js';\nimport { ItemType } from '../proto/common.js';\nimport { Profession } from '../proto/common.js';\nimport { Stat } from '../proto/common.js';\n\nimport { ActionId } from './action_id.js';\nimport { enchantAppliesToItem } from './utils.js';\nimport { gemEligibleForSocket, gemMatchesSocket } from './gems.js';\nimport { Stats } from './stats.js';\n\nexport function getWowheadItemId(item: Item): number {\n\treturn item.wowheadId || item.id;\n}\n\nexport function getWeaponDPS(item: Item): number {\n\treturn ((item.weaponDamageMin + item.weaponDamageMax) / 2) / (item.weaponSpeed || 1);\n}\n\n/**\n * Represents an equipped item along with enchants/gems attached to it.\n *\n * This is an immutable type.\n */\nexport class EquippedItem {\n\treadonly _item: Item;\n\treadonly _enchant: Enchant | null;\n\treadonly _gems: Array<Gem | null>;\n\n\treadonly numPossibleSockets: number;\n\n\tconstructor(item: Item, enchant?: Enchant | null, gems?: Array<Gem | null>) {\n\t\tthis._item = item;\n\t\tthis._enchant = enchant || null;\n\t\tthis._gems = gems || [];\n\n\t\tthis.numPossibleSockets = this.numSockets(true);\n\n\t\t// Fill gems with null so we always have the same number of gems as gem slots.\n\t\tif (this._gems.length < this.numPossibleSockets) {\n\t\t\tthis._gems = this._gems.concat(new Array(this.numPossibleSockets - this._gems.length).fill(null));\n\t\t}\n\t}\n\n\tget item(): Item {\n\t\t// Make a defensive copy\n\t\treturn Item.clone(this._item);\n\t}\n\n\tget enchant(): Enchant | null {\n\t\t// Make a defensive copy\n\t\treturn this._enchant ? Enchant.clone(this._enchant) : null;\n\t}\n\n\tget gems(): Array<Gem | null> {\n\t\t// Make a defensive copy\n\t\treturn this._gems.map(gem => gem == null ? null : Gem.clone(gem));\n\t}\n\n\tequals(other: EquippedItem) {\n\t\tif (!Item.equals(this._item, other.item))\n\t\t\treturn false;\n\n\t\tif ((this._enchant == null) != (other.enchant == null))\n\t\t\treturn false;\n\n\t\tif (this._enchant && other.enchant && !Enchant.equals(this._enchant, other.enchant))\n\t\t\treturn false;\n\n\t\tif (this._gems.length != other.gems.length)\n\t\t\treturn false;\n\n\t\tfor (let i = 0; i < this._gems.length; i++) {\n\t\t\tif ((this._gems[i] == null) != (other.gems[i] == null))\n\t\t\t\treturn false;\n\n\t\t\tif (this._gems[i] && other.gems[i] && !Gem.equals(this._gems[i]!, other.gems[i]!))\n\t\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Replaces the item and tries to keep the existing enchants/gems if possible.\n\t */\n\twithItem(item: Item): EquippedItem {\n\t\tlet newEnchant = null;\n\t\tif (this._enchant && enchantAppliesToItem(this._enchant, item))\n\t\t\tnewEnchant = this._enchant;\n\n\t\t// Reorganize gems to match as many colors in the new item as possible.\n\t\tconst newGems = new Array(item.gemSockets.length).fill(null);\n\t\tthis._gems.slice(0, this._item.gemSockets.length).filter(gem => gem != null).forEach(gem => {\n\t\t\tconst firstMatchingIndex = item.gemSockets.findIndex((socketColor, socketIdx) => !newGems[socketIdx] && gemMatchesSocket(gem!, socketColor));\n\t\t\tconst firstEligibleIndex = item.gemSockets.findIndex((socketColor, socketIdx) => !newGems[socketIdx] && gemEligibleForSocket(gem!, socketColor));\n\t\t\tif (firstMatchingIndex != -1) {\n\t\t\t\tnewGems[firstMatchingIndex] = gem;\n\t\t\t} else if (firstEligibleIndex != -1) {\n\t\t\t\tnewGems[firstEligibleIndex] = gem;\n\t\t\t}\n\t\t});\n\n\t\t// Copy the extra socket gem directly.\n\t\tif (this.couldHaveExtraSocket()) {\n\t\t\tnewGems.push(this._gems[this._gems.length - 1]);\n\t\t}\n\n\t\treturn new EquippedItem(item, newEnchant, newGems);\n\t}\n\n\t/**\n\t * Returns a new EquippedItem with the given enchant applied.\n\t */\n\twithEnchant(enchant: Enchant | null): EquippedItem {\n\t\treturn new EquippedItem(this._item, enchant, this._gems);\n\t}\n\n\t/**\n\t * Returns a new EquippedItem with the given gem socketed.\n\t */\n\tprivate withGemHelper(gem: Gem | null, socketIdx: number): EquippedItem {\n\t\tif (this._gems.length <= socketIdx) {\n\t\t\tthrow new Error('No gem socket with index ' + socketIdx);\n\t\t}\n\n\t\tconst newGems = this._gems.slice();\n\t\tnewGems[socketIdx] = gem;\n\n\t\treturn new EquippedItem(this._item, this._enchant, newGems);\n\t}\n\n\t/**\n\t * Returns a new EquippedItem with the given gem socketed.\n\t *\n\t * Also ensures validity of the item on its own. Currently this just means enforcing unique gems.\n\t */\n\twithGem(gem: Gem | null, socketIdx: number): EquippedItem {\n\t\tlet curItem: EquippedItem | null = this;\n\n\t\tif (gem && gem.unique) {\n\t\t\tcurItem = curItem.removeGemsWithId(gem.id);\n\t\t}\n\n\t\treturn curItem.withGemHelper(gem, socketIdx);\n\t}\n\n\tremoveGemsWithId(gemId: number): EquippedItem {\n\t\tlet curItem: EquippedItem | null = this;\n\t\t// Remove any currently socketed identical gems.\n\t\tfor (let i = 0; i < curItem._gems.length; i++) {\n\t\t\tif (curItem._gems[i]?.id == gemId) {\n\t\t\t\tcurItem = curItem.withGemHelper(null, i);\n\t\t\t}\n\t\t}\n\t\treturn curItem;\n\t}\n\n\tasActionId(): ActionId {\n\t\treturn ActionId.fromItemId(this._item.id);\n\t}\n\n\tasSpec(): ItemSpec {\n\t\treturn ItemSpec.create({\n\t\t\tid: this._item.id,\n\t\t\tenchant: this._enchant?.id,\n\t\t\tgems: this._gems.map(gem => gem?.id || 0),\n\t\t});\n\t}\n\n\tmeetsSocketBonus(): boolean {\n\t\treturn this._item.gemSockets.every((socketColor, i) => this._gems[i] && gemMatchesSocket(this._gems[i]!, socketColor));\n\t}\n\n\tsocketBonusStats(): Stats {\n\t\tif (this.meetsSocketBonus()) {\n\t\t\treturn new Stats(this._item.socketBonus);\n\t\t} else {\n\t\t\treturn new Stats();\n\t\t}\n\t}\n\n\t// Whether this item could have an extra socket, assuming Blacksmithing.\n\tcouldHaveExtraSocket(): boolean {\n\t\treturn [ItemType.ItemTypeWaist, ItemType.ItemTypeWrist, ItemType.ItemTypeHands].includes(this.item.type);\n\t}\n\n\thasExtraSocket(isBlacksmithing: boolean): boolean {\n\t\treturn this.item.type == ItemType.ItemTypeWaist ||\n\t\t\t(isBlacksmithing && [ItemType.ItemTypeWrist, ItemType.ItemTypeHands].includes(this.item.type));\n\t}\n\n\tnumSockets(isBlacksmithing: boolean): number {\n\t\treturn this._item.gemSockets.length + (this.hasExtraSocket(isBlacksmithing) ? 1 : 0);\n\t}\n\n\thasExtraGem(): boolean {\n\t\treturn this._gems.length > this.item.gemSockets.length;\n\t}\n\n\tallSocketColors(): Array<GemColor> {\n\t\treturn this.couldHaveExtraSocket() ? this._item.gemSockets.concat([GemColor.GemColorPrismatic]) : this._item.gemSockets;\n\t}\n\tcurSocketColors(isBlacksmithing: boolean): Array<GemColor> {\n\t\treturn this.hasExtraSocket(isBlacksmithing) ? this._item.gemSockets.concat([GemColor.GemColorPrismatic]) : this._item.gemSockets;\n\t}\n\n\tcurGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn (this._gems.filter(g => g != null) as Array<Gem>).slice(0, this.numSockets(isBlacksmithing));\n\t}\n\n\tgetFailedProfessionRequirements(professions: Array<Profession>): Array<Item | Gem | Enchant> {\n\t\tlet failed: Array<Item | Gem | Enchant> = [];\n\t\tif (this._item.requiredProfession != Profession.ProfessionUnknown && !professions.includes(this._item.requiredProfession)) {\n\t\t\tfailed.push(this._item);\n\t\t}\n\t\tif (this._enchant != null && this._enchant.requiredProfession != Profession.ProfessionUnknown && !professions.includes(this._enchant.requiredProfession)) {\n\t\t\tfailed.push(this._enchant);\n\t\t}\n\t\tthis._gems.forEach(gem => {\n\t\t\tif (gem != null && gem.requiredProfession != Profession.ProfessionUnknown && !professions.includes(gem.requiredProfession)) {\n\t\t\t\tfailed.push(gem);\n\t\t\t}\n\t\t});\n\t\treturn failed;\n\t}\n};\n","import { Stat } from '../proto/common.js';\nimport { getEnumValues } from '../utils.js';\n\nconst STATS_LEN = getEnumValues(Stat).length;\n\n/**\n * Represents values for all character stats (stam, agi, spell power, hit raiting, etc).\n *\n * This is an immutable type.\n */\nexport class Stats {\n\tprivate readonly stats: Array<number>;\n\n\tconstructor(stats?: Array<number>) {\n\t\tthis.stats = stats?.slice(0, STATS_LEN) || [];\n\n\t\tif (this.stats.length < STATS_LEN) {\n\t\t\tthis.stats = this.stats.concat(new Array(STATS_LEN - (stats?.length || 0)).fill(0));\n\t\t}\n\n\t\tfor (let i = 0; i < STATS_LEN; i++) {\n\t\t\tif (this.stats[i] == null)\n\t\t\t\tthis.stats[i] = 0;\n\t\t}\n\t}\n\n\tequals(other: Stats): boolean {\n\t\treturn this.stats.every((newStat, statIdx) => newStat == other.getStat(statIdx));\n\t}\n\n\tgetStat(stat: Stat): number {\n\t\treturn this.stats[stat];\n\t}\n\n\twithStat(stat: Stat, value: number): Stats {\n\t\tconst newStats = this.stats.slice();\n\t\tnewStats[stat] = value;\n\t\treturn new Stats(newStats);\n\t}\n\n\taddStat(stat: Stat, value: number): Stats {\n\t\treturn this.withStat(stat, this.getStat(stat) + value);\n\t}\n\n\tadd(other: Stats): Stats {\n\t\treturn new Stats(this.stats.map((value, stat) => value + other.stats[stat]));\n\t}\n\n\tsubtract(other: Stats): Stats {\n\t\treturn new Stats(this.stats.map((value, stat) => value - other.stats[stat]));\n\t}\n\n\tcomputeEP(epWeights: Stats): number {\n\t\tlet total = 0;\n\t\tthis.stats.forEach((stat, idx) => {\n\t\t\ttotal += stat * epWeights.stats[idx];\n\t\t});\n\t\treturn total;\n\t}\n\n\tasArray(): Array<number> {\n\t\treturn this.stats.slice();\n\t}\n\n\ttoJson(): Object {\n\t\treturn this.asArray();\n\t}\n\n\tstatic fromJson(obj: any): Stats {\n\t\treturn new Stats(obj as Array<number>);\n\t}\n\n\tstatic fromMap(statsMap: Partial<Record<Stat, number>>): Stats {\n\t\tconst statsArr = new Array(STATS_LEN).fill(0);\n\t\tObject.entries(statsMap).forEach(entry => {\n\t\t\tconst [statStr, value] = entry;\n\t\t\tstatsArr[Number(statStr)] = value;\n\t\t});\n\t\treturn new Stats(statsArr);\n\t}\n}\n","import { Enchant } from '../proto/common.js';\nimport { EquipmentSpec } from '../proto/common.js';\nimport { Gem } from '../proto/common.js';\nimport { GemColor } from '../proto/common.js';\nimport { Item } from '../proto/common.js';\nimport { ItemSlot } from '../proto/common.js';\nimport { ItemSpec } from '../proto/common.js';\nimport { Profession } from '../proto/common.js';\nimport { WeaponType } from '../proto/common.js';\nimport { equalsOrBothNull } from '../utils.js';\nimport { getEnumValues } from '../utils.js';\nimport { isBluntWeaponType, isSharpWeaponType } from '../proto_utils/utils.js';\n\nimport { isMetaGemActive } from './gems.js';\nimport { gemMatchesSocket } from './gems.js';\nimport { EquippedItem } from './equipped_item.js';\nimport { validWeaponCombo } from './utils.js';\nimport { Stats } from './stats.js';\n\ntype InternalGear = Record<ItemSlot, EquippedItem | null>;\n\n/**\n * Represents a full gear set, including items/enchants/gems for every slot.\n *\n * This is an immutable type.\n */\nexport class Gear {\n\tprivate readonly gear: InternalGear;\n\n\tconstructor(gear: Partial<InternalGear>) {\n\t\tgetEnumValues(ItemSlot).forEach(slot => {\n\t\t\tif (!gear[slot as ItemSlot])\n\t\t\t\tgear[slot as ItemSlot] = null;\n\t\t});\n\t\tthis.gear = gear as InternalGear;\n\t}\n\n\tequals(other: Gear): boolean {\n\t\treturn this.asArray().every((thisItem, slot) => equalsOrBothNull(thisItem, other.getEquippedItem(slot), (a, b) => a.equals(b)));\n\t}\n\n\t/**\n\t * Returns a new Gear set with the item equipped.\n\t *\n\t * Checks for validity and removes/exchanges items/gems as needed.\n\t */\n\twithEquippedItem(newSlot: ItemSlot, newItem: EquippedItem | null, canDualWield2H: boolean): Gear {\n\t\t// Create a new identical set of gear\n\t\tconst newInternalGear = this.asMap();\n\n\t\tif (newItem) {\n\t\t\t// If the new item has unique gems, remove matching.\n\t\t\tnewItem.gems\n\t\t\t\t.filter(gem => gem?.unique)\n\t\t\t\t.forEach(gem => {\n\t\t\t\t\tgetEnumValues(ItemSlot).map(slot => Number(slot) as ItemSlot).forEach(slot => {\n\t\t\t\t\t\tnewInternalGear[slot] = newInternalGear[slot]?.removeGemsWithId(gem!.id) || null;\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t// If the new item is unique, remove matching items.\n\t\t\tif (newItem.item.unique) {\n\t\t\t\tgetEnumValues(ItemSlot).map(slot => Number(slot) as ItemSlot).forEach(slot => {\n\t\t\t\t\tif (newInternalGear[slot]?.item.id == newItem.item.id) {\n\t\t\t\t\t\tnewInternalGear[slot] = null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Actually assign the new item.\n\t\tnewInternalGear[newSlot] = newItem;\n\n\t\t// Check for valid weapon combos.\n\t\tif (!validWeaponCombo(newInternalGear[ItemSlot.ItemSlotMainHand]?.item, newInternalGear[ItemSlot.ItemSlotOffHand]?.item, canDualWield2H)) {\n\t\t\tif (newSlot == ItemSlot.ItemSlotOffHand) {\n\t\t\t\tnewInternalGear[ItemSlot.ItemSlotMainHand] = null;\n\t\t\t} else {\n\t\t\t\tnewInternalGear[ItemSlot.ItemSlotOffHand] = null;\n\t\t\t}\n\t\t}\n\n\t\treturn new Gear(newInternalGear);\n\t}\n\n\tgetEquippedItem(slot: ItemSlot): EquippedItem | null {\n\t\treturn this.gear[slot];\n\t}\n\n\tgetTrinkets(): Array<EquippedItem | null> {\n\t\treturn [\n\t\t\tthis.getEquippedItem(ItemSlot.ItemSlotTrinket1),\n\t\t\tthis.getEquippedItem(ItemSlot.ItemSlotTrinket2),\n\t\t];\n\t}\n\n\thasTrinket(itemId: number): boolean {\n\t\treturn this.getTrinkets().map(t => t?.item.id).includes(itemId);\n\t}\n\n\tasMap(): InternalGear {\n\t\tconst newInternalGear: Partial<InternalGear> = {};\n\t\tgetEnumValues(ItemSlot).map(slot => Number(slot) as ItemSlot).forEach(slot => {\n\t\t\tnewInternalGear[slot] = this.getEquippedItem(slot);\n\t\t});\n\t\treturn newInternalGear as InternalGear;\n\t}\n\n\tasArray(): Array<EquippedItem | null> {\n\t\treturn Object.values(this.gear);\n\t}\n\n\tasSpec(): EquipmentSpec {\n\t\treturn EquipmentSpec.create({\n\t\t\titems: this.asArray().map(ei => ei ? ei.asSpec() : ItemSpec.create()),\n\t\t});\n\t}\n\n\tgetAllGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.asArray()\n\t\t\t.map(ei => ei == null ? [] : ei.curGems(isBlacksmithing))\n\t\t\t.flat();\n\t}\n\n\tgetNonMetaGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.getAllGems(isBlacksmithing).filter(gem => gem.color != GemColor.GemColorMeta);\n\t}\n\n\tstatsFromGems(isBlacksmithing: boolean): Stats {\n\t\tlet stats = new Stats();\n\n\t\t// Stats from just the gems.\n\t\tconst gems = this.getAllGems(isBlacksmithing);\n\t\tfor (let i = 0; i < gems.length; i++) {\n\t\t\tstats = stats.add(new Stats(gems[i].stats));\n\t\t}\n\n\t\t// Stats from socket bonuses.\n\t\tconst items = this.asArray().filter(ei => ei != null) as Array<EquippedItem>;\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tstats = stats.add(items[i].socketBonusStats());\n\t\t}\n\n\t\treturn stats;\n\t}\n\n\tgetGemsOfColor(color: GemColor, isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.getAllGems(isBlacksmithing).filter(gem => gem.color == color);\n\t}\n\n\tgetJCGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.getAllGems(isBlacksmithing).filter(gem => gem.requiredProfession == Profession.Jewelcrafting);\n\t}\n\n\tgetMetaGem(): Gem | null {\n\t\treturn this.getGemsOfColor(GemColor.GemColorMeta, true)[0] || null;\n\t}\n\n\tgemColorCounts(isBlacksmithing: boolean): ({ red: number, yellow: number, blue: number }) {\n\t\tconst gems = this.getAllGems(isBlacksmithing);\n\t\treturn {\n\t\t\tred: gems.filter(gem => gemMatchesSocket(gem, GemColor.GemColorRed)).length,\n\t\t\tyellow: gems.filter(gem => gemMatchesSocket(gem, GemColor.GemColorYellow)).length,\n\t\t\tblue: gems.filter(gem => gemMatchesSocket(gem, GemColor.GemColorBlue)).length,\n\t\t};\n\t}\n\n\t// Returns true if this gear set has a meta gem AND the other gems meet the meta's conditions.\n\thasActiveMetaGem(isBlacksmithing: boolean): boolean {\n\t\tconst metaGem = this.getMetaGem();\n\t\tif (!metaGem) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst gemColorCounts = this.gemColorCounts(isBlacksmithing);\n\n\t\tconst gems = this.getAllGems(isBlacksmithing);\n\t\treturn isMetaGemActive(\n\t\t\tmetaGem,\n\t\t\tgemColorCounts.red, gemColorCounts.yellow, gemColorCounts.blue);\n\t}\n\n\thasInactiveMetaGem(isBlacksmithing: boolean): boolean {\n\t\treturn this.getMetaGem() != null && !this.hasActiveMetaGem(isBlacksmithing);\n\t}\n\n\twithoutMetaGem(): Gear {\n\t\tconst headItem = this.getEquippedItem(ItemSlot.ItemSlotHead);\n\t\tconst metaGem = this.getMetaGem();\n\t\tif (headItem && metaGem) {\n\t\t\treturn this.withEquippedItem(ItemSlot.ItemSlotHead, headItem.removeGemsWithId(metaGem.id), true);\n\t\t} else {\n\t\t\treturn this;\n\t\t}\n\t}\n\n\t// Removes bonus gems from blacksmith profession bonus.\n\twithoutBlacksmithSockets(): Gear {\n\t\tlet curGear: Gear = this;\n\n\t\tconst wristItem = this.getEquippedItem(ItemSlot.ItemSlotWrist);\n\t\tif (wristItem) {\n\t\t\tcurGear = curGear.withEquippedItem(ItemSlot.ItemSlotWrist, wristItem.withGem(null, wristItem.numPossibleSockets - 1), true);\n\t\t}\n\n\t\tconst handsItem = this.getEquippedItem(ItemSlot.ItemSlotHands);\n\t\tif (handsItem) {\n\t\t\tcurGear = curGear.withEquippedItem(ItemSlot.ItemSlotHands, handsItem.withGem(null, handsItem.numPossibleSockets - 1), true);\n\t\t}\n\n\t\treturn curGear;\n\t}\n\n\thasBluntMHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotMainHand);\n\t\treturn weapon != null && isBluntWeaponType(weapon.item.weaponType);\n\t}\n\thasSharpMHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotMainHand);\n\t\treturn weapon != null && isSharpWeaponType(weapon.item.weaponType);\n\t}\n\thasBluntOHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotOffHand);\n\t\treturn weapon != null && isBluntWeaponType(weapon.item.weaponType);\n\t}\n\thasSharpOHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotOffHand);\n\t\treturn weapon != null && isSharpWeaponType(weapon.item.weaponType);\n\t}\n\n\tgetFailedProfessionRequirements(professions: Array<Profession>): Array<Item | Gem | Enchant> {\n\t\treturn (this.asArray().filter(ei => ei != null) as Array<EquippedItem>)\n\t\t\t.map(ei => ei.getFailedProfessionRequirements(professions))\n\t\t\t.flat();\n\t}\n}\n","import { Class } from '../proto/common.js';\nimport { ItemSlot } from '../proto/common.js';\nimport { Profession } from '../proto/common.js';\nimport { Race } from '../proto/common.js';\nimport { ShattrathFaction } from '../proto/common.js';\nimport { Stat } from '../proto/common.js';\nimport { ResourceType } from '../proto/api.js';\n\nexport const raceNames: Record<Race, string> = {\n\t[Race.RaceUnknown]: 'None',\n\t[Race.RaceBloodElf]: 'Blood Elf',\n\t[Race.RaceDraenei]: 'Draenei',\n\t[Race.RaceDwarf]: 'Dwarf',\n\t[Race.RaceGnome]: 'Gnome',\n\t[Race.RaceHuman]: 'Human',\n\t[Race.RaceNightElf]: 'Night Elf',\n\t[Race.RaceOrc]: 'Orc',\n\t[Race.RaceTauren]: 'Tauren',\n\t[Race.RaceTroll]: 'Troll',\n\t[Race.RaceUndead]: 'Undead',\n};\n\nexport function nameToRace(name: string): Race {\n\tconst normalized = name.toLowerCase().replaceAll(' ', '');\n\tfor (const key in raceNames) {\n\t\tconst race = parseInt(key) as Race;\n\t\tif (raceNames[race].toLowerCase().replaceAll(' ', '') == normalized) {\n\t\t\treturn race;\n\t\t}\n\t}\n\n\treturn Race.RaceUnknown;\n}\n\nexport const classNames: Record<Class, string> = {\n\t[Class.ClassUnknown]: 'None',\n\t[Class.ClassDruid]: 'Druid',\n\t[Class.ClassHunter]: 'Hunter',\n\t[Class.ClassMage]: 'Mage',\n\t[Class.ClassPaladin]: 'Paladin',\n\t[Class.ClassPriest]: 'Priest',\n\t[Class.ClassRogue]: 'Rogue',\n\t[Class.ClassShaman]: 'Shaman',\n\t[Class.ClassWarlock]: 'Warlock',\n\t[Class.ClassWarrior]: 'Warrior',\n\t[Class.ClassDeathknight]: 'Death Knight',\n}\n\nexport function nameToClass(name: string): Class {\n\tconst lower = name.toLowerCase();\n\tfor (const key in classNames) {\n\t\tconst charClass = parseInt(key) as Class;\n\t\tif (classNames[charClass].toLowerCase().replace(/\\s+/g, '') == lower) {\n\t\t\treturn charClass;\n\t\t}\n\t}\n\n\treturn Class.ClassUnknown;\n}\n\nexport const professionNames: Record<Profession, string> = {\n\t[Profession.ProfessionUnknown]: 'None',\n\t[Profession.Alchemy]: 'Alchemy',\n\t[Profession.Blacksmithing]: 'Blacksmithing',\n\t[Profession.Enchanting]: 'Enchanting',\n\t[Profession.Engineering]: 'Engineering',\n\t[Profession.Herbalism]: 'Herbalism',\n\t[Profession.Inscription]: 'Inscription',\n\t[Profession.Jewelcrafting]: 'Jewelcrafting',\n\t[Profession.Leatherworking]: 'Leatherworking',\n\t[Profession.Mining]: 'Mining',\n\t[Profession.Skinning]: 'Skinning',\n\t[Profession.Tailoring]: 'Tailoring',\n};\n\nexport function nameToProfession(name: string): Profession {\n\tconst lower = name.toLowerCase();\n\tfor (const key in professionNames) {\n\t\tconst prof = parseInt(key) as Profession;\n\t\tif (professionNames[prof].toLowerCase() == lower) {\n\t\t\treturn prof;\n\t\t}\n\t}\n\n\treturn Profession.ProfessionUnknown;\n}\n\nexport const statOrder: Array<Stat> = [\n\tStat.StatHealth,\n\tStat.StatArmor,\n\tStat.StatStamina,\n\tStat.StatStrength,\n\tStat.StatAgility,\n\tStat.StatIntellect,\n\tStat.StatSpirit,\n\tStat.StatSpellPower,\n\tStat.StatSpellHit,\n\tStat.StatSpellCrit,\n\tStat.StatSpellHaste,\n\tStat.StatSpellPenetration,\n\tStat.StatMP5,\n\tStat.StatAttackPower,\n\tStat.StatRangedAttackPower,\n\tStat.StatMeleeHit,\n\tStat.StatMeleeCrit,\n\tStat.StatMeleeHaste,\n\tStat.StatArmorPenetration,\n\tStat.StatExpertise,\n\tStat.StatMana,\n\tStat.StatEnergy,\n\tStat.StatRage,\n\tStat.StatDefense,\n\tStat.StatBlock,\n\tStat.StatBlockValue,\n\tStat.StatDodge,\n\tStat.StatParry,\n\tStat.StatResilience,\n\tStat.StatArcaneResistance,\n\tStat.StatFireResistance,\n\tStat.StatFrostResistance,\n\tStat.StatNatureResistance,\n\tStat.StatShadowResistance,\n];\n\nexport const statNames: Record<Stat, string> = {\n\t[Stat.StatStrength]: 'Strength',\n\t[Stat.StatAgility]: 'Agility',\n\t[Stat.StatStamina]: 'Stamina',\n\t[Stat.StatIntellect]: 'Intellect',\n\t[Stat.StatSpirit]: 'Spirit',\n\t[Stat.StatSpellPower]: 'Spell Dmg',\n\t[Stat.StatMP5]: 'MP5',\n\t[Stat.StatSpellHit]: 'Spell Hit',\n\t[Stat.StatSpellCrit]: 'Spell Crit',\n\t[Stat.StatSpellHaste]: 'Spell Haste',\n\t[Stat.StatSpellPenetration]: 'Spell Pen',\n\t[Stat.StatAttackPower]: 'Attack Power',\n\t[Stat.StatMeleeHit]: 'Melee Hit',\n\t[Stat.StatMeleeCrit]: 'Melee Crit',\n\t[Stat.StatMeleeHaste]: 'Melee Haste',\n\t[Stat.StatArmorPenetration]: 'Armor Pen',\n\t[Stat.StatExpertise]: 'Expertise',\n\t[Stat.StatMana]: 'Mana',\n\t[Stat.StatEnergy]: 'Energy',\n\t[Stat.StatRage]: 'Rage',\n\t[Stat.StatArmor]: 'Armor',\n\t[Stat.StatRangedAttackPower]: 'Ranged AP',\n\t[Stat.StatDefense]: 'Defense',\n\t[Stat.StatBlock]: 'Block',\n\t[Stat.StatBlockValue]: 'Block Value',\n\t[Stat.StatDodge]: 'Dodge',\n\t[Stat.StatParry]: 'Parry',\n\t[Stat.StatResilience]: 'Resilience',\n\t[Stat.StatHealth]: 'Health',\n\t[Stat.StatArcaneResistance]: 'Arcane Resistance',\n\t[Stat.StatFireResistance]: 'Fire Resistance',\n\t[Stat.StatFrostResistance]: 'Frost Resistance',\n\t[Stat.StatNatureResistance]: 'Nature Resistance',\n\t[Stat.StatShadowResistance]: 'Shadow Resistance',\n};\n\nexport function getClassStatName(stat: Stat, playerClass: Class): string {\n\tconst statName = statNames[stat];\n\tif (playerClass == Class.ClassHunter) {\n\t\treturn statName.replace('Melee', 'Ranged');\n\t} else {\n\t\treturn statName;\n\t}\n}\n\nexport const slotNames: Record<ItemSlot, string> = {\n\t[ItemSlot.ItemSlotHead]: 'Head',\n\t[ItemSlot.ItemSlotNeck]: 'Neck',\n\t[ItemSlot.ItemSlotShoulder]: 'Shoulders',\n\t[ItemSlot.ItemSlotBack]: 'Back',\n\t[ItemSlot.ItemSlotChest]: 'Chest',\n\t[ItemSlot.ItemSlotWrist]: 'Wrist',\n\t[ItemSlot.ItemSlotHands]: 'Hands',\n\t[ItemSlot.ItemSlotWaist]: 'Waist',\n\t[ItemSlot.ItemSlotLegs]: 'Legs',\n\t[ItemSlot.ItemSlotFeet]: 'Feet',\n\t[ItemSlot.ItemSlotFinger1]: 'Finger 1',\n\t[ItemSlot.ItemSlotFinger2]: 'Finger 2',\n\t[ItemSlot.ItemSlotTrinket1]: 'Trinket 1',\n\t[ItemSlot.ItemSlotTrinket2]: 'Trinket 2',\n\t[ItemSlot.ItemSlotMainHand]: 'Main Hand',\n\t[ItemSlot.ItemSlotOffHand]: 'Off Hand',\n\t[ItemSlot.ItemSlotRanged]: 'Ranged',\n};\n\nexport const resourceNames: Record<ResourceType, string> = {\n\t[ResourceType.ResourceTypeNone]: 'None',\n\t[ResourceType.ResourceTypeHealth]: 'Health',\n\t[ResourceType.ResourceTypeMana]: 'Mana',\n\t[ResourceType.ResourceTypeEnergy]: 'Energy',\n\t[ResourceType.ResourceTypeRage]: 'Rage',\n\t[ResourceType.ResourceTypeComboPoints]: 'Combo Points',\n\t[ResourceType.ResourceTypeFocus]: 'Focus',\n\t[ResourceType.ResourceTypeRunicPower]: 'Runic Power',\n\t[ResourceType.ResourceTypeBloodRune]: 'Blood Rune',\n\t[ResourceType.ResourceTypeFrostRune]: 'Frost Rune',\n\t[ResourceType.ResourceTypeUnholyRune]: 'Unholy Rune',\n\t[ResourceType.ResourceTypeDeathRune]: 'Death Rune',\n};\n\nexport const resourceColors: Record<ResourceType, string> = {\n\t[ResourceType.ResourceTypeNone]: '#ffffff',\n\t[ResourceType.ResourceTypeHealth]: '#22ba00',\n\t[ResourceType.ResourceTypeMana]: '#2e93fa',\n\t[ResourceType.ResourceTypeEnergy]: '#ffd700',\n\t[ResourceType.ResourceTypeRage]: '#ff0000',\n\t[ResourceType.ResourceTypeComboPoints]: '#ffa07a',\n\t[ResourceType.ResourceTypeFocus]: '#cd853f',\n\t[ResourceType.ResourceTypeRunicPower]: '#5b99ee',\n\t[ResourceType.ResourceTypeBloodRune]: '#ff0000',\n\t[ResourceType.ResourceTypeFrostRune]: '#0000ff',\n\t[ResourceType.ResourceTypeUnholyRune]: '#00ff00',\n\t[ResourceType.ResourceTypeDeathRune]: '#8b008b',\n};\n\nexport function stringToResourceType(str: string): ResourceType {\n\tfor (const [key, val] of Object.entries(resourceNames)) {\n\t\tif (val.toLowerCase() == str.toLowerCase()) {\n\t\t\treturn Number(key) as ResourceType;\n\t\t}\n\t}\n\treturn ResourceType.ResourceTypeNone;\n}\n\nexport const shattFactionNames: Record<ShattrathFaction, string> = {\n\t[ShattrathFaction.ShattrathFactionAldor]: 'Aldor',\n\t[ShattrathFaction.ShattrathFactionScryer]: 'Scryer',\n};\n","import { RaidSimRequest, RaidSimResult } from '../proto/api.js';\nimport { ResourceType } from '../proto/api.js';\nimport { ActionId } from '../proto_utils/action_id.js';\nimport { resourceNames, stringToResourceType } from '../proto_utils/names.js';\nimport { bucket, getEnumValues, stringComparator, sum } from '../utils.js';\n\nexport class Entity {\n\treadonly name: string;\n\treadonly ownerName: string; // Blank if not a pet.\n\n\t// Either target index, player index, or owner index depending on what kind\n\t// of entity this is.\n\treadonly index: number;\n\n\treadonly isTarget: boolean;\n\treadonly isPet: boolean;\n\n\tconstructor(name: string, ownerName: string, index: number, isTarget: boolean, isPet: boolean) {\n\t\tthis.name = name;\n\t\tthis.ownerName = ownerName;\n\t\tthis.index = index;\n\t\tthis.isTarget = isTarget;\n\t\tthis.isPet = isPet;\n\t}\n\n\tequals(other: Entity) {\n\t\treturn this.isTarget == other.isTarget && this.isPet == other.isPet && this.index == other.index && this.name == other.name;\n\t}\n\n\ttoString(): string {\n\t\tif (this.isTarget) {\n\t\t\treturn 'Target ' + (this.index + 1);\n\t\t} else if (this.isPet) {\n\t\t\treturn `${this.ownerName} (#${this.index + 1}) - ${this.name}`;\n\t\t} else {\n\t\t\treturn `${this.name} (#${this.index + 1})`;\n\t\t}\n\t}\n\n\t// Parses one or more Entities from a string.\n\t// Each entity label should be one of:\n\t//   'Target 1' if a target,\n\t//   'PlayerName (#1)' if a player, or\n\t//   'PlayerName (#1) - PetName' if a pet.\n\tstatic parseRegex = /\\[(Target (\\d+))|(([a-zA-Z0-9]+) \\(#(\\d+)\\) - ([a-zA-Z0-9\\s]+))|(([a-zA-Z0-9\\s]+) \\(#(\\d+)\\))\\]/g;\n\tstatic parseAll(str: string): Array<Entity> {\n\t\treturn Array.from(str.matchAll(Entity.parseRegex)).map(match => {\n\t\t\tif (match[1]) {\n\t\t\t\treturn new Entity(match[1], '', parseInt(match[2]) - 1, true, false);\n\t\t\t} else if (match[3]) {\n\t\t\t\treturn new Entity(match[6], match[4], parseInt(match[5]) - 1, false, true);\n\t\t\t} else if (match[7]) {\n\t\t\t\treturn new Entity(match[8], '', parseInt(match[9]) - 1, false, false);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Invalid Entity match');\n\t\t\t}\n\t\t});\n\t}\n}\n\ninterface SimLogParams {\n\traw: string,\n\tlogIndex: number,\n\ttimestamp: number,\n\tsource: Entity | null,\n\ttarget: Entity | null,\n\tactionId: ActionId | null,\n\tthreat: number,\n}\n\nexport class SimLog {\n\treadonly raw: string;\n\n\t// Index of this log within the full log output.\n\t// When comparing timestamps this should be used instead of timestamp, because\n\t// timestamp is scraped from log text and doesn't have enough precision.\n\treadonly logIndex: number;\n\n\t// Time in seconds from the encounter start.\n\treadonly timestamp: number;\n\n\treadonly source: Entity | null;\n\treadonly target: Entity | null;\n\treadonly actionId: ActionId | null;\n\n\t// Amount of threat generated from this event. Note that not all events generate threat, so this will be 0.\n\treadonly threat: number;\n\n\t// Logs for auras that were active at this timestamp.\n\t// This is only filled if populateActiveAuras() is called.\n\tactiveAuras: Array<AuraUptimeLog>;\n\n\tconstructor(params: SimLogParams) {\n\t\tthis.raw = params.raw;\n\t\tthis.logIndex = params.logIndex;\n\t\tthis.timestamp = params.timestamp;\n\t\tthis.source = params.source;\n\t\tthis.target = params.target;\n\t\tthis.actionId = params.actionId;\n\t\tthis.threat = params.threat;\n\t\tthis.activeAuras = [];\n\t}\n\n\ttoString(): string {\n\t\treturn this.raw;\n\t}\n\n\ttoStringPrefix(): string {\n\t\tconst timestampStr = `[${this.timestamp.toFixed(2)}]`;\n\t\tif (this.source) {\n\t\t\treturn `${timestampStr} [${this.source}]`;\n\t\t} else {\n\t\t\treturn timestampStr;\n\t\t}\n\t}\n\n\tstatic async parseAll(result: RaidSimResult): Promise<Array<SimLog>> {\n\t\tconst lines = result.logs.split('\\n');\n\n\t\treturn Promise.all(lines.map((line, lineIndex) => {\n\t\t\tconst params: SimLogParams = {\n\t\t\t\traw: line,\n\t\t\t\tlogIndex: lineIndex,\n\t\t\t\ttimestamp: 0,\n\t\t\t\tsource: null,\n\t\t\t\ttarget: null,\n\t\t\t\tactionId: null,\n\t\t\t\tthreat: 0,\n\t\t\t};\n\n\t\t\tconst threatMatch = line.match(/ \\(Threat: (-?[0-9]+\\.[0-9]+)\\)/);\n\t\t\tif (threatMatch) {\n\t\t\t\tparams.threat = parseFloat(threatMatch[1]);\n\t\t\t\tline = line.substring(0, threatMatch.index);\n\t\t\t}\n\n\t\t\tlet match = line.match(/\\[([0-9]+\\.[0-9]+)\\]\\w*(.*)/);\n\t\t\tif (!match || !match[1]) {\n\t\t\t\treturn new SimLog(params);\n\t\t\t}\n\n\t\t\tparams.timestamp = parseFloat(match[1]);\n\t\t\tlet remainder = match[2];\n\n\t\t\tconst entities = Entity.parseAll(remainder);\n\t\t\tparams.source = entities[0] || null;\n\t\t\tparams.target = entities[1] || null;\n\n\t\t\t// Order from most to least common to reduce number of checks.\n\t\t\treturn DamageDealtLog.parse(params)\n\t\t\t\t|| ResourceChangedLog.parse(params)\n\t\t\t\t|| AuraEventLog.parse(params)\n\t\t\t\t|| AuraStacksChangeLog.parse(params)\n\t\t\t\t|| MajorCooldownUsedLog.parse(params)\n\t\t\t\t|| CastBeganLog.parse(params)\n\t\t\t\t|| CastCompletedLog.parse(params)\n\t\t\t\t|| StatChangeLog.parse(params)\n\t\t\t\t|| Promise.resolve(new SimLog(params));\n\t\t}));\n\t}\n\n\tisDamageDealt(): this is DamageDealtLog {\n\t\treturn this instanceof DamageDealtLog;\n\t}\n\n\tisResourceChanged(): this is ResourceChangedLog {\n\t\treturn this instanceof ResourceChangedLog;\n\t}\n\n\tisAuraEvent(): this is AuraEventLog {\n\t\treturn this instanceof AuraEventLog;\n\t}\n\n\tisAuraStacksChange(): this is AuraStacksChangeLog {\n\t\treturn this instanceof AuraStacksChangeLog;\n\t}\n\n\tisMajorCooldownUsed(): this is MajorCooldownUsedLog {\n\t\treturn this instanceof MajorCooldownUsedLog;\n\t}\n\n\tisCastBegan(): this is CastBeganLog {\n\t\treturn this instanceof CastBeganLog;\n\t}\n\n\tisCastCompleted(): this is CastCompletedLog {\n\t\treturn this instanceof CastCompletedLog;\n\t}\n\n\tisStatChange(): this is StatChangeLog {\n\t\treturn this instanceof StatChangeLog;\n\t}\n\n\t// Group events that happen at the same time.\n\tstatic groupDuplicateTimestamps<LogType extends SimLog>(logs: Array<LogType>): Array<Array<LogType>> {\n\t\tconst grouped: Array<Array<LogType>> = [];\n\t\tlet curGroup: Array<LogType> = [];\n\n\t\tlogs.forEach(log => {\n\t\t\tif (curGroup.length == 0 || log.timestamp == curGroup[0].timestamp) {\n\t\t\t\tcurGroup.push(log);\n\t\t\t} else {\n\t\t\t\tgrouped.push(curGroup);\n\t\t\t\tcurGroup = [log];\n\t\t\t}\n\t\t});\n\t\tif (curGroup.length > 0) {\n\t\t\tgrouped.push(curGroup);\n\t\t}\n\n\t\treturn grouped;\n\t}\n}\n\nexport class DamageDealtLog extends SimLog {\n\treadonly amount: number;\n\treadonly type: string;\n\treadonly miss: boolean;\n\treadonly hit: boolean;\n\treadonly crit: boolean;\n\treadonly crush: boolean;\n\treadonly glance: boolean;\n\treadonly dodge: boolean;\n\treadonly parry: boolean;\n\treadonly block: boolean;\n\treadonly tick: boolean;\n\treadonly partialResist1_4: boolean;\n\treadonly partialResist2_4: boolean;\n\treadonly partialResist3_4: boolean;\n\n\tconstructor(params: SimLogParams, amount: number, type: string, miss: boolean, crit: boolean, crush: boolean, glance: boolean, dodge: boolean, parry: boolean, block: boolean, tick: boolean, partialResist1_4: boolean, partialResist2_4: boolean, partialResist3_4: boolean) {\n\t\tsuper(params);\n\t\tthis.amount = amount;\n\t\tthis.type = type;\n\t\tthis.miss = miss;\n\t\tthis.glance = glance;\n\t\tthis.dodge = dodge;\n\t\tthis.parry = parry;\n\t\tthis.block = block;\n\t\tthis.hit = !miss && !crit;\n\t\tthis.crit = crit;\n\t\tthis.crush = crush;\n\t\tthis.tick = tick;\n\t\tthis.partialResist1_4 = partialResist1_4;\n\t\tthis.partialResist2_4 = partialResist2_4;\n\t\tthis.partialResist3_4 = partialResist3_4;\n\t}\n\n\tisDamage(): boolean {\n\t\treturn this.type == 'damage';\n\t}\n\n\tisHealing(): boolean {\n\t\treturn this.type == 'healing';\n\t}\n\n\tisShielding(): boolean {\n\t\treturn this.type == 'shielding';\n\t}\n\n\tresultString(): string {\n\t\tlet result = '';\n\n\t\tif (this.isHealing()) {\n\t\t\tresult += 'Heal ';\n\t\t} else if (this.isShielding()) {\n\t\t\tresult += 'Shield ';\n\t\t}\n\n\t\tresult += this.miss ? 'Miss'\n\t\t\t: this.dodge ? 'Dodge'\n\t\t\t\t: this.parry ? 'Parry'\n\t\t\t\t\t: this.glance ? 'Glance'\n\t\t\t\t\t\t: this.block ? (this.crit ? 'Critical Block' : 'Block')\n\t\t\t\t\t\t\t: this.crit ? 'Crit'\n\t\t\t\t\t\t\t\t: this.crush ? 'Crush'\n\t\t\t\t\t\t\t\t\t: this.tick ? 'Tick'\n\t\t\t\t\t\t\t\t\t\t: 'Hit';\n\n\t\tresult += ' ' + this.target;\n\t\tif (!this.miss && !this.dodge && !this.parry) {\n\t\t\tresult += ` for ${this.amount.toFixed(2)}`;\n\t\t\tif (this.partialResist1_4) {\n\t\t\t\tresult += ' (25% Resist)';\n\t\t\t} else if (this.partialResist2_4) {\n\t\t\t\tresult += ' (50% Resist)';\n\t\t\t} else if (this.partialResist3_4) {\n\t\t\t\tresult += ' (75% Resist)';\n\t\t\t}\n\t\t\tresult += '.'\n\t\t}\n\t\treturn result;\n\t}\n\n\ttoString(): string {\n\t\tconst threatPostfix = this.source?.isTarget ? '' : ` (${this.threat.toFixed(2)} Threat)`;\n\t\treturn `${this.toStringPrefix()} ${this.actionId!.name} ${this.resultString()}${threatPostfix}`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<DamageDealtLog> | null {\n\t\tconst match = params.raw.match(/] (.*?) (tick )?((Miss)|(Hit)|(CriticalBlock)|(Crit)|(Crush)|(Glance)|(Dodge)|(Parry)|(Block))( \\((\\d+)% Resist\\))?( for (\\d+\\.\\d+) ((damage)|(healing)|(shielding)))?/);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[1]).fill(params.source?.index).then(cause => {\n\t\t\t\tparams.actionId = cause;\n\n\t\t\t\tconst amount = match[16] ? parseFloat(match[16]) : 0;\n\t\t\t\tconst type = match[17] || '';\n\n\t\t\t\treturn new DamageDealtLog(\n\t\t\t\t\tparams,\n\t\t\t\t\tamount,\n\t\t\t\t\ttype,\n\t\t\t\t\tmatch[3] == 'Miss',\n\t\t\t\t\tmatch[3] == 'Crit' || match[3] == 'CriticalBlock',\n\t\t\t\t\tmatch[3] == 'Crush',\n\t\t\t\t\tmatch[3] == 'Glance',\n\t\t\t\t\tmatch[3] == 'Dodge',\n\t\t\t\t\tmatch[3] == 'Parry',\n\t\t\t\t\tmatch[3] == 'Block' || match[3] == 'CriticalBlock',\n\t\t\t\t\tBoolean(match[2]) && match[2].includes('tick'),\n\t\t\t\t\tmatch[14] == '25',\n\t\t\t\t\tmatch[14] == '50',\n\t\t\t\t\tmatch[14] == '75');\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class DpsLog extends SimLog {\n\treadonly dps: number;\n\n\t// Damage events that occurred at the same time as this log.\n\treadonly damageLogs: Array<DamageDealtLog>;\n\n\tconstructor(params: SimLogParams, dps: number, damageLogs: Array<DamageDealtLog>) {\n\t\tsuper(params);\n\t\tthis.dps = dps;\n\t\tthis.damageLogs = damageLogs;\n\t}\n\n\tstatic DPS_WINDOW = 15; // Window over which to calculate DPS.\n\tstatic fromLogs(damageDealtLogs: Array<DamageDealtLog>): Array<DpsLog> {\n\t\tconst groupedDamageLogs = SimLog.groupDuplicateTimestamps(damageDealtLogs);\n\n\t\tlet curDamageLogs: Array<DamageDealtLog> = [];\n\t\tlet curDamageTotal = 0;\n\n\t\treturn groupedDamageLogs.map(ddLogGroup => {\n\t\t\tddLogGroup.forEach(ddLog => {\n\t\t\t\tcurDamageLogs.push(ddLog);\n\t\t\t\tcurDamageTotal += ddLog.amount;\n\t\t\t});\n\n\t\t\tconst newStartIdx = curDamageLogs.findIndex(curLog => {\n\t\t\t\tconst inWindow = curLog.timestamp > ddLogGroup[0].timestamp - DpsLog.DPS_WINDOW;\n\t\t\t\tif (!inWindow) {\n\t\t\t\t\tcurDamageTotal -= curLog.amount;\n\t\t\t\t}\n\t\t\t\treturn inWindow;\n\t\t\t});\n\t\t\tif (newStartIdx == -1) {\n\t\t\t\tcurDamageLogs = [];\n\t\t\t} else {\n\t\t\t\tcurDamageLogs = curDamageLogs.slice(newStartIdx);\n\t\t\t}\n\n\t\t\tconst dps = curDamageTotal / DpsLog.DPS_WINDOW;\n\t\t\tif (isNaN(dps)) {\n\t\t\t\tconsole.warn('NaN dps!');\n\t\t\t}\n\n\t\t\treturn new DpsLog({\n\t\t\t\traw: '',\n\t\t\t\tlogIndex: ddLogGroup[0].logIndex,\n\t\t\t\ttimestamp: ddLogGroup[0].timestamp,\n\t\t\t\tsource: ddLogGroup[0].source,\n\t\t\t\ttarget: null,\n\t\t\t\tactionId: null,\n\t\t\t\tthreat: 0,\n\t\t\t}, dps, ddLogGroup);\n\t\t});\n\t}\n}\n\nexport class ThreatLogGroup extends SimLog {\n\treadonly threatBefore: number;\n\treadonly threatAfter: number;\n\treadonly logs: Array<SimLog>;\n\n\tconstructor(params: SimLogParams, threatBefore: number, threatAfter: number, logs: Array<SimLog>) {\n\t\tsuper(params);\n\t\tthis.threatBefore = threatBefore;\n\t\tthis.threatAfter = threatAfter;\n\t\tthis.logs = logs;\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>): Array<ThreatLogGroup> {\n\t\tconst groupedLogs = SimLog.groupDuplicateTimestamps(logs.filter(log => log.threat != 0));\n\t\tlet curThreat = 0;\n\t\treturn groupedLogs.map(logGroup => {\n\t\t\tconst newThreat = sum(logGroup.map(log => log.threat));\n\t\t\tconst threatLog = new ThreatLogGroup(\n\t\t\t\t{\n\t\t\t\t\traw: '',\n\t\t\t\t\tlogIndex: logGroup[0].logIndex,\n\t\t\t\t\ttimestamp: logGroup[0].timestamp,\n\t\t\t\t\tsource: logGroup[0].source,\n\t\t\t\t\ttarget: logGroup[0].target,\n\t\t\t\t\tactionId: null,\n\t\t\t\t\tthreat: newThreat,\n\t\t\t\t},\n\t\t\t\tcurThreat,\n\t\t\t\tcurThreat + newThreat,\n\t\t\t\tlogGroup);\n\n\t\t\tcurThreat += newThreat;\n\t\t\treturn threatLog;\n\t\t});\n\t}\n}\n\nexport class AuraEventLog extends SimLog {\n\treadonly isGained: boolean;\n\treadonly isFaded: boolean;\n\treadonly isRefreshed: boolean;\n\n\tconstructor(params: SimLogParams, isGained: boolean, isFaded: boolean, isRefreshed: boolean) {\n\t\tsuper(params);\n\t\tthis.isGained = isGained;\n\t\tthis.isFaded = isFaded;\n\t\tthis.isRefreshed = isRefreshed;\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} Aura ${this.isGained ? 'gained' : this.isFaded ? 'faded' : 'refreshed'}: ${this.actionId!.name}.`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<AuraEventLog> | null {\n\t\tconst match = params.raw.match(/Aura ((gained)|(faded)|(refreshed)): (.*)/);\n\t\tif (match && match[5]) {\n\t\t\treturn ActionId.fromLogString(match[5]).fill(params.source?.index).then(aura => {\n\t\t\t\tparams.actionId = aura;\n\t\t\t\tconst event = match[1];\n\t\t\t\treturn new AuraEventLog(params, event == 'gained', event == 'faded', event == 'refreshed');\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class AuraStacksChangeLog extends SimLog {\n\treadonly oldStacks: number;\n\treadonly newStacks: number;\n\n\tconstructor(params: SimLogParams, oldStacks: number, newStacks: number) {\n\t\tsuper(params);\n\t\tthis.oldStacks = oldStacks;\n\t\tthis.newStacks = newStacks;\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} ${this.actionId!.name} stacks: ${this.oldStacks} --> ${this.newStacks}.`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<AuraStacksChangeLog> | null {\n\t\tconst match = params.raw.match(/(.*) stacks: ([0-9]+) --> ([0-9]+)/);\n\t\tif (match && match[1]) {\n\t\t\treturn ActionId.fromLogString(match[1]).fill(params.source?.index).then(aura => {\n\t\t\t\tparams.actionId = aura;\n\t\t\t\treturn new AuraStacksChangeLog(params, parseInt(match[2]), parseInt(match[3]));\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class AuraUptimeLog extends SimLog {\n\treadonly gainedAt: number;\n\treadonly fadedAt: number;\n\treadonly stacksChange: Array<AuraStacksChangeLog>;\n\n\tconstructor(params: SimLogParams, fadedAt: number, stacksChange: Array<AuraStacksChangeLog>) {\n\t\tsuper(params);\n\t\tthis.gainedAt = params.timestamp;\n\t\tthis.fadedAt = fadedAt;\n\t\tthis.stacksChange = stacksChange;\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>, entity: Entity, encounterDuration: number): Array<AuraUptimeLog> {\n\t\tlet unmatchedGainedLogs: Array<{ gained: AuraEventLog, stacks: Array<AuraStacksChangeLog> }> = [];\n\t\tconst uptimeLogs: Array<AuraUptimeLog> = [];\n\n\t\tlogs.forEach((log: SimLog) => {\n\t\t\tif (!log.source || !log.source.equals(entity)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (log.isAuraStacksChange()) {\n\t\t\t\tconst matchingGainedIdx = unmatchedGainedLogs.findIndex(gainedLog => gainedLog.gained.actionId!.equals(log.actionId!));\n\t\t\t\tif (matchingGainedIdx == -1) {\n\t\t\t\t\tconsole.warn('Unmatched aura stacks change log: ' + log.actionId!.name);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tunmatchedGainedLogs[matchingGainedIdx].stacks.push(log);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!log.isAuraEvent()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (log.isGained) {\n\t\t\t\tunmatchedGainedLogs.push({ gained: log, stacks: [] });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchingGainedIdx = unmatchedGainedLogs.findIndex(gainedLog => gainedLog.gained.actionId!.equals(log.actionId!));\n\t\t\tif (matchingGainedIdx == -1) {\n\t\t\t\tconsole.warn('Unmatched aura faded log: ' + log.actionId!.name);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { gained: gainedLog, stacks: stacksChangeLogs } = unmatchedGainedLogs.splice(matchingGainedIdx, 1)[0];\n\n\t\t\tuptimeLogs.push(new AuraUptimeLog({\n\t\t\t\traw: log.raw,\n\t\t\t\tlogIndex: gainedLog.logIndex,\n\t\t\t\ttimestamp: gainedLog.timestamp,\n\t\t\t\tsource: log.source,\n\t\t\t\ttarget: log.target,\n\t\t\t\tactionId: gainedLog.actionId,\n\t\t\t\tthreat: gainedLog.threat,\n\t\t\t}, log.timestamp, stacksChangeLogs));\n\n\t\t\tif (log.isRefreshed) {\n\t\t\t\tunmatchedGainedLogs.push({ gained: log, stacks: [] });\n\t\t\t}\n\t\t});\n\n\t\t// Auras active at the end won't have a faded log, so need to add them separately.\n\t\tunmatchedGainedLogs.forEach(unmatchedLog => {\n\t\t\tconst { gained: gainedLog, stacks: stacksChangeLogs } = unmatchedLog;\n\t\t\tuptimeLogs.push(new AuraUptimeLog({\n\t\t\t\traw: gainedLog.raw,\n\t\t\t\tlogIndex: gainedLog.logIndex,\n\t\t\t\ttimestamp: gainedLog.timestamp,\n\t\t\t\tsource: gainedLog.source,\n\t\t\t\ttarget: gainedLog.target,\n\t\t\t\tactionId: gainedLog.actionId,\n\t\t\t\tthreat: gainedLog.threat,\n\t\t\t}, encounterDuration, stacksChangeLogs));\n\t\t});\n\n\t\tuptimeLogs.sort((a, b) => a.gainedAt - b.gainedAt);\n\t\treturn uptimeLogs;\n\t}\n\n\t// Populates the activeAuras field for all logs using the provided auras.\n\tstatic populateActiveAuras(logs: Array<SimLog>, auraLogs: Array<AuraUptimeLog>) {\n\t\tlet curAuras: Array<AuraUptimeLog> = [];\n\t\tlet auraLogsIndex = 0;\n\n\t\tlogs.forEach(log => {\n\t\t\twhile (auraLogsIndex < auraLogs.length && auraLogs[auraLogsIndex].gainedAt <= log.timestamp) {\n\t\t\t\tcurAuras.push(auraLogs[auraLogsIndex]);\n\t\t\t\tauraLogsIndex++;\n\t\t\t}\n\t\t\tcurAuras = curAuras.filter(curAura => curAura.fadedAt > log.timestamp);\n\n\t\t\tconst activeAuras = curAuras.slice();\n\t\t\tactiveAuras.sort((a, b) => stringComparator(a.actionId!.name, b.actionId!.name));\n\t\t\tlog.activeAuras = activeAuras;\n\t\t});\n\t}\n}\n\nexport class ResourceChangedLog extends SimLog {\n\treadonly resourceType: ResourceType;\n\treadonly valueBefore: number;\n\treadonly valueAfter: number;\n\treadonly isSpend: boolean;\n\n\tconstructor(params: SimLogParams, resourceType: ResourceType, valueBefore: number, valueAfter: number, isSpend: boolean) {\n\t\tsuper(params);\n\t\tthis.resourceType = resourceType;\n\t\tthis.valueBefore = valueBefore;\n\t\tthis.valueAfter = valueAfter;\n\t\tthis.isSpend = isSpend;\n\t}\n\n\ttoString(): string {\n\t\tconst signedDiff = (this.valueAfter - this.valueBefore) * (this.isSpend ? -1 : 1);\n\n\t\tconst isHealth = this.resourceType == ResourceType.ResourceTypeHealth;\n\t\tconst verb = isHealth ? (this.isSpend ? 'Lost' : 'Recovered') : (this.isSpend ? 'Spent' : 'Gained');\n\n\t\treturn `${this.toStringPrefix()} ${verb} ${signedDiff.toFixed(1)} ${resourceNames[this.resourceType]} from ${this.actionId!.name}. (${this.valueBefore.toFixed(1)} --> ${this.valueAfter.toFixed(1)})`;\n\t}\n\n\tresultString(): string {\n\t\tconst delta = this.valueAfter - this.valueBefore;\n\t\tif (delta < 0) {\n\t\t\treturn delta.toFixed(1);\n\t\t} else {\n\t\t\treturn '+' + delta.toFixed(1);\n\t\t}\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<ResourceChangedLog> | null {\n\t\tconst match = params.raw.match(/((Gained)|(Spent)) \\d+\\.?\\d* ((health)|(mana)|(energy)|(focus)|(rage)|(combo points)|(runic power)|(blood rune)|(frost rune)|(unholy rune)|(death rune)) from (.*) \\((\\d+\\.?\\d*) --> (\\d+\\.?\\d*)\\)/);\n\t\tif (match) {\n\t\t\tconst resourceType = stringToResourceType(match[4]);\n\t\t\treturn ActionId.fromLogString(match[16]).fill(params.source?.index).then(cause => {\n\t\t\t\tparams.actionId = cause;\n\t\t\t\treturn new ResourceChangedLog(params, resourceType, parseFloat(match[17]), parseFloat(match[18]), match[1] == 'Spent');\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class ResourceChangedLogGroup extends SimLog {\n\treadonly resourceType: ResourceType;\n\treadonly valueBefore: number;\n\treadonly valueAfter: number;\n\treadonly logs: Array<ResourceChangedLog>;\n\n\tconstructor(params: SimLogParams, resourceType: ResourceType, valueBefore: number, valueAfter: number, logs: Array<ResourceChangedLog>) {\n\t\tsuper(params);\n\t\tthis.resourceType = resourceType;\n\t\tthis.valueBefore = valueBefore;\n\t\tthis.valueAfter = valueAfter;\n\t\tthis.logs = logs;\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} ${resourceNames[this.resourceType]}: ${this.valueBefore.toFixed(1)} --> ${this.valueAfter.toFixed(1)}`;\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>): Record<ResourceType, Array<ResourceChangedLogGroup>> {\n\t\tconst allResourceChangedLogs = logs.filter((log): log is ResourceChangedLog => log.isResourceChanged());\n\n\t\tconst results: Partial<Record<ResourceType, Array<ResourceChangedLogGroup>>> = {};\n\t\tconst resourceTypes = (getEnumValues(ResourceType) as Array<ResourceType>).filter(val => val != ResourceType.ResourceTypeNone);\n\t\tresourceTypes.forEach(resourceType => {\n\t\t\tconst resourceChangedLogs = allResourceChangedLogs.filter(log => log.resourceType == resourceType);\n\n\t\t\tconst groupedLogs = SimLog.groupDuplicateTimestamps(resourceChangedLogs);\n\t\t\tresults[resourceType] = groupedLogs.map(logGroup => new ResourceChangedLogGroup(\n\t\t\t\t{\n\t\t\t\t\traw: '',\n\t\t\t\t\tlogIndex: logGroup[0].logIndex,\n\t\t\t\t\ttimestamp: logGroup[0].timestamp,\n\t\t\t\t\tsource: logGroup[0].source,\n\t\t\t\t\ttarget: logGroup[0].target,\n\t\t\t\t\tactionId: null,\n\t\t\t\t\tthreat: 0,\n\t\t\t\t},\n\t\t\t\tresourceType,\n\t\t\t\tlogGroup[0].valueBefore,\n\t\t\t\tlogGroup[logGroup.length - 1].valueAfter,\n\t\t\t\tlogGroup));\n\t\t});\n\n\t\treturn results as Record<ResourceType, Array<ResourceChangedLogGroup>>;\n\t}\n}\n\nexport class MajorCooldownUsedLog extends SimLog {\n\tconstructor(params: SimLogParams) {\n\t\tsuper(params);\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} Major cooldown used: ${this.actionId!.name}.`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<MajorCooldownUsedLog> | null {\n\t\tconst match = params.raw.match(/Major cooldown used: (.*)/);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[1]).fill(params.source?.index).then(cooldownId => {\n\t\t\t\tparams.actionId = cooldownId;\n\t\t\t\treturn new MajorCooldownUsedLog(params);\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class CastBeganLog extends SimLog {\n\treadonly manaCost: number;\n\treadonly castTime: number;\n\n\tconstructor(params: SimLogParams, manaCost: number, castTime: number) {\n\t\tsuper(params);\n\t\tthis.manaCost = manaCost;\n\t\tthis.castTime = castTime;\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} Casting ${this.actionId!.name} (Cast time = ${this.castTime.toFixed(2)}s, Cost = ${this.manaCost.toFixed(1)}).`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<CastBeganLog> | null {\n\t\tconst match = params.raw.match(/Casting (.*) \\(Cost = (\\d+\\.?\\d*), Cast Time = (\\d+\\.?\\d*)(m?s)\\)/);\n\t\tif (match) {\n\t\t\tlet castTime = parseFloat(match[3]);\n\t\t\tif (match[4] == 'ms') {\n\t\t\t\tcastTime /= 1000;\n\t\t\t}\n\t\t\treturn ActionId.fromLogString(match[1]).fill(params.source?.index).then(castId => {\n\t\t\t\tparams.actionId = castId;\n\t\t\t\treturn new CastBeganLog(params, parseFloat(match[2]), castTime);\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class CastCompletedLog extends SimLog {\n\tconstructor(params: SimLogParams) {\n\t\tsuper(params);\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} Completed cast ${this.actionId!.name}.`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<CastCompletedLog> | null {\n\t\tconst match = params.raw.match(/Completed cast (.*)/);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[1]).fill(params.source?.index).then(castId => {\n\t\t\t\tparams.actionId = castId;\n\t\t\t\treturn new CastCompletedLog(params);\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class CastLog extends SimLog {\n\treadonly castTime: number;\n\treadonly travelTime: number;\n\n\treadonly castBeganLog: CastBeganLog;\n\treadonly castCompletedLog: CastCompletedLog | null;\n\n\t// All instances of damage dealt from the completion of this cast until the completion of the next cast.\n\treadonly damageDealtLogs: Array<DamageDealtLog>;\n\n\tconstructor(castBeganLog: CastBeganLog, castCompletedLog: CastCompletedLog | null, damageDealtLogs: Array<DamageDealtLog>) {\n\t\tsuper({\n\t\t\traw: castBeganLog.raw,\n\t\t\tlogIndex: castBeganLog.logIndex,\n\t\t\ttimestamp: castBeganLog.timestamp,\n\t\t\tsource: castBeganLog.source,\n\t\t\ttarget: castBeganLog.target,\n\t\t\tactionId: castCompletedLog?.actionId || castBeganLog.actionId, // Use completed log because of arcane blast\n\t\t\tthreat: castCompletedLog?.threat || castBeganLog.threat,\n\t\t});\n\t\tthis.castTime = castBeganLog.castTime;\n\t\tthis.castBeganLog = castBeganLog;\n\t\tthis.castCompletedLog = castCompletedLog;\n\t\tthis.damageDealtLogs = damageDealtLogs;\n\n\t\tif (this.castCompletedLog && this.damageDealtLogs.length == 1 &&\n\t\t\tthis.castCompletedLog.timestamp < this.damageDealtLogs[0].timestamp &&\n\t\t\t!this.damageDealtLogs[0].tick) {\n\t\t\tthis.travelTime = this.damageDealtLogs[0].timestamp - this.castCompletedLog.timestamp;\n\t\t} else {\n\t\t\tthis.travelTime = 0;\n\t\t}\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} Casting ${this.actionId!.name} (Cast time = ${this.castTime.toFixed(2)}s).`;\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>): Array<CastLog> {\n\t\tconst castBeganLogs = logs.filter((log): log is CastBeganLog => log.isCastBegan());\n\t\tconst castCompletedLogs = logs.filter((log): log is CastCompletedLog => log.isCastCompleted());\n\t\tconst damageDealtLogs = logs.filter((log): log is DamageDealtLog => log.isDamageDealt());\n\n\t\tconst toBucketKey = (actionId: ActionId) => {\n\t\t\tif (actionId.spellId == 30451) {\n\t\t\t\t// Arcane Blast is unique because it can finish its cast as a different\n\t\t\t\t// spell than it started (if stacks drop).\n\t\t\t\treturn actionId.toStringIgnoringTag();\n\t\t\t} else {\n\t\t\t\treturn actionId.toString();\n\t\t\t}\n\t\t};\n\t\tconst castBeganLogsByAbility = bucket(castBeganLogs, log => toBucketKey(log.actionId!));\n\t\tconst castCompletedLogsByAbility = bucket(castCompletedLogs, log => toBucketKey(log.actionId!));\n\t\tconst damageDealtLogsByAbility = bucket(damageDealtLogs, log => toBucketKey(log.actionId!));\n\n\t\tconst castLogs: Array<CastLog> = [];\n\t\tObject.keys(castBeganLogsByAbility).forEach(bucketKey => {\n\t\t\tconst abilityCastsBegan = castBeganLogsByAbility[bucketKey]!;\n\t\t\tconst abilityCastsCompleted = castCompletedLogsByAbility[bucketKey];\n\t\t\tconst abilityDamageDealt = damageDealtLogsByAbility[bucketKey];\n\t\t\tconst actionId = abilityCastsBegan[0].actionId!;\n\n\t\t\tlet ddIdx = 0;\n\t\t\tfor (let cbIdx = 0; cbIdx < abilityCastsBegan.length; cbIdx++) {\n\t\t\t\tconst cbLog = abilityCastsBegan[cbIdx];\n\n\t\t\t\t// Assume cast completed log is the same index because they always come in pairs.\n\t\t\t\t// Only exception is final pair, where there might be a cast began without a cast completed.\n\t\t\t\tconst ccLog = abilityCastsCompleted[cbIdx] || null;\n\t\t\t\tconst nextCcLog = abilityCastsCompleted[cbIdx + 1] || null;\n\n\t\t\t\t// Find all damage dealt logs between the cur and next cast completed logs.\n\t\t\t\tlet ddLogs = [];\n\t\t\t\twhile (abilityDamageDealt && ddIdx < abilityDamageDealt.length && (!nextCcLog || abilityDamageDealt[ddIdx].timestamp < nextCcLog.timestamp)) {\n\t\t\t\t\tddLogs.push(abilityDamageDealt[ddIdx]);\n\t\t\t\t\tddIdx++\n\t\t\t\t}\n\t\t\t\tcastLogs.push(new CastLog(cbLog, ccLog, ddLogs));\n\t\t\t}\n\t\t});\n\n\t\tcastLogs.sort((a, b) => a.timestamp - b.timestamp);\n\t\treturn castLogs;\n\t}\n}\n\nexport class StatChangeLog extends SimLog {\n\treadonly isGain: boolean;\n\treadonly stats: string;\n\n\tconstructor(params: SimLogParams, isGain: boolean, stats: string) {\n\t\tsuper(params);\n\t\tthis.isGain = isGain;\n\t\tthis.stats = stats;\n\t}\n\n\ttoString(): string {\n\t\tif (this.isGain) {\n\t\t\treturn `${this.toStringPrefix()} Gained ${this.stats} from ${this.actionId!.name}.`;\n\t\t} else {\n\t\t\treturn `${this.toStringPrefix()} Lost ${this.stats} from fading ${this.actionId!.name}.`;\n\t\t}\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<StatChangeLog> | null {\n\t\tconst match = params.raw.match(/((Gained)|(Lost)) ({.*}) from (fading )?(.*)/);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[6]).fill(params.source?.index).then(effectId => {\n\t\t\t\tparams.actionId = effectId;\n\t\t\t\tconst sign = match[1] == 'Lost' ? -1 : 1;\n\t\t\t\treturn new StatChangeLog(params, sign == 1, match[4]);\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n","export abstract class Component {\n\treadonly rootElem: HTMLElement;\n\n\tconstructor(parentElem: HTMLElement | null, rootCssClass: string, rootElem?: HTMLElement) {\n\t\tthis.rootElem = rootElem || document.createElement('div');\n\t\tthis.rootElem.classList.add(rootCssClass);\n\t\tif (parentElem) {\n\t\t\tparentElem.appendChild(this.rootElem);\n\t\t}\n\t}\n}\n","// An event ID uniquely identifies a single event that occurred, usually due to\n// some user action like changing a piece of gear.\n//\n// Event IDs allow us to make sure that hierarchies of TypedEvents fire only once,\n// for a given event. This is very important for certain features, like undo/redo.\nexport type EventID = number;\n\nexport interface Disposable {\n\tdispose(): void;\n}\n\nexport interface Listener<T> {\n\t(eventID: EventID, event: T): any;\n}\n\ninterface FiredEventData {\n\teventID: EventID,\n\terror: Error,\n}\n\ninterface FrozenEventData<T> {\n\teventID: EventID,\n\tevent: T,\n}\n\n/** Provides a type-safe event interface. */\nexport class TypedEvent<T> {\n\t// Optional label to help debug.\n\tprivate label: string;\n\n\tconstructor(label?: string) {\n\t\tthis.label = label || '';\n\t}\n\n\tprivate listeners: Array<Listener<T>> = [];\n\n\t// The events which have already been fired from this TypedEvent.\n\tprivate firedEvents: Array<FiredEventData> = [];\n\n\t// Currently frozen events pending on this TypedEvent. See freezeAll()\n\t// for more details.\n\tprivate frozenEvents: Array<FrozenEventData<T>> = [];\n\n\t// Registers a new listener to this event.\n\ton(listener: Listener<T>): Disposable {\n\t\tthis.listeners.push(listener);\n\t\treturn {\n\t\t\tdispose: () => this.off(listener),\n\t\t};\n\t}\n\n\t// Removes a listener from this event.\n\toff(listener: Listener<T>) {\n\t\tconst idx = this.listeners.indexOf(listener);\n\t\tif (idx != -1) {\n\t\t\tthis.listeners.splice(idx, 1);\n\t\t}\n\t}\n\n\t// Convenience for on() which calls off() autmatically after firing once.\n\tonce(listener: Listener<T>): Disposable {\n\t\tconst onceListener = (eventID: EventID, event: T) => {\n\t\t\tthis.off(onceListener);\n\t\t\tlistener(eventID, event);\n\t\t};\n\n\t\treturn this.on(onceListener);\n\t}\n\n\temit(eventID: EventID, event: T) {\n\t\tconst originalEvent = this.firedEvents.find(fe => fe.eventID == eventID);\n\t\tif (originalEvent) {\n\t\t\tif (!thawing) {\n\t\t\t\t// Uncomment this for debugging TypedEvent stuff. There are a few legitimate\n\t\t\t\t// cases where it fires though and it can be very noisy.\n\t\t\t\t//console.warn('EventID collision outside of thawing, original event: ' + (originalEvent.error.stack || originalEvent.error));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthis.firedEvents.push({\n\t\t\teventID: eventID,\n\t\t\terror: new Error('Original event'),\n\t\t});\n\n\t\tif (freezeCount > 0) {\n\t\t\tif (this.frozenEvents.length == 0) {\n\t\t\t\tfrozenTypedEvents.push(this);\n\t\t\t}\n\t\t\tthis.frozenEvents.push({\n\t\t\t\teventID: eventID,\n\t\t\t\tevent: event,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.fireEventInternal(eventID, event);\n\t\t}\n\t}\n\n\tprivate fireEventInternal(eventID: EventID, event: T) {\n\t\tthis.listeners.forEach(listener => listener(eventID, event));\n\t}\n\n\t// Executes the provided callback while all TypedEvents are frozen.\n\t// Freezes all TypedEvent objects so that new calls to emit() do not fire the event.\n\t// Instead, the events will be held until the execution is finishd, at which point\n\t// all TypedEvents will fire all of the events that were frozen.\n\t//\n\t// This is used when a single user action activates multiple separate events, to ensure\n\t// none of them fire until all changes have been applied.\n\t//\n\t// This function is very similar to a locking mechanism.\n\tstatic freezeAllAndDo(func: () => void) {\n\t\tfreezeCount++;\n\n\t\ttry {\n\t\t\tfunc();\n\t\t} catch (e) {\n\t\t\tconsole.error('Caught error in freezeAllAndDo: ' + e);\n\t\t} finally {\n\t\t\tfreezeCount--;\n\t\t\tif (freezeCount > 0) {\n\t\t\t\t// Don't do anything until things are fully unfrozen.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthawing = true;\n\t\t\tconst typedEvents = frozenTypedEvents.slice();\n\t\t\tfrozenTypedEvents = [];\n\n\t\t\ttypedEvents.forEach(typedEvent => {\n\t\t\t\tconst frozenEvents = typedEvent.frozenEvents.slice();\n\t\t\t\ttypedEvent.frozenEvents = [];\n\n\t\t\t\tfrozenEvents.forEach(frozenEvent => typedEvent.fireEventInternal(frozenEvent.eventID, frozenEvent.event));\n\t\t\t});\n\t\t\tthawing = false;\n\t\t}\n\t}\n\n\tstatic nextEventID(): EventID {\n\t\treturn nextEventID++;\n\t}\n\n\tstatic onAny(events: Array<TypedEvent<any>>, label?: string): TypedEvent<void> {\n\t\tconst newEvent = new TypedEvent<void>(label);\n\t\tevents.forEach(emitter => emitter.on(eventID => newEvent.emit(eventID)));\n\t\treturn newEvent;\n\t}\n}\n\n// If this is > 0 then events are frozen.\nlet freezeCount = 0;\n\n// Indicates whether we are currently in the process of unfreezing. Just used to add a warning.\nlet thawing = false;\n\nlet frozenTypedEvents: Array<TypedEvent<any>> = [];\nlet nextEventID: EventID = 0;\n","import { Sim } from '../sim.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\n\nimport { Component } from './component.js';\n\ndeclare var tippy: any;\n\n/**\n * Data for creating a new input UI element.\n */\nexport interface InputConfig<ModObject, T> {\n\tlabel?: string,\n\tlabelTooltip?: string,\n\textraCssClasses?: Array<string>,\n\n\tdefaultValue?: T,\n\n\t// Returns the event indicating the mapped value has changed.\n\tchangedEvent: (obj: ModObject) => TypedEvent<any>,\n\n\t// Get and set the mapped value.\n\tgetValue: (obj: ModObject) => T,\n\tsetValue: (eventID: EventID, obj: ModObject, newValue: T) => void,\n\n\t// If set, will automatically disable the input when this evaluates to false.\n\tenableWhen?: (obj: ModObject) => boolean,\n\n\t// If set, will automatically hide the input when this evaluates to false.\n\tshowWhen?: (obj: ModObject) => boolean,\n\n\t// Overrides the default root element (new div).\n\trootElem?: HTMLElement,\n}\n\n// Shared logic for UI elements that are mapped to a value for some modifiable object.\nexport abstract class Input<ModObject, T> extends Component {\n\tprivate readonly inputConfig: InputConfig<ModObject, T>;\n\treadonly modObject: ModObject;\n\n\treadonly changeEmitter = new TypedEvent<void>();\n\n\tconstructor(parent: HTMLElement, cssClass: string, modObject: ModObject, config: InputConfig<ModObject, T>) {\n\t\tsuper(parent, 'input-root', config.rootElem);\n\t\tthis.inputConfig = config;\n\t\tthis.modObject = modObject;\n\t\tthis.rootElem.classList.add(cssClass);\n\t\tif (config.extraCssClasses) {\n\t\t\tthis.rootElem.classList.add(...config.extraCssClasses);\n\t\t}\n\n\t\tif (config.label) {\n\t\t\tconst labelDiv = document.createElement('div');\n\t\t\tlabelDiv.classList.add('input-label-div');\n\t\t\tthis.rootElem.appendChild(labelDiv);\n\n\t\t\tconst label = document.createElement('span');\n\t\t\tlabel.classList.add('input-label');\n\t\t\tlabel.textContent = config.label;\n\t\t\tlabelDiv.appendChild(label);\n\n\t\t\tif (config.labelTooltip) {\n\t\t\t\tconst tooltip = document.createElement('span');\n\t\t\t\ttooltip.classList.add('input-tooltip', 'fa', 'fa-info-circle');\n\t\t\t\ttippy(tooltip, {\n\t\t\t\t\t'content': config.labelTooltip,\n\t\t\t\t\t'allowHTML': true,\n\t\t\t\t});\n\t\t\t\tlabelDiv.appendChild(tooltip);\n\t\t\t}\n\t\t}\n\n\t\tconfig.changedEvent(this.modObject).on(eventID => {\n\t\t\tthis.setInputValue(config.getValue(this.modObject));\n\t\t\tthis.update();\n\t\t});\n\t}\n\n\tprivate update() {\n\t\tconst enable = !this.inputConfig.enableWhen || this.inputConfig.enableWhen(this.modObject);\n\t\tif (enable) {\n\t\t\tthis.rootElem.classList.remove('disabled');\n\t\t\tthis.getInputElem().removeAttribute('disabled');\n\t\t} else {\n\t\t\tthis.rootElem.classList.add('disabled');\n\t\t\tthis.getInputElem().setAttribute('disabled', '');\n\t\t}\n\n\t\tconst show = !this.inputConfig.showWhen || this.inputConfig.showWhen(this.modObject);\n\t\tif (show) {\n\t\t\tthis.rootElem.classList.remove('hide');\n\t\t} else {\n\t\t\tthis.rootElem.classList.add('hide');\n\t\t}\n\t}\n\n\t// Can't call abstract functions in constructor, so need an init() call.\n\tinit() {\n\t\tif (this.inputConfig.defaultValue) {\n\t\t\tthis.setInputValue(this.inputConfig.defaultValue);\n\t\t} else {\n\t\t\tthis.setInputValue(this.inputConfig.getValue(this.modObject));\n\t\t}\n\t\tthis.update();\n\t}\n\n\tabstract getInputElem(): HTMLElement;\n\n\tabstract getInputValue(): T;\n\n\tabstract setInputValue(newValue: T): void;\n\n\t// Child classes should call this method when the value in the input element changes.\n\tinputChanged(eventID: EventID) {\n\t\tthis.inputConfig.setValue(eventID, this.modObject, this.getInputValue());\n\t\tthis.changeEmitter.emit(eventID);\n\t}\n\n\t// Sets the underlying value directly.\n\tsetValue(eventID: EventID, newValue: T) {\n\t\tthis.inputConfig.setValue(eventID, this.modObject, newValue);\n\t}\n}\n","import { Component } from '../components/component.js';\nimport { Input, InputConfig } from '../components/input.js';\nimport { Spec } from '../proto/common.js';\nimport { ActionId } from '../proto_utils/action_id.js';\nimport { SpecTalents } from '../proto_utils/utils.js';\nimport { Player } from '../player.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\nimport { isRightClick } from '../utils.js';\nimport { sum } from '../utils.js';\n\nexport interface TalentsPickerConfig<ModObject, TalentsProto> extends InputConfig<ModObject, string> {\n\ttrees: TalentsConfig<TalentsProto>,\n\tpointsPerRow: number,\n\tmaxPoints: number,\n}\n\nexport class TalentsPicker<ModObject, TalentsProto> extends Input<ModObject, string> {\n\treadonly numRows: number;\n\treadonly pointsPerRow: number;\n\tmaxPoints: number;\n\n\treadonly trees: Array<TalentTreePicker<TalentsProto>>;\n\n\tconstructor(parent: HTMLElement, modObject: ModObject, config: TalentsPickerConfig<ModObject, TalentsProto>) {\n\t\tsuper(parent, 'talents-picker-root', modObject, config);\n\t\tthis.pointsPerRow = config.pointsPerRow;\n\t\tthis.maxPoints = config.maxPoints;\n\t\tthis.numRows = Math.max(...config.trees.map(treeConfig => treeConfig.talents.map(talentConfig => talentConfig.location.rowIdx).flat()).flat()) + 1;\n\n\t\tthis.trees = config.trees.map(treeConfig => new TalentTreePicker(this.rootElem, treeConfig, this));\n\t\tthis.trees.forEach(tree => tree.talents.forEach(talent => talent.setPoints(0, false)));\n\n\t\tthis.init();\n\t}\n\n\tgetInputElem(): HTMLElement {\n\t\treturn this.rootElem;\n\t}\n\n\tgetInputValue(): string {\n\t\treturn this.trees.map(tree => tree.getTalentsString()).join('-').replace(/-+$/g, '');\n\t}\n\n\tsetInputValue(newValue: string) {\n\t\tconst parts = newValue.split('-');\n\t\tthis.trees.forEach((tree, idx) => tree.setTalentsString(parts[idx] || ''));\n\t\tthis.updateTrees();\n\t}\n\n\tupdateTrees() {\n\t\tif (this.isFull()) {\n\t\t\tthis.rootElem.classList.add('talents-full');\n\t\t} else {\n\t\t\tthis.rootElem.classList.remove('talents-full');\n\t\t}\n\t\tthis.trees.forEach(tree => tree.update());\n\t}\n\n\tget numPoints() {\n\t\treturn sum(this.trees.map(tree => tree.numPoints));\n\t}\n\n\tisFull() {\n\t\treturn this.numPoints >= this.maxPoints;\n\t}\n\n\tsetMaxPoints(newMaxPoints: number) {\n\t\tif (newMaxPoints != this.maxPoints) {\n\t\t\tthis.maxPoints = newMaxPoints;\n\t\t\tthis.updateTrees();\n\t\t}\n\t}\n}\n\nclass TalentTreePicker<TalentsProto> extends Component {\n\tprivate readonly config: TalentTreeConfig<TalentsProto>;\n\tprivate readonly title: HTMLElement;\n\n\treadonly talents: Array<TalentPicker<TalentsProto>>;\n\treadonly picker: TalentsPicker<any, TalentsProto>;\n\n\t// The current number of points in this tree\n\tnumPoints: number;\n\n\tconstructor(parent: HTMLElement, config: TalentTreeConfig<TalentsProto>, picker: TalentsPicker<any, TalentsProto>) {\n\t\tsuper(parent, 'talent-tree-picker-root');\n\t\tthis.config = config;\n\t\tthis.numPoints = 0;\n\t\tthis.picker = picker;\n\n\t\tthis.rootElem.innerHTML = `\n    <div class=\"talent-tree-header\">\n      <span class=\"talent-tree-title\"></span>\n      <span class=\"talent-tree-reset fa fa-times\"></span>\n    </div>\n    <div class=\"talent-tree-main\">\n    </div>\n    `;\n\n\t\tthis.title = this.rootElem.getElementsByClassName('talent-tree-title')[0] as HTMLElement;\n\n\t\tconst main = this.rootElem.getElementsByClassName('talent-tree-main')[0] as HTMLElement;\n\t\tmain.style.backgroundImage = `url('${config.backgroundUrl}')`;\n\t\tmain.style.gridTemplateRows = `repeat(${this.picker.numRows}, 1fr)`;\n\n\t\tconst iconSize = Math.min(70 / this.picker.numRows, 10);\n\t\tmain.style.height = `${iconSize * this.picker.numRows}vh`\n\t\tmain.style.width = `${iconSize * 4}vh`\n\n\t\tthis.talents = config.talents.map(talent => new TalentPicker(main, talent, this));\n\t\tthis.talents.forEach(talent => {\n\t\t\tif (talent.config.prereqLocation) {\n\t\t\t\tthis.getTalent(talent.config.prereqLocation).config.prereqOfLocation = talent.config.location;\n\t\t\t}\n\t\t});\n\n\t\tconst reset = this.rootElem.getElementsByClassName('talent-tree-reset')[0] as HTMLElement;\n\t\treset.addEventListener('click', event => {\n\t\t\tthis.talents.forEach(talent => talent.setPoints(0, false));\n\t\t\tthis.picker.inputChanged(TypedEvent.nextEventID());\n\t\t});\n\t}\n\n\tupdate() {\n\t\tthis.title.textContent = this.config.name + ' (' + this.numPoints + ')';\n\t\tthis.talents.forEach(talent => talent.update());\n\t}\n\n\tgetTalent(location: TalentLocation): TalentPicker<TalentsProto> {\n\t\tconst talent = this.talents.find(talent => talent.getRow() == location.rowIdx && talent.getCol() == location.colIdx);\n\t\tif (!talent)\n\t\t\tthrow new Error('No talent found with location: ' + location);\n\t\treturn talent;\n\t}\n\n\tgetTalentsString(): string {\n\t\treturn this.talents.map(talent => String(talent.getPoints())).join('').replace(/0+$/g, '');\n\t}\n\n\tsetTalentsString(str: string) {\n\t\tthis.talents.forEach((talent, idx) => talent.setPoints(Number(str.charAt(idx)), false));\n\t}\n}\n\nclass TalentPicker<TalentsProto> extends Component {\n\treadonly config: TalentConfig<TalentsProto>;\n\tprivate readonly tree: TalentTreePicker<TalentsProto>;\n\tprivate readonly pointsDisplay: HTMLElement;\n\n\tprivate longTouchTimer?: number;\n\n\tconstructor(parent: HTMLElement, config: TalentConfig<TalentsProto>, tree: TalentTreePicker<TalentsProto>) {\n\t\tsuper(parent, 'talent-picker-root', document.createElement('a'));\n\t\tthis.config = config;\n\t\tthis.tree = tree;\n\n\t\tthis.rootElem.style.gridRow = String(this.config.location.rowIdx + 1);\n\t\tthis.rootElem.style.gridColumn = String(this.config.location.colIdx + 1);\n\n\t\tthis.rootElem.dataset.maxPoints = String(this.config.maxPoints);\n\t\tthis.rootElem.dataset.wowhead = 'noimage';\n\n\t\tthis.pointsDisplay = document.createElement('span');\n\t\tthis.pointsDisplay.classList.add('talent-picker-points');\n\t\tthis.rootElem.appendChild(this.pointsDisplay);\n\n\t\tthis.rootElem.addEventListener('click', event => {\n\t\t\tevent.preventDefault();\n\t\t});\n\t\tthis.rootElem.addEventListener('contextmenu', event => {\n\t\t\tevent.preventDefault();\n\t\t});\n\t\tthis.rootElem.addEventListener('touchstart', event => {\n\t\t\tevent.preventDefault();\n\t\t\tthis.longTouchTimer = window.setTimeout(() => {\n\t\t\t\tthis.setPoints(0, true);\n\t\t\t\tthis.tree.picker.inputChanged(TypedEvent.nextEventID());\n\t\t\t\tthis.longTouchTimer = undefined;\n\t\t\t}, 750);\n\t\t});\n\t\tthis.rootElem.addEventListener('touchend', event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (this.longTouchTimer != undefined) {\n\t\t\t\tclearTimeout(this.longTouchTimer);\n\t\t\t\tthis.longTouchTimer = undefined;\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar newPoints = this.getPoints() + 1;\n\t\t\tif (this.config.maxPoints < newPoints) {\n\t\t\t\tnewPoints = 0;\n\t\t\t}\n\t\t\tthis.setPoints(newPoints, true);\n\t\t\tthis.tree.picker.inputChanged(TypedEvent.nextEventID());\n\t\t});\n\t\tthis.rootElem.addEventListener('mousedown', event => {\n\t\t\tconst rightClick = isRightClick(event);\n\t\t\tif (rightClick) {\n\t\t\t\tthis.setPoints(this.getPoints() - 1, true);\n\t\t\t} else {\n\t\t\t\tthis.setPoints(this.getPoints() + 1, true);\n\t\t\t}\n\t\t\tthis.tree.picker.inputChanged(TypedEvent.nextEventID());\n\t\t});\n\t}\n\n\tgetRow(): number {\n\t\treturn this.config.location.rowIdx;\n\t}\n\n\tgetCol(): number {\n\t\treturn this.config.location.colIdx;\n\t}\n\n\tgetPoints(): number {\n\t\tconst pts = Number(this.rootElem.dataset.points);\n\t\treturn isNaN(pts) ? 0 : pts;\n\t}\n\n\tisFull(): boolean {\n\t\treturn this.getPoints() >= this.config.maxPoints;\n\t}\n\n\t// Returns whether setting the points to newPoints would be a valid talent tree.\n\tcanSetPoints(newPoints: number): boolean {\n\t\tconst oldPoints = this.getPoints();\n\n\t\tif (newPoints > oldPoints) {\n\t\t\tconst additionalPoints = newPoints - oldPoints;\n\n\t\t\tif (this.tree.picker.numPoints + additionalPoints > this.tree.picker.maxPoints) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.tree.numPoints < this.getRow() * this.tree.picker.pointsPerRow) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.config.prereqLocation) {\n\t\t\t\tif (!this.tree.getTalent(this.config.prereqLocation).isFull())\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tconst removedPoints = oldPoints - newPoints;\n\n\t\t\t// Figure out whether any lower talents would have the row requirement\n\t\t\t// broken by subtracting points.\n\t\t\tconst pointTotalsByRow = [...Array(this.tree.picker.numRows).keys()]\n\t\t\t\t.map(rowIdx => this.tree.talents.filter(talent => talent.getRow() == rowIdx))\n\t\t\t\t.map(talentsInRow => sum(talentsInRow.map(talent => talent.getPoints())));\n\t\t\tpointTotalsByRow[this.getRow()] -= removedPoints;\n\n\t\t\tconst cumulativeTotalsByRow = pointTotalsByRow.map((_, rowIdx) => sum(pointTotalsByRow.slice(0, rowIdx + 1)));\n\n\t\t\tif (!this.tree.talents.every(talent =>\n\t\t\t\ttalent.getPoints() == 0\n\t\t\t\t|| talent.getRow() == 0\n\t\t\t\t|| cumulativeTotalsByRow[talent.getRow() - 1] >= talent.getRow() * this.tree.picker.pointsPerRow)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.config.prereqOfLocation) {\n\t\t\t\tif (this.tree.getTalent(this.config.prereqOfLocation).getPoints() > 0)\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tsetPoints(newPoints: number, checkValidity: boolean) {\n\t\tconst oldPoints = this.getPoints();\n\t\tnewPoints = Math.max(0, newPoints);\n\t\tnewPoints = Math.min(this.config.maxPoints, newPoints);\n\n\t\tif (checkValidity && !this.canSetPoints(newPoints))\n\t\t\treturn;\n\n\t\tthis.tree.numPoints += newPoints - oldPoints;\n\t\tthis.rootElem.dataset.points = String(newPoints);\n\n\t\tthis.pointsDisplay.textContent = newPoints + '/' + this.config.maxPoints;\n\n\t\tif (this.isFull()) {\n\t\t\tthis.rootElem.classList.add('talent-full');\n\t\t} else {\n\t\t\tthis.rootElem.classList.remove('talent-full');\n\t\t}\n\n\t\tconst spellId = this.getSpellIdForPoints(newPoints);\n\t\tActionId.fromSpellId(spellId).fill().then(actionId => {\n\t\t\tactionId.setWowheadHref(this.rootElem as HTMLAnchorElement);\n\t\t\tthis.rootElem.style.backgroundImage = `url('${actionId.iconUrl}')`;\n\t\t});\n\t}\n\n\tgetSpellIdForPoints(numPoints: number): number {\n\t\t// 0-indexed rank of talent\n\t\tconst rank = Math.max(0, numPoints - 1);\n\n\t\tif (this.config.spellIds[rank]) {\n\t\t\treturn this.config.spellIds[rank];\n\t\t} else {\n\t\t\tthrow new Error('No rank ' + numPoints + ' for talent ' + this.config.fieldName);\n\t\t}\n\t}\n\n\tupdate() {\n\t\tif (this.canSetPoints(this.getPoints() + 1)) {\n\t\t\tthis.rootElem.classList.add('talent-picker-can-add');\n\t\t} else {\n\t\t\tthis.rootElem.classList.remove('talent-picker-can-add');\n\t\t}\n\t}\n}\n\nexport type TalentsConfig<TalentsProto> = Array<TalentTreeConfig<TalentsProto>>;\n\nexport type TalentTreeConfig<TalentsProto> = {\n\tname: string;\n\tbackgroundUrl: string;\n\ttalents: Array<TalentConfig<TalentsProto>>;\n};\n\nexport type TalentLocation = {\n\t// 0-indexed row in the tree\n\trowIdx: number;\n\t// 0-indexed column in the tree\n\tcolIdx: number;\n};\n\nexport type TalentConfig<TalentsProto> = {\n\tfieldName?: keyof TalentsProto;\n\n\tlocation: TalentLocation;\n\n\t// Location of a prerequisite talent, if any\n\tprereqLocation?: TalentLocation;\n\n\t// Reverse of prereqLocation. This is populated automatically.\n\tprereqOfLocation?: TalentLocation;\n\n\t// Spell ID for each rank of this talent.\n\t// Omitted ranks will be inferred by incrementing from the last provided rank.\n\tspellIds: Array<number>;\n\n\tmaxPoints: number;\n};\n\nexport function newTalentsConfig<TalentsProto>(talents: TalentsConfig<TalentsProto>): TalentsConfig<TalentsProto> {\n\ttalents.forEach(tree => {\n\t\ttree.talents.forEach((talent, i) => {\n\t\t\t// Validate that talents are given in the correct order (left-to-right top-to-bottom).\n\t\t\tif (i != 0) {\n\t\t\t\tconst prevTalent = tree.talents[i - 1];\n\t\t\t\tif (talent.location.rowIdx < prevTalent.location.rowIdx || (talent.location.rowIdx == prevTalent.location.rowIdx && talent.location.colIdx <= prevTalent.location.colIdx)) {\n\t\t\t\t\tthrow new Error('Out-of-order talent: ' + talent.fieldName);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Infer omitted spell IDs.\n\t\t\tif (talent.spellIds.length < talent.maxPoints) {\n\t\t\t\tlet curSpellId = talent.spellIds[talent.spellIds.length - 1];\n\t\t\t\tfor (let pointIdx = talent.spellIds.length; pointIdx < talent.maxPoints; pointIdx++) {\n\t\t\t\t\tcurSpellId++;\n\t\t\t\t\ttalent.spellIds.push(curSpellId);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn talents;\n}\n","import { DruidTalents, DruidMajorGlyph, DruidMinorGlyph } from '../proto/druid.js';\n\nimport { GlyphsConfig, } from './glyphs_picker.js';\nimport { TalentsConfig, newTalentsConfig } from './talents_picker.js';\n\nexport const druidTalentsConfig: TalentsConfig<DruidTalents> = newTalentsConfig([\n\t{\n\t\t\"name\": \"Balance\",\n\t\t\"backgroundUrl\": \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/283.jpg\",\n\t\t\"talents\": [\n\t\t\t{\n\t\t\t\t\"fieldName\": \"starlightWrath\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16814,\n\t\t\t\t\t16815,\n\t\t\t\t\t16816,\n\t\t\t\t\t16817,\n\t\t\t\t\t16818\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"genesis\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t57810,\n\t\t\t\t\t57811,\n\t\t\t\t\t57812,\n\t\t\t\t\t57813,\n\t\t\t\t\t57814\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"moonglow\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16845,\n\t\t\t\t\t16846,\n\t\t\t\t\t16847\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"naturesMajesty\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t35363,\n\t\t\t\t\t35364\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedMoonfire\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16821,\n\t\t\t\t\t16822\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"brambles\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16836,\n\t\t\t\t\t16839,\n\t\t\t\t\t16840\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"naturesGrace\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16880,\n\t\t\t\t\t61345,\n\t\t\t\t\t61346\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"naturesSplendor\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t57865\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"naturesReach\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16819,\n\t\t\t\t\t16820\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"vengeance\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16909,\n\t\t\t\t\t16910,\n\t\t\t\t\t16911,\n\t\t\t\t\t16912,\n\t\t\t\t\t16913\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"celestialFocus\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16850,\n\t\t\t\t\t16923,\n\t\t\t\t\t16924\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"lunarGuidance\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t33589,\n\t\t\t\t\t33590,\n\t\t\t\t\t33591\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"insectSwarm\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t5570\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedInsectSwarm\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t57849,\n\t\t\t\t\t57850,\n\t\t\t\t\t57851\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"dreamstate\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t33597,\n\t\t\t\t\t33599,\n\t\t\t\t\t33956\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"moonfury\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16896,\n\t\t\t\t\t16897,\n\t\t\t\t\t16899\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"balanceOfPower\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t33592,\n\t\t\t\t\t33596\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"moonkinForm\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t24858\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedMoonkinForm\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48384,\n\t\t\t\t\t48395,\n\t\t\t\t\t48396\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedFaerieFire\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t33600,\n\t\t\t\t\t33601,\n\t\t\t\t\t33602\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"owlkinFrenzy\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48389,\n\t\t\t\t\t48392,\n\t\t\t\t\t48393\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"wrathOfCenarius\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t33603,\n\t\t\t\t\t33604,\n\t\t\t\t\t33605,\n\t\t\t\t\t33606,\n\t\t\t\t\t33607\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"eclipse\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48516,\n\t\t\t\t\t48521,\n\t\t\t\t\t48525\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"typhoon\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t50516\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"forceOfNature\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t33831\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"galeWinds\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48488,\n\t\t\t\t\t48514\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"earthAndMoon\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48506,\n\t\t\t\t\t48510,\n\t\t\t\t\t48511\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"starfall\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 10,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48505\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"name\": \"Feral Combat\",\n\t\t\"backgroundUrl\": \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/281.jpg\",\n\t\t\"talents\": [\n\t\t\t{\n\t\t\t\t\"fieldName\": \"ferocity\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16934,\n\t\t\t\t\t16935,\n\t\t\t\t\t16936,\n\t\t\t\t\t16937,\n\t\t\t\t\t16938\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"feralAggression\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16858,\n\t\t\t\t\t16859,\n\t\t\t\t\t16860,\n\t\t\t\t\t16861,\n\t\t\t\t\t16862\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"feralInstinct\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16947,\n\t\t\t\t\t16948,\n\t\t\t\t\t16949\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"savageFury\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16998,\n\t\t\t\t\t16999\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"thickHide\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16929,\n\t\t\t\t\t16930,\n\t\t\t\t\t16931\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"feralSwiftness\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t17002,\n\t\t\t\t\t24866\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"survivalInstincts\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t61336\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"sharpenedClaws\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16942,\n\t\t\t\t\t16943,\n\t\t\t\t\t16944\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"shreddingAttacks\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16966,\n\t\t\t\t\t16968\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"predatoryStrikes\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16972,\n\t\t\t\t\t16974,\n\t\t\t\t\t16975\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"primalFury\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t37116,\n\t\t\t\t\t37117\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"primalPrecision\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48409,\n\t\t\t\t\t48410\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"brutalImpact\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16940,\n\t\t\t\t\t16941\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"feralCharge\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49377\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"nurturingInstinct\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t33872,\n\t\t\t\t\t33873\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"naturalReaction\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t57878,\n\t\t\t\t\t57880,\n\t\t\t\t\t57881\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"heartOfTheWild\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t17003,\n\t\t\t\t\t17004,\n\t\t\t\t\t17005,\n\t\t\t\t\t17006,\n\t\t\t\t\t24894\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"survivalOfTheFittest\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t33853,\n\t\t\t\t\t33855,\n\t\t\t\t\t33856\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"leaderOfThePack\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t17007\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedLeaderOfThePack\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34297,\n\t\t\t\t\t34300\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"primalTenacity\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t33851,\n\t\t\t\t\t33852,\n\t\t\t\t\t33957\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"protectorOfThePack\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t57873,\n\t\t\t\t\t57876,\n\t\t\t\t\t57877\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"predatoryInstincts\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t33859,\n\t\t\t\t\t33866,\n\t\t\t\t\t33867\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"infectedWounds\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48483,\n\t\t\t\t\t48484,\n\t\t\t\t\t48485\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"kingOfTheJungle\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48492,\n\t\t\t\t\t48494,\n\t\t\t\t\t48495\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"mangle\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t33917\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedMangle\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48532,\n\t\t\t\t\t48489,\n\t\t\t\t\t48491\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"rendAndTear\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48432,\n\t\t\t\t\t48433,\n\t\t\t\t\t48434,\n\t\t\t\t\t51268,\n\t\t\t\t\t51269\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"primalGore\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t63503\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"berserk\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 10,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t50334\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"name\": \"Restoration\",\n\t\t\"backgroundUrl\": \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/282.jpg\",\n\t\t\"talents\": [\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedMarkOfTheWild\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t17050,\n\t\t\t\t\t17051\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"naturesFocus\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t17063,\n\t\t\t\t\t17065,\n\t\t\t\t\t17066\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"furor\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t17056,\n\t\t\t\t\t17058,\n\t\t\t\t\t17059,\n\t\t\t\t\t17060,\n\t\t\t\t\t17061\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"naturalist\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t17069,\n\t\t\t\t\t17070,\n\t\t\t\t\t17071,\n\t\t\t\t\t17072,\n\t\t\t\t\t17073\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"subtlety\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t17118,\n\t\t\t\t\t17119,\n\t\t\t\t\t17120\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"naturalShapeshifter\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16833,\n\t\t\t\t\t16834,\n\t\t\t\t\t16835\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"intensity\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t17106,\n\t\t\t\t\t17107,\n\t\t\t\t\t17108\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"omenOfClarity\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16864\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"masterShapeshifter\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48411,\n\t\t\t\t\t48412\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"tranquilSpirit\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t24968,\n\t\t\t\t\t24969,\n\t\t\t\t\t24970,\n\t\t\t\t\t24971,\n\t\t\t\t\t24972\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedRejuvenation\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t17111,\n\t\t\t\t\t17112,\n\t\t\t\t\t17113\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"naturesSwiftness\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t17116\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"giftOfNature\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t17104,\n\t\t\t\t\t24943,\n\t\t\t\t\t24944,\n\t\t\t\t\t24945,\n\t\t\t\t\t24946\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedTranquility\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t17123,\n\t\t\t\t\t17124\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"empoweredTouch\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t33879,\n\t\t\t\t\t33880\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"naturesBounty\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t17074,\n\t\t\t\t\t17075,\n\t\t\t\t\t17076,\n\t\t\t\t\t17077,\n\t\t\t\t\t17078\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"livingSpirit\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34151,\n\t\t\t\t\t34152,\n\t\t\t\t\t34153\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"swiftmend\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t18562\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"naturalPerfection\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t33881,\n\t\t\t\t\t33882,\n\t\t\t\t\t33883\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"empoweredRejuvenation\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t33886,\n\t\t\t\t\t33887,\n\t\t\t\t\t33888,\n\t\t\t\t\t33889,\n\t\t\t\t\t33890\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"livingSeed\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48496,\n\t\t\t\t\t48499,\n\t\t\t\t\t48500\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"revitalize\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48539,\n\t\t\t\t\t48544,\n\t\t\t\t\t48545\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"treeOfLife\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t65139\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedTreeOfLife\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48535,\n\t\t\t\t\t48536,\n\t\t\t\t\t48537\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedBarkskin\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t63410,\n\t\t\t\t\t63411\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"giftOfTheEarthmother\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t51179,\n\t\t\t\t\t51180,\n\t\t\t\t\t51181,\n\t\t\t\t\t51182,\n\t\t\t\t\t51183\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"wildGrowth\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 10,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48438\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n]);\n\nexport const druidGlyphsConfig: GlyphsConfig = {\n\tmajorGlyphs: {\n\t\t[DruidMajorGlyph.GlyphOfBarkskin]: {\n\t\t\tname: 'Glyph of Barkskin',\n\t\t\tdescription: 'Reduces the chance you\\'ll be critically hit by 25% while Barkskin is active.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_stoneclawtotem.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfBerserk]: {\n\t\t\tname: 'Glyph of Berserk',\n\t\t\tdescription: 'Increases the duration of Berserk by 5 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_berserk.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfClaw]: {\n\t\t\tname: 'Glyph of Claw',\n\t\t\tdescription: 'Reduces the energy cost of your Claw ability by 5.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_rake.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfEntanglingRoots]: {\n\t\t\tname: 'Glyph of Entangling Roots',\n\t\t\tdescription: 'Increases the damage your Entangling Roots victims can take before the Entangling Roots automatically breaks by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_stranglevines.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfFocus]: {\n\t\t\tname: 'Glyph of Focus',\n\t\t\tdescription: 'Increases the damage done by Starfall by 10%, but decreases its radius by 50%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_starfall.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfFrenziedRegeneration]: {\n\t\t\tname: 'Glyph of Frenzied Regeneration',\n\t\t\tdescription: 'While Frenzied Regeneration is active, healing effects on you are 20% more powerful.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_bullrush.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfGrowling]: {\n\t\t\tname: 'Glyph of Growling',\n\t\t\tdescription: 'Increases the chance for your Growl ability to work successfully by 8%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_physical_taunt.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfHealingTouch]: {\n\t\t\tname: 'Glyph of Healing Touch',\n\t\t\tdescription: 'Decreases the cast time of Healing Touch by 1.5 sec, the mana cost by 25%, and the amount healed by 50%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_healingtouch.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfHurricane]: {\n\t\t\tname: 'Glyph of Hurricane',\n\t\t\tdescription: 'Your Hurricane ability now also slows the movement speed of its victims by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_cyclone.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfInnervate]: {\n\t\t\tname: 'Glyph of Innervate',\n\t\t\tdescription: 'Innervate now grants the caster 45% of <dfn title=\"her\">his</dfn> base mana pool over 10 sec in addition to the normal effects of Innervate.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_lightning.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfInsectSwarm]: {\n\t\t\tname: 'Glyph of Insect Swarm',\n\t\t\tdescription: 'Increases the damage of your Insect Swarm ability by 30%, but it no longer affects your victim\\'s chance to hit.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_insectswarm.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfLifebloom]: {\n\t\t\tname: 'Glyph of Lifebloom',\n\t\t\tdescription: 'Increases the duration of Lifebloom by 1 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_misc_herb_felblossom.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfMangle]: {\n\t\t\tname: 'Glyph of Mangle',\n\t\t\tdescription: 'Increases the damage done by Mangle by 10%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_mangle2.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfMaul]: {\n\t\t\tname: 'Glyph of Maul',\n\t\t\tdescription: 'Your Maul ability now hits 1 additional target.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_maul.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfMonsoon]: {\n\t\t\tname: 'Glyph of Monsoon',\n\t\t\tdescription: 'Reduces the cooldown of your Typhoon spell by 3 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_typhoon.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfMoonfire]: {\n\t\t\tname: 'Glyph of Moonfire',\n\t\t\tdescription: 'Increases the periodic damage of your Moonfire ability by 75%, but initial damage is decreased by 90%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_starfall.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfNourish]: {\n\t\t\tname: 'Glyph of Nourish',\n\t\t\tdescription: 'Your Nourish heals an additional 6% for each of your heal over time effects present on the target.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_nourish.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfRake]: {\n\t\t\tname: 'Glyph of Rake',\n\t\t\tdescription: 'Your Rake ability prevents targets from fleeing.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_disembowel.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfRapidRejuvenation]: {\n\t\t\tname: 'Glyph of Rapid Rejuvenation',\n\t\t\tdescription: 'Your haste now reduces the time between the periodic healing ticks of your Rejuvenation spell.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_rejuvenation.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfRebirth]: {\n\t\t\tname: 'Glyph of Rebirth',\n\t\t\tdescription: 'Players resurrected by Rebirth are returned to life with 100% health.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_reincarnation.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfRegrowth]: {\n\t\t\tname: 'Glyph of Regrowth',\n\t\t\tdescription: 'Increases the healing of your Regrowth spell by 20% if your Regrowth effect is still active on the target.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_resistnature.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfRejuvenation]: {\n\t\t\tname: 'Glyph of Rejuvenation',\n\t\t\tdescription: 'While your Rejuvenation targets are below 50% health, you will heal them for an additional 50% health.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_rejuvenation.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfRip]: {\n\t\t\tname: 'Glyph of Rip',\n\t\t\tdescription: 'Increases the duration of your Rip ability by 4 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_ghoulfrenzy.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfSavageRoar]: {\n\t\t\tname: 'Glyph of Savage Roar',\n\t\t\tdescription: 'Your Savage Roar ability grants an additional 3% bonus damage done.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_skinteeth.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfShred]: {\n\t\t\tname: 'Glyph of Shred',\n\t\t\tdescription: 'Each time you Shred, the duration of your Rip on the target is extended 2 sec, up to a maximum of 6 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_vampiricaura.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfStarfall]: {\n\t\t\tname: 'Glyph of Starfall',\n\t\t\tdescription: 'Reduces the cooldown of Starfall by 30 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_starfall.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfStarfire]: {\n\t\t\tname: 'Glyph of Starfire',\n\t\t\tdescription: 'Your Starfire ability increases the duration of your Moonfire effect on the target by 3 sec, up to a maximum of 9 additional seconds.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_arcane_starfire.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfSurvivalInstincts]: {\n\t\t\tname: 'Glyph of Survival Instincts',\n\t\t\tdescription: 'Your Survival Instincts ability grants an additional 15% of your maximum health.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_tigersroar.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfSwiftmend]: {\n\t\t\tname: 'Glyph of Swiftmend',\n\t\t\tdescription: 'Your Swiftmend ability no longer consumes a Rejuvenation or Regrowth effect from the target.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_relics_idolofrejuvenation.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfWildGrowth]: {\n\t\t\tname: 'Glyph of Wild Growth',\n\t\t\tdescription: 'Wild Growth can affect 1 additional target.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_flourish.jpg',\n\t\t},\n\t\t[DruidMajorGlyph.GlyphOfWrath]: {\n\t\t\tname: 'Glyph of Wrath',\n\t\t\tdescription: 'Reduces the pushback suffered from damaging attacks while casting your Wrath spell by 50%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_abolishmagic.jpg',\n\t\t},\n\t},\n\tminorGlyphs: {\n\t\t[DruidMinorGlyph.GlyphOfAquaticForm]: {\n\t\t\tname: 'Glyph of Aquatic Form',\n\t\t\tdescription: 'Increases your swim speed by 50% while in Aquatic Form.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_aquaticform.jpg',\n\t\t},\n\t\t[DruidMinorGlyph.GlyphOfChallengingRoar]: {\n\t\t\tname: 'Glyph of Challenging Roar',\n\t\t\tdescription: 'Reduces the cooldown of your Challenging Roar ability by 30 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_challangingroar.jpg',\n\t\t},\n\t\t[DruidMinorGlyph.GlyphOfDash]: {\n\t\t\tname: 'Glyph of Dash',\n\t\t\tdescription: 'Reduces the cooldown of your Dash ability by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_dash.jpg',\n\t\t},\n\t\t[DruidMinorGlyph.GlyphOfTheWild]: {\n\t\t\tname: 'Glyph of the Wild',\n\t\t\tdescription: 'Mana cost of your Mark of the Wild and Gift of the Wild spells reduced by 50%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_regeneration.jpg',\n\t\t},\n\t\t[DruidMinorGlyph.GlyphOfThorns]: {\n\t\t\tname: 'Glyph of Thorns',\n\t\t\tdescription: 'Increases the duration of your Thorns ability by 50 min when cast on yourself.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_thorns.jpg',\n\t\t},\n\t\t[DruidMinorGlyph.GlyphOfTyphoon]: {\n\t\t\tname: 'Glyph of Typhoon',\n\t\t\tdescription: 'Reduces the cost of your Typhoon spell by 8% and increases its radius by 10 yards, but it no longer knocks enemies back.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_typhoon.jpg',\n\t\t},\n\t\t[DruidMinorGlyph.GlyphOfUnburdenedRebirth]: {\n\t\t\tname: 'Glyph of Unburdened Rebirth',\n\t\t\tdescription: 'Your Rebirth spell no longer requires a reagent.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_reincarnation.jpg',\n\t\t},\n\t},\n};\n","import { HunterTalents, HunterMajorGlyph, HunterMinorGlyph, HunterPetTalents } from '../proto/hunter.js';\n\nimport { GlyphsConfig } from './glyphs_picker.js';\nimport { TalentsConfig, newTalentsConfig } from './talents_picker.js';\n\nexport const hunterTalentsConfig: TalentsConfig<HunterTalents> = newTalentsConfig([\n\t{\n\t\t\"name\": \"Beast Mastery\",\n\t\t\"backgroundUrl\": \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/361.jpg\",\n\t\t\"talents\": [\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedAspectOfTheHawk\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19552,\n\t\t\t\t\t19553,\n\t\t\t\t\t19554,\n\t\t\t\t\t19555,\n\t\t\t\t\t19556\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"enduranceTraining\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19583,\n\t\t\t\t\t19584,\n\t\t\t\t\t19585,\n\t\t\t\t\t19586,\n\t\t\t\t\t19587\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"focusedFire\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t35029,\n\t\t\t\t\t35030\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedAspectOfTheMonkey\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19549,\n\t\t\t\t\t19550,\n\t\t\t\t\t19551\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"thickHide\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19609,\n\t\t\t\t\t19610,\n\t\t\t\t\t19612\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedRevivePet\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t24443,\n\t\t\t\t\t19575\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"pathfinding\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19559,\n\t\t\t\t\t19560\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"aspectMastery\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t53265\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"unleashedFury\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19616,\n\t\t\t\t\t19617,\n\t\t\t\t\t19618,\n\t\t\t\t\t19619,\n\t\t\t\t\t19620\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedMendPet\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19572,\n\t\t\t\t\t19573\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"ferocity\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19598,\n\t\t\t\t\t19599,\n\t\t\t\t\t19600,\n\t\t\t\t\t19601,\n\t\t\t\t\t19602\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"spiritBond\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19578,\n\t\t\t\t\t20895\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"intimidation\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19577\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"bestialDiscipline\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19590,\n\t\t\t\t\t19592\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"animalHandler\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34453,\n\t\t\t\t\t34454\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"frenzy\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19621,\n\t\t\t\t\t19622,\n\t\t\t\t\t19623,\n\t\t\t\t\t19624,\n\t\t\t\t\t19625\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"ferociousInspiration\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34455,\n\t\t\t\t\t34459,\n\t\t\t\t\t34460\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"bestialWrath\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19574\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"catlikeReflexes\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34462,\n\t\t\t\t\t34464,\n\t\t\t\t\t34465\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"invigoration\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t53252,\n\t\t\t\t\t53253\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"serpentsSwiftness\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34466,\n\t\t\t\t\t34467,\n\t\t\t\t\t34468,\n\t\t\t\t\t34469,\n\t\t\t\t\t34470\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"longevity\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t53262,\n\t\t\t\t\t53263,\n\t\t\t\t\t53264\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"theBeastWithin\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34692\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"cobraStrikes\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t53256,\n\t\t\t\t\t53259,\n\t\t\t\t\t53260\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"kindredSpirits\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t56314,\n\t\t\t\t\t56315,\n\t\t\t\t\t56316,\n\t\t\t\t\t56317,\n\t\t\t\t\t56318\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"beastMastery\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 10,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t53270\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"name\": \"Marksmanship\",\n\t\t\"backgroundUrl\": \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/363.jpg\",\n\t\t\"talents\": [\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedConcussiveShot\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19407,\n\t\t\t\t\t19412\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"focusedAim\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t53620,\n\t\t\t\t\t53621,\n\t\t\t\t\t53622\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"lethalShots\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19426,\n\t\t\t\t\t19427,\n\t\t\t\t\t19429,\n\t\t\t\t\t19430,\n\t\t\t\t\t19431\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"carefulAim\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34482,\n\t\t\t\t\t34483,\n\t\t\t\t\t34484\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedHuntersMark\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19421,\n\t\t\t\t\t19422,\n\t\t\t\t\t19423\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"mortalShots\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19485,\n\t\t\t\t\t19487,\n\t\t\t\t\t19488,\n\t\t\t\t\t19489,\n\t\t\t\t\t19490\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"goForTheThroat\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34950,\n\t\t\t\t\t34954\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedArcaneShot\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19454,\n\t\t\t\t\t19455,\n\t\t\t\t\t19456\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"aimedShot\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19434\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"rapidKilling\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34948,\n\t\t\t\t\t34949\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedStings\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19464,\n\t\t\t\t\t19465,\n\t\t\t\t\t19466\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"efficiency\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19416,\n\t\t\t\t\t19417,\n\t\t\t\t\t19418,\n\t\t\t\t\t19419,\n\t\t\t\t\t19420\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"concussiveBarrage\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t35100,\n\t\t\t\t\t35102\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"readiness\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t23989\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"barrage\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19461,\n\t\t\t\t\t19462,\n\t\t\t\t\t24691\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"combatExperience\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34475,\n\t\t\t\t\t34476\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"rangedWeaponSpecialization\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19507,\n\t\t\t\t\t19508,\n\t\t\t\t\t19509\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"piercingShots\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t53234,\n\t\t\t\t\t53237,\n\t\t\t\t\t53238\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"trueshotAura\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19506\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedBarrage\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t35104,\n\t\t\t\t\t35110,\n\t\t\t\t\t35111\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"masterMarksman\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34485,\n\t\t\t\t\t34486,\n\t\t\t\t\t34487,\n\t\t\t\t\t34488,\n\t\t\t\t\t34489\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"rapidRecuperation\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t53228,\n\t\t\t\t\t53232\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"wildQuiver\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t53215,\n\t\t\t\t\t53216,\n\t\t\t\t\t53217\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"silencingShot\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34490\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedSteadyShot\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t53221,\n\t\t\t\t\t53222,\n\t\t\t\t\t53224\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"markedForDeath\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t53241,\n\t\t\t\t\t53243,\n\t\t\t\t\t53244,\n\t\t\t\t\t53245,\n\t\t\t\t\t53246\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"chimeraShot\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 10,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t53209\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"name\": \"Survival\",\n\t\t\"backgroundUrl\": \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/362.jpg\",\n\t\t\"talents\": [\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedTracking\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t52783,\n\t\t\t\t\t52785,\n\t\t\t\t\t52786,\n\t\t\t\t\t52787,\n\t\t\t\t\t52788\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"hawkEye\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19498,\n\t\t\t\t\t19499,\n\t\t\t\t\t19500\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"savageStrikes\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19159,\n\t\t\t\t\t19160\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"surefooted\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19290,\n\t\t\t\t\t19294,\n\t\t\t\t\t24283\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"entrapment\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19184,\n\t\t\t\t\t19387,\n\t\t\t\t\t19388\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"trapMastery\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19376,\n\t\t\t\t\t63457,\n\t\t\t\t\t63458\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"survivalInstincts\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34494,\n\t\t\t\t\t34496\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"survivalist\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19255,\n\t\t\t\t\t19256,\n\t\t\t\t\t19257,\n\t\t\t\t\t19258,\n\t\t\t\t\t19259\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"scatterShot\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19503\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"deflection\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19295,\n\t\t\t\t\t19297,\n\t\t\t\t\t19298\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"survivalTactics\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19286,\n\t\t\t\t\t19287\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"tNT\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t56333,\n\t\t\t\t\t56336,\n\t\t\t\t\t56337\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"lockAndLoad\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t56342,\n\t\t\t\t\t56343,\n\t\t\t\t\t56344\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"hunterVsWild\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t56339,\n\t\t\t\t\t56340,\n\t\t\t\t\t56341\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"killerInstinct\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19370,\n\t\t\t\t\t19371,\n\t\t\t\t\t19373\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"counterattack\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19306\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"lightningReflexes\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19168,\n\t\t\t\t\t19180,\n\t\t\t\t\t19181,\n\t\t\t\t\t24296,\n\t\t\t\t\t24297\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"resourcefulness\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34491,\n\t\t\t\t\t34492,\n\t\t\t\t\t34493\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"exposeWeakness\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34500,\n\t\t\t\t\t34502,\n\t\t\t\t\t34503\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"wyvernSting\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t19386\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"thrillOfTheHunt\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34497,\n\t\t\t\t\t34498,\n\t\t\t\t\t34499\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"masterTactician\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34506,\n\t\t\t\t\t34507,\n\t\t\t\t\t34508,\n\t\t\t\t\t34838,\n\t\t\t\t\t34839\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"noxiousStings\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t53295,\n\t\t\t\t\t53296,\n\t\t\t\t\t53297\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"pointOfNoEscape\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t53298,\n\t\t\t\t\t53299\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"blackArrow\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t3674\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"sniperTraining\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t53302,\n\t\t\t\t\t53303,\n\t\t\t\t\t53304\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"huntingParty\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t53290,\n\t\t\t\t\t53291,\n\t\t\t\t\t53292\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"explosiveShot\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 10,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t53301\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n]);\n\nexport const hunterGlyphsConfig: GlyphsConfig = {\n\tmajorGlyphs: {\n\t\t[HunterMajorGlyph.GlyphOfAimedShot]: {\n\t\t\tname: 'Glyph of Aimed Shot',\n\t\t\tdescription: 'Reduces the cooldown of your Aimed Shot ability by 2 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_spear_07.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfArcaneShot]: {\n\t\t\tname: 'Glyph of Arcane Shot',\n\t\t\tdescription: 'Your Arcane Shot refunds 20% of its mana cost if the target has one of your Stings active on it.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_impalingbolt.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfAspectOfTheViper]: {\n\t\t\tname: 'Glyph of Aspect of the Viper',\n\t\t\tdescription: 'Increases the amount of mana gained from attacks while Aspect of the Viper is active by 10%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_hunter_aspectoftheviper.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfBestialWrath]: {\n\t\t\tname: 'Glyph of Bestial Wrath',\n\t\t\tdescription: 'Decreases the cooldown of Bestial Wrath by 20 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_ferociousbite.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfChimeraShot]: {\n\t\t\tname: 'Glyph of Chimera Shot',\n\t\t\tdescription: 'Reduces the cooldown of Chimera Shot by 1 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_hunter_chimerashot2.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfDeterrence]: {\n\t\t\tname: 'Glyph of Deterrence',\n\t\t\tdescription: 'Decreases the cooldown of Deterrence by 10 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_whirlwind.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfDisengage]: {\n\t\t\tname: 'Glyph of Disengage',\n\t\t\tdescription: 'Decreases the cooldown of Disengage by 5 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_feint.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfExplosiveShot]: {\n\t\t\tname: 'Glyph of Explosive Shot',\n\t\t\tdescription: 'Increases the critical strike chance of Explosive Shot by 4%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_hunter_explosiveshot.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfExplosiveTrap]: {\n\t\t\tname: 'Glyph of Explosive Trap',\n\t\t\tdescription: 'The periodic damage from your Explosive Trap can now be critical strikes.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_fire_selfdestruct.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfFreezingTrap]: {\n\t\t\tname: 'Glyph of Freezing Trap',\n\t\t\tdescription: 'When your Freezing Trap breaks, the victim\\'s movement speed is reduced by 30% for 4 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_frost_chainsofice.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfFrostTrap]: {\n\t\t\tname: 'Glyph of Frost Trap',\n\t\t\tdescription: 'Increases the radius of the effect from your Frost Trap by 2 yards.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_frost_freezingbreath.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfHuntersMark]: {\n\t\t\tname: 'Glyph of Hunter\\'s Mark',\n\t\t\tdescription: 'Increases the attack power bonus of your Hunter\\'s Mark by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_hunter_snipershot.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfImmolationTrap]: {\n\t\t\tname: 'Glyph of Immolation Trap',\n\t\t\tdescription: 'Decreases the duration of the effect from your Immolation Trap by 6 sec., but damage while active is increased by 100%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_fire_flameshock.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfKillShot]: {\n\t\t\tname: 'Glyph of Kill Shot',\n\t\t\tdescription: 'Reduces the cooldown of Kill Shot by 6 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_hunter_assassinate2.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfMending]: {\n\t\t\tname: 'Glyph of Mending',\n\t\t\tdescription: 'Increases the healing done by your Mend Pet ability by 40%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_hunter_mendpet.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfMultiShot]: {\n\t\t\tname: 'Glyph of Multi-Shot',\n\t\t\tdescription: 'Decreases the cooldown of Multi-Shot by 1 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_upgrademoonglaive.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfRapidFire]: {\n\t\t\tname: 'Glyph of Rapid Fire',\n\t\t\tdescription: 'Increases the haste from Rapid Fire by an additional 8%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_hunter_runningshot.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfRaptorStrike]: {\n\t\t\tname: 'Glyph of Raptor Strike',\n\t\t\tdescription: 'Reduces damage taken by 20% for 3 sec after using Raptor Strike.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_meleedamage.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfScatterShot]: {\n\t\t\tname: 'Glyph of Scatter Shot',\n\t\t\tdescription: 'Increases the range of Scatter Shot by 3 yards.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_golemstormbolt.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfSerpentSting]: {\n\t\t\tname: 'Glyph of Serpent Sting',\n\t\t\tdescription: 'Increases the duration of your Serpent Sting by 6 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_hunter_quickshot.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfSnakeTrap]: {\n\t\t\tname: 'Glyph of Snake Trap',\n\t\t\tdescription: 'Snakes from your Snake Trap take 90% reduced damage from area of effect spells.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_hunter_snaketrap.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfSteadyShot]: {\n\t\t\tname: 'Glyph of Steady Shot',\n\t\t\tdescription: 'Increases the damage dealt by Steady Shot by 10% when your target is afflicted with Serpent Sting.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_hunter_steadyshot.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfTheBeast]: {\n\t\t\tname: 'Glyph of the Beast',\n\t\t\tdescription: 'Increases the attack power bonus of Aspect of the Beast for you and your pet by an additional 2%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_mount_pinktiger.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfTheHawk]: {\n\t\t\tname: 'Glyph of the Hawk',\n\t\t\tdescription: 'Increases the haste bonus of the Improved Aspect of the Hawk effect by an additional 6%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_ravenform.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfTrueshotAura]: {\n\t\t\tname: 'Glyph of Trueshot Aura',\n\t\t\tdescription: 'While your Trueshot Aura is active, you have 10% increased critical strike chance on your Aimed Shot.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_trueshot.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfVolley]: {\n\t\t\tname: 'Glyph of Volley',\n\t\t\tdescription: 'Decreases the mana cost of Volley by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_marksmanship.jpg',\n\t\t},\n\t\t[HunterMajorGlyph.GlyphOfWyvernSting]: {\n\t\t\tname: 'Glyph of Wyvern Sting',\n\t\t\tdescription: 'Decreases the cooldown of your Wyvern Sting by 6 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_spear_02.jpg',\n\t\t},\n\t},\n\tminorGlyphs: {\n\t\t[HunterMinorGlyph.GlyphOfFeignDeath]: {\n\t\t\tname: 'Glyph of Feign Death',\n\t\t\tdescription: 'Reduces the cooldown of your Feign Death spell by 5 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_feigndeath.jpg',\n\t\t},\n\t\t[HunterMinorGlyph.GlyphOfMendPet]: {\n\t\t\tname: 'Glyph of Mend Pet',\n\t\t\tdescription: 'Your Mend Pet spell increases your pet\\'s happiness slightly.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_hunter_mendpet.jpg',\n\t\t},\n\t\t[HunterMinorGlyph.GlyphOfPossessedStrength]: {\n\t\t\tname: 'Glyph of Possessed Strength',\n\t\t\tdescription: 'Increases the damage your pet inflicts while using Eyes of the Beast by 50%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_eyeoftheowl.jpg',\n\t\t},\n\t\t[HunterMinorGlyph.GlyphOfRevivePet]: {\n\t\t\tname: 'Glyph of Revive Pet',\n\t\t\tdescription: 'Reduces the pushback suffered from damaging attacks while casting Revive Pet by 100%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_hunter_beastsoothe.jpg',\n\t\t},\n\t\t[HunterMinorGlyph.GlyphOfScareBeast]: {\n\t\t\tname: 'Glyph of Scare Beast',\n\t\t\tdescription: 'Reduces the pushback suffered from damaging attacks while casting Scare Beast by 75%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_cower.jpg',\n\t\t},\n\t\t[HunterMinorGlyph.GlyphOfThePack]: {\n\t\t\tname: 'Glyph of the Pack',\n\t\t\tdescription: 'Increases the range of your Aspect of the Pack ability by 15 yards.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_mount_jungletiger.jpg',\n\t\t},\n\t},\n};\n","import { MageTalents, MageMajorGlyph, MageMinorGlyph } from '../proto/mage.js';\n\nimport { GlyphsConfig } from './glyphs_picker.js';\nimport { TalentsConfig, newTalentsConfig } from './talents_picker.js';\n\nexport const mageTalentsConfig: TalentsConfig<MageTalents> = newTalentsConfig([\n\t{\n\t\t\"name\": \"Arcane\",\n\t\t\"backgroundUrl\": \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/81.jpg\",\n\t\t\"talents\": [\n\t\t\t{\n\t\t\t\t\"fieldName\": \"arcaneSubtlety\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11210,\n\t\t\t\t\t12592\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"arcaneFocus\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11222,\n\t\t\t\t\t12839,\n\t\t\t\t\t12840\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"arcaneStability\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11237,\n\t\t\t\t\t12463,\n\t\t\t\t\t12464,\n\t\t\t\t\t16769,\n\t\t\t\t\t16770\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"arcaneFortitude\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t28574,\n\t\t\t\t\t54658,\n\t\t\t\t\t54659\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"magicAbsorption\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t29441,\n\t\t\t\t\t29444\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"arcaneConcentration\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11213,\n\t\t\t\t\t12574,\n\t\t\t\t\t12575,\n\t\t\t\t\t12576,\n\t\t\t\t\t12577\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"magicAttunement\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11247,\n\t\t\t\t\t12606\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"spellImpact\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11242,\n\t\t\t\t\t12467,\n\t\t\t\t\t12469\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"studentOfTheMind\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t44397,\n\t\t\t\t\t44398,\n\t\t\t\t\t44399\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"focusMagic\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t54646\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"arcaneShielding\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11252,\n\t\t\t\t\t12605\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedCounterspell\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11255,\n\t\t\t\t\t12598\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"arcaneMeditation\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t18462,\n\t\t\t\t\t18463,\n\t\t\t\t\t18464\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"tormentTheWeak\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t29447,\n\t\t\t\t\t55339,\n\t\t\t\t\t55340\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedBlink\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t31569,\n\t\t\t\t\t31570\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"presenceOfMind\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12043\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"arcaneMind\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11232,\n\t\t\t\t\t12500,\n\t\t\t\t\t12501,\n\t\t\t\t\t12502,\n\t\t\t\t\t12503\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"prismaticCloak\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t31574,\n\t\t\t\t\t31575,\n\t\t\t\t\t54354\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"arcaneInstability\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t15058,\n\t\t\t\t\t15059,\n\t\t\t\t\t15060\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"arcanePotency\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t31571,\n\t\t\t\t\t31572\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"arcaneEmpowerment\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t31579,\n\t\t\t\t\t31582,\n\t\t\t\t\t31583\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"arcanePower\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12042\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"incantersAbsorption\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t44394,\n\t\t\t\t\t44395,\n\t\t\t\t\t44396\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"arcaneFlows\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t44378,\n\t\t\t\t\t44379\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"mindMastery\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t31584,\n\t\t\t\t\t31585,\n\t\t\t\t\t31586,\n\t\t\t\t\t31587,\n\t\t\t\t\t31588\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"slow\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t31589\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"missileBarrage\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t44404,\n\t\t\t\t\t54486,\n\t\t\t\t\t54488,\n\t\t\t\t\t54489,\n\t\t\t\t\t54490\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"netherwindPresence\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t44400,\n\t\t\t\t\t44402,\n\t\t\t\t\t44403\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"spellPower\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t35578,\n\t\t\t\t\t35581\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"arcaneBarrage\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 10,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t44425\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"name\": \"Fire\",\n\t\t\"backgroundUrl\": \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/41.jpg\",\n\t\t\"talents\": [\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedFireBlast\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11078,\n\t\t\t\t\t11080\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"incineration\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t18459,\n\t\t\t\t\t18460,\n\t\t\t\t\t54734\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedFireball\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11069,\n\t\t\t\t\t12338,\n\t\t\t\t\t12339,\n\t\t\t\t\t12340,\n\t\t\t\t\t12341\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"ignite\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11119,\n\t\t\t\t\t11120,\n\t\t\t\t\t12846,\n\t\t\t\t\t12847,\n\t\t\t\t\t12848\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"burningDetermination\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t54747,\n\t\t\t\t\t54749\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"worldInFlames\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11108,\n\t\t\t\t\t12349,\n\t\t\t\t\t12350\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"flameThrowing\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11100,\n\t\t\t\t\t12353\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"impact\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11103,\n\t\t\t\t\t12357,\n\t\t\t\t\t12358\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"pyroblast\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11366\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"burningSoul\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11083,\n\t\t\t\t\t12351\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedScorch\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11095,\n\t\t\t\t\t12872,\n\t\t\t\t\t12873\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"moltenShields\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11094,\n\t\t\t\t\t13043\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"masterOfElements\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t29074,\n\t\t\t\t\t29075,\n\t\t\t\t\t29076\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"playingWithFire\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t31638,\n\t\t\t\t\t31639,\n\t\t\t\t\t31640\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"criticalMass\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11115,\n\t\t\t\t\t11367,\n\t\t\t\t\t11368\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"blastWave\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11113\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"blazingSpeed\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t31641,\n\t\t\t\t\t31642\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"firePower\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11124,\n\t\t\t\t\t12378,\n\t\t\t\t\t12398,\n\t\t\t\t\t12399,\n\t\t\t\t\t12400\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"pyromaniac\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t34293,\n\t\t\t\t\t34295,\n\t\t\t\t\t34296\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"combustion\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11129\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"moltenFury\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t31679,\n\t\t\t\t\t31680\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"fieryPayback\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t64353,\n\t\t\t\t\t64357\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"empoweredFire\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t31656,\n\t\t\t\t\t31657,\n\t\t\t\t\t31658\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"firestarter\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t44442,\n\t\t\t\t\t44443\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"dragonsBreath\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t31661\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"hotStreak\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t44445,\n\t\t\t\t\t44446,\n\t\t\t\t\t44448\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"burnout\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t44449,\n\t\t\t\t\t44469,\n\t\t\t\t\t44470,\n\t\t\t\t\t44471,\n\t\t\t\t\t44472\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"livingBomb\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 10,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t44457\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"name\": \"Frost\",\n\t\t\"backgroundUrl\": \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/61.jpg\",\n\t\t\"talents\": [\n\t\t\t{\n\t\t\t\t\"fieldName\": \"frostbite\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11071,\n\t\t\t\t\t12496,\n\t\t\t\t\t12497\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedFrostbolt\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11070,\n\t\t\t\t\t12473,\n\t\t\t\t\t16763,\n\t\t\t\t\t16765,\n\t\t\t\t\t16766\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"iceFloes\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t31670,\n\t\t\t\t\t31672,\n\t\t\t\t\t55094\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"iceShards\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11207,\n\t\t\t\t\t12672,\n\t\t\t\t\t15047\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"frostWarding\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11189,\n\t\t\t\t\t28332\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"precision\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t29438,\n\t\t\t\t\t29439,\n\t\t\t\t\t29440\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"permafrost\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11175,\n\t\t\t\t\t12569,\n\t\t\t\t\t12571\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"piercingIce\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11151,\n\t\t\t\t\t12952,\n\t\t\t\t\t12953\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"icyVeins\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12472\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedBlizzard\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11185,\n\t\t\t\t\t12487,\n\t\t\t\t\t12488\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"arcticReach\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16757,\n\t\t\t\t\t16758\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"frostChanneling\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11160,\n\t\t\t\t\t12518,\n\t\t\t\t\t12519\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"shatter\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11170,\n\t\t\t\t\t12982,\n\t\t\t\t\t12983\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"coldSnap\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11958\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedConeOfCold\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11190,\n\t\t\t\t\t12489,\n\t\t\t\t\t12490\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"frozenCore\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t31667,\n\t\t\t\t\t31668,\n\t\t\t\t\t31669\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"coldAsIce\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t55091,\n\t\t\t\t\t55092\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"wintersChill\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11180,\n\t\t\t\t\t28592,\n\t\t\t\t\t28593\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"shatteredBarrier\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t44745,\n\t\t\t\t\t54787\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"iceBarrier\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t11426\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"arcticWinds\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t31674,\n\t\t\t\t\t31675,\n\t\t\t\t\t31676,\n\t\t\t\t\t31677,\n\t\t\t\t\t31678\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"empoweredFrostbolt\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t31682,\n\t\t\t\t\t31683\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"fingersOfFrost\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t44543,\n\t\t\t\t\t44545\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"brainFreeze\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t44546,\n\t\t\t\t\t44548,\n\t\t\t\t\t44549\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"summonWaterElemental\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t31687\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"enduringWinter\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t44557,\n\t\t\t\t\t44560,\n\t\t\t\t\t44561\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"chilledToTheBone\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t44566,\n\t\t\t\t\t44567,\n\t\t\t\t\t44568,\n\t\t\t\t\t44570,\n\t\t\t\t\t44571\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"deepFreeze\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 10,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t44572\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t}\n\t\t]\n\t}\n]);\n\nexport const mageGlyphsConfig: GlyphsConfig = {\n\tmajorGlyphs: {\n\t\t[MageMajorGlyph.GlyphOfArcaneBarrage]: {\n\t\t\tname: 'Glyph of Arcane Barrage',\n\t\t\tdescription: 'Reduces the mana cost of Arcane Barrage by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_mage_arcanebarrage.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfArcaneBlast]: {\n\t\t\tname: 'Glyph of Arcane Blast',\n\t\t\tdescription: 'Increases the damage from your Arcane Blast buff by 3%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_arcane_blast.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfArcaneExplosion]: {\n\t\t\tname: 'Glyph of Arcane Explosion',\n\t\t\tdescription: 'Reduces mana cost of Arcane Explosion by 10%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_wispsplode.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfArcaneMissiles]: {\n\t\t\tname: 'Glyph of Arcane Missiles',\n\t\t\tdescription: 'Increases the critical strike damage bonus of Arcane Missiles by 25%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_starfall.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfArcanePower]: {\n\t\t\tname: 'Glyph of Arcane Power',\n\t\t\tdescription: 'Increases the duration of Arcane Power by 3 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_lightning.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfBlink]: {\n\t\t\tname: 'Glyph of Blink',\n\t\t\tdescription: 'Increases the distance you travel with the Blink spell by 5 yards.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_arcane_blink.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfDeepFreeze]: {\n\t\t\tname: 'Glyph of Deep Freeze',\n\t\t\tdescription: 'Increases the range of Deep Freeze by 10 yards.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_mage_deepfreeze.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfEternalWater]: {\n\t\t\tname: 'Glyph of Eternal Water',\n\t\t\tdescription: 'Your Summon Water Elemental now lasts indefinitely, but your Water Elemental can no longer cast Freeze.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_frost_summonwaterelemental_2.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfEvocation]: {\n\t\t\tname: 'Glyph of Evocation',\n\t\t\tdescription: 'Your Evocation ability also causes you to regain 60% of your health over its duration.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_purge.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfFireBlast]: {\n\t\t\tname: 'Glyph of Fire Blast',\n\t\t\tdescription: 'Increases the critical strike chance of Fire Blast by 50% when the target is stunned or incapacitated.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_fire_fireball.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfFireball]: {\n\t\t\tname: 'Glyph of Fireball',\n\t\t\tdescription: 'Reduces the casting time of your Fireball spell by 0.15 sec, but removes the damage over time effect.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_fire_flamebolt.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfFrostNova]: {\n\t\t\tname: 'Glyph of Frost Nova',\n\t\t\tdescription: 'Your Frost Nova targets can take an additional 20% damage before the Frost Nova effect automatically breaks.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_frost_frostnova.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfFrostbolt]: {\n\t\t\tname: 'Glyph of Frostbolt',\n\t\t\tdescription: 'Increases the damage dealt by Frostbolt by 5%, but removes the slowing effect.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_frost_frostbolt02.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfFrostfire]: {\n\t\t\tname: 'Glyph of Frostfire',\n\t\t\tdescription: 'Increases the initial damage dealt by Frostfire Bolt by 2% and its critical strike chance by 2%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_mage_frostfirebolt.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfIceArmor]: {\n\t\t\tname: 'Glyph of Ice Armor',\n\t\t\tdescription: 'Your Ice Armor and Frost Armor spells grant an additional 50% armor and resistance.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_frost_frostarmor02.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfIceBarrier]: {\n\t\t\tname: 'Glyph of Ice Barrier',\n\t\t\tdescription: 'Increases the amount of damage absorbed by your Ice Barrier by 30%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_ice_lament.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfIceBlock]: {\n\t\t\tname: 'Glyph of Ice Block',\n\t\t\tdescription: 'Your Frost Nova cooldown is now reset every time you use Ice Block.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_frost_frost.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfIceLance]: {\n\t\t\tname: 'Glyph of Ice Lance',\n\t\t\tdescription: 'Your Ice Lance now causes 4 times damage against frozen targets higher level than you instead of triple damage.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_frost_frostblast.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfIcyVeins]: {\n\t\t\tname: 'Glyph of Icy Veins',\n\t\t\tdescription: 'Your Icy Veins ability also removes all movement slowing and cast time slowing effects.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_frost_coldhearted.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfInvisibility]: {\n\t\t\tname: 'Glyph of Invisibility',\n\t\t\tdescription: 'Increases the duration of the Invisibility effect by 10 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_mage_invisibility.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfLivingBomb]: {\n\t\t\tname: 'Glyph of Living Bomb',\n\t\t\tdescription: 'The periodic damage from your Living Bomb can now be critical strikes.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_mage_livingbomb.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfMageArmor]: {\n\t\t\tname: 'Glyph of Mage Armor',\n\t\t\tdescription: 'Your Mage Armor spell grants an additional 20% mana regeneration while casting.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_magearmor.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfManaGem]: {\n\t\t\tname: 'Glyph of Mana Gem',\n\t\t\tdescription: 'Increases the mana received from using a mana gem by 40%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_misc_gem_stone_01.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfMirrorImage]: {\n\t\t\tname: 'Glyph of Mirror Image',\n\t\t\tdescription: 'Your Mirror Image spell now creates a 4th copy.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_magic_lesserinvisibilty.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfMoltenArmor]: {\n\t\t\tname: 'Glyph of Molten Armor',\n\t\t\tdescription: 'Your Molten Armor grants an additional 20% of your spirit as critical strike rating.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_mage_moltenarmor.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfPolymorph]: {\n\t\t\tname: 'Glyph of Polymorph',\n\t\t\tdescription: 'Your Polymorph spell also removes all damage over time effects from the target.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_polymorph.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfRemoveCurse]: {\n\t\t\tname: 'Glyph of Remove Curse',\n\t\t\tdescription: 'Your Remove Curse spell also makes the target immune to all curses for 4 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_removecurse.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfScorch]: {\n\t\t\tname: 'Glyph of Scorch',\n\t\t\tdescription: 'Increases the damage of your Scorch spell by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_fire_soulburn.jpg',\n\t\t},\n\t\t[MageMajorGlyph.GlyphOfWaterElemental]: {\n\t\t\tname: 'Glyph of Water Elemental',\n\t\t\tdescription: 'Reduces the cooldown of your Summon Water Elemental spell by 30 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_frost_summonwaterelemental_2.jpg',\n\t\t},\n\t},\n\tminorGlyphs: {\n\t\t[MageMinorGlyph.GlyphOfArcaneIntellect]: {\n\t\t\tname: 'Glyph of Arcane Intellect',\n\t\t\tdescription: 'Reduces the mana cost of your Arcane Intellect and Arcane Brilliance spells by 50%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_magicalsentry.jpg',\n\t\t},\n\t\t[MageMinorGlyph.GlyphOfBlastWave]: {\n\t\t\tname: 'Glyph of Blast Wave',\n\t\t\tdescription: 'The mana cost of your Blast Wave spell is reduced by 15%, but it no longer knocks enemies back.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_excorcism_02.jpg',\n\t\t},\n\t\t[MageMinorGlyph.GlyphOfFireWard]: {\n\t\t\tname: 'Glyph of Fire Ward',\n\t\t\tdescription: 'You have an additional 5% chance to reflect Fire spells while your Fire Ward is active.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_fire_firearmor.jpg',\n\t\t},\n\t\t[MageMinorGlyph.GlyphOfFrostArmor]: {\n\t\t\tname: 'Glyph of Frost Armor',\n\t\t\tdescription: 'Increases the duration of your Frost Armor and Ice Armor spells by 30 min.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_frost_frostarmor02.jpg',\n\t\t},\n\t\t[MageMinorGlyph.GlyphOfFrostWard]: {\n\t\t\tname: 'Glyph of Frost Ward',\n\t\t\tdescription: 'You have an additional 5% chance to reflect Frost spells while your Frost Ward is active.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_frost_frostward.jpg',\n\t\t},\n\t\t[MageMinorGlyph.GlyphOfSlowFall]: {\n\t\t\tname: 'Glyph of Slow Fall',\n\t\t\tdescription: 'Your Slow Fall spell no longer requires a reagent.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_magic_featherfall.jpg',\n\t\t},\n\t\t[MageMinorGlyph.GlyphOfThePenguin]: {\n\t\t\tname: 'Glyph of the Penguin',\n\t\t\tdescription: 'Your Polymorph: Sheep spell polymorphs the target into a penguin instead.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_misc_penguinpet.jpg',\n\t\t},\n\t},\n};\n","import { PaladinTalents, PaladinMajorGlyph, PaladinMinorGlyph } from '../proto/paladin.js';\n\nimport { GlyphsConfig } from './glyphs_picker.js';\nimport { TalentsConfig, newTalentsConfig } from './talents_picker.js';\n\nexport const paladinTalentsConfig: TalentsConfig<PaladinTalents> = newTalentsConfig([\n\t{\n\t\tname: 'Holy',\n\t\tbackgroundUrl: 'https://wow.zamimg.com/images/wow/talents/backgrounds/classic/382.jpg',\n\t\ttalents: [\n\t\t\t{\n\t\t\t\tfieldName: 'spiritualFocus',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [20205],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'sealsOfThePure',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [20224, 20225, 20330],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'healingLight',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [20237],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'divineIntellect',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [20257],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'unyieldingFaith',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [9453, 25836],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'auraMastery',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [31821],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'illumination',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [20210, 20212],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedLayOnHands',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [20234],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedConcentrationAura',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [20254],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedBlessingOfWisdom',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [20244],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'blessedHands',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 3,\n\t\t\t\t},\n\t\t\t\tspellIds: [53660],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'pureOfHeart',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [31822],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'divineFavor',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [20216],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'sanctifiedLight',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [20359],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'purifyingPower',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [31825],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'holyPower',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [5923, 5924, 5925, 5926, 25829],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'lightsGrace',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [31833, 31835],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'holyShock',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [20473],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'blessedLife',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [31828],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'sacredCleansing',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [53551],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'holyGuidance',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [31837],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'divineIllumination',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [31842],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'judgementsOfThePure',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [53671, 53673, 54151, 54154, 54155],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'infusionOfLight',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 9,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [53569, 53576],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'enlightenedJudgements',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 9,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [53556],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'beaconOfLight',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 10,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [53563],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tname: 'Protection',\n\t\tbackgroundUrl: 'https://wow.zamimg.com/images/wow/talents/backgrounds/classic/383.jpg',\n\t\ttalents: [\n\t\t\t{\n\t\t\t\tfieldName: 'divinity',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [63646],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'divineStrength',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [20262],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'stoicism',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [31844, 31845, 53519],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'guardiansFavor',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [20174],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'anticipation',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [20096],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'divineSacrifice',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [64205],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedRighteousFury',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [20468],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'toughness',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [20143],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'divineGuardian',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [53527, 53530],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedHammerOfJustice',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [20487],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedDevotionAura',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [20138],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'blessingOfSanctuary',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [20911],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'reckoning',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [20177, 20179, 20181, 20180, 20182],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'sacredDuty',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [31848],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'oneHandedWeaponSpecialization',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [20196],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'spiritualAttunement',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [31785, 33776],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'holyShield',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [20925],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'ardentDefender',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [31850],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'redoubt',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [20127, 20130, 20135],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'combatExpertise',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [31858],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'touchedByTheLight',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [53590],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'avengersShield',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [31935],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'guardedByTheLight',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [53583, 53585],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'shieldOfTheTemplar',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 9,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [53709],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'judgementsOfTheJust',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 9,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [53695],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'hammerOfTheRighteous',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 10,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [53595],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tname: 'Retribution',\n\t\tbackgroundUrl: 'https://wow.zamimg.com/images/wow/talents/backgrounds/classic/381.jpg',\n\t\ttalents: [\n\t\t\t{\n\t\t\t\tfieldName: 'deflection',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [20060],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'benediction',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [20101],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedJudgements',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [25956],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'heartOfTheCrusader',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [20335],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedBlessingOfMight',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [20042, 20045],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'vindication',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [9452, 26016],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'conviction',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [20117],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'sealOfCommand',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [20375],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'pursuitOfJustice',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 3,\n\t\t\t\t},\n\t\t\t\tspellIds: [26022],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'eyeForAnEye',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [9799, 25988],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'sanctityOfBattle',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [32043, 35396, 35397],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'crusade',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 3,\n\t\t\t\t},\n\t\t\t\tspellIds: [31866],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'twoHandedWeaponSpecialization',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [20111],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'sanctifiedRetribution',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [31869],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'vengeance',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [20049, 20056, 20057],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'divinePurpose',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [31871],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'theArtOfWar',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [53486, 53488],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'repentance',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [20066],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'judgementsOfTheWise',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [31876],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'fanaticism',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [31879],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'sanctifiedWrath',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [53375],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'swiftRetribution',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [53379, 53484, 53648],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'crusaderStrike',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [35395],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'sheathOfLight',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [53501],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'righteousVengeance',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 9,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [53380],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'divineStorm',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 10,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [53385],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t],\n\t},\n]);\n\nexport const paladinGlyphsConfig: GlyphsConfig = {\n\tmajorGlyphs: {\n\t\t[PaladinMajorGlyph.GlyphOfAvengerSShield]: {\n\t\t\tname: 'Glyph of Avenger\\'s Shield',\n\t\t\tdescription: 'Your Avenger\\'s Shield hits 2 fewer targets, but for 100% more damage.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_avengersshield.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfAvengingWrath]: {\n\t\t\tname: 'Glyph of Avenging Wrath',\n\t\t\tdescription: 'Reduces the cooldown of your Hammer of Wrath spell by 50% while Avenging Wrath is active.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_avenginewrath.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfBeaconOfLight]: {\n\t\t\tname: 'Glyph of Beacon of Light',\n\t\t\tdescription: 'Increases the duration of Beacon of Light by 30 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_paladin_beaconoflight.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfCleansing]: {\n\t\t\tname: 'Glyph of Cleansing',\n\t\t\tdescription: 'Reduces the mana cost of your Cleanse and Purify spells by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_purify.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfConsecration]: {\n\t\t\tname: 'Glyph of Consecration',\n\t\t\tdescription: 'Increases the duration and cooldown of Consecration by 2 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_innerfire.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfCrusaderStrike]: {\n\t\t\tname: 'Glyph of Crusader Strike',\n\t\t\tdescription: 'Reduces the mana cost of your Crusader Strike ability by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_crusaderstrike.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfDivinePlea]: {\n\t\t\tname: 'Glyph of Divine Plea',\n\t\t\tdescription: 'While Divine Plea is active, you take 3% reduced damage from all sources.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_aspiration.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfDivineStorm]: {\n\t\t\tname: 'Glyph of Divine Storm',\n\t\t\tdescription: 'Your Divine Storm now heals for an additional 15% of the damage it causes.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_paladin_divinestorm.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfDivinity]: {\n\t\t\tname: 'Glyph of Divinity',\n\t\t\tdescription: 'Your Lay on Hands grants twice as much mana as normal and also grants you as much mana as it grants your target.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_layonhands.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfExorcism]: {\n\t\t\tname: 'Glyph of Exorcism',\n\t\t\tdescription: 'Increases damage done by Exorcism by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_excorcism_02.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfFlashOfLight]: {\n\t\t\tname: 'Glyph of Flash of Light',\n\t\t\tdescription: 'Your Flash of Light has an additional 5% critical strike chance.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_flashheal.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfHammerOfJustice]: {\n\t\t\tname: 'Glyph of Hammer of Justice',\n\t\t\tdescription: 'Increases your Hammer of Justice range by 5 yards.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_sealofmight.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfHammerOfTheRighteous]: {\n\t\t\tname: 'Glyph of Hammer of the Righteous',\n\t\t\tdescription: 'Your Hammer of the Righteous hits 1 additional target.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_paladin_hammeroftherighteous.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfHammerOfWrath]: {\n\t\t\tname: 'Glyph of Hammer of Wrath',\n\t\t\tdescription: 'Reduces the mana cost of Hammer of Wrath by 100%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_thunderclap.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfHolyLight]: {\n\t\t\tname: 'Glyph of Holy Light',\n\t\t\tdescription: 'Your Holy Light grants 10% of its heal amount to up to 5 friendly targets within 8 yards of the initial target.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_holybolt.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfHolyShock]: {\n\t\t\tname: 'Glyph of Holy Shock',\n\t\t\tdescription: 'Reduces the cooldown of Holy Shock by 1 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_searinglight.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfHolyWrath]: {\n\t\t\tname: 'Glyph of Holy Wrath',\n\t\t\tdescription: 'Reduces the cooldown of your Holy Wrath spell by 15 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_excorcism.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfJudgement]: {\n\t\t\tname: 'Glyph of Judgement',\n\t\t\tdescription: 'Your Judgements deal 10% more damage.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_paladin_judgementred.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfRighteousDefense]: {\n\t\t\tname: 'Glyph of Righteous Defense',\n\t\t\tdescription: 'Increases the chance for your Righteous Defense and Hand of Reckoning abilities to work successfully by 8% on each target.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_shoulder_37.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfSalvation]: {\n\t\t\tname: 'Glyph of Salvation',\n\t\t\tdescription: 'When you cast Hand of Salvation on yourself, it also reduces damage taken by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_sealofsalvation.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfSealOfCommand]: {\n\t\t\tname: 'Glyph of Seal of Command',\n\t\t\tdescription: 'You gain 8% of your base mana each time you use a Judgement with Seal of Command active.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_innerrage.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfSealOfLight]: {\n\t\t\tname: 'Glyph of Seal of Light',\n\t\t\tdescription: 'While Seal of Light is active, the effect of your healing spells is increased by 5%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_healingaura.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfSealOfRighteousness]: {\n\t\t\tname: 'Glyph of Seal of Righteousness',\n\t\t\tdescription: 'Increases the damage done by Seal of Righteousness by 10%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_thunderbolt.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfSealOfVengeance]: {\n\t\t\tname: 'Glyph of Seal of Vengeance',\n\t\t\tdescription: 'Your Seal of Vengeance or Seal of Corruption also grants 10 expertise while active.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_sealofvengeance.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfSealOfWisdom]: {\n\t\t\tname: 'Glyph of Seal of Wisdom',\n\t\t\tdescription: 'While Seal of Wisdom is active, the cost of your healing spells is reduced by 5%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_righteousnessaura.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfShieldOfRighteousness]: {\n\t\t\tname: 'Glyph of Shield of Righteousness',\n\t\t\tdescription: 'Reduces the mana cost of Shield of Righteousness by 80%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_paladin_shieldofvengeance.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfSpiritualAttunement]: {\n\t\t\tname: 'Glyph of Spiritual Attunement',\n\t\t\tdescription: 'Increases the amount of mana gained from your Spiritual Attunement spell by an additional 2%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_revivechampion.jpg',\n\t\t},\n\t\t[PaladinMajorGlyph.GlyphOfTurnEvil]: {\n\t\t\tname: 'Glyph of Turn Evil',\n\t\t\tdescription: 'Reduces the casting time of your Turn Evil spell by 100%, but increases the cooldown by 8 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_turnundead.jpg',\n\t\t},\n\t},\n\tminorGlyphs: {\n\t\t[PaladinMinorGlyph.GlyphOfBlessingOfKings]: {\n\t\t\tname: 'Glyph of Blessing of Kings',\n\t\t\tdescription: 'Reduces the mana cost of your Blessing of Kings and Greater Blessing of Kings spells by 50%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_magic_magearmor.jpg',\n\t\t},\n\t\t[PaladinMinorGlyph.GlyphOfBlessingOfMight]: {\n\t\t\tname: 'Glyph of Blessing of Might',\n\t\t\tdescription: 'Increases the duration of your Blessing of Might spell by 20 min when cast on yourself.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_fistofjustice.jpg',\n\t\t},\n\t\t[PaladinMinorGlyph.GlyphOfBlessingOfWisdom]: {\n\t\t\tname: 'Glyph of Blessing of Wisdom',\n\t\t\tdescription: 'Increases the duration of your Blessing of Wisdom spell by 20 min when cast on yourself.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_sealofwisdom.jpg',\n\t\t},\n\t\t[PaladinMinorGlyph.GlyphOfLayOnHands]: {\n\t\t\tname: 'Glyph of Lay on Hands',\n\t\t\tdescription: 'Reduces the cooldown of your Lay on Hands spell by 5 min.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_layonhands.jpg',\n\t\t},\n\t\t[PaladinMinorGlyph.GlyphOfSenseUndead]: {\n\t\t\tname: 'Glyph of Sense Undead',\n\t\t\tdescription: 'Damage against Undead increased by 1% while your Sense Undead ability is active.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_senseundead.jpg',\n\t\t},\n\t\t[PaladinMinorGlyph.GlyphOfTheWise]: {\n\t\t\tname: 'Glyph of the Wise',\n\t\t\tdescription: 'Reduces the mana cost of your Seal of Wisdom spell by 50%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_righteousnessaura.jpg',\n\t\t},\n\t},\n};\n","import { PriestTalents, PriestMajorGlyph, PriestMinorGlyph } from '../proto/priest.js';\n\nimport { GlyphsConfig } from './glyphs_picker.js';\nimport { TalentsConfig, newTalentsConfig } from './talents_picker.js';\n\nexport const priestTalentsConfig: TalentsConfig<PriestTalents> = newTalentsConfig([\n\t{\n\t\tname: \"Discipline\",\n\t\tbackgroundUrl: \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/201.jpg\",\n\t\ttalents: [\n\t\t\t{\n\t\t\t\tfieldName: \"unbreakableWill\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14522,\n\t\t\t\t\t14788,\n\t\t\t\t\t14789,\n\t\t\t\t\t14790,\n\t\t\t\t\t14791\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"twinDisciplines\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47586,\n\t\t\t\t\t47587,\n\t\t\t\t\t47588,\n\t\t\t\t\t52802,\n\t\t\t\t\t52803\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"silentResolve\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14523,\n\t\t\t\t\t14784,\n\t\t\t\t\t14785\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedInnerFire\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14747,\n\t\t\t\t\t14770,\n\t\t\t\t\t14771\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedPowerWordFortitude\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14749,\n\t\t\t\t\t14767\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"martyrdom\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 3\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14531,\n\t\t\t\t\t14774\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"meditation\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14521,\n\t\t\t\t\t14776,\n\t\t\t\t\t14777\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"innerFocus\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14751\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedPowerWordShield\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14748,\n\t\t\t\t\t14768,\n\t\t\t\t\t14769\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"absolution\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t33167,\n\t\t\t\t\t33171,\n\t\t\t\t\t33172\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"mentalAgility\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14520,\n\t\t\t\t\t14780,\n\t\t\t\t\t14781\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedManaBurn\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 3\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14750,\n\t\t\t\t\t14772\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"reflectiveShield\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t33201,\n\t\t\t\t\t33202\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"mentalStrength\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18551,\n\t\t\t\t\t18552,\n\t\t\t\t\t18553,\n\t\t\t\t\t18554,\n\t\t\t\t\t18555\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"soulWarding\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t63574\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"focusedPower\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t33186,\n\t\t\t\t\t33190\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"enlightenment\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t34908,\n\t\t\t\t\t34909,\n\t\t\t\t\t34910\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"focusedWill\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t45234,\n\t\t\t\t\t45243,\n\t\t\t\t\t45244\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"powerInfusion\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t10060\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedFlashHeal\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t63504,\n\t\t\t\t\t63505,\n\t\t\t\t\t63506\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"renewedHope\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t57470,\n\t\t\t\t\t57472\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"rapture\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47535,\n\t\t\t\t\t47536,\n\t\t\t\t\t47537\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"aspiration\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47507,\n\t\t\t\t\t47508\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"divineAegis\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47509,\n\t\t\t\t\t47511,\n\t\t\t\t\t47515\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"painSuppression\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t33206\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"grace\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47516,\n\t\t\t\t\t47517\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"borrowedTime\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 9,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t52795,\n\t\t\t\t\t52797,\n\t\t\t\t\t52798,\n\t\t\t\t\t52799,\n\t\t\t\t\t52800\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"penance\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 10,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47540\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tname: \"Holy\",\n\t\tbackgroundUrl: \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/202.jpg\",\n\t\ttalents: [\n\t\t\t{\n\t\t\t\tfieldName: \"healingFocus\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14913,\n\t\t\t\t\t15012\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedRenew\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14908,\n\t\t\t\t\t15020,\n\t\t\t\t\t17191\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"holySpecialization\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14889,\n\t\t\t\t\t15008,\n\t\t\t\t\t15009,\n\t\t\t\t\t15010,\n\t\t\t\t\t15011\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"spellWarding\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t27900,\n\t\t\t\t\t27901,\n\t\t\t\t\t27902,\n\t\t\t\t\t27903,\n\t\t\t\t\t27904\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"divineFury\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18530,\n\t\t\t\t\t18531,\n\t\t\t\t\t18533,\n\t\t\t\t\t18534,\n\t\t\t\t\t18535\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"desperatePrayer\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t19236\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"blessedRecovery\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t27811,\n\t\t\t\t\t27815,\n\t\t\t\t\t27816\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"inspiration\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 3\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14892,\n\t\t\t\t\t15362,\n\t\t\t\t\t15363\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"holyReach\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t27789,\n\t\t\t\t\t27790\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedHealing\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14912,\n\t\t\t\t\t15013,\n\t\t\t\t\t15014\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"searingLight\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14909,\n\t\t\t\t\t15017\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"healingPrayers\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14911,\n\t\t\t\t\t15018\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"spiritOfRedemption\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t20711\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"spiritualGuidance\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14901,\n\t\t\t\t\t15028,\n\t\t\t\t\t15029,\n\t\t\t\t\t15030,\n\t\t\t\t\t15031\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"surgeOfLight\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t33150,\n\t\t\t\t\t33154\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"spiritualHealing\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14898,\n\t\t\t\t\t15349,\n\t\t\t\t\t15354,\n\t\t\t\t\t15355,\n\t\t\t\t\t15356\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"holyConcentration\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t34753,\n\t\t\t\t\t34859,\n\t\t\t\t\t34860\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"lightwell\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t724\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"blessedResilience\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t33142,\n\t\t\t\t\t33145,\n\t\t\t\t\t33146\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"bodyAndSoul\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t64127,\n\t\t\t\t\t64129\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"empoweredHealing\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t33158,\n\t\t\t\t\t33159,\n\t\t\t\t\t33160,\n\t\t\t\t\t33161,\n\t\t\t\t\t33162\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"serendipity\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t63730,\n\t\t\t\t\t63733,\n\t\t\t\t\t63737\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"empoweredRenew\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t63534,\n\t\t\t\t\t63542,\n\t\t\t\t\t63543\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"circleOfHealing\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t34861\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"testOfFaith\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47558,\n\t\t\t\t\t47559,\n\t\t\t\t\t47560\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"divineProvidence\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 9,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47562,\n\t\t\t\t\t47564,\n\t\t\t\t\t47565,\n\t\t\t\t\t47566,\n\t\t\t\t\t47567\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"guardianSpirit\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 10,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47788\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tname: \"Shadow\",\n\t\tbackgroundUrl: \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/203.jpg\",\n\t\ttalents: [\n\t\t\t{\n\t\t\t\tfieldName: \"spiritTap\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t15270,\n\t\t\t\t\t15335,\n\t\t\t\t\t15336\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedSpiritTap\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t15337,\n\t\t\t\t\t15338\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2,\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"darkness\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t15259,\n\t\t\t\t\t15307,\n\t\t\t\t\t15308,\n\t\t\t\t\t15309,\n\t\t\t\t\t15310\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"shadowAffinity\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t15318,\n\t\t\t\t\t15272,\n\t\t\t\t\t15320\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedShadowWordPain\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t15275,\n\t\t\t\t\t15317\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"shadowFocus\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t15260,\n\t\t\t\t\t15327,\n\t\t\t\t\t15328\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedPsychicScream\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t15392,\n\t\t\t\t\t15448\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedMindBlast\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t15273,\n\t\t\t\t\t15312,\n\t\t\t\t\t15313,\n\t\t\t\t\t15314,\n\t\t\t\t\t15316\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"mindFlay\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t15407\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"veiledShadows\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t15274,\n\t\t\t\t\t15311\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"shadowReach\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t17322,\n\t\t\t\t\t17323\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"shadowWeaving\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 3\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t15257,\n\t\t\t\t\t15331,\n\t\t\t\t\t15332\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"silence\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t15487\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"vampiricEmbrace\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t15286\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedVampiricEmbrace\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t27839,\n\t\t\t\t\t27840\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"focusedMind\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 3\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t33213,\n\t\t\t\t\t33214,\n\t\t\t\t\t33215\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"mindMelt\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t14910,\n\t\t\t\t\t33371\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedDevouringPlague\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t63625,\n\t\t\t\t\t63626,\n\t\t\t\t\t63627\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"shadowform\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t15473\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"shadowPower\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t33221,\n\t\t\t\t\t33222,\n\t\t\t\t\t33223,\n\t\t\t\t\t33224,\n\t\t\t\t\t33225\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedShadowform\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47569,\n\t\t\t\t\t47570\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"misery\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t33191,\n\t\t\t\t\t33192,\n\t\t\t\t\t33193\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"psychicHorror\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t64044\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"vampiricTouch\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t34914\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"painAndSuffering\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47580,\n\t\t\t\t\t47581,\n\t\t\t\t\t47582\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"twistedFaith\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 9,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47573,\n\t\t\t\t\t47577,\n\t\t\t\t\t47578,\n\t\t\t\t\t51166,\n\t\t\t\t\t51167\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"dispersion\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 10,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47585\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n]);\n\nexport const priestGlyphsConfig: GlyphsConfig = {\n\tmajorGlyphs: {\n\t\t[PriestMajorGlyph.GlyphOfCircleOfHealing]: {\n\t\t\tname: 'Glyph of Circle of Healing',\n\t\t\tdescription: 'Your Circle of Healing spell heals 1 additional target.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_circleofrenewal.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfDispelMagic]: {\n\t\t\tname: 'Glyph of Dispel Magic',\n\t\t\tdescription: 'Your Dispel Magic spell also heals your target for 3% of maximum health.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_dispelmagic.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfDispersion]: {\n\t\t\tname: 'Glyph of Dispersion',\n\t\t\tdescription: 'Reduces the cooldown on Dispersion by 45 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_dispersion.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfFade]: {\n\t\t\tname: 'Glyph of Fade',\n\t\t\tdescription: 'Reduces the cooldown of your Fade spell by 9 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_magic_lesserinvisibilty.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfFearWard]: {\n\t\t\tname: 'Glyph of Fear Ward',\n\t\t\tdescription: 'Reduces cooldown and duration of Fear Ward by 60 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_excorcism.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfFlashHeal]: {\n\t\t\tname: 'Glyph of Flash Heal',\n\t\t\tdescription: 'Reduces the mana cost of your Flash Heal by 10%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_flashheal.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfGuardianSpirit]: {\n\t\t\tname: 'Glyph of Guardian Spirit',\n\t\t\tdescription: 'If your Guardian Spirit lasts its entire duration without being triggered, the cooldown is reset to 1 min.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_guardianspirit.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfHolyNova]: {\n\t\t\tname: 'Glyph of Holy Nova',\n\t\t\tdescription: 'Increases the damage and healing of your Holy Nova spell by an additional 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_holynova.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfHymnOfHope]: {\n\t\t\tname: 'Glyph of Hymn of Hope',\n\t\t\tdescription: 'Your Hymn of Hope lasts an additional 2 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_symbolofhope.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfInnerFire]: {\n\t\t\tname: 'Glyph of Inner Fire',\n\t\t\tdescription: 'Increases the armor from your Inner Fire spell by 50%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_innerfire.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfLightwell]: {\n\t\t\tname: 'Glyph of Lightwell',\n\t\t\tdescription: 'Increases the amount healed by your Lightwell by 20%',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_summonlightwell.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfMassDispel]: {\n\t\t\tname: 'Glyph of Mass Dispel',\n\t\t\tdescription: 'Reduces the mana cost of Mass Dispel by 35%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_arcane_massdispel.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfMindControl]: {\n\t\t\tname: 'Glyph of Mind Control',\n\t\t\tdescription: 'Reduces the chance targets will resist or break your Mind Control spell by an additional 17%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_shadowworddominate.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfMindFlay]: {\n\t\t\tname: 'Glyph of Mind Flay',\n\t\t\tdescription: 'Increases the damage done by your Mind Flay spell by 10% when your target is afflicted with Shadow Word: Pain.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_siphonmana.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfMindSear]: {\n\t\t\tname: 'Glyph of Mind Sear',\n\t\t\tdescription: 'Increases the radius of effect on Mind Sear by 5 yards.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_mindshear.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfPainSuppression]: {\n\t\t\tname: 'Glyph of Pain Suppression',\n\t\t\tdescription: 'Allows Pain Suppression to be cast while stunned.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_painsupression.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfPenance]: {\n\t\t\tname: 'Glyph of Penance',\n\t\t\tdescription: 'Reduces the cooldown of Penance by 2 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_penance.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfPowerWordShield]: {\n\t\t\tname: 'Glyph of Power Word: Shield',\n\t\t\tdescription: 'Your Power Word: Shield also heals the target for 20% of the absorption amount.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_powerwordshield.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfPrayerOfHealing]: {\n\t\t\tname: 'Glyph of Prayer of Healing',\n\t\t\tdescription: 'Your Prayer of Healing spell also heals an additional 20% of its initial heal over 6 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_prayerofhealing02.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfPsychicScream]: {\n\t\t\tname: 'Glyph of Psychic Scream',\n\t\t\tdescription: 'Increases the duration of your Psychic Scream by 2 sec. and increases its cooldown by 8 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_psychicscream.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfRenew]: {\n\t\t\tname: 'Glyph of Renew',\n\t\t\tdescription: 'Reduces the duration of your Renew by 3 sec. but increases the amount healed each tick by 25%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_renew.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfScourgeImprisonment]: {\n\t\t\tname: 'Glyph of Scourge Imprisonment',\n\t\t\tdescription: 'Reduces the cast time of your Shackle Undead by 1.0 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_slow.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfShadow]: {\n\t\t\tname: 'Glyph of Shadow',\n\t\t\tdescription: 'While in Shadowform, your non-periodic spell critical strikes increase your spell power by 30% of your Spirit for 10 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_mindsooth.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfShadowWordDeath]: {\n\t\t\tname: 'Glyph of Shadow Word: Death',\n\t\t\tdescription: 'Targets below 35% health take an additional 10% damage from your Shadow Word: Death spell.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_demonicfortitude.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfShadowWordPain]: {\n\t\t\tname: 'Glyph of Shadow Word: Pain',\n\t\t\tdescription: 'The periodic damage ticks of your Shadow Word: Pain spell restore 1% of your base mana.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_shadowwordpain.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfSmite]: {\n\t\t\tname: 'Glyph of Smite',\n\t\t\tdescription: 'Your Smite spell inflicts an additional 20% damage against targets afflicted by Holy Fire.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_holysmite.jpg',\n\t\t},\n\t\t[PriestMajorGlyph.GlyphOfSpiritOfRedemption]: {\n\t\t\tname: 'Glyph of Spirit of Redemption',\n\t\t\tdescription: 'Increases the duration of Spirit of Redemption by 6 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_enchant_essenceeternallarge.jpg',\n\t\t},\n\t},\n\tminorGlyphs: {\n\t\t[PriestMinorGlyph.GlyphOfFading]: {\n\t\t\tname: 'Glyph of Fading',\n\t\t\tdescription: 'Reduces the mana cost of your Fade spell by 30%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_magic_lesserinvisibilty.jpg',\n\t\t},\n\t\t[PriestMinorGlyph.GlyphOfFortitude]: {\n\t\t\tname: 'Glyph of Fortitude',\n\t\t\tdescription: 'Reduces the mana cost of your Power Word: Fortitude and Prayer of Fortitude spells by 50%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_wordfortitude.jpg',\n\t\t},\n\t\t[PriestMinorGlyph.GlyphOfLevitate]: {\n\t\t\tname: 'Glyph of Levitate',\n\t\t\tdescription: 'Your Levitate spell no longer requires a reagent.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_layonhands.jpg',\n\t\t},\n\t\t[PriestMinorGlyph.GlyphOfShackleUndead]: {\n\t\t\tname: 'Glyph of Shackle Undead',\n\t\t\tdescription: 'Increases the range of your Shackle Undead spell by 5 yards.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_slow.jpg',\n\t\t},\n\t\t[PriestMinorGlyph.GlyphOfShadowProtection]: {\n\t\t\tname: 'Glyph of Shadow Protection',\n\t\t\tdescription: 'Increases the duration of your Shadow Protection and Prayer of Shadow Protection spells by 10 min.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_antishadow.jpg',\n\t\t},\n\t\t[PriestMinorGlyph.GlyphOfShadowfiend]: {\n\t\t\tname: 'Glyph of Shadowfiend',\n\t\t\tdescription: 'Receive 5% of your maximum mana if your Shadowfiend dies from damage.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_shadowfiend.jpg',\n\t\t},\n\t},\n};\n","import { RogueTalents, RogueMajorGlyph, RogueMinorGlyph } from '../proto/rogue.js';\n\nimport { GlyphsConfig } from './glyphs_picker.js';\nimport { TalentsConfig, newTalentsConfig } from './talents_picker.js';\n\nexport const rogueTalentsConfig: TalentsConfig<RogueTalents> = newTalentsConfig([\n\t{\n\t\tname: 'Assassination',\n\t\tbackgroundUrl: 'https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/182.jpg',\n\t\ttalents: [\n\t\t\t{\n\t\t\t\tfieldName: 'improvedEviscerate',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [14162],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'remorselessAttacks',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [14144, 14148],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'malice',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [14138],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'ruthlessness',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [14156, 14160],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'bloodSpatter',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [51632, 51633],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'puncturingWounds',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 3,\n\t\t\t\t},\n\t\t\t\tspellIds: [13733, 13865],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'vigor',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [14983],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedExposeArmor',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [14168],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'lethality',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [14128, 14132, 14135],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'vilePoisons',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [16513, 16514, 16515],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedPoisons',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [14113, 14114, 14115, 14116, 14117],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'fleetFooted',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [31208],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'coldBlood',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [14177],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedKidneyShot',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [14174],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'quickRecovery',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 3,\n\t\t\t\t},\n\t\t\t\tspellIds: [31244],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'sealFate',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [14186, 14190, 14193],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'murder',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [14158, 14159],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'deadlyBrew',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [51625, 51626],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'overkill',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [58426],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'deadenedNerves',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [31380, 31382, 31383],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'focusedAttacks',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [51634, 51635, 51636],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'findWeakness',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [31234, 31235, 31236],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'masterPoisoner',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [31226, 31227, 58410],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'mutilate',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [1329],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'turnTheTables',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [51627, 51628, 51629],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'cutToTheChase',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 9,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [51664, 51665, 51666, 51667, 51668],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'hungerForBlood',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 10,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [51662],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tname: 'Combat',\n\t\tbackgroundUrl: 'https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/181.jpg',\n\t\ttalents: [\n\t\t\t{\n\t\t\t\tfieldName: 'improvedGouge',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [13741, 13793, 13792],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedSinisterStrike',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [13732, 13863],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'dualWieldSpecialization',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [13715, 13848, 13849, 13851, 13852],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedSliceAndDice',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [14165, 14166],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'deflection',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [13713, 13853, 13854],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'precision',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 3,\n\t\t\t\t},\n\t\t\t\tspellIds: [13705, 13832, 13843, 13844, 13845],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'endurance',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [13742, 13872],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'riposte',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [14251],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'closeQuartersCombat',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [13706, 13804, 13805, 13806, 13807],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedKick',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [13754, 13867],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedSprint',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [13743, 13875],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'lightningReflexes',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [13712, 13788, 13789],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'aggression',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 3,\n\t\t\t\t},\n\t\t\t\tspellIds: [18427, 18428, 18429, 61330, 61331],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'maceSpecialization',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [13709, 13800, 13801, 13802, 13803],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'bladeFlurry',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [13877],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'hackAndSlash',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [13960, 13961, 13962, 13963, 13964],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'weaponExpertise',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [30919],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'bladeTwisting',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [31124, 31126],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'vitality',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [31122, 31123, 61329],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'adrenalineRush',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [13750],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'nervesOfSteel',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [31130],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'throwingSpecialization',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [5952, 51679],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'combatPotency',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [35541, 35550, 35551, 35552, 35553],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'unfairAdvantage',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [51672, 51674],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'surpriseAttacks',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [32601],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'savageCombat',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [51682, 58413],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'preyOnTheWeak',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 9,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [51685, 51686, 51687, 51688, 51689],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'killingSpree',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 10,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [51690],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tname: 'Subtlety',\n\t\tbackgroundUrl: 'https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/183.jpg',\n\t\ttalents: [\n\t\t\t{\n\t\t\t\tfieldName: 'relentlessStrikes',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [14179, 58422, 58423, 58424, 58425],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'masterOfDeception',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [13958, 13970, 13971],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'opportunity',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [14057, 14072],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'sleightOfHand',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [30892, 30893],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'dirtyTricks',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [14076, 14094],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'camouflage',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [13975, 14062, 14603],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'elusiveness',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [13981, 14066],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'ghostlyStrike',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [14278],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'serratedBlades',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [14171, 14172, 14173],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'setup',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [13983, 14070, 14071],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'initiative',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [13976, 13979, 13980],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedAmbush',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [14079, 14080],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'heightenedSenses',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [30894, 30895],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'preparation',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [14185],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'dirtyDeeds',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [14082, 14083],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'hemorrhage',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 3,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [16511],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'masterOfSubtlety',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [31221, 31222, 31223],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'deadliness',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [30902, 30903, 30904, 30905, 30906],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'envelopingShadows',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [31211, 31212, 31213],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'premeditation',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [14183],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'cheatDeath',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [31228, 31229, 31230],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'sinisterCalling',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [31216, 31217, 31218, 31219, 31220],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'waylay',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [51692, 51696],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'honorAmongThieves',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [51698, 51670, 51671],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'shadowstep',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [36554],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'filthyTricks',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [36554],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'slaughterFromTheShadows',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 9,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [51708, 51709, 51710, 51711, 51712],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'shadowDance',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 10,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [51713],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t],\n\t},\n]);\n\nexport const rogueGlyphsConfig: GlyphsConfig = {\n\tmajorGlyphs: {\n\t\t[RogueMajorGlyph.GlyphOfAdrenalineRush]: {\n\t\t\tname: 'Glyph of Adrenaline Rush',\n\t\t\tdescription: 'Increases the duration of Adrenaline Rush by 5 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_shadowworddominate.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfAmbush]: {\n\t\t\tname: 'Glyph of Ambush',\n\t\t\tdescription: 'Increases the range on Ambush by 5 yards.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_ambush.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfBackstab]: {\n\t\t\tname: 'Glyph of Backstab',\n\t\t\tdescription: 'Your Backstab increases the duration of your Rupture effect on the target by 2 sec, up to a maximum of 6 additional sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_backstab.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfBladeFlurry]: {\n\t\t\tname: 'Glyph of Blade Flurry',\n\t\t\tdescription: 'Reduces the energy cost of Blade Flurry by 100%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_punishingblow.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfCloakOfShadows]: {\n\t\t\tname: 'Glyph of Cloak of Shadows',\n\t\t\tdescription: 'While Cloak of Shadows is active, you take 40% less physical damage.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_nethercloak.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfCripplingPoison]: {\n\t\t\tname: 'Glyph of Crippling Poison',\n\t\t\tdescription: 'Increases the chance to inflict your target with Crippling Poison by an additional 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_poisonsting.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfDeadlyThrow]: {\n\t\t\tname: 'Glyph of Deadly Throw',\n\t\t\tdescription: 'Increases the slowing effect on Deadly Throw by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_throwingknife_06.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfEvasion]: {\n\t\t\tname: 'Glyph of Evasion',\n\t\t\tdescription: 'Increases the duration of Evasion by 5 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_shadowward.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfEviscerate]: {\n\t\t\tname: 'Glyph of Eviscerate',\n\t\t\tdescription: 'Increases the critical strike chance of Eviscerate by 10%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_eviscerate.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfExposeArmor]: {\n\t\t\tname: 'Glyph of Expose Armor',\n\t\t\tdescription: 'Increases the duration of Expose Armor by 12 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_riposte.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfFanOfKnives]: {\n\t\t\tname: 'Glyph of Fan of Knives',\n\t\t\tdescription: 'Increases the damage done by Fan of Knives by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_fanofknives.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfFeint]: {\n\t\t\tname: 'Glyph of Feint',\n\t\t\tdescription: 'Reduces the energy cost of Feint by 20.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_feint.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfGarrote]: {\n\t\t\tname: 'Glyph of Garrote',\n\t\t\tdescription: 'Reduces the duration of your Garrote ability by 3 sec and increases the total damage it deals by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_garrote.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfGhostlyStrike]: {\n\t\t\tname: 'Glyph of Ghostly Strike',\n\t\t\tdescription: 'Increases the damage dealt by Ghostly Strike by 40% and the duration of its effect by 4 sec, but increases its cooldown by 10 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_curse.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfGouge]: {\n\t\t\tname: 'Glyph of Gouge',\n\t\t\tdescription: 'Reduces the energy cost of Gouge by 15.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_gouge.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfHemorrhage]: {\n\t\t\tname: 'Glyph of Hemorrhage',\n\t\t\tdescription: 'Increases the damage bonus against targets afflicted by Hemorrhage by 40%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_lifedrain.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfHungerForBlood]: {\n\t\t\tname: 'Glyph of Hunger For Blood',\n\t\t\tdescription: 'Increases the bonus damage from Hunger For Blood by 3%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_hungerforblood.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfKillingSpree]: {\n\t\t\tname: 'Glyph of Killing Spree',\n\t\t\tdescription: 'Reduces the cooldown on Killing Spree by 45 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_murderspree.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfMutilate]: {\n\t\t\tname: 'Glyph of Mutilate',\n\t\t\tdescription: 'Reduces the cost of Mutilate by 5 energy.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_shadowstrikes.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfPreparation]: {\n\t\t\tname: 'Glyph of Preparation',\n\t\t\tdescription: 'Your Preparation ability also instantly resets the cooldown of Blade Flurry, Dismantle, and Kick.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_antishadow.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfRupture]: {\n\t\t\tname: 'Glyph of Rupture',\n\t\t\tdescription: 'Increases the duration of Rupture by 4 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_rupture.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfSap]: {\n\t\t\tname: 'Glyph of Sap',\n\t\t\tdescription: 'Increases the duration of Sap by 20 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_sap.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfShadowDance]: {\n\t\t\tname: 'Glyph of Shadow Dance',\n\t\t\tdescription: 'Increases the duration of Shadow Dance by 2 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_shadowdance.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfSinisterStrike]: {\n\t\t\tname: 'Glyph of Sinister Strike',\n\t\t\tdescription: 'Your Sinister Strike critical strikes have a 50% chance to add an additional combo point.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_ritualofsacrifice.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfSliceAndDice]: {\n\t\t\tname: 'Glyph of Slice and Dice',\n\t\t\tdescription: 'Increases the duration of Slice and Dice by 3 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_slicedice.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfSprint]: {\n\t\t\tname: 'Glyph of Sprint',\n\t\t\tdescription: 'Increases the movement speed of your Sprint ability by an additional 30%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_sprint.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfTricksOfTheTrade]: {\n\t\t\tname: 'Glyph of Tricks of the Trade',\n\t\t\tdescription: 'The bonus damage and threat redirection granted by your Tricks of the Trade ability lasts an additional 4 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_tricksofthetrade.jpg',\n\t\t},\n\t\t[RogueMajorGlyph.GlyphOfVigor]: {\n\t\t\tname: 'Glyph of Vigor',\n\t\t\tdescription: 'Vigor grants an additional 10 maximum energy.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_earthbindtotem.jpg',\n\t\t},\n\t},\n\tminorGlyphs: {\n\t\t[RogueMinorGlyph.GlyphOfBlurredSpeed]: {\n\t\t\tname: 'Glyph of Blurred Speed',\n\t\t\tdescription: 'Enables you to walk on water while your Sprint ability is active.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_sprint.jpg',\n\t\t},\n\t\t[RogueMinorGlyph.GlyphOfDistract]: {\n\t\t\tname: 'Glyph of Distract',\n\t\t\tdescription: 'Increases the range of your Distract ability by 5 yards.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_distract.jpg',\n\t\t},\n\t\t[RogueMinorGlyph.GlyphOfPickLock]: {\n\t\t\tname: 'Glyph of Pick Lock',\n\t\t\tdescription: 'Reduces the cast time of your Pick Lock ability by 100%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_moonkey.jpg',\n\t\t},\n\t\t[RogueMinorGlyph.GlyphOfPickPocket]: {\n\t\t\tname: 'Glyph of Pick Pocket',\n\t\t\tdescription: 'Increases the range of your Pick Pocket ability by 5 yards.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_misc_bag_11.jpg',\n\t\t},\n\t\t[RogueMinorGlyph.GlyphOfSafeFall]: {\n\t\t\tname: 'Glyph of Safe Fall',\n\t\t\tdescription: 'Increases the distance your Safe Fall ability allows you to fall without taking damage.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_feather_01.jpg',\n\t\t},\n\t\t[RogueMinorGlyph.GlyphOfVanish]: {\n\t\t\tname: 'Glyph of Vanish',\n\t\t\tdescription: 'Increases your movement speed by 30% while the Vanish effect is active.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_vanish.jpg',\n\t\t},\n\t},\n};\n","import { ShamanTalents, ShamanMajorGlyph, ShamanMinorGlyph } from '../proto/shaman.js';\n\nimport { GlyphsConfig } from './glyphs_picker.js';\nimport { TalentsConfig, newTalentsConfig } from './talents_picker.js';\n\nexport const shamanTalentsConfig: TalentsConfig<ShamanTalents> = newTalentsConfig([\n\t{\n\t\tname: 'Elemental',\n\t\tbackgroundUrl: 'https://wow.zamimg.com/images/wow/talents/backgrounds/classic/261.jpg',\n\t\ttalents: [\n\t\t\t{\n\t\t\t\tfieldName: 'convection',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [16039, 16109],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'concussion',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [16035, 16105],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'callOfFlame',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [16038, 16160, 16161],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'elementalWarding',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [28996, 28997, 28998],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'elementalDevastation',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [30160, 29179, 29180],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'reverberation',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [16040, 16113, 16114, 16115, 16116],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'elementalFocus',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [16164],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'elementalFury',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [16089, 60184, 60185, 60187, 60188],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedFireNova',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [16086, 16544],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'eyeOfTheStorm',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 3,\n\t\t\t\t},\n\t\t\t\tspellIds: [29062, 29064],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'elementalReach',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [28999],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'callOfThunder',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [16041],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'unrelentingStorm',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 3,\n\t\t\t\t},\n\t\t\t\tspellIds: [30664, 30665, 30666],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'elementalPrecision',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [30672, 30673, 30674],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'lightningMastery',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [16578],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'elementalMastery',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [16166],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'stormEarthAndFire',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [51483, 51485, 51486],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'boomingEchoes',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [63370, 63372],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'elementalOath',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [51466, 51470],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'lightningOverload',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [30675, 30678, 30679],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\t// fieldName: 'astralShift',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [51474, 51478, 51479],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'totemOfWrath',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [30706],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'lavaFlows',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [51480, 51481, 51482],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'shamanism',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 9,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [62097],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'thunderstorm',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 10,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [51490],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tname: 'Enhancement',\n\t\tbackgroundUrl: 'https://wow.zamimg.com/images/wow/talents/backgrounds/classic/263.jpg',\n\t\ttalents: [\n\t\t\t{\n\t\t\t\tfieldName: 'enhancingTotems',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [16259, 16295, 52456],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\t// fieldName: 'earthsGrasp',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [16043, 16130],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'ancestralKnowledge',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [17485],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'guardianTotems',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [16258, 16293],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'thunderingStrikes',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [16255, 16302],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'improvedGhostWolf',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [16262, 16287],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedShields',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 3,\n\t\t\t\t},\n\t\t\t\tspellIds: [16261, 16290, 51881],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'elementalWeapons',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [16266, 29079, 29080],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'shamanisticFocus',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [43338],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'anticipation',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 3,\n\t\t\t\t},\n\t\t\t\tspellIds: [16254, 16271],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'flurry',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [16256, 16281],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'toughness',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [16252, 16306],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedWindfuryTotem',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [29192, 29193],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'spiritWeapons',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [16268],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'mentalDexterity',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [51883],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'unleashedRage',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [30802, 30808, 30809],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'weaponMastery',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [29082, 29084, 29086],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'frozenPower',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 3,\n\t\t\t\t},\n\t\t\t\tspellIds: [63373, 63374],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'dualWieldSpecialization',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [30816, 30818],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'dualWield',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [30798],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'stormstrike',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [17364],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'staticShock',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [51525],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'lavaLash',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [60103],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedStormstrike',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [51521, 51522],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'mentalQuickness',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [30812],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'shamanisticRage',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [30823],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'earthenPower',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [51523, 51524],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'maelstromWeapon',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 9,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [51528],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'feralSpirit',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 10,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [51533],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tname: 'Restoration',\n\t\tbackgroundUrl: 'https://wow.zamimg.com/images/wow/talents/backgrounds/classic/262.jpg',\n\t\ttalents: [\n\t\t\t{\n\t\t\t\t//fieldName: 'improvedHealingWave',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [16182, 16226],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'totemicFocus',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [16173, 16222],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'improvedReincarnation',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [16184, 16209],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'healingGrace',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [29187, 29189, 29191],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'tidalFocus',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [16179, 16214],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'improvedWaterShield',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [16180, 16196, 16198],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'healingFocus',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [16181, 16230, 16232],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'tidalForce',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [55198],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'ancestralUealing',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 3,\n\t\t\t\t},\n\t\t\t\tspellIds: [16176, 16235],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'restorativeTotems',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [16187, 16205],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'tidalMastery',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [16194, 16218],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'healingWay',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [29206, 29205, 29202],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'naturesSwiftness',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [16188],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'focusedMind',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 3,\n\t\t\t\t},\n\t\t\t\tspellIds: [30864],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'purification',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [16178, 16210],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'naturesGuardian',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [30881, 30883],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'manaTideTotem',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [16190],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'cleanseSpirit',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [51886],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'blessingOfTheEternals',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [51554, 51555],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'improvedChainHeal',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [30872],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'naturesBlessing',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tspellIds: [30867],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: 'ancestralAwakening',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 0,\n\t\t\t\t},\n\t\t\t\tspellIds: [51556],\n\t\t\t\tmaxPoints: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'earthShield',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [974],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'improvedEarthShield',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 2,\n\t\t\t\t},\n\t\t\t\tprereqLocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [51560],\n\t\t\t\tmaxPoints: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'tidalWaves',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 9,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [51562],\n\t\t\t\tmaxPoints: 5,\n\t\t\t},\n\t\t\t{\n\t\t\t\t//fieldName: 'riptide',\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 10,\n\t\t\t\t\tcolIdx: 1,\n\t\t\t\t},\n\t\t\t\tspellIds: [61295],\n\t\t\t\tmaxPoints: 1,\n\t\t\t},\n\t\t],\n\t},\n]);\n\nexport const shamanGlyphsConfig: GlyphsConfig = {\n\tmajorGlyphs: {\n\t\t[ShamanMajorGlyph.GlyphOfChainHeal]: {\n\t\t\tname: 'Glyph of Chain Heal',\n\t\t\tdescription: 'Your Chain Heal heals 1 additional target.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_healingwavegreater.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfChainLightning]: {\n\t\t\tname: 'Glyph of Chain Lightning',\n\t\t\tdescription: 'Your Chain Lightning strikes 1 additional target.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_chainlightning.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfEarthShield]: {\n\t\t\tname: 'Glyph of Earth Shield',\n\t\t\tdescription: 'Increases the amount healed by your Earth Shield by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_skinofearth.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfEarthlivingWeapon]: {\n\t\t\tname: 'Glyph of Earthliving Weapon',\n\t\t\tdescription: 'Increases the chance for your Earthliving weapon to trigger by 5%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shaman_earthlivingweapon.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfElementalMastery]: {\n\t\t\tname: 'Glyph of Elemental Mastery',\n\t\t\tdescription: 'Reduces the cooldown of your Elemental Mastery ability by 30 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_wispheal.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfFeralSpirit]: {\n\t\t\tname: 'Glyph of Feral Spirit',\n\t\t\tdescription: 'Your spirit wolves gain an additional 30% of your attack power.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shaman_feralspirit.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfFireElementalTotem]: {\n\t\t\tname: 'Glyph of Fire Elemental Totem',\n\t\t\tdescription: 'Reduces the cooldown of your Fire Elemental Totem by 5 min.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_fire_elemental_totem.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfFireNova]: {\n\t\t\tname: 'Glyph of Fire Nova',\n\t\t\tdescription: 'Reduces the cooldown of your Fire Nova spell by 3 seconds.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_fire_sealoffire.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfFlameShock]: {\n\t\t\tname: 'Glyph of Flame Shock',\n\t\t\tdescription: 'Increases the critical strike damage bonus of your Flame Shock damage by 60%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_fire_flameshock.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfFlametongueWeapon]: {\n\t\t\tname: 'Glyph of Flametongue Weapon',\n\t\t\tdescription: 'Increases your spell critical strike chance by 2% on each of your weapons with Flametongue Weapon active.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_fire_flametounge.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfFrostShock]: {\n\t\t\tname: 'Glyph of Frost Shock',\n\t\t\tdescription: 'Increases the duration of your Frost Shock by 2 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_frost_frostshock.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfHealingStreamTotem]: {\n\t\t\tname: 'Glyph of Healing Stream Totem',\n\t\t\tdescription: 'Your Healing Stream Totem heals for an additional 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_spear_04.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfHealingWave]: {\n\t\t\tname: 'Glyph of Healing Wave',\n\t\t\tdescription: 'Your Healing Wave also heals you for 20% of the healing effect when you heal someone else.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_magicimmunity.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfHex]: {\n\t\t\tname: 'Glyph of Hex',\n\t\t\tdescription: 'Increases the damage your Hex target can take before the Hex effect is removed by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shaman_hex.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfLava]: {\n\t\t\tname: 'Glyph of Lava',\n\t\t\tdescription: 'Your Lava Burst spell gains an additional 10% of your spellpower.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shaman_lavaburst.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfLavaLash]: {\n\t\t\tname: 'Glyph of Lava Lash',\n\t\t\tdescription: 'Damage on your Lava Lash is increased by an additional 10% if your weapon is enchanted with Flametongue.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_shaman_lavalash.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfLesserHealingWave]: {\n\t\t\tname: 'Glyph of Lesser Healing Wave',\n\t\t\tdescription: 'Your Lesser Healing Wave heals for 20% more if the target is also affected by Earth Shield.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_healingwavelesser.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfLightningBolt]: {\n\t\t\tname: 'Glyph of Lightning Bolt',\n\t\t\tdescription: 'Increases the damage dealt by Lightning Bolt by 4%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_lightning.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfLightningShield]: {\n\t\t\tname: 'Glyph of Lightning Shield',\n\t\t\tdescription: 'Increases the damage from Lightning Shield by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_lightningshield.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfManaTide]: {\n\t\t\tname: 'Glyph of Mana Tide',\n\t\t\tdescription: 'Your Mana Tide Totem grants an additional 1% of each target\\'s maximum mana each time it pulses.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_healingwavegreater.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfRiptide]: {\n\t\t\tname: 'Glyph of Riptide',\n\t\t\tdescription: 'Increases the duration of Riptide by 6 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_riptide.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfShocking]: {\n\t\t\tname: 'Glyph of Shocking',\n\t\t\tdescription: 'Reduces your global cooldown when casting your shock spells by 0.5 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_earthshock.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfStoneclawTotem]: {\n\t\t\tname: 'Glyph of Stoneclaw Totem',\n\t\t\tdescription: 'Your Stoneclaw Totem also places a damage absorb shield on you, equal to 4 times the strength of the shield it places on your totems.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_stoneclawtotem.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfStormstrike]: {\n\t\t\tname: 'Glyph of Stormstrike',\n\t\t\tdescription: 'Increases the Nature damage bonus from your Stormstrike ability by an additional 8%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_shaman_stormstrike.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfThunder]: {\n\t\t\tname: 'Glyph of Thunder',\n\t\t\tdescription: 'Reduces the cooldown on Thunderstorm by 10 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shaman_thunderstorm.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfTotemOfWrath]: {\n\t\t\tname: 'Glyph of Totem of Wrath',\n\t\t\tdescription: 'When you cast Totem of Wrath, you gain 30% of the totem\\'s bonus spell power for 5 min.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_fire_totemofwrath.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfWaterMastery]: {\n\t\t\tname: 'Glyph of Water Mastery',\n\t\t\tdescription: 'Increases the passive mana regeneration of your Water Shield spell by 30%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_shaman_watershield.jpg',\n\t\t},\n\t\t[ShamanMajorGlyph.GlyphOfWindfuryWeapon]: {\n\t\t\tname: 'Glyph of Windfury Weapon',\n\t\t\tdescription: 'Increases the chance per swing for Windfury Weapon to trigger by 2%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_cyclone.jpg',\n\t\t},\n\t},\n\tminorGlyphs: {\n\t\t[ShamanMinorGlyph.GlyphOfAstralRecall]: {\n\t\t\tname: 'Glyph of Astral Recall',\n\t\t\tdescription: 'Cooldown of your Astral Recall spell reduced by 7.5 min.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_astralrecal.jpg',\n\t\t},\n\t\t[ShamanMinorGlyph.GlyphOfGhostWolf]: {\n\t\t\tname: 'Glyph of Ghost Wolf',\n\t\t\tdescription: 'Your Ghost Wolf form regenerates an additional 1% of your maximum health every 5 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_spiritwolf.jpg',\n\t\t},\n\t\t[ShamanMinorGlyph.GlyphOfRenewedLife]: {\n\t\t\tname: 'Glyph of Renewed Life',\n\t\t\tdescription: 'Your Reincarnation spell no longer requires a reagent.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_reincarnation.jpg',\n\t\t},\n\t\t[ShamanMinorGlyph.GlyphOfThunderstorm]: {\n\t\t\tname: 'Glyph of Thunderstorm',\n\t\t\tdescription: 'Increases the mana you receive from your Thunderstorm spell by 2%, but it no longer knocks enemies back.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shaman_thunderstorm.jpg',\n\t\t},\n\t\t[ShamanMinorGlyph.GlyphOfWaterBreathing]: {\n\t\t\tname: 'Glyph of Water Breathing',\n\t\t\tdescription: 'Your Water Breathing spell no longer requires a reagent.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_demonbreath.jpg',\n\t\t},\n\t\t[ShamanMinorGlyph.GlyphOfWaterShield]: {\n\t\t\tname: 'Glyph of Water Shield',\n\t\t\tdescription: 'Increases the number of charges on your Water Shield spell by 1.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_shaman_watershield.jpg',\n\t\t},\n\t\t[ShamanMinorGlyph.GlyphOfWaterWalking]: {\n\t\t\tname: 'Glyph of Water Walking',\n\t\t\tdescription: 'Your Water Walking spell no longer requires a reagent.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_frost_windwalkon.jpg',\n\t\t},\n\t},\n};\n","import { WarlockTalents, WarlockMajorGlyph, WarlockMinorGlyph } from '../proto/warlock.js';\n\nimport { GlyphsConfig } from './glyphs_picker.js';\nimport { TalentsConfig, newTalentsConfig } from './talents_picker.js';\n\nexport const warlockTalentsConfig: TalentsConfig<WarlockTalents> = newTalentsConfig([\n\t{\n\t\tname: \"Affliction\",\n\t\tbackgroundUrl: \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/302.jpg\",\n\t\ttalents: [\n\t\t\t{\n\t\t\t\tfieldName: \"improvedCurseOfAgony\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18827,\n\t\t\t\t\t18829\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"suppression\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18174,\n\t\t\t\t\t18175,\n\t\t\t\t\t18176\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedCorruption\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t17810,\n\t\t\t\t\t17811,\n\t\t\t\t\t17812,\n\t\t\t\t\t17813,\n\t\t\t\t\t17814\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedCurseOfWeakness\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18179,\n\t\t\t\t\t18180\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedDrainSoul\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18213,\n\t\t\t\t\t18372\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedLifeTap\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18182,\n\t\t\t\t\t18183\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"soulSiphon\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 3\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t17804,\n\t\t\t\t\t17805\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedFear\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t53754,\n\t\t\t\t\t53759\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"felConcentration\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t17783,\n\t\t\t\t\t17784,\n\t\t\t\t\t17785\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"amplifyCurse\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18288\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"grimReach\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18218,\n\t\t\t\t\t18219\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"nightfall\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18094,\n\t\t\t\t\t18095\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"empoweredCorruption\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 3\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t32381,\n\t\t\t\t\t32382,\n\t\t\t\t\t32383\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"shadowEmbrace\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t32385,\n\t\t\t\t\t32387,\n\t\t\t\t\t32392,\n\t\t\t\t\t32393,\n\t\t\t\t\t32394\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"siphonLife\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t63108\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"curseOfExhaustion\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18223\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedFelhunter\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t54037,\n\t\t\t\t\t54038\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"shadowMastery\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18271,\n\t\t\t\t\t18272,\n\t\t\t\t\t18273,\n\t\t\t\t\t18274,\n\t\t\t\t\t18275\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"eradication\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47195,\n\t\t\t\t\t47196,\n\t\t\t\t\t47197\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"contagion\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t30060,\n\t\t\t\t\t30061,\n\t\t\t\t\t30062,\n\t\t\t\t\t30063,\n\t\t\t\t\t30064\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"darkPact\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18220\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedHowlOfTerror\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t30054,\n\t\t\t\t\t30057\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"malediction\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t32477,\n\t\t\t\t\t32483,\n\t\t\t\t\t32484\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"deathsEmbrace\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47198,\n\t\t\t\t\t47199,\n\t\t\t\t\t47200\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"unstableAffliction\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t30108\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"pandemic\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t58435\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"everlastingAffliction\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 9,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47201,\n\t\t\t\t\t47202,\n\t\t\t\t\t47203,\n\t\t\t\t\t47204,\n\t\t\t\t\t47205\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"haunt\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 10,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t48181\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tname: \"Demonology\",\n\t\tbackgroundUrl: \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/303.jpg\",\n\t\ttalents: [\n\t\t\t{\n\t\t\t\tfieldName: \"improvedHealthstone\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18692,\n\t\t\t\t\t18693\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedImp\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18694,\n\t\t\t\t\t18695,\n\t\t\t\t\t18696\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"demonicEmbrace\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18697,\n\t\t\t\t\t18698,\n\t\t\t\t\t18699\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"felSynergy\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 3\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47230,\n\t\t\t\t\t47231\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedHealthFunnel\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18703,\n\t\t\t\t\t18704\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"demonicBrutality\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18705,\n\t\t\t\t\t18706,\n\t\t\t\t\t18707\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"felVitality\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18731,\n\t\t\t\t\t18743,\n\t\t\t\t\t18744\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedSayaad\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18754,\n\t\t\t\t\t18755,\n\t\t\t\t\t18756\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"soulLink\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t19028\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"felDomination\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18708\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"demonicAegis\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 3\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t30143,\n\t\t\t\t\t30144,\n\t\t\t\t\t30145\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"unholyPower\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18769,\n\t\t\t\t\t18770,\n\t\t\t\t\t18771,\n\t\t\t\t\t18772,\n\t\t\t\t\t18773\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"masterSummoner\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18709,\n\t\t\t\t\t18710\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"manaFeed\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t30326\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"masterConjuror\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18767,\n\t\t\t\t\t18768\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"masterDemonologist\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t23785,\n\t\t\t\t\t23822,\n\t\t\t\t\t23823,\n\t\t\t\t\t23824,\n\t\t\t\t\t23825\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"moltenCore\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47245,\n\t\t\t\t\t47246,\n\t\t\t\t\t47247\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"demonicResilience\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t30319,\n\t\t\t\t\t30320,\n\t\t\t\t\t30321\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"demonicEmpowerment\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47193\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"demonicKnowledge\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t35691,\n\t\t\t\t\t35692,\n\t\t\t\t\t35693\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"demonicTactics\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t30242,\n\t\t\t\t\t30245,\n\t\t\t\t\t30246,\n\t\t\t\t\t30247,\n\t\t\t\t\t30248\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"decimation\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t63156,\n\t\t\t\t\t63158\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedDemonicTactics\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t54347,\n\t\t\t\t\t54348,\n\t\t\t\t\t54349\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"summonFelguard\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t30146\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"nemesis\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t63117,\n\t\t\t\t\t63121,\n\t\t\t\t\t63123\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"demonicPact\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 9,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47236,\n\t\t\t\t\t47237,\n\t\t\t\t\t47238,\n\t\t\t\t\t47239,\n\t\t\t\t\t47240\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"metamorphosis\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 10,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t59672\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tname: \"Destruction\",\n\t\tbackgroundUrl: \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/301.jpg\",\n\t\ttalents: [\n\t\t\t{\n\t\t\t\tfieldName: \"improvedShadowBolt\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t17793,\n\t\t\t\t\t17796,\n\t\t\t\t\t17801,\n\t\t\t\t\t17802,\n\t\t\t\t\t17803\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"bane\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 0,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t17788,\n\t\t\t\t\t17789,\n\t\t\t\t\t17790,\n\t\t\t\t\t17791,\n\t\t\t\t\t17792\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"aftermath\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18119,\n\t\t\t\t\t18120\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"moltenSkin\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t63349,\n\t\t\t\t\t63350,\n\t\t\t\t\t63351\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"cataclysm\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 1,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t17778,\n\t\t\t\t\t17779,\n\t\t\t\t\t17780\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"demonicPower\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18126,\n\t\t\t\t\t18127\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"shadowburn\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t17877\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"ruin\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t17959,\n\t\t\t\t\t59738,\n\t\t\t\t\t59739,\n\t\t\t\t\t59740,\n\t\t\t\t\t59741\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"intensity\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18135,\n\t\t\t\t\t18136\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"destructiveReach\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t17917,\n\t\t\t\t\t17918\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedSearingPain\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 3\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t17927,\n\t\t\t\t\t17929,\n\t\t\t\t\t17930\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"backlash\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t34935,\n\t\t\t\t\t34938,\n\t\t\t\t\t34939\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 3,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedImmolate\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t17815,\n\t\t\t\t\t17833,\n\t\t\t\t\t17834\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"devastation\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18130\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 2,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"netherProtection\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t30299,\n\t\t\t\t\t30301,\n\t\t\t\t\t30302\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"emberstorm\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 5,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t17954,\n\t\t\t\t\t17955,\n\t\t\t\t\t17956,\n\t\t\t\t\t17957,\n\t\t\t\t\t17958\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"conflagrate\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t17962\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 4,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"soulLeech\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t30293,\n\t\t\t\t\t30295,\n\t\t\t\t\t30296\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"pyroclasm\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 3\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t18096,\n\t\t\t\t\t18073,\n\t\t\t\t\t63245\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"shadowAndFlame\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t30288,\n\t\t\t\t\t30289,\n\t\t\t\t\t30290,\n\t\t\t\t\t30291,\n\t\t\t\t\t30292\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"improvedSoulLeech\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 7,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t54117,\n\t\t\t\t\t54118\n\t\t\t\t],\n\t\t\t\tmaxPoints: 2,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"backdraft\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 0\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47258,\n\t\t\t\t\t47259,\n\t\t\t\t\t47260\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\trowIdx: 6,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"shadowfury\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t30283\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"empoweredImp\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 8,\n\t\t\t\t\tcolIdx: 2\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47220,\n\t\t\t\t\t47221,\n\t\t\t\t\t47223\n\t\t\t\t],\n\t\t\t\tmaxPoints: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"fireAndBrimstone\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 9,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t47266,\n\t\t\t\t\t47267,\n\t\t\t\t\t47268,\n\t\t\t\t\t47269,\n\t\t\t\t\t47270\n\t\t\t\t],\n\t\t\t\tmaxPoints: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldName: \"chaosBolt\",\n\t\t\t\tlocation: {\n\t\t\t\t\trowIdx: 10,\n\t\t\t\t\tcolIdx: 1\n\t\t\t\t},\n\t\t\t\tspellIds: [\n\t\t\t\t\t50796\n\t\t\t\t],\n\t\t\t\tmaxPoints: 1\n\t\t\t}\n\t\t]\n\t}\n]);\n\nexport const warlockGlyphsConfig: GlyphsConfig = {\n\tmajorGlyphs: {\n\t\t[WarlockMajorGlyph.GlyphOfChaosBolt]: {\n\t\t\tname: 'Glyph of Chaos Bolt',\n\t\t\tdescription: 'Reduces the cooldown on Chaos Bolt by 2 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warlock_chaosbolt.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfConflagrate]: {\n\t\t\tname: 'Glyph of Conflagrate',\n\t\t\tdescription: 'Your Conflagrate spell no longer consumes your Immolate or Shadowflame spell from the target.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_fire_fireball.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfCorruption]: {\n\t\t\tname: 'Glyph of Corruption',\n\t\t\tdescription: 'Your Corruption spell has a 4% chance to cause you to enter a Shadow Trance state after damaging the opponent. The Shadow Trance state reduces the casting time of your next Shadow Bolt spell by 100%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_abominationexplosion.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfCurseOfAgony]: {\n\t\t\tname: 'Glyph of Curse of Agony',\n\t\t\tdescription: 'Increases the duration of your Curse of Agony by 4 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_curseofsargeras.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfDeathCoil]: {\n\t\t\tname: 'Glyph of Death Coil',\n\t\t\tdescription: 'Increases the duration of your Death Coil by 0.5 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_deathcoil.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfDemonicCircle]: {\n\t\t\tname: 'Glyph of Demonic Circle',\n\t\t\tdescription: 'Reduces the cooldown on Demonic Circle by 4 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_demoniccirclesummon.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfFear]: {\n\t\t\tname: 'Glyph of Fear',\n\t\t\tdescription: 'Increases the damage your Fear target can take before the Fear effect is removed by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_possession.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfFelguard]: {\n\t\t\tname: 'Glyph of Felguard',\n\t\t\tdescription: 'Increases the Felguard\\'s total attack power by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonfelguard.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfFelhunter]: {\n\t\t\tname: 'Glyph of Felhunter',\n\t\t\tdescription: 'When your Felhunter uses Devour Magic, you will also be healed for that amount.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonfelhunter.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfHaunt]: {\n\t\t\tname: 'Glyph of Haunt',\n\t\t\tdescription: 'The bonus damage granted by your Haunt spell is increased by an additional 3%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warlock_haunt.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfHealthFunnel]: {\n\t\t\tname: 'Glyph of Health Funnel',\n\t\t\tdescription: 'Reduces the pushback suffered from damaging attacks while channeling your Health Funnel spell by 100%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_lifedrain.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfHealthstone]: {\n\t\t\tname: 'Glyph of Healthstone',\n\t\t\tdescription: 'You receive 30% more healing from using a healthstone.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_stone_04.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfHowlOfTerror]: {\n\t\t\tname: 'Glyph of Howl of Terror',\n\t\t\tdescription: 'Reduces the cooldown on your Howl of Terror spell by 8 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_deathscream.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfImmolate]: {\n\t\t\tname: 'Glyph of Immolate',\n\t\t\tdescription: 'Increases the periodic damage of your Immolate by 10%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_fire_immolation.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfImp]: {\n\t\t\tname: 'Glyph of Imp',\n\t\t\tdescription: 'Increases the damage done by your Imp\\'s Firebolt spell by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonimp.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfIncinerate]: {\n\t\t\tname: 'Glyph of Incinerate',\n\t\t\tdescription: 'Increases the damage done by Incinerate by 5%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_fire_burnout.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfLifeTap]: {\n\t\t\tname: 'Glyph of Life Tap',\n\t\t\tdescription: 'When you use Life Tap or Dark Pact, you gain 20% of your Spirit as spell power for 40 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_burningspirit.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfMetamorphosis]: {\n\t\t\tname: 'Glyph of Metamorphosis',\n\t\t\tdescription: 'Increases the duration of your Metamorphosis by 6 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_demonform.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfQuickDecay]: {\n\t\t\tname: 'Glyph of Quick Decay',\n\t\t\tdescription: 'Your haste now reduces the time between periodic damage ticks of your Corruption spell.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_abominationexplosion.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfSearingPain]: {\n\t\t\tname: 'Glyph of Searing Pain',\n\t\t\tdescription: 'Increases the critical strike bonus of your Searing Pain by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_fire_soulburn.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfShadowBolt]: {\n\t\t\tname: 'Glyph of Shadow Bolt',\n\t\t\tdescription: 'Reduces the mana cost of your Shadow Bolt by 10%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_shadowbolt.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfShadowburn]: {\n\t\t\tname: 'Glyph of Shadowburn',\n\t\t\tdescription: 'Increases the critical strike chance of Shadowburn by 20% when the target is below 35% health.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_scourgebuild.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfShadowflame]: {\n\t\t\tname: 'Glyph of Shadowflame',\n\t\t\tdescription: 'Your Shadowflame also applies a 70% movement speed slow on its victims.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warlock_shadowflame.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfSiphonLife]: {\n\t\t\tname: 'Glyph of Siphon Life',\n\t\t\tdescription: 'Increases the healing you receive from your Siphon Life talent by 25%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_requiem.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfSoulLink]: {\n\t\t\tname: 'Glyph of Soul Link',\n\t\t\tdescription: 'Increases the percentage of damage shared via your Soul Link by an additional 5%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_gathershadows.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfSoulstone]: {\n\t\t\tname: 'Glyph of Soulstone',\n\t\t\tdescription: 'Increases the amount of health you gain from resurrecting via a Soulstone by 300%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_soulgem.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfSuccubus]: {\n\t\t\tname: 'Glyph of Succubus',\n\t\t\tdescription: 'Your Succubus\\'s Seduction ability also removes all damage over time effects from the target.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonsuccubus.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfUnstableAffliction]: {\n\t\t\tname: 'Glyph of Unstable Affliction',\n\t\t\tdescription: 'Decreases the casting time of your Unstable Affliction by 0.2 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_unstableaffliction_3.jpg',\n\t\t},\n\t\t[WarlockMajorGlyph.GlyphOfVoidwalker]: {\n\t\t\tname: 'Glyph of Voidwalker',\n\t\t\tdescription: 'Increases your Voidwalker\\'s total Stamina by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonvoidwalker.jpg',\n\t\t},\n\t},\n\tminorGlyphs: {\n\t\t[WarlockMinorGlyph.GlyphOfCurseOfExhausion]: {\n\t\t\tname: 'Glyph of Curse of Exhausion',\n\t\t\tdescription: 'Increases the range of your Curse of Exhaustion spell by 5 yards.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_grimward.jpg',\n\t\t},\n\t\t[WarlockMinorGlyph.GlyphOfDrainSoul]: {\n\t\t\tname: 'Glyph of Drain Soul',\n\t\t\tdescription: 'Your Drain Soul ability occasionally creates an additional soul shard.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_haunting.jpg',\n\t\t},\n\t\t[WarlockMinorGlyph.GlyphOfSubjugateDemon]: {\n\t\t\tname: 'Glyph of Subjugate Demon',\n\t\t\tdescription: 'Reduces the cast time of your Subjugate Demon spell by 50%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_enslavedemon.jpg',\n\t\t},\n\t\t[WarlockMinorGlyph.GlyphOfKilrogg]: {\n\t\t\tname: 'Glyph of Kilrogg',\n\t\t\tdescription: 'Increases the movement speed of your Eye of Kilrogg by 50% and allows it to fly in areas where flying mounts are enabled.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_evileye.jpg',\n\t\t},\n\t\t[WarlockMinorGlyph.GlyphOfSouls]: {\n\t\t\tname: 'Glyph of Souls',\n\t\t\tdescription: 'Reduces the mana cost of your Ritual of Souls spell by 70%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_shadesofdarkness.jpg',\n\t\t},\n\t\t[WarlockMinorGlyph.GlyphOfUnendingBreath]: {\n\t\t\tname: 'Glyph of Unending Breath',\n\t\t\tdescription: 'Increases the swim speed of targets affected by your Unending Breath spell by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_demonbreath.jpg',\n\t\t},\n\t},\n};\n","import { WarriorTalents, WarriorMajorGlyph, WarriorMinorGlyph } from '../proto/warrior.js';\n\nimport { GlyphsConfig } from './glyphs_picker.js';\nimport { TalentsConfig, newTalentsConfig } from './talents_picker.js';\n\nexport const warriorTalentsConfig: TalentsConfig<WarriorTalents> = newTalentsConfig([\n\t{\n\t\t\"name\": \"Arms\",\n\t\t\"backgroundUrl\": \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/161.jpg\",\n\t\t\"talents\": [\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedHeroicStrike\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12282,\n\t\t\t\t\t12663,\n\t\t\t\t\t12664\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"deflection\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16462,\n\t\t\t\t\t16463,\n\t\t\t\t\t16464,\n\t\t\t\t\t16465,\n\t\t\t\t\t16466\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedRend\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12286,\n\t\t\t\t\t12658\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedCharge\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12285,\n\t\t\t\t\t12697\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"ironWill\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12300,\n\t\t\t\t\t12959,\n\t\t\t\t\t12960\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"tacticalMastery\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12295,\n\t\t\t\t\t12676,\n\t\t\t\t\t12677\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedOverpower\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12290,\n\t\t\t\t\t12963\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"angerManagement\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12296\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"impale\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16493,\n\t\t\t\t\t16494\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"deepWounds\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12834,\n\t\t\t\t\t12849,\n\t\t\t\t\t12867\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"twoHandedWeaponSpecialization\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12163,\n\t\t\t\t\t12711,\n\t\t\t\t\t12712\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"tasteForBlood\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t56636,\n\t\t\t\t\t56637,\n\t\t\t\t\t56638\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"poleaxeSpecialization\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12700,\n\t\t\t\t\t12781,\n\t\t\t\t\t12783,\n\t\t\t\t\t12784,\n\t\t\t\t\t12785\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"sweepingStrikes\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12328\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"maceSpecialization\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12284,\n\t\t\t\t\t12701,\n\t\t\t\t\t12702,\n\t\t\t\t\t12703,\n\t\t\t\t\t12704\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"swordSpecialization\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12281,\n\t\t\t\t\t12812,\n\t\t\t\t\t12813,\n\t\t\t\t\t12814,\n\t\t\t\t\t12815\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"weaponMastery\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t20504,\n\t\t\t\t\t20505\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedHamstring\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12289,\n\t\t\t\t\t12668,\n\t\t\t\t\t23695\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"trauma\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t46854,\n\t\t\t\t\t46855\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"secondWind\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t29834,\n\t\t\t\t\t29838\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"mortalStrike\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12294\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"strengthOfArms\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t46865,\n\t\t\t\t\t46866\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedSlam\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12862,\n\t\t\t\t\t12330\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"juggernaut\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t64976\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedMortalStrike\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t35446,\n\t\t\t\t\t35448,\n\t\t\t\t\t35449\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"unrelentingAssault\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t46859,\n\t\t\t\t\t46860\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"suddenDeath\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t29723,\n\t\t\t\t\t29724,\n\t\t\t\t\t29725\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"endlessRage\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t29623\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"bloodFrenzy\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t29836,\n\t\t\t\t\t29859\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"wreckingCrew\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t46867,\n\t\t\t\t\t56611,\n\t\t\t\t\t56612,\n\t\t\t\t\t56613,\n\t\t\t\t\t56614\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"bladestorm\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 10,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t46924\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"name\": \"Fury\",\n\t\t\"backgroundUrl\": \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/164.jpg\",\n\t\t\"talents\": [\n\t\t\t{\n\t\t\t\t\"fieldName\": \"armoredToTheTeeth\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t61216,\n\t\t\t\t\t61221,\n\t\t\t\t\t61222\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"boomingVoice\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12321,\n\t\t\t\t\t12835\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"cruelty\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12320,\n\t\t\t\t\t12852,\n\t\t\t\t\t12853,\n\t\t\t\t\t12855,\n\t\t\t\t\t12856\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedDemoralizingShout\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12324,\n\t\t\t\t\t12876,\n\t\t\t\t\t12877,\n\t\t\t\t\t12878,\n\t\t\t\t\t12879\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"unbridledWrath\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12322,\n\t\t\t\t\t12999,\n\t\t\t\t\t13000,\n\t\t\t\t\t13001,\n\t\t\t\t\t13002\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedCleave\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12329,\n\t\t\t\t\t12950,\n\t\t\t\t\t20496\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"piercingHowl\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12323\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"bloodCraze\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16487,\n\t\t\t\t\t16489,\n\t\t\t\t\t16492\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"commandingPresence\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12318,\n\t\t\t\t\t12857,\n\t\t\t\t\t12858,\n\t\t\t\t\t12860,\n\t\t\t\t\t12861\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"dualWieldSpecialization\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t23584,\n\t\t\t\t\t23585,\n\t\t\t\t\t23586,\n\t\t\t\t\t23587,\n\t\t\t\t\t23588\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedExecute\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t20502,\n\t\t\t\t\t20503\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"enrage\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12317,\n\t\t\t\t\t13045,\n\t\t\t\t\t13046,\n\t\t\t\t\t13047,\n\t\t\t\t\t13048\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"precision\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t29590,\n\t\t\t\t\t29591,\n\t\t\t\t\t29592\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"deathWish\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12292\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedIntercept\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t29888,\n\t\t\t\t\t29889\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedBerserkerRage\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t20500,\n\t\t\t\t\t20501\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"flurry\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12319,\n\t\t\t\t\t12971,\n\t\t\t\t\t12972,\n\t\t\t\t\t12973,\n\t\t\t\t\t12974\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"intensifyRage\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t46908,\n\t\t\t\t\t46909,\n\t\t\t\t\t56924\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"bloodthirst\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t23881\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedWhirlwind\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t29721,\n\t\t\t\t\t29776\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"furiousAttacks\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t46910,\n\t\t\t\t\t46911\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedBerserkerStance\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t29759,\n\t\t\t\t\t29760,\n\t\t\t\t\t29761,\n\t\t\t\t\t29762,\n\t\t\t\t\t29763\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"heroicFury\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t60970\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"rampage\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t29801\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"bloodsurge\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t46913,\n\t\t\t\t\t46914,\n\t\t\t\t\t46915\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"unendingFury\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t56927,\n\t\t\t\t\t56929,\n\t\t\t\t\t56930,\n\t\t\t\t\t56931,\n\t\t\t\t\t56932\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"titansGrip\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 10,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t46917\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"name\": \"Protection\",\n\t\t\"backgroundUrl\": \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/163.jpg\",\n\t\t\"talents\": [\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedBloodrage\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12301,\n\t\t\t\t\t12818\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"shieldSpecialization\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12298,\n\t\t\t\t\t12724,\n\t\t\t\t\t12725,\n\t\t\t\t\t12726,\n\t\t\t\t\t12727\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedThunderClap\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12287,\n\t\t\t\t\t12665,\n\t\t\t\t\t12666\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"incite\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t50685,\n\t\t\t\t\t50686,\n\t\t\t\t\t50687\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"anticipation\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t55129,\n\t\t\t\t\t12750,\n\t\t\t\t\t12751,\n\t\t\t\t\t12752,\n\t\t\t\t\t12753,\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"lastStand\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12975\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedRevenge\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12797,\n\t\t\t\t\t12799\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"shieldMastery\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t29598,\n\t\t\t\t\t29599\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"toughness\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12299,\n\t\t\t\t\t12761,\n\t\t\t\t\t12762,\n\t\t\t\t\t12763,\n\t\t\t\t\t12764\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedSpellReflection\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t59088,\n\t\t\t\t\t59089\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedDisarm\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12313,\n\t\t\t\t\t12804\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"puncture\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12308,\n\t\t\t\t\t12810,\n\t\t\t\t\t12811\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedDisciplines\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12312,\n\t\t\t\t\t12803\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"concussionBlow\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12809\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"gagOrder\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t12311,\n\t\t\t\t\t12958\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"oneHandedWeaponSpecialization\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t16538,\n\t\t\t\t\t16539,\n\t\t\t\t\t16540,\n\t\t\t\t\t16541,\n\t\t\t\t\t16542\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedDefensiveStance\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t29593,\n\t\t\t\t\t29594\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"vigilance\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t50720\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"focusedRage\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t29787,\n\t\t\t\t\t29790,\n\t\t\t\t\t29792\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"vitality\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t29140,\n\t\t\t\t\t29143,\n\t\t\t\t\t29144\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"safeguard\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t46945,\n\t\t\t\t\t46949\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"warbringer\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t57499\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"devastate\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t20243\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"criticalBlock\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t47294,\n\t\t\t\t\t47295,\n\t\t\t\t\t47296\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"swordAndBoard\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t46951,\n\t\t\t\t\t46952,\n\t\t\t\t\t46953\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"damageShield\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t58872,\n\t\t\t\t\t58874\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"shockwave\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 10,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t46968\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t}\n\t\t]\n\t}\n]);\n\nexport const warriorGlyphsConfig: GlyphsConfig = {\n\tmajorGlyphs: {\n\t\t[WarriorMajorGlyph.GlyphOfBarbaricInsults]: {\n\t\t\tname: 'Glyph of Barbaric Insults',\n\t\t\tdescription: 'Your Mocking Blow ability generates 100% additional threat.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_punishingblow.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfBladestorm]: {\n\t\t\tname: 'Glyph of Bladestorm',\n\t\t\tdescription: 'Reduces the cooldown on Bladestorm by 15 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_bladestorm.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfBlocking]: {\n\t\t\tname: 'Glyph of Blocking',\n\t\t\tdescription: 'Increases your block value by 10% for 10 sec after using your Shield Slam ability.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_shield_05.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfBloodthirst]: {\n\t\t\tname: 'Glyph of Bloodthirst',\n\t\t\tdescription: 'Increases the healing you receive from your Bloodthirst ability by 100%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_bloodlust.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfCleaving]: {\n\t\t\tname: 'Glyph of Cleaving',\n\t\t\tdescription: 'Increases the number of targets your Cleave hits by 1.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_cleave.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfDevastate]: {\n\t\t\tname: 'Glyph of Devastate',\n\t\t\tdescription: 'Your Devastate ability now applies two stacks of Sunder Armor.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_sword_11.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfEnragedRegeneration]: {\n\t\t\tname: 'Glyph of Enraged Regeneration',\n\t\t\tdescription: 'Your Enraged Regeneration ability heals for an additional 10% of your health over its duration.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_focusedrage.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfExecution]: {\n\t\t\tname: 'Glyph of Execution',\n\t\t\tdescription: 'Your Execute ability deals damage as if you had 10 additional rage.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_sword_48.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfHamstring]: {\n\t\t\tname: 'Glyph of Hamstring',\n\t\t\tdescription: 'Gives your Hamstring ability a 10% chance to immobilize the target for 5 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_shockwave.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfHeroicStrike]: {\n\t\t\tname: 'Glyph of Heroic Strike',\n\t\t\tdescription: 'You gain 10 rage when you critically strike with your Heroic Strike ability.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_ambush.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfIntervene]: {\n\t\t\tname: 'Glyph of Intervene',\n\t\t\tdescription: 'Increases the number attacks you intercept for your Intervene target by 1.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_victoryrush.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfLastStand]: {\n\t\t\tname: 'Glyph of Last Stand',\n\t\t\tdescription: 'Reduces the cooldown of your Last Stand ability by 1 min.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_ashestoashes.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfMortalStrike]: {\n\t\t\tname: 'Glyph of Mortal Strike',\n\t\t\tdescription: 'Increases the damage of your Mortal Strike ability by 10%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_savageblow.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfOverpower]: {\n\t\t\tname: 'Glyph of Overpower',\n\t\t\tdescription: 'Adds a 100% chance to enable your Overpower when your attacks are parried.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_meleedamage.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfRapidCharge]: {\n\t\t\tname: 'Glyph of Rapid Charge',\n\t\t\tdescription: 'Reduces the cooldown of your Charge ability by 7%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_charge.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfRending]: {\n\t\t\tname: 'Glyph of Rending',\n\t\t\tdescription: 'Increases the duration of your Rend ability by 6 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_gouge.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfResonatingPower]: {\n\t\t\tname: 'Glyph of Resonating Power',\n\t\t\tdescription: 'Reduces the rage cost of your Thunder Clap ability by 5.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_thunderclap.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfRevenge]: {\n\t\t\tname: 'Glyph of Revenge',\n\t\t\tdescription: 'After using Revenge, your next Heroic Strike costs no rage.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_revenge.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfShieldWall]: {\n\t\t\tname: 'Glyph of Shield Wall',\n\t\t\tdescription: 'Reduces the cooldown on Shield Wall by 2 min, but Shield Wall now only reduces damage taken by 40%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_shieldwall.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfShockwave]: {\n\t\t\tname: 'Glyph of Shockwave',\n\t\t\tdescription: 'Reduces the cooldown on Shockwave by 3 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_shockwave.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfSpellReflection]: {\n\t\t\tname: 'Glyph of Spell Reflection',\n\t\t\tdescription: 'Reduces the cooldown on Spell Reflection by 1 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_shieldreflection.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfSunderArmor]: {\n\t\t\tname: 'Glyph of Sunder Armor',\n\t\t\tdescription: 'Your Sunder Armor ability affects a second nearby target.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_sunder.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfSweepingStrikes]: {\n\t\t\tname: 'Glyph of Sweeping Strikes',\n\t\t\tdescription: 'Reduces the rage cost of your Sweeping Strikes ability by 100%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_rogue_slicedice.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfTaunt]: {\n\t\t\tname: 'Glyph of Taunt',\n\t\t\tdescription: 'Increases the chance for your Taunt ability to succeed by 8%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_reincarnation.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfVictoryRush]: {\n\t\t\tname: 'Glyph of Victory Rush',\n\t\t\tdescription: 'Your Victory Rush ability has a 30% increased critical strike chance.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_devastate.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfVigilance]: {\n\t\t\tname: 'Glyph of Vigilance',\n\t\t\tdescription: 'Your Vigilance ability transfers an additional 5% of your target\\'s threat to you.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_vigilance.jpg',\n\t\t},\n\t\t[WarriorMajorGlyph.GlyphOfWhirlwind]: {\n\t\t\tname: 'Glyph of Whirlwind',\n\t\t\tdescription: 'Reduces the cooldown of your Whirlwind by 2 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_whirlwind.jpg',\n\t\t},\n\t},\n\tminorGlyphs: {\n\t\t[WarriorMinorGlyph.GlyphOfBattle]: {\n\t\t\tname: 'Glyph of Battle',\n\t\t\tdescription: 'Increases the duration of your Battle Shout ability by 2 min.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_battleshout.jpg',\n\t\t},\n\t\t[WarriorMinorGlyph.GlyphOfBloodrage]: {\n\t\t\tname: 'Glyph of Bloodrage',\n\t\t\tdescription: 'Reduces the health cost of your Bloodrage ability by 100%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_racial_bloodrage.jpg',\n\t\t},\n\t\t[WarriorMinorGlyph.GlyphOfCharge]: {\n\t\t\tname: 'Glyph of Charge',\n\t\t\tdescription: 'Increases the range of your Charge ability by 5 yards.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_charge.jpg',\n\t\t},\n\t\t[WarriorMinorGlyph.GlyphOfCommand]: {\n\t\t\tname: 'Glyph of Command',\n\t\t\tdescription: 'Increases the duration of your Commanding Shout ability by 2 min.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_rallyingcry.jpg',\n\t\t},\n\t\t[WarriorMinorGlyph.GlyphOfEnduringVictory]: {\n\t\t\tname: 'Glyph of Enduring Victory',\n\t\t\tdescription: 'Increases the window of opportunity in which you can use Victory Rush by 5 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_devastate.jpg',\n\t\t},\n\t\t[WarriorMinorGlyph.GlyphOfMockingBlow]: {\n\t\t\tname: 'Glyph of Mocking Blow',\n\t\t\tdescription: 'Increases the damage of your Mocking Blow ability by 25%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_punishingblow.jpg',\n\t\t},\n\t\t[WarriorMinorGlyph.GlyphOfThunderClap]: {\n\t\t\tname: 'Glyph of Thunder Clap',\n\t\t\tdescription: 'Increases the radius of your Thunder Clap ability by 2 yards.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_thunderclap.jpg',\n\t\t},\n\t},\n};\n","import { Spec } from '../proto/common.js';\nimport { DeathknightTalents, DeathknightMajorGlyph, DeathknightMinorGlyph } from '../proto/deathknight.js';\nimport { Player } from '../player.js';\n\nimport { GlyphsConfig, GlyphsPicker } from './glyphs_picker.js';\nimport { TalentsConfig, TalentsPicker, newTalentsConfig } from './talents_picker.js';\n\nexport const deathknightTalentsConfig: TalentsConfig<DeathknightTalents> = newTalentsConfig([\n\t{\n\t\t\"name\": \"Blood\",\n\t\t\"backgroundUrl\": \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/398.jpg\",\n\t\t\"talents\": [\n\t\t\t{\n\t\t\t\t\"fieldName\": \"butchery\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48979,\n\t\t\t\t\t49483\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"subversion\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48997,\n\t\t\t\t\t49490,\n\t\t\t\t\t49491\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"bladeBarrier\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49182,\n\t\t\t\t\t49500,\n\t\t\t\t\t49501,\n\t\t\t\t\t55225,\n\t\t\t\t\t55226\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"bladedArmor\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48978,\n\t\t\t\t\t49390,\n\t\t\t\t\t49391,\n\t\t\t\t\t49392,\n\t\t\t\t\t49393\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"scentOfBlood\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49004,\n\t\t\t\t\t49508,\n\t\t\t\t\t49509\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"twoHandedWeaponSpecialization\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t55107,\n\t\t\t\t\t55108\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"runeTap\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48982\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"darkConviction\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48987,\n\t\t\t\t\t49477,\n\t\t\t\t\t49478,\n\t\t\t\t\t49479,\n\t\t\t\t\t49480\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"deathRuneMastery\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49467,\n\t\t\t\t\t50033,\n\t\t\t\t\t50034\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedRuneTap\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48985,\n\t\t\t\t\t49488,\n\t\t\t\t\t49489\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"spellDeflection\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49145,\n\t\t\t\t\t49495,\n\t\t\t\t\t49497\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"vendetta\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49015,\n\t\t\t\t\t50154,\n\t\t\t\t\t55136\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"bloodyStrikes\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48977,\n\t\t\t\t\t49394,\n\t\t\t\t\t49395\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"veteranOfTheThirdWar\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49006,\n\t\t\t\t\t49526,\n\t\t\t\t\t50029\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"markOfBlood\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49005\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"bloodyVengeance\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48988,\n\t\t\t\t\t49503,\n\t\t\t\t\t49504\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"abominationsMight\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t53137,\n\t\t\t\t\t53138\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"bloodworms\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49027,\n\t\t\t\t\t49542,\n\t\t\t\t\t49543\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"hysteria\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49016\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedBloodPresence\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t50365,\n\t\t\t\t\t50371\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedDeathStrike\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t62905,\n\t\t\t\t\t62908\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"suddenDoom\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49018,\n\t\t\t\t\t49529,\n\t\t\t\t\t49530\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"vampiricBlood\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t55233\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"willOfTheNecropolis\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49189,\n\t\t\t\t\t50149,\n\t\t\t\t\t50150\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"heartStrike\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t55050\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"mightOfMograine\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49023,\n\t\t\t\t\t49533,\n\t\t\t\t\t49534\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"bloodGorged\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t61154,\n\t\t\t\t\t61155,\n\t\t\t\t\t61156,\n\t\t\t\t\t61157,\n\t\t\t\t\t61158\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"dancingRuneWeapon\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 10,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49028\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\n\t\t]\n\t},\n\t{\n\t\t\"name\": \"Frost\",\n\t\t\"backgroundUrl\": \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/399.jpg\",\n\t\t\"talents\": [\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedIcyTouch\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49175,\n\t\t\t\t\t50031,\n\t\t\t\t\t51456\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"runicPowerMastery\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49455,\n\t\t\t\t\t50147\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"toughness\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49042,\n\t\t\t\t\t49786,\n\t\t\t\t\t49787,\n\t\t\t\t\t49788,\n\t\t\t\t\t49789\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"icyReach\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t55061,\n\t\t\t\t\t55062\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"blackIce\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49140,\n\t\t\t\t\t49661,\n\t\t\t\t\t49662,\n\t\t\t\t\t49663,\n\t\t\t\t\t49664\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"nervesOfColdSteel\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49226,\n\t\t\t\t\t50137,\n\t\t\t\t\t50138\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"icyTalons\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t50880,\n\t\t\t\t\t50884,\n\t\t\t\t\t50885,\n\t\t\t\t\t50886,\n\t\t\t\t\t50887\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"lichborne\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49039\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"annihilation\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t51468,\n\t\t\t\t\t51472,\n\t\t\t\t\t51473\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"killingMachine\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t51123,\n\t\t\t\t\t51127,\n\t\t\t\t\t51128,\n\t\t\t\t\t51129,\n\t\t\t\t\t51130\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"chillOfTheGrave\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49149,\n\t\t\t\t\t50115\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"endlessWinter\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49137,\n\t\t\t\t\t49657\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"frigidDreadplate\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49186,\n\t\t\t\t\t51108,\n\t\t\t\t\t51109\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"glacierRot\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49471,\n\t\t\t\t\t49790,\n\t\t\t\t\t49791\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"deathchill\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49796\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedIcyTalons\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t55610\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"mercilessCombat\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49024,\n\t\t\t\t\t49538\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"rime\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49188,\n\t\t\t\t\t56822,\n\t\t\t\t\t59057\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"chilblains\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t50040,\n\t\t\t\t\t50041,\n\t\t\t\t\t50043\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"hungeringCold\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49203\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedFrostPresence\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t50384,\n\t\t\t\t\t50385\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"threatOfThassarian\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t65661,\n\t\t\t\t\t66191,\n\t\t\t\t\t66192\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"bloodOfTheNorth\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t54639,\n\t\t\t\t\t54638,\n\t\t\t\t\t54637\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"unbreakableArmor\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t51271\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"acclimation\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49200,\n\t\t\t\t\t50151,\n\t\t\t\t\t50152\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"frostStrike\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49143\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"guileOfGorefiend\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t50187,\n\t\t\t\t\t50190,\n\t\t\t\t\t50191\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"tundraStalker\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49202,\n\t\t\t\t\t50127,\n\t\t\t\t\t50128,\n\t\t\t\t\t50129,\n\t\t\t\t\t50130\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"howlingBlast\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 10,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49184\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t]\n\t},\n\t{\n\t\t\"name\": \"Unholy\",\n\t\t\"backgroundUrl\": \"https://wow.zamimg.com/images/wow/talents/backgrounds/wrath/400.jpg\",\n\t\t\"talents\": [\n\t\t\t{\n\t\t\t\t\"fieldName\": \"viciousStrikes\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t51745,\n\t\t\t\t\t51746\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"virulence\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48962,\n\t\t\t\t\t49567,\n\t\t\t\t\t49568\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"anticipation\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 0,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t55129,\n\t\t\t\t\t55130,\n\t\t\t\t\t55131,\n\t\t\t\t\t55132,\n\t\t\t\t\t55133\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"epidemic\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49036,\n\t\t\t\t\t49562\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"morbidity\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48963,\n\t\t\t\t\t49564,\n\t\t\t\t\t49565\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"unholyCommand\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49588,\n\t\t\t\t\t49589\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"ravenousDead\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 1,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t48965,\n\t\t\t\t\t49571,\n\t\t\t\t\t49572\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"outbreak\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49013,\n\t\t\t\t\t55236,\n\t\t\t\t\t55237\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"necrosis\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t51459,\n\t\t\t\t\t51462,\n\t\t\t\t\t51463,\n\t\t\t\t\t51464,\n\t\t\t\t\t51465\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"corpseExplosion\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 2,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49158\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"onAPaleHorse\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49146,\n\t\t\t\t\t51267\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"bloodCakedBlade\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49219,\n\t\t\t\t\t49627,\n\t\t\t\t\t49628\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"nightOfTheDead\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t55620,\n\t\t\t\t\t55623\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"unholyBlight\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49194\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"impurity\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49220,\n\t\t\t\t\t49633,\n\t\t\t\t\t49635,\n\t\t\t\t\t49636,\n\t\t\t\t\t49638\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"dirge\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 4,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49223,\n\t\t\t\t\t49599\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"desecration\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t55666,\n\t\t\t\t\t55667\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"magicSuppression\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49224,\n\t\t\t\t\t49610,\n\t\t\t\t\t49611\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"reaping\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49208,\n\t\t\t\t\t56834,\n\t\t\t\t\t56835\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"masterOfGhouls\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t52143\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 3,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"desolation\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t66799,\n\t\t\t\t\t66814,\n\t\t\t\t\t66815,\n\t\t\t\t\t66816,\n\t\t\t\t\t66817\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"antiMagicZone\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t51052\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"improvedUnholyPresence\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t50391,\n\t\t\t\t\t50392\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"ghoulFrenzy\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 6,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t63560\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 5,\n\t\t\t\t\t\"colIdx\": 3\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"cryptFever\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49032,\n\t\t\t\t\t49631,\n\t\t\t\t\t49632\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"boneShield\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49222\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"wanderingPlague\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 0\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49217,\n\t\t\t\t\t49654,\n\t\t\t\t\t49655\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"ebonPlaguebringer\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t51099,\n\t\t\t\t\t51160,\n\t\t\t\t\t51161\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 3,\n\t\t\t\t\"prereqLocation\": {\n\t\t\t\t\t\"rowIdx\": 7,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"scourgeStrike\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 8,\n\t\t\t\t\t\"colIdx\": 2\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t55090\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"rageOfRivendare\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 9,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t50117,\n\t\t\t\t\t50118,\n\t\t\t\t\t50119,\n\t\t\t\t\t50120,\n\t\t\t\t\t50121\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fieldName\": \"summonGargoyle\",\n\t\t\t\t\"location\": {\n\t\t\t\t\t\"rowIdx\": 10,\n\t\t\t\t\t\"colIdx\": 1\n\t\t\t\t},\n\t\t\t\t\"spellIds\": [\n\t\t\t\t\t49206\n\t\t\t\t],\n\t\t\t\t\"maxPoints\": 1\n\t\t\t},\n\n\t\t]\n\t},\n]);\n\nexport const deathknightGlyphsConfig: GlyphsConfig = {\n\tmajorGlyphs: {\n\t\t[DeathknightMajorGlyph.GlyphOfAntiMagicShell]: {\n\t\t\tname: 'Glyph of Anti-Magic Shell',\n\t\t\tdescription: 'Increases the duration of your Anti-Magic Shell by 2 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_antimagicshell.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfBloodStrike]: {\n\t\t\tname: 'Glyph of Blood Strike',\n\t\t\tdescription: 'Your Blood Strike causes an additional 20% damage to snared targets.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_deathstrike.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfBoneShield]: {\n\t\t\tname: 'Glyph of Bone Shield',\n\t\t\tdescription: 'Adds 1 additional charge to your Bone Shield.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_chest_leather_13.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfChainsOfIce]: {\n\t\t\tname: 'Glyph of Chains of Ice',\n\t\t\tdescription: 'Your Chains of Ice also causes 144 to 156 Frost damage, increased by your attack power.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_frost_chainsofice.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfDancingRuneWeapon]: {\n\t\t\tname: 'Glyph of Dancing Rune Weapon',\n\t\t\tdescription: 'Increases the duration of Dancing Rune Weapon by 5 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_sword_07.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfDarkCommand]: {\n\t\t\tname: 'Glyph of Dark Command',\n\t\t\tdescription: 'Increases the chance for your Dark Command ability to work successfully by 8%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_shamanrage.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfDarkDeath]: {\n\t\t\tname: 'Glyph of Dark Death',\n\t\t\tdescription: 'Increases the damage or healing done by Death Coil by 15%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_deathcoil.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfDeathAndDecay]: {\n\t\t\tname: 'Glyph of Death and Decay',\n\t\t\tdescription: 'Damage of your Death and Decay spell increased by 20%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_deathanddecay.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfDeathGrip]: {\n\t\t\tname: 'Glyph of Death Grip',\n\t\t\tdescription: 'When you deal a killing blow that grants honor or experience, the cooldown of your Death Grip is refreshed.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_strangulate.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfDeathStrike]: {\n\t\t\tname: 'Glyph of Death Strike',\n\t\t\tdescription: 'Increases your Death Strike\\'s damage by 1% for every 1 runic power you currently have (up to a maximum of 25%). The runic power is not consumed by this effect.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_butcher2.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfDisease]: {\n\t\t\tname: 'Glyph of Disease',\n\t\t\tdescription: 'Your Pestilence ability now refreshes disease durations and secondary effects of diseases on your primary target back to their maximum duration.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_plaguecloud.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfFrostStrike]: {\n\t\t\tname: 'Glyph of Frost Strike',\n\t\t\tdescription: 'Reduces the cost of your Frost Strike by 8 Runic Power.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_empowerruneblade2.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfHeartStrike]: {\n\t\t\tname: 'Glyph of Heart Strike',\n\t\t\tdescription: 'Your Heart Strike also reduces the movement speed of your target by 50% for 10 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_weapon_shortblade_40.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfHowlingBlast]: {\n\t\t\tname: 'Glyph of Howling Blast',\n\t\t\tdescription: 'Your Howling Blast ability now infects your targets with Frost Fever.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_frost_arcticwinds.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfHungeringCold]: {\n\t\t\tname: 'Glyph of Hungering Cold',\n\t\t\tdescription: 'Reduces the cost of Hungering Cold by 40 runic power.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_staff_15.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfIceboundFortitude]: {\n\t\t\tname: 'Glyph of Icebound Fortitude',\n\t\t\tdescription: 'Your Icebound Fortitude now always grants at least 40% damage reduction, regardless of your defense skill.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_iceboundfortitude.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfIcyTouch]: {\n\t\t\tname: 'Glyph of Icy Touch',\n\t\t\tdescription: 'Your Frost Fever disease deals 20% additional damage.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_icetouch.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfObliterate]: {\n\t\t\tname: 'Glyph of Obliterate',\n\t\t\tdescription: 'Increases the damage of your Obliterate ability by 25%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_classicon.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfPlagueStrike]: {\n\t\t\tname: 'Glyph of Plague Strike',\n\t\t\tdescription: 'Your Plague Strike does 20% additional damage.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_empowerruneblade.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfRuneStrike]: {\n\t\t\tname: 'Glyph of Rune Strike',\n\t\t\tdescription: 'Increases the critical strike chance of your Rune Strike by 10%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_darkconviction.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfRuneTap]: {\n\t\t\tname: 'Glyph of Rune Tap',\n\t\t\tdescription: 'Your Rune Tap now heals you for an additional 1% of your maximum health, and also heals your party for 10% of their maximum health.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_runetap.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfScourgeStrike]: {\n\t\t\tname: 'Glyph of Scourge Strike',\n\t\t\tdescription: 'Your Scourge Strike increases the duration of your diseases on the target by 3 sec, up to a maximum of 9 additional seconds.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_scourgestrike.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfStrangulate]: {\n\t\t\tname: 'Glyph of Strangulate',\n\t\t\tdescription: 'Reduces the cooldown of your Strangulate by 20 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_soulleech_3.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfTheGhoul]: {\n\t\t\tname: 'Glyph of the Ghoul',\n\t\t\tdescription: 'Your Ghoul receives an additional 40% of your Strength and 40% of your Stamina.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_animatedead.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfUnbreakableArmor]: {\n\t\t\tname: 'Glyph of Unbreakable Armor',\n\t\t\tdescription: 'Increases the total armor granted by Unbreakable Armor to 30%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_armor_helm_plate_naxxramas_raidwarrior_c_01.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfUnholyBlight]: {\n\t\t\tname: 'Glyph of Unholy Blight',\n\t\t\tdescription: 'Increases the damage done by Unholy Blight by 40%.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_contagion.jpg',\n\t\t},\n\t\t[DeathknightMajorGlyph.GlyphOfVampiricBlood]: {\n\t\t\tname: 'Glyph of Vampiric Blood',\n\t\t\tdescription: 'Increases the duration of your Vampiric Blood by 5 sec.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_lifedrain.jpg',\n\t\t},\n\t},\n\tminorGlyphs: {\n\t\t[DeathknightMinorGlyph.GlyphOfBloodTap]: {\n\t\t\tname: 'Glyph of Blood Tap',\n\t\t\tdescription: 'Your Blood Tap no longer causes damage to you.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_bloodtap.jpg',\n\t\t},\n\t\t[DeathknightMinorGlyph.GlyphOfCorpseExplosion]: {\n\t\t\tname: 'Glyph of Corpse Explosion',\n\t\t\tdescription: 'Increases the radius of effect on Corpse Explosion by 5 yards.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/ability_creature_disease_02.jpg',\n\t\t},\n\t\t[DeathknightMinorGlyph.GlyphOfDeathSEmbrace]: {\n\t\t\tname: 'Glyph of Death\\'s Embrace',\n\t\t\tdescription: 'Your Death Coil refunds 20 runic power when used to heal.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_deathcoil.jpg',\n\t\t},\n\t\t[DeathknightMinorGlyph.GlyphOfHornOfWinter]: {\n\t\t\tname: 'Glyph of Horn of Winter',\n\t\t\tdescription: 'Increases the duration of your Horn of Winter ability by 1 min.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/inv_misc_horn_02.jpg',\n\t\t},\n\t\t[DeathknightMinorGlyph.GlyphOfPestilence]: {\n\t\t\tname: 'Glyph of Pestilence',\n\t\t\tdescription: 'Increases the radius of your Pestilence effect by 5 yards.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_plaguecloud.jpg',\n\t\t},\n\t\t[DeathknightMinorGlyph.GlyphOfRaiseDead]: {\n\t\t\tname: 'Glyph of Raise Dead',\n\t\t\tdescription: 'Your Raise Dead spell no longer requires a reagent.',\n\t\t\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_animatedead.jpg',\n\t\t},\n\t},\n};\n","import { ItemQuality } from './proto/common.js';\n\nconst itemQualityCssClasses: Record<ItemQuality, string> = {\n\t[ItemQuality.ItemQualityJunk]: 'item-quality-junk',\n\t[ItemQuality.ItemQualityCommon]: 'item-quality-common',\n\t[ItemQuality.ItemQualityUncommon]: 'item-quality-uncommon',\n\t[ItemQuality.ItemQualityRare]: 'item-quality-rare',\n\t[ItemQuality.ItemQualityEpic]: 'item-quality-epic',\n\t[ItemQuality.ItemQualityLegendary]: 'item-quality-legendary',\n};\nexport function setItemQualityCssClass(elem: HTMLElement, quality: ItemQuality | null) {\n\tObject.values(itemQualityCssClasses).forEach(cssClass => elem.classList.remove(cssClass));\n\n\tif (quality) {\n\t\telem.classList.add(itemQualityCssClasses[quality]);\n\t}\n}\n","import { Component } from './component.js';\n\nexport class CloseButton extends Component {\n\tconstructor(parent: HTMLElement, onClick: () => void) {\n\t\tsuper(parent, 'close-button');\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<span aria-hidden=\"true\" class=\"fa fa-times\"></span>\n\t\t`;\n\n\t\tthis.rootElem.addEventListener('click', event => onClick());\n\t}\n}\n","import { CloseButton } from './close_button.js';\nimport { Component } from './component.js';\n\ndeclare var $: any;\n\nexport class Popup extends Component {\n\n\tconstructor(parent: HTMLElement) {\n\t\tsuper(parent, 'popup');\n\n\t\tconst computedStyles = window.getComputedStyle(parent);\n\t\tthis.rootElem.style.setProperty('--main-text-color', computedStyles.getPropertyValue('--main-text-color').trim());\n\t\tthis.rootElem.style.setProperty('--theme-color-primary', computedStyles.getPropertyValue('--theme-color-primary').trim());\n\t\tthis.rootElem.style.setProperty('--theme-color-background', computedStyles.getPropertyValue('--theme-color-background').trim());\n\t\tthis.rootElem.style.setProperty('--theme-color-background-raw', computedStyles.getPropertyValue('--theme-color-background-raw').trim());\n\n\t\tif (parent.closest('.hide-damage-metrics')) {\n\t\t\tthis.rootElem.classList.add('hide-damage-metrics');\n\t\t}\n\t\tif (parent.closest('.hide-threat-metrics')) {\n\t\t\tthis.rootElem.classList.add('hide-threat-metrics');\n\t\t}\n\t\tif (parent.closest('.hide-healing-metrics')) {\n\t\t\tthis.rootElem.classList.add('hide-healing-metrics');\n\t\t}\n\n\t\t$(this.rootElem).bPopup({\n\t\t\tonClose: () => this.rootElem.remove(),\n\t\t});\n\t}\n\n\tprotected addCloseButton() {\n\t\tnew CloseButton(this.rootElem, () => this.close());\n\t}\n\n\tclose() {\n\t\t$(this.rootElem).bPopup().close();\n\t\tthis.rootElem.remove();\n\t}\n}\n","import { getWowheadItemId } from '../proto_utils/equipped_item.js';\nimport { EquippedItem } from '../proto_utils/equipped_item.js';\nimport { Stats } from '../proto_utils/stats.js';\nimport { Glyphs } from '../proto/common.js';\nimport { ItemQuality } from '../proto/common.js';\nimport { ActionId } from '../proto_utils/action_id.js';\nimport { setItemQualityCssClass } from '../css_utils.js';\nimport { Player } from '../player.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\nimport { formatDeltaTextElem, stringComparator } from '../utils.js';\n\nimport { Component } from '../components/component.js';\nimport { Input } from '../components/input.js';\nimport { Popup } from '../components/popup.js';\n\ndeclare var $: any;\n\nexport type GlyphConfig = {\n\tname: string,\n\tdescription: string,\n\ticonUrl: string,\n};\n\nexport type GlyphsConfig = {\n\tmajorGlyphs: Record<number, GlyphConfig>,\n\tminorGlyphs: Record<number, GlyphConfig>,\n};\n\ninterface GlyphData {\n\tid: number,\n\tname: string,\n\tdescription: string,\n\ticonUrl: string,\n\tquality: ItemQuality | null,\n}\n\nconst emptyGlyphData: GlyphData = {\n\tid: 0,\n\tname: 'Empty',\n\tdescription: '',\n\ticonUrl: 'https://wow.zamimg.com/images/wow/icons/medium/inventoryslot_empty.jpg',\n\tquality: null,\n};\n\nexport class GlyphsPicker extends Component {\n\tprivate readonly glyphsConfig: GlyphsConfig;\n\n\tmajorGlyphPickers: Array<GlyphPicker> = [];\n\tminorGlyphPickers: Array<GlyphPicker> = [];\n\n\tconstructor(parent: HTMLElement, player: Player<any>, glyphsConfig: GlyphsConfig) {\n\t\tsuper(parent, 'glyphs-picker-root');\n\t\tthis.glyphsConfig = glyphsConfig;\n\n\t\tconst majorGlyphs = Object.keys(glyphsConfig.majorGlyphs).map(idStr => Number(idStr));\n\t\tconst minorGlyphs = Object.keys(glyphsConfig.minorGlyphs).map(idStr => Number(idStr));\n\n\t\tconst majorGlyphsData = majorGlyphs.map(glyph => this.getGlyphData(glyph));\n\t\tconst minorGlyphsData = minorGlyphs.map(glyph => this.getGlyphData(glyph));\n\n\t\tmajorGlyphsData.sort((a, b) => stringComparator(a.name, b.name));\n\t\tminorGlyphsData.sort((a, b) => stringComparator(a.name, b.name));\n\n\t\tthis.majorGlyphPickers = (['major1', 'major2', 'major3'] as Array<keyof Glyphs>).map(glyphField => new GlyphPicker(this.rootElem, player, majorGlyphsData, glyphField, true));\n\t\tthis.minorGlyphPickers = (['minor1', 'minor2', 'minor3'] as Array<keyof Glyphs>).map(glyphField => new GlyphPicker(this.rootElem, player, minorGlyphsData, glyphField, false));\n\t}\n\n\t// In case we ever want to parse description from tooltip HTML.\n\t//static descriptionRegex = /<a href=\\\\\"\\/wotlk.*>(.*)<\\/a>/g;\n\tgetGlyphData(glyph: number): GlyphData {\n\t\tconst glyphConfig = this.glyphsConfig.majorGlyphs[glyph] || this.glyphsConfig.minorGlyphs[glyph];\n\n\t\treturn {\n\t\t\tid: glyph,\n\t\t\tname: glyphConfig.name,\n\t\t\tdescription: glyphConfig.description,\n\t\t\ticonUrl: glyphConfig.iconUrl,\n\t\t\tquality: ItemQuality.ItemQualityCommon,\n\t\t};\n\t}\n}\n\nclass GlyphPicker extends Input<Player<any>, number> {\n\treadonly player: Player<any>;\n\tprivate readonly iconElem: HTMLAnchorElement;\n\n\tprivate readonly glyphOptions: Array<GlyphData>;\n\tselectedGlyph: GlyphData;\n\n\tconstructor(parent: HTMLElement, player: Player<any>, glyphOptions: Array<GlyphData>, glyphField: keyof Glyphs, isMajor: boolean) {\n\t\tsuper(parent, 'glyph-picker-root', player, {\n\t\t\tchangedEvent: (player: Player<any>) => player.glyphsChangeEmitter,\n\t\t\tgetValue: (player: Player<any>) => player.getGlyphs()[glyphField] as number,\n\t\t\tsetValue: (eventID: EventID, player: Player<any>, newValue: number) => {\n\t\t\t\tconst glyphs = player.getGlyphs();\n\t\t\t\t(glyphs[glyphField] as number) = newValue;\n\t\t\t\tplayer.setGlyphs(eventID, glyphs);\n\t\t\t},\n\t\t});\n\t\tif (!isMajor) {\n\t\t\tthis.rootElem.classList.add('minor');\n\t\t}\n\t\tthis.player = player;\n\t\tthis.glyphOptions = glyphOptions;\n\t\tthis.selectedGlyph = emptyGlyphData;\n\n\t\tthis.rootElem.innerHTML = `<a class=\"glyph-picker-icon\"></a>`;\n\n\t\tthis.iconElem = this.rootElem.getElementsByClassName('glyph-picker-icon')[0] as HTMLAnchorElement;\n\t\tthis.iconElem.addEventListener('click', event => {\n\t\t\tevent.preventDefault();\n\t\t\tconst selectorModal = new GlyphSelectorModal(this.rootElem.closest('.individual-sim-ui')!, this, this.glyphOptions);\n\t\t});\n\t\tthis.iconElem.addEventListener('touchstart', event => {\n\t\t\tevent.preventDefault();\n\t\t\tconst selectorModal = new GlyphSelectorModal(this.rootElem.closest('.individual-sim-ui')!, this, this.glyphOptions);\n\t\t});\n\t\tthis.iconElem.addEventListener('touchend', event => {\n\t\t\tevent.preventDefault();\n\t\t});\n\n\t\tthis.init();\n\t}\n\n\tgetInputElem(): HTMLElement {\n\t\treturn this.iconElem;\n\t}\n\n\tgetInputValue(): number {\n\t\treturn this.selectedGlyph.id;\n\t}\n\n\tsetInputValue(newValue: number) {\n\t\tthis.selectedGlyph = this.glyphOptions.find(glyphData => glyphData.id == newValue) || emptyGlyphData;\n\n\t\tthis.iconElem.style.backgroundImage = `url('${this.selectedGlyph.iconUrl}')`;\n\t\tthis.iconElem.href = this.selectedGlyph.id == 0 ? '' : ActionId.makeItemUrl(this.selectedGlyph.id);\n\t}\n}\n\nclass GlyphSelectorModal extends Popup {\n\n\tconstructor(parent: HTMLElement, glyphPicker: GlyphPicker, glyphOptions: Array<GlyphData>) {\n\t\tsuper(parent);\n\n\t\tthis.rootElem.classList.add('selector-modal');\n\t\tthis.rootElem.classList.add('glyph-modal');\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<div class=\"selector-modal-tab-content-header\">\n\t\t\t\t<input class=\"selector-modal-search\" type=\"text\" placeholder=\"Search...\">\n\t\t\t</div>\n\t\t\t<ul class=\"selector-modal-list\"></ul>\n    `;\n\t\tthis.addCloseButton();\n\n\t\tconst listElem = this.rootElem.getElementsByClassName('selector-modal-list')[0] as HTMLElement;\n\n\t\tglyphOptions = [emptyGlyphData].concat(glyphOptions);\n\t\tconst listItemElems = glyphOptions.map((glyphData, glyphIdx) => {\n\t\t\tconst listItemElem = document.createElement('li');\n\t\t\tlistItemElem.classList.add('selector-modal-list-item');\n\t\t\tlistElem.appendChild(listItemElem);\n\n\t\t\tlistItemElem.dataset.idx = String(glyphIdx);\n\n\t\t\tlistItemElem.innerHTML = `\n        <a class=\"selector-modal-list-item-icon\"></a>\n        <a class=\"selector-modal-list-item-name\">${glyphData.name}</a>\n\t\t\t\t<span class=\"selector-modal-list-item-description\">${glyphData.description}</span>\n      `;\n\n\t\t\t(listItemElem.children[0] as HTMLAnchorElement).href = glyphData.id == 0 ? '' : ActionId.makeItemUrl(glyphData.id);\n\t\t\t(listItemElem.children[1] as HTMLAnchorElement).href = glyphData.id == 0 ? '' : ActionId.makeItemUrl(glyphData.id);\n\t\t\tconst iconElem = listItemElem.getElementsByClassName('selector-modal-list-item-icon')[0] as HTMLImageElement;\n\t\t\ticonElem.style.backgroundImage = `url('${glyphData.iconUrl}')`;\n\n\t\t\tconst nameElem = listItemElem.getElementsByClassName('selector-modal-list-item-name')[0] as HTMLImageElement;\n\t\t\tsetItemQualityCssClass(nameElem, glyphData.quality);\n\n\t\t\tconst onclick = (event: Event) => {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tglyphPicker.setValue(TypedEvent.nextEventID(), glyphData.id);\n\t\t\t};\n\t\t\tnameElem.addEventListener('click', onclick);\n\t\t\ticonElem.addEventListener('click', onclick);\n\n\t\t\treturn listItemElem;\n\t\t});\n\n\t\tconst updateSelected = () => {\n\t\t\tconst selectedGlyphId = glyphPicker.selectedGlyph.id;\n\n\t\t\tlistItemElems.forEach(elem => {\n\t\t\t\tconst listItemIdx = parseInt(elem.dataset.idx!);\n\t\t\t\tconst listItemData = glyphOptions[listItemIdx];\n\n\t\t\t\telem.classList.remove('active');\n\t\t\t\tif (listItemData.id == selectedGlyphId) {\n\t\t\t\t\telem.classList.add('active');\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tupdateSelected();\n\n\t\tconst applyFilters = () => {\n\t\t\tlet validItemElems = listItemElems;\n\t\t\tconst selectedGlyph = glyphPicker.selectedGlyph;\n\n\t\t\tvalidItemElems = validItemElems.filter(elem => {\n\t\t\t\tconst listItemIdx = parseInt(elem.dataset.idx!);\n\t\t\t\tconst listItemData = glyphOptions[listItemIdx];\n\n\t\t\t\tif (searchInput.value.length > 0) {\n\t\t\t\t\tconst searchQuery = searchInput.value.toLowerCase().split(\" \");\n\t\t\t\t\tconst name = listItemData.name.toLowerCase();\n\n\t\t\t\t\tvar include = true;\n\t\t\t\t\tsearchQuery.forEach(v => {\n\t\t\t\t\t\tif (!name.includes(v))\n\t\t\t\t\t\t\tinclude = false;\n\t\t\t\t\t});\n\t\t\t\t\tif (!include) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\n\t\t\tlet numShown = 0;\n\t\t\tlistItemElems.forEach(elem => {\n\t\t\t\tif (validItemElems.includes(elem)) {\n\t\t\t\t\telem.classList.remove('hidden');\n\t\t\t\t\tnumShown++;\n\t\t\t\t\tif (numShown % 2 == 0) {\n\t\t\t\t\t\telem.classList.remove('odd');\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem.classList.add('odd');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\telem.classList.add('hidden');\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tconst searchInput = this.rootElem.getElementsByClassName('selector-modal-search')[0] as HTMLInputElement;\n\t\tsearchInput.addEventListener('input', applyFilters);\n\t\tsearchInput.addEventListener(\"keyup\", ev => {\n\t\t\tif (ev.key == \"Enter\") {\n\t\t\t\tlistItemElems.find(ele => {\n\t\t\t\t\tif (ele.classList.contains(\"hidden\")) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tconst nameElem = ele.getElementsByClassName('selector-modal-list-item-name')[0] as HTMLElement;\n\t\t\t\t\tnameElem.click();\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tglyphPicker.player.glyphsChangeEmitter.on(() => {\n\t\t\tapplyFilters();\n\t\t\tupdateSelected();\n\t\t});\n\t}\n}\n","export const CHARACTER_LEVEL = 80;\nexport const MAX_TALENT_POINTS = CHARACTER_LEVEL - 9;\nexport const BOSS_LEVEL = CHARACTER_LEVEL + 3;\n\nexport const EXPERTISE_PER_QUARTER_PERCENT_REDUCTION = 32.79 / 4;\nexport const MELEE_CRIT_RATING_PER_CRIT_CHANCE = 45.91;\nexport const MELEE_HIT_RATING_PER_HIT_CHANCE = 32.79;\n\nexport const SPELL_CRIT_RATING_PER_CRIT_CHANCE = 45.91;\nexport const SPELL_HIT_RATING_PER_HIT_CHANCE = 26.23;\n\nexport const HASTE_RATING_PER_HASTE_PERCENT = 32.79;\n\n// Shamans, Paladins, Druids, Deathknights get more haste than everyone else, for melee.\nexport const SPECIAL_MELEE_HASTE_RATING_PER_HASTE_PERCENT = 25.22;\n\nexport const DEFENSE_RATING_PER_DEFENSE = 4.92;\nexport const MISS_DODGE_PARRY_BLOCK_CRIT_CHANCE_PER_DEFENSE = 0.04;\nexport const BLOCK_RATING_PER_BLOCK_CHANCE = 16.39;\nexport const DODGE_RATING_PER_DODGE_CHANCE = 45.25;\nexport const PARRY_RATING_PER_PARRY_CHANCE = 45.25;\nexport const RESILIENCE_RATING_PER_CRIT_REDUCTION_CHANCE = 82.0;\nexport const RESILIENCE_RATING_PER_CRIT_DAMAGE_REDUCTION_PERCENT = 39.4231 / 2.2;\n","import { Player } from '../player.js';\nimport { Class } from '../proto/common.js';\nimport { Spec } from '../proto/common.js';\nimport {\n\tSpecTalents,\n\tspecToClass,\n\tspecTypeFunctions,\n} from '../proto_utils/utils.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\n\nimport { druidTalentsConfig, druidGlyphsConfig } from './druid.js';\nimport { hunterTalentsConfig, hunterGlyphsConfig } from './hunter.js';\nimport { mageTalentsConfig, mageGlyphsConfig } from './mage.js';\nimport { paladinTalentsConfig, paladinGlyphsConfig } from './paladin.js';\nimport { priestTalentsConfig, priestGlyphsConfig } from './priest.js';\nimport { rogueTalentsConfig, rogueGlyphsConfig } from './rogue.js';\nimport { shamanTalentsConfig, shamanGlyphsConfig } from './shaman.js';\nimport { warlockTalentsConfig, warlockGlyphsConfig } from './warlock.js';\nimport { warriorTalentsConfig, warriorGlyphsConfig } from './warrior.js';\nimport { deathknightTalentsConfig, deathknightGlyphsConfig } from './deathknight.js';\nimport { TalentsConfig, TalentsPicker } from './talents_picker.js';\nimport { GlyphsConfig, GlyphsPicker } from './glyphs_picker.js';\n\nimport * as Mechanics from '../constants/mechanics.js';\n\nexport function newTalentsPicker(parent: HTMLElement, player: Player<any>): TalentsPicker<Player<any>, any> {\n\treturn new TalentsPicker(parent, player, {\n\t\ttrees: classTalentsConfig[player.getClass()],\n\t\tchangedEvent: (player: Player<any>) => player.talentsChangeEmitter,\n\t\tgetValue: (player: Player<any>) => player.getTalentsString(),\n\t\tsetValue: (eventID: EventID, player: Player<any>, newValue: string) => {\n\t\t\tplayer.setTalentsString(eventID, newValue);\n\t\t},\n\t\tpointsPerRow: 5,\n\t\tmaxPoints: Mechanics.MAX_TALENT_POINTS,\n\t});\n}\n\nexport function newGlyphsPicker(parent: HTMLElement, player: Player<any>): GlyphsPicker {\n\treturn new GlyphsPicker(parent, player, classGlyphsConfig[player.getClass()]);\n}\n\nexport const classTalentsConfig: Record<Class, TalentsConfig<any>> = {\n\t[Class.ClassUnknown]: [],\n\t[Class.ClassDeathknight]: deathknightTalentsConfig,\n\t[Class.ClassDruid]: druidTalentsConfig,\n\t[Class.ClassShaman]: shamanTalentsConfig,\n\t[Class.ClassHunter]: hunterTalentsConfig,\n\t[Class.ClassMage]: mageTalentsConfig,\n\t[Class.ClassRogue]: rogueTalentsConfig,\n\t[Class.ClassPaladin]: paladinTalentsConfig,\n\t[Class.ClassPriest]: priestTalentsConfig,\n\t[Class.ClassWarlock]: warlockTalentsConfig,\n\t[Class.ClassWarrior]: warriorTalentsConfig,\n};\n\nexport const classGlyphsConfig: Record<Class, GlyphsConfig> = {\n\t[Class.ClassUnknown]: { majorGlyphs: [], minorGlyphs: [] },\n\t[Class.ClassDeathknight]: deathknightGlyphsConfig,\n\t[Class.ClassDruid]: druidGlyphsConfig,\n\t[Class.ClassShaman]: shamanGlyphsConfig,\n\t[Class.ClassHunter]: hunterGlyphsConfig,\n\t[Class.ClassMage]: mageGlyphsConfig,\n\t[Class.ClassRogue]: rogueGlyphsConfig,\n\t[Class.ClassPaladin]: paladinGlyphsConfig,\n\t[Class.ClassPriest]: priestGlyphsConfig,\n\t[Class.ClassWarlock]: warlockGlyphsConfig,\n\t[Class.ClassWarrior]: warriorGlyphsConfig,\n};\n\nexport function talentSpellIdsToTalentString(playerClass: Class, talentIds: Array<number>): string {\n\tconst talentsConfig = classTalentsConfig[playerClass];\n\n\tconst talentsStr = talentsConfig.map(treeConfig => {\n\t\tconst treeStr = treeConfig.talents.map(talentConfig => {\n\t\t\tconst spellIdIndex = talentConfig.spellIds.findIndex(spellId => talentIds.includes(spellId));\n\t\t\tif (spellIdIndex == -1) {\n\t\t\t\treturn '0';\n\t\t\t} else {\n\t\t\t\treturn String(spellIdIndex + 1);\n\t\t\t}\n\t\t}).join('').replace(/0+$/g, '');\n\n\t\treturn treeStr;\n\t}).join('-').replace(/-+$/g, '');\n\n\treturn talentsStr\n}\n\nexport function playerTalentStringToProto<SpecType extends Spec>(spec: Spec, talentString: string): SpecTalents<SpecType> {\n\tconst specFunctions = specTypeFunctions[spec];\n\tconst proto = specFunctions.talentsCreate() as SpecTalents<SpecType>;\n\tconst talentsConfig = classTalentsConfig[specToClass[spec]] as TalentsConfig<SpecTalents<SpecType>>;\n\n\treturn talentStringToProto(proto, talentString, talentsConfig);\n}\n\nexport function talentStringToProto<TalentsProto>(proto: TalentsProto, talentString: string, talentsConfig: TalentsConfig<TalentsProto>): TalentsProto {\n\ttalentString.split('-').forEach((treeString, treeIdx) => {\n\t\tconst treeConfig = talentsConfig[treeIdx];\n\t\t[...treeString].forEach((talentString, i) => {\n\t\t\tconst talentConfig = treeConfig.talents[i];\n\t\t\tconst points = parseInt(talentString);\n\t\t\tif (talentConfig.fieldName) {\n\t\t\t\tif (talentConfig.maxPoints == 1) {\n\t\t\t\t\t(proto[talentConfig.fieldName] as unknown as boolean) = points == 1;\n\t\t\t\t} else {\n\t\t\t\t\t(proto[talentConfig.fieldName] as unknown as number) = points;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\treturn proto;\n}\n\n// Note that this function will fail if any of the talent names are not defined. TODO: Remove that condition\n// once all talents are migrated to wrath and use all fields.\nexport function protoToTalentString<TalentsProto>(proto: TalentsProto, talentsConfig: TalentsConfig<TalentsProto>): string {\n\treturn talentsConfig.map(treeConfig => {\n\t\treturn treeConfig.talents\n\t\t\t.map(talentConfig => String(Number(proto[talentConfig.fieldName!])))\n\t\t\t.join('').replace(/0+$/g, '');\n\t}).join('-').replace(/-+$/g, '');\n}\n","import {\n\tClass,\n\tCooldowns,\n\tConsumes,\n\tEnchant,\n\tGem,\n\tGemColor,\n\tGlyphs,\n\tHealingModel,\n\tIndividualBuffs,\n\tItemSlot,\n\tItem,\n\tProfession,\n\tRace, ShattrathFaction,\n\tRaidTarget,\n\tRangedWeaponType,\n\tSpec,\n\tFaction,\n\tStat,\n\tWeaponType,\n} from './proto/common.js';\n\nimport { PlayerStats } from './proto/api.js';\nimport { Player as PlayerProto } from './proto/api.js';\nimport { StatWeightsResult } from './proto/api.js';\nimport { EquippedItem, getWeaponDPS } from './proto_utils/equipped_item.js';\n\nimport { playerTalentStringToProto } from './talents/factory.js';\nimport { Gear } from './proto_utils/gear.js';\nimport {\n\tisUnrestrictedGem,\n\tgemEligibleForSocket,\n\tgemMatchesSocket,\n} from './proto_utils/gems.js';\nimport { Stats } from './proto_utils/stats.js';\n\nimport {\n\tSpecRotation,\n\tSpecTalents,\n\tSpecTypeFunctions,\n\tSpecOptions,\n\tcanEquipEnchant,\n\tcanEquipItem,\n\tclassColors,\n\temptyRaidTarget,\n\tgetEligibleEnchantSlots,\n\tgetEligibleItemSlots,\n\tgetTalentTree,\n\tgetTalentTreeIcon,\n\tgetMetaGemEffectEP,\n\tisTankSpec,\n\tnewRaidTarget,\n\tplayerToSpec,\n\traceToFaction,\n\tspecToClass,\n\tspecToEligibleRaces,\n\tspecTypeFunctions,\n\twithSpecProto,\n} from './proto_utils/utils.js';\n\nimport { Listener } from './typed_event.js';\nimport { EventID, TypedEvent } from './typed_event.js';\nimport { Party, MAX_PARTY_SIZE } from './party.js';\nimport { Raid } from './raid.js';\nimport { Sim } from './sim.js';\nimport { sum } from './utils.js';\nimport { wait } from './utils.js';\nimport { WorkerPool } from './worker_pool.js';\n\n// Manages all the gear / consumes / other settings for a single Player.\nexport class Player<SpecType extends Spec> {\n\treadonly sim: Sim;\n\tprivate party: Party | null;\n\tprivate raid: Raid | null;\n\n\treadonly spec: Spec;\n\tprivate name: string = '';\n\tprivate buffs: IndividualBuffs = IndividualBuffs.create();\n\tprivate consumes: Consumes = Consumes.create();\n\tprivate bonusStats: Stats = new Stats();\n\tprivate gear: Gear = new Gear({});\n\tprivate race: Race;\n\tprivate profession1: Profession = 0;\n\tprivate profession2: Profession = 0;\n\tprivate shattFaction: ShattrathFaction = 0;\n\tprivate rotation: SpecRotation<SpecType>;\n\tprivate talentsString: string = '';\n\tprivate glyphs: Glyphs = Glyphs.create();\n\tprivate specOptions: SpecOptions<SpecType>;\n\tprivate cooldowns: Cooldowns = Cooldowns.create();\n\tprivate inFrontOfTarget: boolean = false;\n\tprivate distanceFromTarget: number = 0;\n\tprivate healingModel: HealingModel = HealingModel.create();\n\n\tprivate itemEPCache: Map<number, number> = new Map<number, number>();\n\tprivate gemEPCache: Map<number, number> = new Map<number, number>();\n\tprivate enchantEPCache: Map<number, number> = new Map<number, number>();\n\tprivate talents: SpecTalents<SpecType> | null = null;\n\n\treadonly specTypeFunctions: SpecTypeFunctions<SpecType>;\n\n\tprivate epWeights: Stats = new Stats();\n\tprivate currentStats: PlayerStats = PlayerStats.create();\n\n\treadonly nameChangeEmitter = new TypedEvent<void>('PlayerName');\n\treadonly buffsChangeEmitter = new TypedEvent<void>('PlayerBuffs');\n\treadonly consumesChangeEmitter = new TypedEvent<void>('PlayerConsumes');\n\treadonly bonusStatsChangeEmitter = new TypedEvent<void>('PlayerBonusStats');\n\treadonly gearChangeEmitter = new TypedEvent<void>('PlayerGear');\n\treadonly professionChangeEmitter = new TypedEvent<void>('PlayerProfession');\n\treadonly raceChangeEmitter = new TypedEvent<void>('PlayerRace');\n\treadonly rotationChangeEmitter = new TypedEvent<void>('PlayerRotation');\n\treadonly talentsChangeEmitter = new TypedEvent<void>('PlayerTalents');\n\treadonly glyphsChangeEmitter = new TypedEvent<void>('PlayerGlyphs');\n\treadonly specOptionsChangeEmitter = new TypedEvent<void>('PlayerSpecOptions');\n\treadonly cooldownsChangeEmitter = new TypedEvent<void>('PlayerCooldowns');\n\treadonly inFrontOfTargetChangeEmitter = new TypedEvent<void>('PlayerInFrontOfTarget');\n\treadonly distanceFromTargetChangeEmitter = new TypedEvent<void>('PlayerDistanceFromTarget');\n\treadonly healingModelChangeEmitter = new TypedEvent<void>('PlayerHealingModel');\n\treadonly epWeightsChangeEmitter = new TypedEvent<void>('PlayerEpWeights');\n\n\treadonly currentStatsEmitter = new TypedEvent<void>('PlayerCurrentStats');\n\n\t// Emits when any of the above emitters emit.\n\treadonly changeEmitter: TypedEvent<void>;\n\n\tconstructor(spec: Spec, sim: Sim) {\n\t\tthis.sim = sim;\n\t\tthis.party = null;\n\t\tthis.raid = null;\n\n\t\tthis.spec = spec;\n\t\tthis.race = specToEligibleRaces[this.spec][0];\n\t\tthis.specTypeFunctions = specTypeFunctions[this.spec] as SpecTypeFunctions<SpecType>;\n\t\tthis.rotation = this.specTypeFunctions.rotationCreate();\n\t\tthis.specOptions = this.specTypeFunctions.optionsCreate();\n\n\t\tthis.changeEmitter = TypedEvent.onAny([\n\t\t\tthis.nameChangeEmitter,\n\t\t\tthis.buffsChangeEmitter,\n\t\t\tthis.consumesChangeEmitter,\n\t\t\tthis.bonusStatsChangeEmitter,\n\t\t\tthis.gearChangeEmitter,\n\t\t\tthis.professionChangeEmitter,\n\t\t\tthis.raceChangeEmitter,\n\t\t\tthis.rotationChangeEmitter,\n\t\t\tthis.talentsChangeEmitter,\n\t\t\tthis.glyphsChangeEmitter,\n\t\t\tthis.specOptionsChangeEmitter,\n\t\t\tthis.cooldownsChangeEmitter,\n\t\t\tthis.inFrontOfTargetChangeEmitter,\n\t\t\tthis.distanceFromTargetChangeEmitter,\n\t\t\tthis.healingModelChangeEmitter,\n\t\t\tthis.epWeightsChangeEmitter,\n\t\t], 'PlayerChange');\n\t}\n\n\tgetSpecIcon(): string {\n\t\treturn getTalentTreeIcon(this.spec, this.getTalentsString());\n\t}\n\n\tgetClass(): Class {\n\t\treturn specToClass[this.spec];\n\t}\n\n\tgetClassColor(): string {\n\t\treturn classColors[this.getClass()];\n\t}\n\n\tgetParty(): Party | null {\n\t\treturn this.party;\n\t}\n\n\tgetRaid(): Raid | null {\n\t\treturn this.raid;\n\t}\n\n\t// Returns this player's index within its party [0-4].\n\tgetPartyIndex(): number {\n\t\tif (this.party == null) {\n\t\t\tthrow new Error('Can\\'t get party index for player without a party!');\n\t\t}\n\n\t\treturn this.party.getPlayers().indexOf(this);\n\t}\n\n\t// Returns this player's index within its raid [0-24].\n\tgetRaidIndex(): number {\n\t\tif (this.party == null) {\n\t\t\tthrow new Error('Can\\'t get raid index for player without a party!');\n\t\t}\n\n\t\treturn this.party.getIndex() * MAX_PARTY_SIZE + this.getPartyIndex();\n\t}\n\n\t// This should only ever be called from party.\n\tsetParty(newParty: Party | null) {\n\t\tif (newParty == null) {\n\t\t\tthis.party = null;\n\t\t\tthis.raid = null;\n\t\t} else {\n\t\t\tthis.party = newParty;\n\t\t\tthis.raid = newParty.raid;\n\t\t}\n\t}\n\n\tgetOtherPartyMembers(): Array<Player<any>> {\n\t\tif (this.party == null) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn this.party.getPlayers().filter(player => player != null && player != this) as Array<Player<any>>;\n\t}\n\n\t// Returns all items that this player can wear in the given slot.\n\tgetItems(slot: ItemSlot | undefined): Array<Item> {\n\t\treturn this.sim.getItems(slot).filter(item => canEquipItem(item, this.spec, slot));\n\t}\n\n\t// Returns all enchants that this player can wear in the given slot.\n\tgetEnchants(slot: ItemSlot | undefined): Array<Enchant> {\n\t\treturn this.sim.getEnchants(slot).filter(enchant => canEquipEnchant(enchant, this.spec));\n\t}\n\n\t// Returns all gems that this player can wear of the given color.\n\tgetGems(socketColor?: GemColor): Array<Gem> {\n\t\treturn this.sim.getGems(socketColor);\n\t}\n\n\tgetEpWeights(): Stats {\n\t\treturn this.epWeights;\n\t}\n\n\tsetEpWeights(eventID: EventID, newEpWeights: Stats) {\n\t\tthis.epWeights = newEpWeights;\n\t\tthis.epWeightsChangeEmitter.emit(eventID);\n\n\t\tthis.gemEPCache = new Map();\n\t\tthis.itemEPCache = new Map();\n\t\tthis.enchantEPCache = new Map();\n\t}\n\n\tasync computeStatWeights(eventID: EventID, epStats: Array<Stat>, epReferenceStat: Stat, onProgress: Function): Promise<StatWeightsResult> {\n\t\tconst result = await this.sim.statWeights(this, epStats, epReferenceStat, onProgress);\n\t\treturn result;\n\t}\n\n\tgetCurrentStats(): PlayerStats {\n\t\treturn PlayerStats.clone(this.currentStats);\n\t}\n\n\tsetCurrentStats(eventID: EventID, newStats: PlayerStats) {\n\t\tthis.currentStats = newStats;\n\t\tthis.currentStatsEmitter.emit(eventID);\n\n\t\t//// Remove item cooldowns if there is no cooldown available for the item.\n\t\t//const availableCooldowns = this.currentStats.cooldowns;\n\t\t//const newCooldowns = this.getCooldowns();\n\t\t//newCooldowns.cooldowns = newCooldowns.cooldowns.filter(cd => {\n\t\t//\tif (cd.id && 'itemId' in cd.id.rawId) {\n\t\t//\t\treturn availableCooldowns.find(acd => ActionIdProto.equals(acd, cd.id)) != null;\n\t\t//\t} else {\n\t\t//\t\treturn true;\n\t\t//\t}\n\t\t//});\n\t\t//// TODO: Reference the parent event ID\n\t\t//this.setCooldowns(TypedEvent.nextEventID(), newCooldowns);\n\t}\n\n\tgetName(): string {\n\t\treturn this.name;\n\t}\n\tsetName(eventID: EventID, newName: string) {\n\t\tif (newName != this.name) {\n\t\t\tthis.name = newName;\n\t\t\tthis.nameChangeEmitter.emit(eventID);\n\t\t}\n\t}\n\n\tgetLabel(): string {\n\t\tif (this.party) {\n\t\t\treturn `${this.name} (#${this.getRaidIndex() + 1})`;\n\t\t} else {\n\t\t\treturn this.name;\n\t\t}\n\t}\n\n\tgetRace(): Race {\n\t\treturn this.race;\n\t}\n\tsetRace(eventID: EventID, newRace: Race) {\n\t\tif (newRace != this.race) {\n\t\t\tthis.race = newRace;\n\t\t\tthis.raceChangeEmitter.emit(eventID);\n\t\t}\n\t}\n\n\tgetProfession1(): Profession {\n\t\treturn this.profession1;\n\t}\n\tsetProfession1(eventID: EventID, newProfession: Profession) {\n\t\tif (newProfession != this.profession1) {\n\t\t\tthis.profession1 = newProfession;\n\t\t\tthis.professionChangeEmitter.emit(eventID);\n\t\t}\n\t}\n\tgetProfession2(): Profession {\n\t\treturn this.profession2;\n\t}\n\tsetProfession2(eventID: EventID, newProfession: Profession) {\n\t\tif (newProfession != this.profession2) {\n\t\t\tthis.profession2 = newProfession;\n\t\t\tthis.professionChangeEmitter.emit(eventID);\n\t\t}\n\t}\n\tgetProfessions(): Array<Profession> {\n\t\treturn [this.profession1, this.profession2].filter(p => p != Profession.ProfessionUnknown);\n\t}\n\tsetProfessions(eventID: EventID, newProfessions: Array<Profession>) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.setProfession1(eventID, newProfessions[0] || Profession.ProfessionUnknown);\n\t\t\tthis.setProfession2(eventID, newProfessions[1] || Profession.ProfessionUnknown);\n\t\t});\n\t}\n\thasProfession(prof: Profession): boolean {\n\t\treturn this.getProfessions().includes(prof);\n\t}\n\tisBlacksmithing(): boolean {\n\t\treturn this.hasProfession(Profession.Blacksmithing);\n\t}\n\n\tgetShattFaction(): ShattrathFaction {\n\t\treturn this.shattFaction;\n\t}\n\tsetShattFaction(eventID: EventID, newFaction: ShattrathFaction) {\n\t\tif (newFaction != this.shattFaction) {\n\t\t\tthis.shattFaction = newFaction;\n\t\t\tthis.raceChangeEmitter.emit(eventID);\n\t\t}\n\t}\n\n\tgetFaction(): Faction {\n\t\treturn raceToFaction[this.getRace()];\n\t}\n\n\tgetBuffs(): IndividualBuffs {\n\t\t// Make a defensive copy\n\t\treturn IndividualBuffs.clone(this.buffs);\n\t}\n\n\tsetBuffs(eventID: EventID, newBuffs: IndividualBuffs) {\n\t\tif (IndividualBuffs.equals(this.buffs, newBuffs))\n\t\t\treturn;\n\n\t\t// Make a defensive copy\n\t\tthis.buffs = IndividualBuffs.clone(newBuffs);\n\t\tthis.buffsChangeEmitter.emit(eventID);\n\t}\n\n\tgetConsumes(): Consumes {\n\t\t// Make a defensive copy\n\t\treturn Consumes.clone(this.consumes);\n\t}\n\n\tsetConsumes(eventID: EventID, newConsumes: Consumes) {\n\t\tif (Consumes.equals(this.consumes, newConsumes))\n\t\t\treturn;\n\n\t\t// Make a defensive copy\n\t\tthis.consumes = Consumes.clone(newConsumes);\n\t\tthis.consumesChangeEmitter.emit(eventID);\n\t}\n\n\tgetCooldowns(): Cooldowns {\n\t\t// Make a defensive copy\n\t\treturn Cooldowns.clone(this.cooldowns);\n\t}\n\n\tsetCooldowns(eventID: EventID, newCooldowns: Cooldowns) {\n\t\tif (Cooldowns.equals(this.cooldowns, newCooldowns))\n\t\t\treturn;\n\n\t\t// Make a defensive copy\n\t\tthis.cooldowns = Cooldowns.clone(newCooldowns);\n\t\tthis.cooldownsChangeEmitter.emit(eventID);\n\t}\n\n\tcanDualWield2H(): boolean {\n\t\treturn this.getClass() == Class.ClassWarrior && (this.getTalents() as SpecTalents<Spec.SpecWarrior>).titansGrip;\n\t}\n\n\tequipItem(eventID: EventID, slot: ItemSlot, newItem: EquippedItem | null) {\n\t\tthis.setGear(eventID, this.gear.withEquippedItem(slot, newItem, this.canDualWield2H()));\n\t}\n\n\tgetEquippedItem(slot: ItemSlot): EquippedItem | null {\n\t\treturn this.gear.getEquippedItem(slot);\n\t}\n\n\tgetGear(): Gear {\n\t\treturn this.gear;\n\t}\n\n\tsetGear(eventID: EventID, newGear: Gear) {\n\t\tif (newGear.equals(this.gear))\n\t\t\treturn;\n\n\t\t// Commented for now because the UI for this is weird.\n\t\t//// If trinkets have changed and there were cooldowns assigned for those trinkets,\n\t\t//// try to match them up and switch to the new trinkets.\n\t\t//const newCooldowns = this.getCooldowns();\n\t\t//const oldTrinketIds = this.gear.getTrinkets().map(trinket => trinket?.asActionIdProto() || ActionIdProto.create());\n\t\t//const newTrinketIds = newGear.getTrinkets().map(trinket => trinket?.asActionIdProto() || ActionIdProto.create());\n\n\t\t//for (let i = 0; i < 2; i++) {\n\t\t//\tconst oldTrinketId = oldTrinketIds[i];\n\t\t//\tconst newTrinketId = newTrinketIds[i];\n\t\t//\tif (ActionIdProto.equals(oldTrinketId, ActionIdProto.create())) {\n\t\t//\t\tcontinue;\n\t\t//\t}\n\t\t//\tif (ActionIdProto.equals(newTrinketId, ActionIdProto.create())) {\n\t\t//\t\tcontinue;\n\t\t//\t}\n\t\t//\tif (ActionIdProto.equals(oldTrinketId, newTrinketId)) {\n\t\t//\t\tcontinue;\n\t\t//\t}\n\t\t//\tnewCooldowns.cooldowns.forEach(cd => {\n\t\t//\t\tif (ActionIdProto.equals(cd.id, oldTrinketId)) {\n\t\t//\t\t\tcd.id = newTrinketId;\n\t\t//\t\t}\n\t\t//\t});\n\t\t//}\n\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.gear = newGear;\n\t\t\tthis.gearChangeEmitter.emit(eventID);\n\t\t\t//this.setCooldowns(eventID, newCooldowns);\n\t\t});\n\t}\n\n\tgetBonusStats(): Stats {\n\t\treturn this.bonusStats;\n\t}\n\n\tsetBonusStats(eventID: EventID, newBonusStats: Stats) {\n\t\tif (newBonusStats.equals(this.bonusStats))\n\t\t\treturn;\n\n\t\tthis.bonusStats = newBonusStats;\n\t\tthis.bonusStatsChangeEmitter.emit(eventID);\n\t}\n\n\tgetRotation(): SpecRotation<SpecType> {\n\t\treturn this.specTypeFunctions.rotationCopy(this.rotation);\n\t}\n\n\tsetRotation(eventID: EventID, newRotation: SpecRotation<SpecType>) {\n\t\tif (this.specTypeFunctions.rotationEquals(newRotation, this.rotation))\n\t\t\treturn;\n\n\t\tthis.rotation = this.specTypeFunctions.rotationCopy(newRotation);\n\t\tthis.rotationChangeEmitter.emit(eventID);\n\t}\n\n\tgetTalents(): SpecTalents<SpecType> {\n\t\tif (this.talents == null) {\n\t\t\tthis.talents = playerTalentStringToProto(this.spec, this.talentsString) as SpecTalents<SpecType>;\n\t\t}\n\t\treturn this.talents;\n\t}\n\n\tgetTalentsString(): string {\n\t\treturn this.talentsString;\n\t}\n\n\tsetTalentsString(eventID: EventID, newTalentsString: string) {\n\t\tif (newTalentsString == this.talentsString)\n\t\t\treturn;\n\n\t\tthis.talentsString = newTalentsString;\n\t\tthis.talents = null;\n\t\tthis.talentsChangeEmitter.emit(eventID);\n\t}\n\n\tgetTalentTree(): number {\n\t\treturn getTalentTree(this.getTalentsString());\n\t}\n\n\tgetTalentTreeIcon(): string {\n\t\treturn getTalentTreeIcon(this.spec, this.getTalentsString());\n\t}\n\n\tgetGlyphs(): Glyphs {\n\t\t// Make a defensive copy\n\t\treturn Glyphs.clone(this.glyphs);\n\t}\n\n\tsetGlyphs(eventID: EventID, newGlyphs: Glyphs) {\n\t\tif (Glyphs.equals(this.glyphs, newGlyphs))\n\t\t\treturn;\n\n\t\t// Make a defensive copy\n\t\tthis.glyphs = Glyphs.clone(newGlyphs);\n\t\tthis.glyphsChangeEmitter.emit(eventID);\n\t}\n\n\tgetMajorGlyphs(): Array<number> {\n\t\treturn [\n\t\t\tthis.glyphs.major1,\n\t\t\tthis.glyphs.major2,\n\t\t\tthis.glyphs.major3,\n\t\t].filter(glyph => glyph != 0);\n\t}\n\n\tgetMinorGlyphs(): Array<number> {\n\t\treturn [\n\t\t\tthis.glyphs.minor1,\n\t\t\tthis.glyphs.minor2,\n\t\t\tthis.glyphs.minor3,\n\t\t].filter(glyph => glyph != 0);\n\t}\n\n\tgetAllGlyphs(): Array<number> {\n\t\treturn this.getMajorGlyphs().concat(this.getMinorGlyphs());\n\t}\n\n\tgetSpecOptions(): SpecOptions<SpecType> {\n\t\treturn this.specTypeFunctions.optionsCopy(this.specOptions);\n\t}\n\n\tsetSpecOptions(eventID: EventID, newSpecOptions: SpecOptions<SpecType>) {\n\t\tif (this.specTypeFunctions.optionsEquals(newSpecOptions, this.specOptions))\n\t\t\treturn;\n\n\t\tthis.specOptions = this.specTypeFunctions.optionsCopy(newSpecOptions);\n\t\tthis.specOptionsChangeEmitter.emit(eventID);\n\t}\n\n\tgetInFrontOfTarget(): boolean {\n\t\treturn this.inFrontOfTarget;\n\t}\n\n\tsetInFrontOfTarget(eventID: EventID, newInFrontOfTarget: boolean) {\n\t\tif (newInFrontOfTarget == this.inFrontOfTarget)\n\t\t\treturn;\n\n\t\tthis.inFrontOfTarget = newInFrontOfTarget;\n\t\tthis.inFrontOfTargetChangeEmitter.emit(eventID);\n\t}\n\n\tgetDistanceFromTarget(): number {\n\t\treturn this.distanceFromTarget;\n\t}\n\n\tsetDistanceFromTarget(eventID: EventID, newDistanceFromTarget: number) {\n\t\tif (newDistanceFromTarget == this.distanceFromTarget)\n\t\t\treturn;\n\n\t\tthis.distanceFromTarget = newDistanceFromTarget;\n\t\tthis.distanceFromTargetChangeEmitter.emit(eventID);\n\t}\n\n\tgetHealingModel(): HealingModel {\n\t\t// Make a defensive copy\n\t\treturn HealingModel.clone(this.healingModel);\n\t}\n\n\tsetHealingModel(eventID: EventID, newHealingModel: HealingModel) {\n\t\tif (HealingModel.equals(this.healingModel, newHealingModel))\n\t\t\treturn;\n\n\t\t// Make a defensive copy\n\t\tthis.healingModel = HealingModel.clone(newHealingModel);\n\t\tthis.healingModelChangeEmitter.emit(eventID);\n\t}\n\n\tcomputeStatsEP(stats?: Stats): number {\n\t\tif (stats == undefined) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn stats.computeEP(this.epWeights);\n\t}\n\n\tcomputeGemEP(gem: Gem): number {\n\t\tif (this.gemEPCache.has(gem.id)) {\n\t\t\treturn this.gemEPCache.get(gem.id)!;\n\t\t}\n\n\t\tconst epFromStats = this.computeStatsEP(new Stats(gem.stats));\n\t\tconst epFromEffect = getMetaGemEffectEP(this.spec, gem, new Stats(this.currentStats.finalStats));\n\t\tlet bonusEP = 0;\n\t\t// unique items are slightly worse than non-unique because you can have only one.\n\t\tif (gem.unique) {\n\t\t\tbonusEP -= 0.01;\n\t\t}\n\n\t\tlet ep = epFromStats + epFromEffect + bonusEP;\n\t\tthis.gemEPCache.set(gem.id, ep);\n\t\treturn ep;\n\t}\n\n\tcomputeEnchantEP(enchant: Enchant): number {\n\t\tif (this.enchantEPCache.has(enchant.id)) {\n\t\t\treturn this.enchantEPCache.get(enchant.id)!;\n\t\t}\n\n\t\tlet ep = this.computeStatsEP(new Stats(enchant.stats));\n\t\tthis.enchantEPCache.set(enchant.id, ep);\n\t\treturn ep\n\t}\n\n\tcomputeItemEP(item: Item): number {\n\t\tif (item == null)\n\t\t\treturn 0;\n\n\t\tif (this.itemEPCache.has(item.id)) {\n\t\t\treturn this.itemEPCache.get(item.id)!;\n\t\t}\n\n\t\tlet itemStats = new Stats(item.stats);\n\t\tif (item.weaponType != WeaponType.WeaponTypeUnknown) {\n\t\t\t// Add weapon dps as attack power, so the EP is appropriate.\n\t\t\tconst weaponDps = getWeaponDPS(item);\n\t\t\titemStats = itemStats.addStat(Stat.StatAttackPower, this.spec == Spec.SpecFeralDruid ? 0 : weaponDps * 14);\n\t\t} else if (![RangedWeaponType.RangedWeaponTypeUnknown, RangedWeaponType.RangedWeaponTypeThrown].includes(item.rangedWeaponType)) {\n\t\t\tconst weaponDps = getWeaponDPS(item);\n\t\t\titemStats = itemStats.addStat(Stat.StatRangedAttackPower, weaponDps * 14);\n\t\t}\n\t\tlet ep = itemStats.computeEP(this.epWeights);\n\n\t\t// unique items are slightly worse than non-unique because you can have only one.\n\t\tif (item.unique) {\n\t\t\tep -= 0.01;\n\t\t}\n\n\t\tconst slot = getEligibleItemSlots(item)[0];\n\t\tconst enchants = this.sim.getEnchants(slot);\n\t\tif (enchants.length > 0) {\n\t\t\tep += Math.max(...enchants.map(enchant => this.computeEnchantEP(enchant)));\n\t\t}\n\n\t\t// Compare whether its better to match sockets + get socket bonus, or just use best gems.\n\t\tconst bestGemEPNotMatchingSockets = sum(item.gemSockets.map(socketColor => {\n\t\t\tconst gems = this.sim.getGems(socketColor).filter(gem => isUnrestrictedGem(gem, this.sim.getPhase()));\n\t\t\tif (gems.length > 0) {\n\t\t\t\treturn Math.max(...gems.map(gem => this.computeGemEP(gem)));\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}));\n\n\t\tconst bestGemEPMatchingSockets = sum(item.gemSockets.map(socketColor => {\n\t\t\tconst gems = this.sim.getGems(socketColor).filter(gem => isUnrestrictedGem(gem, this.sim.getPhase()) && gemMatchesSocket(gem, socketColor));\n\t\t\tif (gems.length > 0) {\n\t\t\t\treturn Math.max(...gems.map(gem => this.computeGemEP(gem)));\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t})) + this.computeStatsEP(new Stats(item.socketBonus));\n\n\t\tep += Math.max(bestGemEPMatchingSockets, bestGemEPNotMatchingSockets);\n\n\t\tthis.itemEPCache.set(item.id, ep);\n\t\treturn ep;\n\t}\n\n\tsetWowheadData(equippedItem: EquippedItem, elem: HTMLElement) {\n\t\tlet parts = ['domain=wotlk'];\n\t\tif (equippedItem.gems.length > 0) {\n\t\t\tparts.push('gems=' + equippedItem.gems.map(gem => gem ? gem.id : 0).join(':'));\n\t\t}\n\t\tif (equippedItem.enchant != null) {\n\t\t\tparts.push('ench=' + equippedItem.enchant.effectId);\n\t\t}\n\t\tparts.push('pcs=' + this.gear.asArray().filter(ei => ei != null).map(ei => ei!.item.id).join(':'));\n\n\t\tif (equippedItem.hasExtraSocket(this.hasProfession(Profession.Blacksmithing))) {\n\t\t\tparts.push('sock');\n\t\t}\n\n\t\telem.setAttribute('data-wowhead', parts.join('&'));\n\t}\n\n\tmakeRaidTarget(): RaidTarget {\n\t\tif (this.party == null) {\n\t\t\treturn emptyRaidTarget();\n\t\t} else {\n\t\t\treturn newRaidTarget(this.getRaidIndex());\n\t\t}\n\t}\n\n\ttoProto(forExport?: boolean): PlayerProto {\n\t\treturn withSpecProto(\n\t\t\tthis.spec,\n\t\t\tPlayerProto.create({\n\t\t\t\tname: this.getName(),\n\t\t\t\trace: this.getRace(),\n\t\t\t\tshattFaction: this.getShattFaction(),\n\t\t\t\tclass: this.getClass(),\n\t\t\t\tequipment: this.getGear().asSpec(),\n\t\t\t\tconsumes: this.getConsumes(),\n\t\t\t\tbonusStats: this.getBonusStats().asArray(),\n\t\t\t\tbuffs: this.getBuffs(),\n\t\t\t\tcooldowns: this.getCooldowns(),\n\t\t\t\ttalentsString: this.getTalentsString(),\n\t\t\t\tglyphs: this.getGlyphs(),\n\t\t\t\tprofession1: this.getProfession1(),\n\t\t\t\tprofession2: this.getProfession2(),\n\t\t\t\tinFrontOfTarget: this.getInFrontOfTarget(),\n\t\t\t\tdistanceFromTarget: this.getDistanceFromTarget(),\n\t\t\t\thealingModel: this.getHealingModel(),\n\t\t\t}),\n\t\t\tthis.getRotation(),\n\t\t\tforExport ? this.specTypeFunctions.talentsCreate() : this.getTalents(),\n\t\t\tthis.getSpecOptions());\n\t}\n\n\tfromProto(eventID: EventID, proto: PlayerProto) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.setName(eventID, proto.name);\n\t\t\tthis.setRace(eventID, proto.race);\n\t\t\tthis.setShattFaction(eventID, proto.shattFaction);\n\t\t\tthis.setGear(eventID, proto.equipment ? this.sim.lookupEquipmentSpec(proto.equipment) : new Gear({}));\n\t\t\tthis.setConsumes(eventID, proto.consumes || Consumes.create());\n\t\t\tthis.setBonusStats(eventID, new Stats(proto.bonusStats));\n\t\t\tthis.setBuffs(eventID, proto.buffs || IndividualBuffs.create());\n\t\t\tthis.setCooldowns(eventID, proto.cooldowns || Cooldowns.create());\n\t\t\tthis.setTalentsString(eventID, proto.talentsString);\n\t\t\tthis.setGlyphs(eventID, proto.glyphs || Glyphs.create());\n\t\t\tthis.setProfession1(eventID, proto.profession1);\n\t\t\tthis.setProfession2(eventID, proto.profession2);\n\t\t\tthis.setInFrontOfTarget(eventID, proto.inFrontOfTarget);\n\t\t\tthis.setDistanceFromTarget(eventID, proto.distanceFromTarget);\n\t\t\tthis.setHealingModel(eventID, proto.healingModel || HealingModel.create());\n\t\t\tthis.setRotation(eventID, this.specTypeFunctions.rotationFromPlayer(proto));\n\t\t\tthis.setSpecOptions(eventID, this.specTypeFunctions.optionsFromPlayer(proto));\n\t\t});\n\t}\n\n\tclone(eventID: EventID): Player<SpecType> {\n\t\tconst newPlayer = new Player<SpecType>(this.spec, this.sim);\n\t\tnewPlayer.fromProto(eventID, this.toProto());\n\t\treturn newPlayer;\n\t}\n\n\tapplySharedDefaults(eventID: EventID) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.setShattFaction(eventID, ShattrathFaction.ShattrathFactionAldor);\n\t\t\tthis.setInFrontOfTarget(eventID, isTankSpec(this.spec));\n\t\t\tthis.setHealingModel(eventID, HealingModel.create());\n\t\t\tthis.setCooldowns(eventID, Cooldowns.create({\n\t\t\t\thpPercentForDefensives: isTankSpec(this.spec) ? 0.35 : 0,\n\t\t\t}));\n\t\t\tthis.setBonusStats(eventID, new Stats());\n\t\t});\n\t}\n\n\tstatic applySharedDefaultsToProto(proto: PlayerProto) {\n\t\tconst spec = playerToSpec(proto);\n\t\tproto.shattFaction = ShattrathFaction.ShattrathFactionAldor;\n\t\tproto.inFrontOfTarget = isTankSpec(spec);\n\t\tproto.healingModel = HealingModel.create();\n\t\tproto.cooldowns = Cooldowns.create({\n\t\t\thpPercentForDefensives: isTankSpec(spec) ? 0.35 : 0,\n\t\t});\n\t\tproto.bonusStats = new Stats().asArray();\n\t}\n}\n","import { Party as PartyProto } from './proto/api.js';\nimport { PartyStats as PartyStatsProto } from './proto/api.js';\nimport { Player as PlayerProto } from './proto/api.js';\nimport { PartyBuffs } from './proto/common.js';\nimport { Class } from './proto/common.js';\nimport { Spec } from './proto/common.js';\nimport { playerToSpec } from './proto_utils/utils.js';\n\nimport { Raid } from './raid.js';\nimport { Player } from './player.js';\nimport { EventID, TypedEvent } from './typed_event.js';\nimport { Sim } from './sim.js';\n\nexport const MAX_PARTY_SIZE = 5;\n\n// Manages all the settings for a single Party.\nexport class Party {\n\treadonly sim: Sim;\n\treadonly raid: Raid;\n\n\tprivate buffs: PartyBuffs = PartyBuffs.create();\n\n\t// Emits when a party member is added/removed/moved.\n\treadonly compChangeEmitter = new TypedEvent<void>();\n\n\treadonly buffsChangeEmitter = new TypedEvent<void>();\n\n\t// Emits when anything in the party changes.\n\treadonly changeEmitter: TypedEvent<void>;\n\n\t// Should always hold exactly MAX_PARTY_SIZE elements.\n\tprivate players: Array<Player<any> | null>;\n\n\tprivate readonly playerChangeListener: (eventID: EventID) => void;\n\n\tconstructor(raid: Raid, sim: Sim) {\n\t\tthis.sim = sim;\n\t\tthis.raid = raid;\n\t\tthis.players = [...Array(MAX_PARTY_SIZE).keys()].map(i => null);\n\t\tthis.playerChangeListener = eventID => this.changeEmitter.emit(eventID);\n\n\t\tthis.changeEmitter = TypedEvent.onAny([\n\t\t\tthis.compChangeEmitter,\n\t\t\tthis.buffsChangeEmitter,\n\t\t], 'PartyChange');\n\t}\n\n\tsize(): number {\n\t\treturn this.players.filter(player => player != null).length;\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn this.size() == 0;\n\t}\n\n\tclear(eventID: EventID) {\n\t\tthis.setBuffs(eventID, PartyBuffs.create());\n\t\tfor (let i = 0; i < MAX_PARTY_SIZE; i++) {\n\t\t\tthis.setPlayer(eventID, i, null);\n\t\t}\n\t}\n\n\t// Returns this party's index within the raid [0-4].\n\tgetIndex(): number {\n\t\treturn this.raid.getParties().indexOf(this);\n\t}\n\n\tgetPlayers(): Array<Player<any> | null> {\n\t\t// Make defensive copy.\n\t\treturn this.players.slice();\n\t}\n\n\tgetPlayer(playerIndex: number): Player<any> | null {\n\t\treturn this.players[playerIndex];\n\t}\n\n\tsetPlayer(eventID: EventID, playerIndex: number, newPlayer: Player<any> | null) {\n\t\tif (playerIndex < 0 || playerIndex >= MAX_PARTY_SIZE) {\n\t\t\tthrow new Error('Invalid player index: ' + playerIndex);\n\t\t}\n\n\t\tif (newPlayer == this.players[playerIndex]) {\n\t\t\treturn;\n\t\t}\n\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tconst oldPlayer = this.players[playerIndex];\n\t\t\tif (oldPlayer != null) {\n\t\t\t\toldPlayer.changeEmitter.off(this.playerChangeListener);\n\t\t\t\toldPlayer.setParty(null);\n\t\t\t}\n\t\t\tif (newPlayer != null) {\n\t\t\t\tconst newPlayerOldParty = newPlayer.getParty();\n\t\t\t\tif (newPlayerOldParty) {\n\t\t\t\t\tnewPlayerOldParty.setPlayer(eventID, newPlayer.getPartyIndex(), null);\n\t\t\t\t}\n\t\t\t\tthis.players[playerIndex] = newPlayer;\n\t\t\t\tnewPlayer.changeEmitter.on(this.playerChangeListener);\n\t\t\t\tnewPlayer.setParty(this);\n\t\t\t} else {\n\t\t\t\tthis.players[playerIndex] = null;\n\t\t\t}\n\n\t\t\tthis.compChangeEmitter.emit(eventID);\n\t\t});\n\t}\n\n\tgetBuffs(): PartyBuffs {\n\t\t// Make a defensive copy\n\t\treturn PartyBuffs.clone(this.buffs);\n\t}\n\n\tsetBuffs(eventID: EventID, newBuffs: PartyBuffs) {\n\t\tif (PartyBuffs.equals(this.buffs, newBuffs))\n\t\t\treturn;\n\n\t\t// Make a defensive copy\n\t\tthis.buffs = PartyBuffs.clone(newBuffs);\n\t\tthis.buffsChangeEmitter.emit(eventID);\n\t}\n\n\ttoProto(forExport?: boolean): PartyProto {\n\t\treturn PartyProto.create({\n\t\t\tplayers: this.players.map(player => player == null ? PlayerProto.create() : player.toProto(forExport)),\n\t\t\tbuffs: this.buffs,\n\t\t});\n\t}\n\n\tfromProto(eventID: EventID, proto: PartyProto) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.setBuffs(eventID, proto.buffs || PartyBuffs.create());\n\n\t\t\tfor (let i = 0; i < MAX_PARTY_SIZE; i++) {\n\t\t\t\tif (!proto.players[i] || proto.players[i].class == Class.ClassUnknown) {\n\t\t\t\t\tthis.setPlayer(eventID, i, null);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst playerProto = proto.players[i];\n\t\t\t\tconst spec = playerToSpec(playerProto);\n\t\t\t\tconst currentPlayer = this.players[i];\n\n\t\t\t\t// Reuse the current player if possible, so that event handlers are preserved.\n\t\t\t\tif (currentPlayer && spec == currentPlayer.spec) {\n\t\t\t\t\tcurrentPlayer.fromProto(eventID, playerProto);\n\t\t\t\t} else {\n\t\t\t\t\tconst newPlayer = new Player(spec, this.sim);\n\t\t\t\t\tnewPlayer.fromProto(eventID, playerProto);\n\t\t\t\t\tthis.setPlayer(eventID, i, newPlayer);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n","import { ActionMetrics as ActionMetricsProto } from '../proto/api.js';\nimport { AuraMetrics as AuraMetricsProto } from '../proto/api.js';\nimport { DistributionMetrics as DistributionMetricsProto } from '../proto/api.js';\nimport { Encounter as EncounterProto } from '../proto/common.js';\nimport { EncounterMetrics as EncounterMetricsProto } from '../proto/api.js';\nimport { Party as PartyProto } from '../proto/api.js';\nimport { PartyMetrics as PartyMetricsProto } from '../proto/api.js';\nimport { Player as PlayerProto } from '../proto/api.js';\nimport { UnitMetrics as UnitMetricsProto } from '../proto/api.js';\nimport { Raid as RaidProto } from '../proto/api.js';\nimport { RaidMetrics as RaidMetricsProto } from '../proto/api.js';\nimport { ResourceMetrics as ResourceMetricsProto, ResourceType } from '../proto/api.js';\nimport { Target as TargetProto } from '../proto/common.js';\nimport { TargetedActionMetrics as TargetedActionMetricsProto } from '../proto/api.js';\nimport { RaidSimRequest, RaidSimResult } from '../proto/api.js';\nimport { Class } from '../proto/common.js';\nimport { Spec } from '../proto/common.js';\nimport { SimRun } from '../proto/ui.js';\nimport { ActionId, defaultTargetIcon } from '../proto_utils/action_id.js';\nimport { classColors } from '../proto_utils/utils.js';\nimport { getTalentTreeIcon } from '../proto_utils/utils.js';\nimport { playerToSpec } from '../proto_utils/utils.js';\nimport { specToClass } from '../proto_utils/utils.js';\nimport { bucket } from '../utils.js';\nimport { sum } from '../utils.js';\n\nimport {\n\tAuraUptimeLog,\n\tCastLog,\n\tDamageDealtLog,\n\tDpsLog,\n\tEntity,\n\tMajorCooldownUsedLog,\n\tResourceChangedLogGroup,\n\tSimLog,\n\tThreatLogGroup,\n} from './logs_parser.js';\nimport { MAX_PARTY_SIZE } from '../party.js';\n\nexport interface SimResultFilter {\n\t// Raid index of the player to display, or null for all players.\n\tplayer?: number | null;\n\n\t// Target index of the target to display, or null for all targets.\n\ttarget?: number | null;\n}\n\nclass SimResultData {\n\treadonly request: RaidSimRequest;\n\treadonly result: RaidSimResult;\n\n\tconstructor(request: RaidSimRequest, result: RaidSimResult) {\n\t\tthis.request = request;\n\t\tthis.result = result;\n\t}\n\n\tget iterations() {\n\t\treturn this.request.simOptions?.iterations || 1;\n\t}\n\n\tget duration() {\n\t\treturn this.result.avgIterationDuration || 1;\n\t}\n\n\tget firstIterationDuration() {\n\t\treturn this.result.firstIterationDuration || 1;\n\t}\n}\n\n// Holds all the data from a simulation call, and provides helper functions\n// for parsing it.\nexport class SimResult {\n\treadonly request: RaidSimRequest;\n\treadonly result: RaidSimResult;\n\n\treadonly raidMetrics: RaidMetrics;\n\treadonly encounterMetrics: EncounterMetrics;\n\treadonly logs: Array<SimLog>;\n\n\tprivate constructor(request: RaidSimRequest, result: RaidSimResult, raidMetrics: RaidMetrics, encounterMetrics: EncounterMetrics, logs: Array<SimLog>) {\n\t\tthis.request = request;\n\t\tthis.result = result;\n\t\tthis.raidMetrics = raidMetrics;\n\t\tthis.encounterMetrics = encounterMetrics;\n\t\tthis.logs = logs;\n\t}\n\n\tgetPlayers(filter?: SimResultFilter): Array<UnitMetrics> {\n\t\tif (filter?.player || filter?.player === 0) {\n\t\t\tconst player = this.getPlayerWithIndex(filter.player);\n\t\t\treturn player ? [player] : [];\n\t\t} else {\n\t\t\treturn this.raidMetrics.parties.map(party => party.players).flat();\n\t\t}\n\t}\n\n\t// Returns the first player, regardless of which party / raid slot its in.\n\tgetFirstPlayer(): UnitMetrics | null {\n\t\treturn this.getPlayers()[0] || null;\n\t}\n\n\tgetPlayerWithIndex(unitIndex: number): UnitMetrics | null {\n\t\treturn this.raidMetrics.parties[Math.floor(unitIndex / MAX_PARTY_SIZE)].players[unitIndex % MAX_PARTY_SIZE]\n\t}\n\n\tgetTargets(filter?: SimResultFilter): Array<UnitMetrics> {\n\t\tif (filter?.target || filter?.target === 0) {\n\t\t\tconst target = this.getTargetWithIndex(filter.target);\n\t\t\treturn target ? [target] : [];\n\t\t} else {\n\t\t\treturn this.encounterMetrics.targets.slice();\n\t\t}\n\t}\n\n\tgetTargetWithIndex(unitIndex: number): UnitMetrics | null {\n\t\treturn this.getTargets().find(target => target.unitIndex == unitIndex) || null;\n\t}\n\tgetUnitWithIndex(unitIndex: number): UnitMetrics | null {\n\t\treturn this.getPlayerWithIndex(unitIndex) || this.getTargetWithIndex(unitIndex);\n\t}\n\n\tgetDamageMetrics(filter: SimResultFilter): DistributionMetricsProto {\n\t\tif (filter.player || filter.player === 0) {\n\t\t\treturn this.getPlayerWithIndex(filter.player)?.dps || DistributionMetricsProto.create();\n\t\t}\n\n\t\treturn this.raidMetrics.dps;\n\t}\n\n\tgetActionMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n\t\treturn ActionMetrics.joinById(this.getPlayers(filter).map(player => player.getPlayerAndPetActions().map(action => action.forTarget(filter))).flat());\n\t}\n\n\tgetSpellMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n\t\treturn this.getActionMetrics(filter).filter(e => e.hitAttempts != 0 && !e.isMeleeAction);\n\t}\n\n\tgetMeleeMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n\t\treturn this.getActionMetrics(filter).filter(e => e.hitAttempts != 0 && e.isMeleeAction);\n\t}\n\n\tgetResourceMetrics(resourceType: ResourceType, filter?: SimResultFilter): Array<ResourceMetrics> {\n\t\treturn ResourceMetrics.joinById(this.getPlayers(filter).map(player => player.resources.filter(resource => resource.type == resourceType)).flat());\n\t}\n\n\tgetBuffMetrics(filter?: SimResultFilter): Array<AuraMetrics> {\n\t\treturn AuraMetrics.joinById(this.getPlayers(filter).map(player => player.auras).flat());\n\t}\n\n\tgetDebuffMetrics(filter?: SimResultFilter): Array<AuraMetrics> {\n\t\treturn AuraMetrics.joinById(this.getTargets(filter).map(target => target.auras).flat()).filter(aura => aura.uptimePercent != 0);\n\t}\n\n\ttoProto(): SimRun {\n\t\treturn SimRun.create({\n\t\t\trequest: this.request,\n\t\t\tresult: this.result,\n\t\t});\n\t}\n\n\tstatic async fromProto(proto: SimRun): Promise<SimResult> {\n\t\treturn SimResult.makeNew(proto.request || RaidSimRequest.create(), proto.result || RaidSimResult.create());\n\t}\n\n\tstatic async makeNew(request: RaidSimRequest, result: RaidSimResult): Promise<SimResult> {\n\t\tconst resultData = new SimResultData(request, result);\n\t\tconst logs = await SimLog.parseAll(result);\n\n\t\tconst raidPromise = RaidMetrics.makeNew(resultData, request.raid!, result.raidMetrics!, logs);\n\t\tconst encounterPromise = EncounterMetrics.makeNew(resultData, request.encounter!, result.encounterMetrics!, logs);\n\n\t\tconst raidMetrics = await raidPromise;\n\t\tconst encounterMetrics = await encounterPromise;\n\n\t\treturn new SimResult(request, result, raidMetrics, encounterMetrics, logs);\n\t}\n}\n\nexport class RaidMetrics {\n\tprivate readonly raid: RaidProto;\n\tprivate readonly metrics: RaidMetricsProto;\n\n\treadonly dps: DistributionMetricsProto;\n\treadonly hps: DistributionMetricsProto;\n\treadonly parties: Array<PartyMetrics>;\n\n\tprivate constructor(raid: RaidProto, metrics: RaidMetricsProto, parties: Array<PartyMetrics>) {\n\t\tthis.raid = raid;\n\t\tthis.metrics = metrics;\n\t\tthis.dps = this.metrics.dps!;\n\t\tthis.hps = this.metrics.hps!;\n\t\tthis.parties = parties;\n\t}\n\n\tstatic async makeNew(resultData: SimResultData, raid: RaidProto, metrics: RaidMetricsProto, logs: Array<SimLog>): Promise<RaidMetrics> {\n\t\tconst numParties = Math.min(raid.parties.length, metrics.parties.length);\n\n\t\tconst parties = await Promise.all(\n\t\t\t[...new Array(numParties).keys()]\n\t\t\t\t.map(i => PartyMetrics.makeNew(\n\t\t\t\t\tresultData,\n\t\t\t\t\traid.parties[i],\n\t\t\t\t\tmetrics.parties[i],\n\t\t\t\t\ti,\n\t\t\t\t\tlogs)));\n\n\t\treturn new RaidMetrics(raid, metrics, parties);\n\t}\n}\n\nexport class PartyMetrics {\n\tprivate readonly party: PartyProto;\n\tprivate readonly metrics: PartyMetricsProto;\n\n\treadonly partyIndex: number;\n\treadonly dps: DistributionMetricsProto;\n\treadonly hps: DistributionMetricsProto;\n\treadonly players: Array<UnitMetrics>;\n\n\tprivate constructor(party: PartyProto, metrics: PartyMetricsProto, partyIndex: number, players: Array<UnitMetrics>) {\n\t\tthis.party = party;\n\t\tthis.metrics = metrics;\n\t\tthis.partyIndex = partyIndex;\n\t\tthis.dps = this.metrics.dps!;\n\t\tthis.hps = this.metrics.hps!;\n\t\tthis.players = players;\n\t}\n\n\tstatic async makeNew(resultData: SimResultData, party: PartyProto, metrics: PartyMetricsProto, partyIndex: number, logs: Array<SimLog>): Promise<PartyMetrics> {\n\t\tconst numPlayers = Math.min(party.players.length, metrics.players.length);\n\t\tconst players = await Promise.all(\n\t\t\t[...new Array(numPlayers).keys()]\n\t\t\t\t.filter(i => party.players[i].class != Class.ClassUnknown)\n\t\t\t\t.map(i => UnitMetrics.makeNewPlayer(\n\t\t\t\t\tresultData,\n\t\t\t\t\tparty.players[i],\n\t\t\t\t\tmetrics.players[i],\n\t\t\t\t\tpartyIndex * 5 + i,\n\t\t\t\t\tfalse,\n\t\t\t\t\tlogs)));\n\n\t\treturn new PartyMetrics(party, metrics, partyIndex, players);\n\t}\n}\n\nexport class UnitMetrics {\n\t// If this Unit is a pet, player is the owner. If it's a target, player is null.\n\tprivate readonly player: PlayerProto | null;\n\tprivate readonly target: TargetProto | null;\n\tprivate readonly metrics: UnitMetricsProto;\n\n\treadonly index: number;\n\treadonly unitIndex: number;\n\treadonly name: string;\n\treadonly spec: Spec;\n\treadonly petActionId: ActionId | null;\n\treadonly iconUrl: string;\n\treadonly classColor: string;\n\treadonly dps: DistributionMetricsProto;\n\treadonly hps: DistributionMetricsProto;\n\treadonly tps: DistributionMetricsProto;\n\treadonly dtps: DistributionMetricsProto;\n\treadonly tto: DistributionMetricsProto;\n\treadonly actions: Array<ActionMetrics>;\n\treadonly auras: Array<AuraMetrics>;\n\treadonly resources: Array<ResourceMetrics>;\n\treadonly pets: Array<UnitMetrics>;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\n\treadonly logs: Array<SimLog>;\n\treadonly damageDealtLogs: Array<DamageDealtLog>;\n\treadonly groupedResourceLogs: Record<ResourceType, Array<ResourceChangedLogGroup>>;\n\treadonly dpsLogs: Array<DpsLog>;\n\treadonly auraUptimeLogs: Array<AuraUptimeLog>;\n\treadonly majorCooldownLogs: Array<MajorCooldownUsedLog>;\n\treadonly castLogs: Array<CastLog>;\n\treadonly threatLogs: Array<ThreatLogGroup>;\n\n\t// Aura uptime logs, filtered to include only auras that correspond to a\n\t// major cooldown.\n\treadonly majorCooldownAuraUptimeLogs: Array<AuraUptimeLog>;\n\n\tprivate constructor(\n\t\tplayer: PlayerProto | null,\n\t\ttarget: TargetProto | null,\n\t\tpetActionId: ActionId | null,\n\t\tmetrics: UnitMetricsProto,\n\t\tindex: number,\n\t\tactions: Array<ActionMetrics>,\n\t\tauras: Array<AuraMetrics>,\n\t\tresources: Array<ResourceMetrics>,\n\t\tpets: Array<UnitMetrics>,\n\t\tlogs: Array<SimLog>,\n\t\tresultData: SimResultData) {\n\t\tthis.player = player;\n\t\tthis.target = target;\n\t\tthis.metrics = metrics;\n\n\t\tthis.index = index;\n\t\tthis.unitIndex = metrics.unitIndex;\n\t\tthis.name = metrics.name;\n\t\tthis.spec = player ? playerToSpec(player) : 0;\n\t\tthis.petActionId = petActionId;\n\t\tthis.iconUrl = this.isPlayer ? getTalentTreeIcon(this.spec, player!.talentsString) :\n\t\t\t(this.isTarget ? defaultTargetIcon : '');\n\t\tthis.classColor = this.isTarget ? 'black' : classColors[specToClass[this.spec]];\n\t\tthis.dps = this.metrics.dps!;\n\t\tthis.hps = this.metrics.hps!;\n\t\tthis.tps = this.metrics.threat!;\n\t\tthis.dtps = this.metrics.dtps!;\n\t\tthis.tto = this.metrics.tto!;\n\t\tthis.actions = actions;\n\t\tthis.auras = auras;\n\t\tthis.resources = resources;\n\t\tthis.pets = pets;\n\t\tthis.logs = logs;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\n\t\tthis.damageDealtLogs = this.logs.filter((log): log is DamageDealtLog => log.isDamageDealt());\n\t\tthis.dpsLogs = DpsLog.fromLogs(this.damageDealtLogs);\n\t\tthis.castLogs = CastLog.fromLogs(this.logs);\n\t\tthis.threatLogs = ThreatLogGroup.fromLogs(this.logs);\n\n\t\tthis.auraUptimeLogs = AuraUptimeLog.fromLogs(this.logs, new Entity(this.name, '', this.index, this.target != null, this.isPet), resultData.firstIterationDuration);\n\t\tthis.majorCooldownLogs = this.logs.filter((log): log is MajorCooldownUsedLog => log.isMajorCooldownUsed());\n\n\t\tthis.groupedResourceLogs = ResourceChangedLogGroup.fromLogs(this.logs);\n\t\tAuraUptimeLog.populateActiveAuras(this.dpsLogs, this.auraUptimeLogs);\n\t\tAuraUptimeLog.populateActiveAuras(this.groupedResourceLogs[ResourceType.ResourceTypeMana], this.auraUptimeLogs);\n\n\t\tthis.majorCooldownAuraUptimeLogs = this.auraUptimeLogs.filter(auraLog => this.majorCooldownLogs.find(mcdLog => mcdLog.actionId!.equals(auraLog.actionId!)));\n\t}\n\n\tget label() {\n\t\tif (this.target == null) {\n\t\t\treturn `${this.name} (#${this.index + 1})`;\n\t\t} else {\n\t\t\treturn this.name;\n\t\t}\n\t}\n\n\tget isPlayer() {\n\t\treturn this.player != null;\n\t}\n\n\tget isTarget() {\n\t\treturn this.target != null;\n\t}\n\n\tget isPet() {\n\t\treturn this.petActionId != null;\n\t}\n\n\t// Returns the unit index of the target of this unit, as selected by the filter.\n\tgetTargetIndex(filter?: SimResultFilter): number | null {\n\t\tif (!filter) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst index = this.isPlayer ? filter.target : filter.player;\n\t\tif (index == null || index == -1) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn index;\n\t}\n\n\tget inFrontOfTarget(): boolean {\n\t\tif (this.isTarget) {\n\t\t\treturn true;\n\t\t} else if (this.isPlayer) {\n\t\t\treturn this.player!.inFrontOfTarget;\n\t\t} else {\n\t\t\treturn false; // TODO pets\n\t\t}\n\t}\n\n\tget chanceOfDeath(): number {\n\t\treturn this.metrics.chanceOfDeath * 100;\n\t}\n\n\tget maxThreat() {\n\t\treturn this.threatLogs[this.threatLogs.length - 1]?.threatAfter || 0;\n\t}\n\n\tget secondsOomAvg() {\n\t\treturn this.metrics.secondsOomAvg\n\t}\n\n\tget totalDamage() {\n\t\treturn this.dps.avg * this.duration;\n\t}\n\n\tgetPlayerAndPetActions(): Array<ActionMetrics> {\n\t\treturn this.actions.concat(this.pets.map(pet => pet.getPlayerAndPetActions()).flat());\n\t}\n\n\tprivate getActionsForDisplay(): Array<ActionMetrics> {\n\t\treturn this.actions.filter(e => e.hitAttempts != 0 || e.tps != 0 || e.dps != 0);\n\t}\n\n\tgetMeleeActions(): Array<ActionMetrics> {\n\t\treturn this.getActionsForDisplay().filter(e => e.isMeleeAction);\n\t}\n\n\tgetSpellActions(): Array<ActionMetrics> {\n\t\treturn this.getActionsForDisplay().filter(e => !e.isMeleeAction);\n\t}\n\n\tgetHealingActions(): Array<ActionMetrics> {\n\t\treturn this.getActionsForDisplay();\n\t}\n\n\tgetResourceMetrics(resourceType: ResourceType): Array<ResourceMetrics> {\n\t\treturn this.resources.filter(resource => resource.type == resourceType);\n\t}\n\n\tstatic async makeNewPlayer(resultData: SimResultData, player: PlayerProto, metrics: UnitMetricsProto, raidIndex: number, isPet: boolean, logs: Array<SimLog>): Promise<UnitMetrics> {\n\t\tconst playerLogs = logs.filter(log => log.source && (!log.source.isTarget && (isPet == log.source.isPet) && log.source.index == raidIndex));\n\n\t\tconst actionsPromise = Promise.all(metrics.actions.map(actionMetrics => ActionMetrics.makeNew(null, resultData, actionMetrics, raidIndex)));\n\t\tconst aurasPromise = Promise.all(metrics.auras.map(auraMetrics => AuraMetrics.makeNew(null, resultData, auraMetrics, raidIndex)));\n\t\tconst resourcesPromise = Promise.all(metrics.resources.map(resourceMetrics => ResourceMetrics.makeNew(null, resultData, resourceMetrics, raidIndex)));\n\t\tconst petsPromise = Promise.all(metrics.pets.map(petMetrics => UnitMetrics.makeNewPlayer(resultData, player, petMetrics, raidIndex, true, playerLogs)));\n\n\t\tlet petIdPromise: Promise<ActionId | null> = Promise.resolve(null);\n\t\tif (isPet) {\n\t\t\tpetIdPromise = ActionId.fromPetName(metrics.name).fill(raidIndex);\n\t\t}\n\n\t\tconst actions = await actionsPromise;\n\t\tconst auras = await aurasPromise;\n\t\tconst resources = await resourcesPromise;\n\t\tconst pets = await petsPromise;\n\t\tconst petActionId = await petIdPromise;\n\n\t\tconst playerMetrics = new UnitMetrics(player, null, petActionId, metrics, raidIndex, actions, auras, resources, pets, playerLogs, resultData);\n\t\tactions.forEach(action => {\n\t\t\taction.unit = playerMetrics;\n\t\t\taction.resources = resources.filter(resourceMetrics => resourceMetrics.actionId.equals(action.actionId));\n\t\t});\n\t\tauras.forEach(aura => aura.unit = playerMetrics);\n\t\tresources.forEach(resource => resource.unit = playerMetrics);\n\t\treturn playerMetrics;\n\t}\n\n\tstatic async makeNewTarget(resultData: SimResultData, target: TargetProto, metrics: UnitMetricsProto, index: number, logs: Array<SimLog>): Promise<UnitMetrics> {\n\t\tconst targetLogs = logs.filter(log => log.source && (log.source.isTarget && log.source.index == index));\n\n\t\tconst actionsPromise = Promise.all(metrics.actions.map(actionMetrics => ActionMetrics.makeNew(null, resultData, actionMetrics, index)));\n\t\tconst aurasPromise = Promise.all(metrics.auras.map(auraMetrics => AuraMetrics.makeNew(null, resultData, auraMetrics)));\n\n\t\tconst actions = await actionsPromise;\n\t\tconst auras = await aurasPromise;\n\n\t\tconst targetMetrics = new UnitMetrics(null, target, null, metrics, index, actions, auras, [], [], targetLogs, resultData);\n\t\tactions.forEach(action => action.unit = targetMetrics);\n\t\tauras.forEach(aura => aura.unit = targetMetrics);\n\t\treturn targetMetrics;\n\t}\n}\n\nexport class EncounterMetrics {\n\tprivate readonly encounter: EncounterProto;\n\tprivate readonly metrics: EncounterMetricsProto;\n\n\treadonly targets: Array<UnitMetrics>;\n\n\tprivate constructor(encounter: EncounterProto, metrics: EncounterMetricsProto, targets: Array<UnitMetrics>) {\n\t\tthis.encounter = encounter;\n\t\tthis.metrics = metrics;\n\t\tthis.targets = targets;\n\t}\n\n\tstatic async makeNew(resultData: SimResultData, encounter: EncounterProto, metrics: EncounterMetricsProto, logs: Array<SimLog>): Promise<EncounterMetrics> {\n\t\tconst numTargets = Math.min(encounter.targets.length, metrics.targets.length);\n\t\tconst targets = await Promise.all(\n\t\t\t[...new Array(numTargets).keys()]\n\t\t\t\t.map(i => UnitMetrics.makeNewTarget(\n\t\t\t\t\tresultData,\n\t\t\t\t\tencounter.targets[i],\n\t\t\t\t\tmetrics.targets[i],\n\t\t\t\t\ti,\n\t\t\t\t\tlogs)));\n\n\t\treturn new EncounterMetrics(encounter, metrics, targets);\n\t}\n\n\tget durationSeconds() {\n\t\treturn this.encounter.duration;\n\t}\n}\n\nexport class AuraMetrics {\n\tunit: UnitMetrics | null;\n\treadonly actionId: ActionId;\n\treadonly name: string;\n\treadonly iconUrl: string;\n\tprivate readonly resultData: SimResultData;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\tprivate readonly data: AuraMetricsProto;\n\n\tprivate constructor(unit: UnitMetrics | null, actionId: ActionId, data: AuraMetricsProto, resultData: SimResultData) {\n\t\tthis.unit = unit;\n\t\tthis.actionId = actionId;\n\t\tthis.name = actionId.name;\n\t\tthis.iconUrl = actionId.iconUrl;\n\t\tthis.data = data;\n\t\tthis.resultData = resultData;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\t}\n\n\tget uptimePercent() {\n\t\treturn this.data.uptimeSecondsAvg / this.duration * 100;\n\t}\n\n\tget averageProcs() {\n\t\treturn this.data.procsAvg\n\t}\n\n\tget ppm() {\n\t\treturn this.data.procsAvg / (this.duration / 60);\n\t}\n\n\tstatic async makeNew(unit: UnitMetrics | null, resultData: SimResultData, auraMetrics: AuraMetricsProto, playerIndex?: number): Promise<AuraMetrics> {\n\t\tconst actionId = await ActionId.fromProto(auraMetrics.id!).fill(playerIndex);\n\t\treturn new AuraMetrics(unit, actionId, auraMetrics, resultData);\n\t}\n\n\t// Merges an array of metrics into a single metrics.\n\tstatic merge(auras: Array<AuraMetrics>, removeTag?: boolean, actionIdOverride?: ActionId): AuraMetrics {\n\t\tconst firstAura = auras[0];\n\t\tconst unit = auras.every(aura => aura.unit == firstAura.unit) ? firstAura.unit : null;\n\t\tlet actionId = actionIdOverride || firstAura.actionId;\n\t\tif (removeTag) {\n\t\t\tactionId = actionId.withoutTag();\n\t\t}\n\t\treturn new AuraMetrics(\n\t\t\tunit,\n\t\t\tactionId,\n\t\t\tAuraMetricsProto.create({\n\t\t\t\tuptimeSecondsAvg: Math.max(...auras.map(a => a.data.uptimeSecondsAvg)),\n\t\t\t}),\n\t\t\tfirstAura.resultData);\n\t}\n\n\t// Groups similar metrics, i.e. metrics with the same item/spell/other ID but\n\t// different tags, and returns them as separate arrays.\n\tstatic groupById(auras: Array<AuraMetrics>, useTag?: boolean): Array<Array<AuraMetrics>> {\n\t\tif (useTag) {\n\t\t\treturn Object.values(bucket(auras, aura => aura.actionId.toString()));\n\t\t} else {\n\t\t\treturn Object.values(bucket(auras, aura => aura.actionId.toStringIgnoringTag()));\n\t\t}\n\t}\n\n\t// Merges aura metrics that have the same name/ID, adding their stats together.\n\tstatic joinById(auras: Array<AuraMetrics>, useTag?: boolean): Array<AuraMetrics> {\n\t\treturn AuraMetrics.groupById(auras, useTag).map(aurasToJoin => AuraMetrics.merge(aurasToJoin));\n\t}\n};\n\nexport class ResourceMetrics {\n\tunit: UnitMetrics | null;\n\treadonly actionId: ActionId;\n\treadonly name: string;\n\treadonly iconUrl: string;\n\treadonly type: ResourceType;\n\tprivate readonly resultData: SimResultData;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\tprivate readonly data: ResourceMetricsProto;\n\n\tprivate constructor(unit: UnitMetrics | null, actionId: ActionId, data: ResourceMetricsProto, resultData: SimResultData) {\n\t\tthis.unit = unit;\n\t\tthis.actionId = actionId;\n\t\tthis.name = actionId.name;\n\t\tthis.iconUrl = actionId.iconUrl;\n\t\tthis.type = data.type;\n\t\tthis.resultData = resultData;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\t\tthis.data = data;\n\t}\n\n\tget events() {\n\t\treturn this.data.events / this.iterations;\n\t}\n\n\tget gain() {\n\t\treturn this.data.gain / this.iterations;\n\t}\n\n\tget gainPerSecond() {\n\t\treturn this.data.gain / this.iterations / this.duration;\n\t}\n\n\tget avgGain() {\n\t\treturn this.data.gain / this.data.events;\n\t}\n\n\tget wastedGain() {\n\t\treturn (this.data.gain - this.data.actualGain) / this.iterations;\n\t}\n\n\tstatic async makeNew(unit: UnitMetrics | null, resultData: SimResultData, resourceMetrics: ResourceMetricsProto, playerIndex?: number): Promise<ResourceMetrics> {\n\t\tconst actionId = await ActionId.fromProto(resourceMetrics.id!).fill(playerIndex);\n\t\treturn new ResourceMetrics(unit, actionId, resourceMetrics, resultData);\n\t}\n\n\t// Merges an array of metrics into a single metrics.\n\tstatic merge(resources: Array<ResourceMetrics>, removeTag?: boolean, actionIdOverride?: ActionId): ResourceMetrics {\n\t\tconst firstResource = resources[0];\n\t\tconst unit = resources.every(resource => resource.unit == firstResource.unit) ? firstResource.unit : null;\n\t\tlet actionId = actionIdOverride || firstResource.actionId;\n\t\tif (removeTag) {\n\t\t\tactionId = actionId.withoutTag();\n\t\t}\n\t\treturn new ResourceMetrics(\n\t\t\tunit,\n\t\t\tactionId,\n\t\t\tResourceMetricsProto.create({\n\t\t\t\tevents: sum(resources.map(a => a.data.events)),\n\t\t\t\tgain: sum(resources.map(a => a.data.gain)),\n\t\t\t\tactualGain: sum(resources.map(a => a.data.actualGain)),\n\t\t\t}),\n\t\t\tfirstResource.resultData);\n\t}\n\n\t// Groups similar metrics, i.e. metrics with the same item/spell/other ID but\n\t// different tags, and returns them as separate arrays.\n\tstatic groupById(resources: Array<ResourceMetrics>, useTag?: boolean): Array<Array<ResourceMetrics>> {\n\t\tif (useTag) {\n\t\t\treturn Object.values(bucket(resources, resource => resource.actionId.toString()));\n\t\t} else {\n\t\t\treturn Object.values(bucket(resources, resource => resource.actionId.toStringIgnoringTag()));\n\t\t}\n\t}\n\n\t// Merges resource metrics that have the same name/ID, adding their stats together.\n\tstatic joinById(resources: Array<ResourceMetrics>, useTag?: boolean): Array<ResourceMetrics> {\n\t\treturn ResourceMetrics.groupById(resources, useTag).map(resourcesToJoin => ResourceMetrics.merge(resourcesToJoin));\n\t}\n};\n\n// Manages the metrics for a single unit action (e.g. Lightning Bolt).\nexport class ActionMetrics {\n\tunit: UnitMetrics | null;\n\treadonly actionId: ActionId;\n\treadonly name: string;\n\treadonly iconUrl: string;\n\treadonly targets: Array<TargetedActionMetrics>;\n\tprivate readonly resultData: SimResultData;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\tprivate readonly data: ActionMetricsProto;\n\tprivate readonly combinedMetrics: TargetedActionMetrics;\n\tresources: Array<ResourceMetrics>;\n\n\tprivate constructor(unit: UnitMetrics | null, actionId: ActionId, data: ActionMetricsProto, resultData: SimResultData) {\n\t\tthis.unit = unit;\n\t\tthis.actionId = actionId;\n\t\tthis.name = actionId.name;\n\t\tthis.iconUrl = actionId.iconUrl;\n\t\tthis.resultData = resultData;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\t\tthis.data = data;\n\t\tthis.targets = data.targets.map(tam => new TargetedActionMetrics(this.iterations, this.duration, tam));\n\t\tthis.combinedMetrics = TargetedActionMetrics.merge(this.targets);\n\t\tthis.resources = [];\n\t}\n\n\tget isMeleeAction() {\n\t\treturn this.data.isMelee;\n\t}\n\n\tget damage() {\n\t\treturn this.combinedMetrics.damage;\n\t}\n\n\tget dps() {\n\t\treturn this.combinedMetrics.dps;\n\t}\n\n\tget hps() {\n\t\treturn this.combinedMetrics.hps;\n\t}\n\n\tget tps() {\n\t\treturn this.combinedMetrics.tps;\n\t}\n\n\tget casts() {\n\t\treturn this.combinedMetrics.casts;\n\t}\n\n\tget castsPerMinute() {\n\t\treturn this.combinedMetrics.castsPerMinute;\n\t}\n\n\tget avgCastTimeMs() {\n\t\treturn this.combinedMetrics.avgCastTimeMs;\n\t}\n\n\tget hpm() {\n\t\tconst totalHealing = this.combinedMetrics.hps * this.duration;\n\t\tconst manaMetrics = this.resources.find(r => r.type == ResourceType.ResourceTypeMana);\n\t\tif (manaMetrics) {\n\t\t\treturn totalHealing / -manaMetrics.gain;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tget healingThroughput() {\n\t\treturn this.combinedMetrics.healingThroughput;\n\t}\n\n\tget avgCast() {\n\t\treturn this.combinedMetrics.avgCast;\n\t}\n\n\tget avgCastHealing() {\n\t\treturn this.combinedMetrics.avgCastHealing;\n\t}\n\n\tget avgCastThreat() {\n\t\treturn this.combinedMetrics.avgCastThreat;\n\t}\n\n\tget landedHits() {\n\t\treturn this.combinedMetrics.landedHits;\n\t}\n\n\tget hitAttempts() {\n\t\treturn this.combinedMetrics.hitAttempts;\n\t}\n\n\tget avgHit() {\n\t\treturn this.combinedMetrics.avgHit;\n\t}\n\n\tget avgHitThreat() {\n\t\treturn this.combinedMetrics.avgHitThreat;\n\t}\n\n\tget critPercent() {\n\t\treturn this.combinedMetrics.critPercent;\n\t}\n\n\tget misses() {\n\t\treturn this.combinedMetrics.misses;\n\t}\n\n\tget missPercent() {\n\t\treturn this.combinedMetrics.missPercent;\n\t}\n\n\tget dodges() {\n\t\treturn this.combinedMetrics.dodges;\n\t}\n\n\tget dodgePercent() {\n\t\treturn this.combinedMetrics.dodgePercent;\n\t}\n\n\tget parries() {\n\t\treturn this.combinedMetrics.parries;\n\t}\n\n\tget parryPercent() {\n\t\treturn this.combinedMetrics.parryPercent;\n\t}\n\n\tget blocks() {\n\t\treturn this.combinedMetrics.blocks;\n\t}\n\n\tget blockPercent() {\n\t\treturn this.combinedMetrics.blockPercent;\n\t}\n\n\tget glances() {\n\t\treturn this.combinedMetrics.glances;\n\t}\n\n\tget glancePercent() {\n\t\treturn this.combinedMetrics.glancePercent;\n\t}\n\n\tforTarget(filter?: SimResultFilter): ActionMetrics {\n\t\tconst unitIndex = this.unit!.getTargetIndex(filter);\n\t\tif (unitIndex == null) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\tconst target = this.targets.find(target => target.data.unitIndex == unitIndex);\n\t\t\tif (target) {\n\t\t\t\tconst targetData = ActionMetricsProto.clone(this.data);\n\t\t\t\ttargetData.targets = [target.data];\n\t\t\t\treturn new ActionMetrics(this.unit, this.actionId, targetData, this.resultData);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Could not find target with unitIndex ' + unitIndex);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic async makeNew(unit: UnitMetrics | null, resultData: SimResultData, actionMetrics: ActionMetricsProto, playerIndex?: number): Promise<ActionMetrics> {\n\t\tconst actionId = await ActionId.fromProto(actionMetrics.id!).fill(playerIndex);\n\t\treturn new ActionMetrics(unit, actionId, actionMetrics, resultData);\n\t}\n\n\t// Merges an array of metrics into a single metric.\n\tstatic merge(actions: Array<ActionMetrics>, removeTag?: boolean, actionIdOverride?: ActionId): ActionMetrics {\n\t\tconst firstAction = actions[0];\n\t\tconst unit = firstAction.unit\n\t\tlet actionId = actionIdOverride || firstAction.actionId;\n\t\tif (removeTag) {\n\t\t\tactionId = actionId.withoutTag();\n\t\t}\n\n\t\tconst maxTargets = Math.max(...actions.map(action => action.targets.length));\n\t\tconst mergedTargets = [...Array(maxTargets).keys()].map(i => TargetedActionMetrics.merge(actions.map(action => action.targets[i])));\n\n\t\treturn new ActionMetrics(\n\t\t\tunit,\n\t\t\tactionId,\n\t\t\tActionMetricsProto.create({\n\t\t\t\tisMelee: firstAction.isMeleeAction,\n\t\t\t\ttargets: mergedTargets.map(t => t.data),\n\t\t\t}),\n\t\t\tfirstAction.resultData);\n\t}\n\n\t// Groups similar metrics, i.e. metrics with the same item/spell/other ID but\n\t// different tags, and returns them as separate arrays.\n\tstatic groupById(actions: Array<ActionMetrics>, useTag?: boolean): Array<Array<ActionMetrics>> {\n\t\tif (useTag) {\n\t\t\treturn Object.values(bucket(actions, action => action.actionId.toString()));\n\t\t} else {\n\t\t\treturn Object.values(bucket(actions, action => action.actionId.toStringIgnoringTag()));\n\t\t}\n\t}\n\n\t// Merges action metrics that have the same name/ID, adding their stats together.\n\tstatic joinById(actions: Array<ActionMetrics>, useTag?: boolean): Array<ActionMetrics> {\n\t\treturn ActionMetrics.groupById(actions, useTag).map(actionsToJoin => ActionMetrics.merge(actionsToJoin));\n\t}\n}\n\n// Manages the metrics for a single action applied to a specific target.\nexport class TargetedActionMetrics {\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\treadonly data: TargetedActionMetricsProto;\n\n\treadonly landedHitsRaw: number;\n\treadonly hitAttempts: number;\n\n\tconstructor(iterations: number, duration: number, data: TargetedActionMetricsProto) {\n\t\tthis.iterations = iterations;\n\t\tthis.duration = duration;\n\t\tthis.data = data;\n\n\t\tthis.landedHitsRaw = this.data.hits + this.data.crits + this.data.blocks + this.data.glances;\n\n\t\tthis.hitAttempts = this.data.misses\n\t\t\t+ this.data.dodges\n\t\t\t+ this.data.parries\n\t\t\t+ this.data.blocks\n\t\t\t+ this.data.glances\n\t\t\t+ this.data.crits\n\t\t\t+ this.data.hits;\n\t}\n\n\tget damage() {\n\t\treturn this.data.damage;\n\t}\n\n\tget dps() {\n\t\treturn this.data.damage / this.iterations / this.duration;\n\t}\n\n\tget hps() {\n\t\treturn (this.data.healing + this.data.shielding) / this.iterations / this.duration;\n\t}\n\n\tget tps() {\n\t\treturn this.data.threat / this.iterations / this.duration;\n\t}\n\n\tget casts() {\n\t\treturn (this.data.casts || this.hitAttempts) / this.iterations;\n\t}\n\n\tget castsPerMinute() {\n\t\treturn this.casts / (this.duration / 60);\n\t}\n\n\tget avgCastTimeMs() {\n\t\treturn this.data.castTimeMs / this.iterations / this.casts;\n\t}\n\n\tget healingThroughput() {\n\t\tif (this.avgCastTimeMs) {\n\t\t\treturn this.hps / (this.avgCastTimeMs / 1000);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tget timeSpentCastingMs() {\n\t\treturn this.data.castTimeMs / this.iterations;\n\t}\n\n\tget avgCast() {\n\t\treturn (this.data.damage / this.iterations) / (this.casts || 1);\n\t}\n\n\tget avgCastHealing() {\n\t\treturn ((this.data.healing + this.data.shielding) / this.iterations) / (this.casts || 1);\n\t}\n\n\tget avgCastThreat() {\n\t\treturn (this.data.threat / this.iterations) / (this.casts || 1);\n\t}\n\n\tget landedHits() {\n\t\treturn this.landedHitsRaw / this.iterations;\n\t}\n\n\tget avgHit() {\n\t\tconst lhr = this.landedHitsRaw;\n\t\treturn lhr == 0 ? 0 : this.data.damage / lhr;\n\t}\n\n\tget avgHitThreat() {\n\t\tconst lhr = this.landedHitsRaw;\n\t\treturn lhr == 0 ? 0 : this.data.threat / lhr;\n\t}\n\n\tget critPercent() {\n\t\treturn (this.data.crits / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget misses() {\n\t\treturn this.data.misses / this.iterations;\n\t}\n\n\tget missPercent() {\n\t\treturn (this.data.misses / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget dodges() {\n\t\treturn this.data.dodges / this.iterations;\n\t}\n\n\tget dodgePercent() {\n\t\treturn (this.data.dodges / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget parries() {\n\t\treturn this.data.parries / this.iterations;\n\t}\n\n\tget parryPercent() {\n\t\treturn (this.data.parries / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget blocks() {\n\t\treturn this.data.blocks / this.iterations;\n\t}\n\n\tget blockPercent() {\n\t\treturn (this.data.blocks / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget glances() {\n\t\treturn this.data.glances / this.iterations;\n\t}\n\n\tget glancePercent() {\n\t\treturn (this.data.glances / (this.hitAttempts || 1)) * 100;\n\t}\n\n\t// Merges an array of metrics into a single metric.\n\tstatic merge(actions: Array<TargetedActionMetrics>): TargetedActionMetrics {\n\t\treturn new TargetedActionMetrics(\n\t\t\tactions[0]?.iterations || 1,\n\t\t\tactions[0]?.duration || 1,\n\t\t\tTargetedActionMetricsProto.create({\n\t\t\t\tcasts: sum(actions.map(a => a.data.casts)),\n\t\t\t\thits: sum(actions.map(a => a.data.hits)),\n\t\t\t\tcrits: sum(actions.map(a => a.data.crits)),\n\t\t\t\tmisses: sum(actions.map(a => a.data.misses)),\n\t\t\t\tdodges: sum(actions.map(a => a.data.dodges)),\n\t\t\t\tparries: sum(actions.map(a => a.data.parries)),\n\t\t\t\tblocks: sum(actions.map(a => a.data.blocks)),\n\t\t\t\tglances: sum(actions.map(a => a.data.glances)),\n\t\t\t\tdamage: sum(actions.map(a => a.data.damage)),\n\t\t\t\tthreat: sum(actions.map(a => a.data.threat)),\n\t\t\t\thealing: sum(actions.map(a => a.data.healing)),\n\t\t\t\tshielding: sum(actions.map(a => a.data.shielding)),\n\t\t\t\tcastTimeMs: sum(actions.map(a => a.data.castTimeMs)),\n\t\t\t}));\n\t}\n}\n","import { Encounter as EncounterProto } from '../proto/common.js';\nimport { Raid as RaidProto } from '../proto/api.js';\nimport { RaidSimRequest, RaidSimResult, ProgressMetrics } from '../proto/api.js';\nimport { SimRunData } from '../proto/ui.js';\nimport { ActionMetrics, SimResult, SimResultFilter } from '../proto_utils/sim_result.js';\nimport { SimUI } from '../sim_ui.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\nimport { formatDeltaTextElem } from '../utils.js';\n\ndeclare var tippy: any;\n\nexport function addRaidSimAction(simUI: SimUI): RaidSimResultsManager {\n\tsimUI.addAction('SIMULATE', 'dps-action', async () => simUI.runSim((progress: ProgressMetrics) => {\n\t\tresultsManager.setSimProgress(progress);\n\t}));\n\n\tconst resultsManager = new RaidSimResultsManager(simUI);\n\tsimUI.sim.simResultEmitter.on((eventID, simResult) => {\n\t\tresultsManager.setSimResult(eventID, simResult);\n\t});\n\treturn resultsManager;\n}\n\nexport type ReferenceData = {\n\tsimResult: SimResult,\n\tsettings: any,\n\traidProto: RaidProto,\n\tencounterProto: EncounterProto,\n};\n\nexport class RaidSimResultsManager {\n\treadonly currentChangeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\treadonly referenceChangeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly simUI: SimUI;\n\n\tprivate currentData: ReferenceData | null = null;\n\tprivate referenceData: ReferenceData | null = null;\n\n\tconstructor(simUI: SimUI) {\n\t\tthis.simUI = simUI;\n\n\t\t[\n\t\t\tthis.currentChangeEmitter,\n\t\t\tthis.referenceChangeEmitter,\n\t\t].forEach(emitter => emitter.on(eventID => this.changeEmitter.emit(eventID)));\n\t}\n\n\tsetSimProgress(progress: ProgressMetrics) {\n\t\tif (progress.presimRunning) {\n\t\t\tthis.simUI.resultsViewer.setContent(`\n\t\t\t\t<div class=\"results-sim\">\n\t\t\t\t\t\t<div class=\"results-sim-dps damage-metrics\">\n\t\t\t\t\t\t\t<span class=\"topline-result-avg\">${progress.dps.toFixed(2)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"results-sim-hps healing-metrics\">\n\t\t\t\t\t\t\t<span class=\"topline-result-avg\">${progress.hps.toFixed(2)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"\">\n\t\t\t\t\t\t\tpresimulations running\n\t\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t`);\n\t\t} else {\n\t\t\tthis.simUI.resultsViewer.setContent(`\n\t\t\t\t<div class=\"results-sim\">\n\t\t\t\t\t\t<div class=\"results-sim-dps damage-metrics\">\n\t\t\t\t\t\t\t<span class=\"topline-result-avg\">${progress.dps.toFixed(2)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"results-sim-hps healing-metrics\">\n\t\t\t\t\t\t\t<span class=\"topline-result-avg\">${progress.hps.toFixed(2)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"\">\n\t\t\t\t\t\t\t${progress.completedIterations} / ${progress.totalIterations}<br>iterations complete\n\t\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t`);\n\t\t}\n\t}\n\n\tsetSimResult(eventID: EventID, simResult: SimResult) {\n\t\tthis.currentData = {\n\t\t\tsimResult: simResult,\n\t\t\tsettings: {\n\t\t\t\t'raid': RaidProto.toJson(this.simUI.sim.raid.toProto()),\n\t\t\t\t'encounter': EncounterProto.toJson(this.simUI.sim.encounter.toProto()),\n\t\t\t},\n\t\t\traidProto: RaidProto.clone(simResult.request.raid || RaidProto.create()),\n\t\t\tencounterProto: EncounterProto.clone(simResult.request.encounter || EncounterProto.create()),\n\t\t};\n\t\tthis.currentChangeEmitter.emit(eventID);\n\n\t\tconst dpsMetrics = simResult.raidMetrics.dps;\n\t\tthis.simUI.resultsViewer.setContent(`\n      <div class=\"results-sim\">\n\t\t\t\t${RaidSimResultsManager.makeToplineResultsContent(simResult)}\n\t\t\t\t<div class=\"results-sim-reference\">\n\t\t\t\t\t<span class=\"results-sim-set-reference fa fa-map-pin\"></span>\n\t\t\t\t\t<div class=\"results-sim-reference-bar\">\n\t\t\t\t\t\t<span class=\"results-sim-reference-dps-diff damage-metrics\"></span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-diff-separator healing-metrics\">/</span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-tto-diff healing-metrics\"></span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-diff-separator healing-metrics\">/</span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-hps-diff healing-metrics\"></span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-diff-separator threat-metrics\">/</span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-tps-diff threat-metrics\"></span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-diff-separator threat-metrics\">/</span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-dtps-diff threat-metrics\"></span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-diff-separator threat-metrics\">/</span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-chanceOfDeath-diff threat-metrics\"></span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-text\"> vs. reference</span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-swap fa fa-retweet\"></span>\n\t\t\t\t\t\t<span class=\"results-sim-reference-delete fa fa-times\"></span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n      </div>\n    `);\n\n\t\tconst setResultTippy = (cssClass: string, tippyContent: string) => {\n\t\t\tconst resultDivElem = this.simUI.resultsViewer.contentElem.getElementsByClassName(cssClass)[0] as HTMLElement | undefined;\n\t\t\tif (resultDivElem) {\n\t\t\t\ttippy(resultDivElem, {\n\t\t\t\t\t'content': tippyContent,\n\t\t\t\t\t'allowHTML': true,\n\t\t\t\t\tplacement: 'right',\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\tsetResultTippy('results-sim-dps', 'Damage Per Second');\n\t\tsetResultTippy('results-sim-tto', 'Time To OOM');\n\t\tsetResultTippy('results-sim-hps', 'Healing+Shielding Per Second, including overhealing.');\n\t\tsetResultTippy('results-sim-tps', 'Threat Per Second');\n\t\tsetResultTippy('results-sim-dtps', 'Damage Taken Per Second');\n\t\tsetResultTippy('results-sim-chanceOfDeath', `\n\t\t\t<p>Chance of Death</p>\n\t\t\t<p>The percentage of iterations in which the player died, based on incoming damage from the enemies and incoming healing (see the <b>Incoming HPS</b> and <b>Healing Cadence</b> options).</p>\n\t\t\t<p>DTPS alone is not a good measure of tankiness because it is not affected by health and ignores damage spikes. Chance of Death attempts to capture overall tankiness.</p>\n\t\t`);\n\n\t\tif (!this.simUI.isIndividualSim()) {\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-diff-separator')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-tps-diff')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-dtps-diff')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-chanceOfDeath-diff')).forEach(e => e.remove());\n\t\t}\n\n\t\tconst simReferenceElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference')[0] as HTMLDivElement;\n\t\tconst simReferenceDiffElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-diff')[0] as HTMLSpanElement;\n\n\t\tconst simReferenceSetButton = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-set-reference')[0] as HTMLSpanElement;\n\t\tsimReferenceSetButton.addEventListener('click', event => {\n\t\t\tthis.referenceData = this.currentData;\n\t\t\tthis.referenceChangeEmitter.emit(TypedEvent.nextEventID());\n\t\t\tthis.updateReference();\n\t\t});\n\t\ttippy(simReferenceSetButton, {\n\t\t\t'content': 'Use as reference',\n\t\t\t'allowHTML': true,\n\t\t});\n\n\t\tconst simReferenceSwapButton = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-swap')[0] as HTMLSpanElement;\n\t\tsimReferenceSwapButton.addEventListener('click', event => {\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tif (this.currentData && this.referenceData) {\n\t\t\t\t\tconst swapEventID = TypedEvent.nextEventID();\n\t\t\t\t\tconst tmpData = this.currentData;\n\t\t\t\t\tthis.currentData = this.referenceData;\n\t\t\t\t\tthis.referenceData = tmpData;\n\n\t\t\t\t\tthis.simUI.sim.raid.fromProto(swapEventID, this.currentData.raidProto);\n\t\t\t\t\tthis.simUI.sim.encounter.fromProto(swapEventID, this.currentData.encounterProto);\n\t\t\t\t\tthis.setSimResult(swapEventID, this.currentData.simResult);\n\n\t\t\t\t\tthis.referenceChangeEmitter.emit(swapEventID);\n\t\t\t\t\tthis.updateReference();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\ttippy(simReferenceSwapButton, {\n\t\t\t'content': 'Swap reference with current',\n\t\t\t'allowHTML': true,\n\t\t});\n\n\t\tconst simReferenceDeleteButton = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-delete')[0] as HTMLSpanElement;\n\t\tsimReferenceDeleteButton.addEventListener('click', event => {\n\t\t\tthis.referenceData = null;\n\t\t\tthis.referenceChangeEmitter.emit(TypedEvent.nextEventID());\n\t\t\tthis.updateReference();\n\t\t});\n\t\ttippy(simReferenceDeleteButton, {\n\t\t\t'content': 'Remove reference',\n\t\t\t'allowHTML': true,\n\t\t});\n\n\t\tthis.updateReference();\n\t}\n\n\tprivate updateReference() {\n\t\tconst simReferenceElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference')[0] as HTMLDivElement;\n\n\t\tif (!this.referenceData || !this.currentData) {\n\t\t\tsimReferenceElem.classList.remove('has-reference');\n\t\t\treturn;\n\t\t}\n\t\tsimReferenceElem.classList.add('has-reference');\n\n\t\tconst simReferenceDpsDiffElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-dps-diff')[0] as HTMLSpanElement;\n\t\tconst currentDpsMetrics = this.currentData.simResult.raidMetrics.dps;\n\t\tconst referenceDpsMetrics = this.referenceData.simResult.raidMetrics.dps;\n\t\tformatDeltaTextElem(simReferenceDpsDiffElem, referenceDpsMetrics.avg, currentDpsMetrics.avg, 2);\n\n\t\tconst simReferenceHpsDiffElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-hps-diff')[0] as HTMLSpanElement;\n\t\tconst currentHpsMetrics = this.currentData.simResult.raidMetrics.hps;\n\t\tconst referenceHpsMetrics = this.referenceData.simResult.raidMetrics.hps;\n\t\tformatDeltaTextElem(simReferenceHpsDiffElem, referenceHpsMetrics.avg, currentHpsMetrics.avg, 2);\n\n\t\tif (this.simUI.isIndividualSim()) {\n\t\t\tconst simReferenceTtoDiffElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-tto-diff')[0] as HTMLSpanElement;\n\t\t\tconst simReferenceTpsDiffElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-tps-diff')[0] as HTMLSpanElement;\n\t\t\tconst simReferenceDtpsDiffElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-dtps-diff')[0] as HTMLSpanElement;\n\t\t\tconst simReferenceCodDiffElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-chanceOfDeath-diff')[0] as HTMLSpanElement;\n\n\t\t\tconst curPlayerMetrics = this.currentData.simResult.getPlayers()[0]!;\n\t\t\tconst refPlayerMetrics = this.referenceData.simResult.getPlayers()[0]!;\n\t\t\tformatDeltaTextElem(simReferenceTtoDiffElem, refPlayerMetrics.tto.avg, curPlayerMetrics.tto.avg, 2);\n\t\t\tformatDeltaTextElem(simReferenceTpsDiffElem, refPlayerMetrics.tps.avg, curPlayerMetrics.tps.avg, 2);\n\t\t\tformatDeltaTextElem(simReferenceDtpsDiffElem, refPlayerMetrics.dtps.avg, curPlayerMetrics.dtps.avg, 2);\n\t\t\tformatDeltaTextElem(simReferenceCodDiffElem, refPlayerMetrics.chanceOfDeath, curPlayerMetrics.chanceOfDeath, 1);\n\t\t}\n\t}\n\n\tgetRunData(): SimRunData | null {\n\t\tif (this.currentData == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn SimRunData.create({\n\t\t\trun: this.currentData.simResult.toProto(),\n\t\t\treferenceRun: this.referenceData?.simResult.toProto(),\n\t\t});\n\t}\n\n\tgetCurrentData(): ReferenceData | null {\n\t\tif (this.currentData == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Defensive copy.\n\t\treturn {\n\t\t\tsimResult: this.currentData.simResult,\n\t\t\tsettings: JSON.parse(JSON.stringify(this.currentData.settings)),\n\t\t\traidProto: this.currentData.raidProto,\n\t\t\tencounterProto: this.currentData.encounterProto,\n\t\t};\n\t}\n\n\tgetReferenceData(): ReferenceData | null {\n\t\tif (this.referenceData == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Defensive copy.\n\t\treturn {\n\t\t\tsimResult: this.referenceData.simResult,\n\t\t\tsettings: JSON.parse(JSON.stringify(this.referenceData.settings)),\n\t\t\traidProto: this.referenceData.raidProto,\n\t\t\tencounterProto: this.referenceData.encounterProto,\n\t\t};\n\t}\n\n\tstatic makeToplineResultsContent(simResult: SimResult, filter?: SimResultFilter): string {\n\t\tconst players = simResult.getPlayers(filter);\n\t\tconst playerMetrics = players.length == 1 ? players[0] : null;\n\t\tlet content = '';\n\n\t\tif (playerMetrics) {\n\t\t\tif (playerMetrics.getTargetIndex(filter) == null) {\n\t\t\t\tconst dpsMetrics = simResult.raidMetrics.dps;\n\t\t\t\tconst tpsMetrics = playerMetrics.tps;\n\t\t\t\tconst dtpsMetrics = playerMetrics.dtps;\n\t\t\t\tcontent += `\n\t\t\t\t\t<div class=\"results-sim-dps damage-metrics\">\n\t\t\t\t\t\t<span class=\"topline-result-avg\">${dpsMetrics.avg.toFixed(2)}</span>\n\t\t\t\t\t\t<span class=\"topline-result-stdev\">${dpsMetrics.stdev.toFixed(2)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"results-sim-tps threat-metrics\">\n\t\t\t\t\t\t<span class=\"topline-result-avg\">${tpsMetrics.avg.toFixed(2)}</span>\n\t\t\t\t\t\t<span class=\"topline-result-stdev\">${tpsMetrics.stdev.toFixed(2)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"results-sim-dtps threat-metrics\">\n\t\t\t\t\t\t<span class=\"topline-result-avg\">${dtpsMetrics.avg.toFixed(2)}</span>\n\t\t\t\t\t\t<span class=\"topline-result-stdev\">${dtpsMetrics.stdev.toFixed(2)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"results-sim-chanceOfDeath threat-metrics\">\n\t\t\t\t\t\t<span class=\"topline-result-avg\">${playerMetrics.chanceOfDeath.toFixed(2)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\t\t\t} else {\n\t\t\t\tconst actions = simResult.getActionMetrics(filter);\n\t\t\t\tconst targetActions = simResult.getTargets(filter)[0].actions.map(action => action.forTarget(filter));\n\t\t\t\tif (actions.length > 0) {\n\t\t\t\t\tconst mergedActions = ActionMetrics.merge(actions);\n\t\t\t\t\tcontent += `\n\t\t\t\t\t\t<div class=\"results-sim-dps damage-metrics\">\n\t\t\t\t\t\t\t<span class=\"topline-result-avg\">${mergedActions.dps.toFixed(2)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"results-sim-tps threat-metrics\">\n\t\t\t\t\t\t\t<span class=\"topline-result-avg\">${mergedActions.tps.toFixed(2)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t`;\n\t\t\t\t}\n\t\t\t\tif (targetActions.length > 0) {\n\t\t\t\t\tconst mergedTargetActions = ActionMetrics.merge(targetActions);\n\t\t\t\t\tcontent += `\n\t\t\t\t\t\t<div class=\"results-sim-dtps threat-metrics\">\n\t\t\t\t\t\t\t<span class=\"topline-result-avg\">${mergedTargetActions.dps.toFixed(2)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcontent += `\n\t\t\t\t<div class=\"results-sim-tto healing-metrics\">\n\t\t\t\t\t<span class=\"topline-result-avg\">${playerMetrics.tto.avg.toFixed(2)}s</span>\n\t\t\t\t\t<span class=\"topline-result-stdev\">${playerMetrics.tto.stdev.toFixed(2)}s</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"results-sim-hps healing-metrics\">\n\t\t\t\t\t<span class=\"topline-result-avg\">${playerMetrics.hps.avg.toFixed(2)}</span>\n\t\t\t\t\t<span class=\"topline-result-stdev\">${playerMetrics.hps.stdev.toFixed(2)}</span>\n\t\t\t\t</div>\n\t\t\t`;\n\t\t} else {\n\t\t\tconst dpsMetrics = simResult.raidMetrics.dps;\n\t\t\tcontent = `\n\t\t\t\t<div class=\"results-sim-dps damage-metrics\">\n\t\t\t\t\t<span class=\"topline-result-avg\">${dpsMetrics.avg.toFixed(2)}</span>\n\t\t\t\t\t<span class=\"topline-result-stdev\">${dpsMetrics.stdev.toFixed(2)}</span>\n\t\t\t\t</div>\n\t\t\t`;\n\t\t\tconst hpsMetrics = simResult.raidMetrics.hps;\n\t\t\tcontent = `\n\t\t\t\t<div class=\"results-sim-hps healing-metrics\">\n\t\t\t\t\t<span class=\"topline-result-avg\">${hpsMetrics.avg.toFixed(2)}</span>\n\t\t\t\t\t<span class=\"topline-result-stdev\">${hpsMetrics.stdev.toFixed(2)}</span>\n\t\t\t\t</div>\n\t\t\t`;\n\t\t}\n\n\t\tif (simResult.request.encounter?.useHealth) {\n\t\t\tcontent += `<div class=\"results-sim-dur\"><span class=\"topline-result-avg\">${simResult.result.avgIterationDuration.toFixed(2)}s</span></div>`;\n\t\t}\n\n\t\treturn content;\n\t}\n}\n"],"names":["typeofJsonValue","value","t","Array","isArray","encTable","split","decTable","i","length","charCodeAt","indexOf","fromCharCodes","chunk","String","fromCharCode","apply","varint64read","lowBits","highBits","shift","b","this","buf","pos","assertBounds","middleByte","Error","varint64write","lo","hi","bytes","hasNext","byte","push","splitBits","hasMoreBits","int64fromString","dec","minus","slice","base","add1e6digit","begin","end","digit1e6","Number","TWO_PWR_32_DBL","int64toString","bitsLow","bitsHigh","mid","high","digitA","digitB","digitC","decimalFrom1e7","digit1e7","needLeadingZeros","partial","Math","floor","varint32write","varint32read","result","readBytes","BI","dv","DataView","ArrayBuffer","globalThis","BigInt","getBigInt64","getBigUint64","setBigInt64","setBigUint64","MIN","MAX","UMIN","UMAX","C","V","detectBi","assertBi","bi","RE_DECIMAL_STR","SharedPbLong","constructor","isZero","toNumber","isSafeInteger","PbULong","static","ZERO","getInt32","trim","test","toString","toBigInt","setInt32","PbLong","pbl","negate","isNegative","n","BinaryReader","varint64","uint32","len","view","buffer","byteOffset","byteLength","tag","fieldNo","wireType","skip","start","WireType","Varint","Bit64","Bit32","LengthDelimited","StartGroup","EndGroup","subarray","RangeError","int32","sint32","zze","int64","uint64","sint64","s","bool","fixed32","getUint32","sfixed32","fixed64","sfixed64","float","getFloat32","double","getFloat64","string","parts","join","utf8read","assert","condition","msg","assertInt32","arg","isInteger","assertUInt32","assertFloat32","isFinite","BinaryWriter","textEncoder","stack","TextEncoder","chunks","finish","Uint8Array","offset","set","fork","prev","pop","raw","type","encode","setFloat32","setFloat64","setUint32","long","from","sign","UnknownFieldHandler","symbol","Symbol","onRead","typeName","message","data","is","no","onWrite","writer","list","all","filter","uf","last","defaultsRead","readUnknownField","readerFactory","defaultsWrite","writeUnknownFields","writerFactory","emitDefaultValues","enumAsInteger","useProtoFieldName","prettySpaces","ignoreUnknownFields","MESSAGE_TYPE","lowerCamelCase","snakeCase","capNext","sb","next","charAt","toUpperCase","toLowerCase","ScalarType","LongType","RepeatType","normalizeFieldInfo","field","_a","_b","_c","_d","localName","name","jsonName","repeat","NO","opt","oneof","kind","isOneofGroup","any","hasOwnProperty","oneofKind","Object","keys","ReflectionTypeCheck","info","fields","prepare","req","known","oneofs","includes","values","depth","allowExcessProperties","some","k","group","find","f","repeated","scalars","T","L","scalar","INT32","messages","mapKeys","K","isAssignable","longType","argType","UINT64","FIXED64","INT64","SFIXED64","SINT64","BIGINT","NUMBER","isNaN","BOOL","STRING","BYTES","DOUBLE","FLOAT","map","FIXED32","SFIXED32","SINT32","UINT32","parseInt","reflectionLongConvert","ReflectionJsonReader","fMap","fieldsInput","fieldName","jsonValue","what","read","input","options","oneofsHandled","jsonKey","entries","target","fieldObj","jsonObjKey","jsonObjValue","val","internalJsonRead","enum","key","fieldArr","jsonItem","json","localEnumName","substring","enumNumber","e","NaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","encodeURIComponent","base64Str","es","bytePos","groupPos","p","base64decode","error","ReflectionJsonWriter","write","source","jsonObj","entryKey","entryValue","messageType","enumInfo","jsonArr","optional","internalJsonWrite","ed","ulong","base64","base64encode","reflectionScalarDefault","ReflectionBinaryReader","fieldNoToField","Map","reader","get","u","d","arr","internalBinaryRead","mapKey","mapVal","mapEntry","keyRaw","create","ReflectionBinaryWriter","concat","sort","a","emitDefault","PACKED","packed","item","keyValue","handler","internalBinaryWrite","method","isDefault","scalarInfo","m","reflectionMergePartial","fieldValue","output","mergePartial","assign","objectValues","primitiveEq","ba","bb","repeatedPrimitiveEq","repeatedMsgEq","equals","MessageType","defaultCheckDepth","refTypeCheck","refJsonReader","refJsonWriter","refBinReader","refBinWriter","defineProperty","enumerable","reflectionCreate","clone","copy","val_a","val_b","reflectionEquals","fromBinary","binaryReadOptions","fromJson","jsonReadOptions","fromJsonString","JSON","parse","toJson","jsonWriteOptions","toJsonString","stringify","toBinary","binaryWriteOptions","Spec","Race","Faction","ShattrathFaction","Class","Profession","Stat","ItemType","ArmorType","WeaponType","HandType","RangedWeaponType","ItemSlot","ItemQuality","GemColor","SpellSchool","TristateEffect","Explosive","Potions","Conjured","Flask","BattleElixir","GuardianElixir","Food","PetFood","MobType","EnchantType","OtherAction","RaidBuffs","super","giftOfTheWild","powerWordFortitude","commandingShout","bloodPact","hornOfWinter","strengthOfEarthTotem","arcaneBrilliance","felIntelligence","divineSpirit","battleShout","trueshotAura","unleashedRage","abominationsMight","leaderOfThePack","rampage","icyTalons","windfuryTotem","totemOfWrath","flametongueTotem","demonicPact","swiftRetribution","moonkinAura","elementalOath","wrathOfAirTotem","ferociousInspiration","sanctifiedRetribution","arcaneEmpowerment","manaSpringTotem","bloodlust","thorns","devotionAura","stoneskinTotem","retributionAura","shadowProtection","drumsOfForgottenKings","drumsOfTheWild","scrollOfProtection","scrollOfStamina","scrollOfStrength","scrollOfAgility","scrollOfIntellect","scrollOfSpirit","PartyBuffs","atieshMage","atieshWarlock","braidedEterniumChain","eyeOfTheNight","chainOfTheTwilightOwl","manaTideTotems","heroicPresence","IndividualBuffs","blessingOfKings","blessingOfWisdom","blessingOfMight","blessingOfSanctuary","vigilance","renewedHope","hymnOfHope","handOfSalvation","rapture","innervates","powerInfusions","unholyFrenzy","revitalizeRejuvination","revitalizeWildGrowth","tricksOfTheTrades","shatteringThrows","vampiricTouch","huntingParty","judgementsOfTheWise","improvedSoulLeech","enduringWinter","focusMagic","Consumes","flask","battleElixir","guardianElixir","food","petFood","petScrollOfAgility","petScrollOfStrength","defaultPotion","prepopPotion","defaultConjured","startingConjured","numStartingConjured","thermalSapper","explosiveDecoy","fillerExplosive","Debuffs","judgementOfWisdom","judgementOfLight","misery","faerieFire","curseOfElements","ebonPlaguebringer","earthAndMoon","heartOfTheCrusader","masterPoisoner","shadowMastery","improvedScorch","wintersChill","bloodFrenzy","savageCombat","giftOfArthas","mangle","trauma","stampede","exposeArmor","sunderArmor","acidSpit","curseOfWeakness","sting","sporeCloud","demoralizingRoar","demoralizingShout","vindication","thunderClap","frostFever","infectedWounds","judgementsOfTheJust","insectSwarm","scorpidSting","shadowEmbrace","screech","huntersMark","Target","id","level","mobType","stats","minBaseDamage","swingSpeed","dualWield","dualWieldPenalty","parryHaste","tightEnemyDamage","suppressDodge","spellSchool","tankIndex","Encounter","duration","durationVariation","executeProportion20","executeProportion25","executeProportion35","useHealth","targets","ItemSpec","enchant","gems","EquipmentSpec","items","Item","wowheadId","classAllowlist","armorType","weaponType","handType","rangedWeaponType","gemSockets","socketBonus","weaponDamageMin","weaponDamageMax","weaponSpeed","phase","quality","unique","ilvl","requiredProfession","heroic","Enchant","effectId","isSpellId","enchantType","Gem","color","RaidTarget","targetIndex","ActionID","rawId","spellId","itemId","otherId","Glyphs","major1","major2","major3","minor1","minor2","minor3","Cooldown","timings","Cooldowns","cooldowns","hpPercentForDefensives","HealingModel","hps","cadenceSeconds","inspirationUptime","CustomRotation","CustomSpell","spells","spell","Deathknight_Rotation_ArmyOfTheDead","Deathknight_Rotation_BloodTap","Deathknight_Rotation_DeathAndDecayPrio","Deathknight_Rotation_FirstDisease","Deathknight_Rotation_BloodRuneFiller","Deathknight_Rotation_Presence","Deathknight_Rotation_FrostRotationType","Deathknight_Rotation_CustomSpellOption","TankDeathknight_Rotation_Opener","TankDeathknight_Rotation_OptimizationSetting","TankDeathknight_Rotation_BloodSpell","TankDeathknight_Rotation_Presence","DeathknightMajorGlyph","DeathknightMinorGlyph","DeathknightTalents","butchery","subversion","bladeBarrier","bladedArmor","scentOfBlood","twoHandedWeaponSpecialization","runeTap","darkConviction","deathRuneMastery","improvedRuneTap","spellDeflection","vendetta","bloodyStrikes","veteranOfTheThirdWar","markOfBlood","bloodyVengeance","bloodworms","hysteria","improvedBloodPresence","improvedDeathStrike","suddenDoom","vampiricBlood","willOfTheNecropolis","heartStrike","mightOfMograine","bloodGorged","dancingRuneWeapon","improvedIcyTouch","runicPowerMastery","toughness","icyReach","blackIce","nervesOfColdSteel","lichborne","annihilation","killingMachine","chillOfTheGrave","endlessWinter","frigidDreadplate","glacierRot","deathchill","improvedIcyTalons","mercilessCombat","rime","chilblains","hungeringCold","improvedFrostPresence","threatOfThassarian","bloodOfTheNorth","unbreakableArmor","acclimation","frostStrike","guileOfGorefiend","tundraStalker","howlingBlast","viciousStrikes","virulence","anticipation","epidemic","morbidity","unholyCommand","ravenousDead","outbreak","necrosis","corpseExplosion","onAPaleHorse","bloodCakedBlade","nightOfTheDead","unholyBlight","impurity","dirge","desecration","magicSuppression","reaping","masterOfGhouls","desolation","antiMagicZone","improvedUnholyPresence","ghoulFrenzy","cryptFever","boneShield","wanderingPlague","scourgeStrike","rageOfRivendare","summonGargoyle","Deathknight","Deathknight_Rotation","Deathknight_Options","rotation","talents","frostRotationType","armyOfTheDead","useDeathAndDecay","btGhoulFrenzy","diseaseRefreshDuration","refreshHornOfWinter","firstDisease","deathAndDecayPrio","useEmpowerRuneWeapon","bloodRuneFiller","startingPresence","bloodTap","oblitDelayDuration","useAms","avgAmsSuccessRate","avgAmsHit","autoRotation","desyncRotation","blPresence","presence","holdErwArmy","useGargoyle","frostCustomRotation","startingRunicPower","petUptime","precastGhoulFrenzy","precastHornOfWinter","unholyFrenzyTarget","TankDeathknight","TankDeathknight_Rotation","TankDeathknight_Options","opener","optimizationSetting","bloodSpell","Warrior_Rotation_SunderArmor","Warrior_Rotation_StanceOption","ProtectionWarrior_Rotation_DemoShoutChoice","ProtectionWarrior_Rotation_ThunderClapChoice","ProtectionWarrior_Rotation_SpellOption","WarriorMajorGlyph","WarriorMinorGlyph","WarriorShout","WarriorTalents","improvedHeroicStrike","deflection","improvedRend","improvedCharge","ironWill","tacticalMastery","improvedOverpower","angerManagement","impale","deepWounds","tasteForBlood","poleaxeSpecialization","sweepingStrikes","maceSpecialization","swordSpecialization","weaponMastery","improvedHamstring","secondWind","mortalStrike","strengthOfArms","improvedSlam","juggernaut","improvedMortalStrike","unrelentingAssault","suddenDeath","endlessRage","wreckingCrew","bladestorm","armoredToTheTeeth","boomingVoice","cruelty","improvedDemoralizingShout","unbridledWrath","improvedCleave","piercingHowl","bloodCraze","commandingPresence","dualWieldSpecialization","improvedExecute","enrage","precision","deathWish","improvedIntercept","improvedBerserkerRage","flurry","intensifyRage","bloodthirst","improvedWhirlwind","furiousAttacks","improvedBerserkerStance","heroicFury","bloodsurge","unendingFury","titansGrip","improvedBloodrage","shieldSpecialization","improvedThunderClap","incite","lastStand","improvedRevenge","shieldMastery","improvedSpellReflection","improvedDisarm","puncture","improvedDisciplines","concussionBlow","gagOrder","oneHandedWeaponSpecialization","improvedDefensiveStance","focusedRage","vitality","safeguard","warbringer","devastate","criticalBlock","swordAndBoard","damageShield","shockwave","Warrior","Warrior_Rotation","Warrior_Options","useCleave","useRend","useMs","useSlam","prioritizeWw","maintainDemoShout","maintainThunderClap","hsRageThreshold","msRageThreshold","rendRageThresholdBelow","slamRageThreshold","rendCdThreshold","useHsDuringExecute","useBtDuringExecute","spamExecute","useWwDuringExecute","useSlamOverExecute","stanceOption","rendHealthThresholdAbove","startingRage","useRecklessness","useShatteringThrow","shout","ProtectionWarrior","ProtectionWarrior_Rotation","ProtectionWarrior_Options","demoShoutChoice","thunderClapChoice","prioSslamOnShieldBlock","customRotation","precastShout","precastShoutT2","precastShoutSapphire","Warlock_Rotation_Preset","Warlock_Rotation_Type","Warlock_Rotation_PrimarySpell","Warlock_Rotation_Curse","Warlock_Rotation_SecondaryDot","Warlock_Rotation_SpecSpell","Warlock_Options_Summon","Warlock_Options_Armor","Warlock_Options_WeaponImbue","WarlockMajorGlyph","WarlockMinorGlyph","WarlockTalents","improvedCurseOfAgony","suppression","improvedCorruption","improvedCurseOfWeakness","improvedDrainSoul","improvedLifeTap","soulSiphon","improvedFear","felConcentration","amplifyCurse","grimReach","nightfall","empoweredCorruption","siphonLife","curseOfExhaustion","improvedFelhunter","eradication","contagion","darkPact","improvedHowlOfTerror","malediction","deathsEmbrace","unstableAffliction","pandemic","everlastingAffliction","haunt","improvedHealthstone","improvedImp","demonicEmbrace","felSynergy","improvedHealthFunnel","demonicBrutality","felVitality","improvedSayaad","soulLink","felDomination","demonicAegis","unholyPower","masterSummoner","manaFeed","masterConjuror","masterDemonologist","moltenCore","demonicResilience","demonicEmpowerment","demonicKnowledge","demonicTactics","decimation","improvedDemonicTactics","summonFelguard","nemesis","metamorphosis","improvedShadowBolt","bane","aftermath","moltenSkin","cataclysm","demonicPower","shadowburn","ruin","intensity","destructiveReach","improvedSearingPain","backlash","improvedImmolate","devastation","netherProtection","emberstorm","conflagrate","soulLeech","pyroclasm","shadowAndFlame","backdraft","shadowfury","empoweredImp","fireAndBrimstone","chaosBolt","Warlock","Warlock_Rotation","Warlock_Options","preset","curse","primarySpell","secondaryDot","corruption","detonateSeed","specSpell","armor","summon","weaponImbue","ElementalShaman_Rotation_RotationType","EnhancementShaman_Rotation_RotationType","EnhancementShaman_Rotation_CustomRotationSpell","EnhancementShaman_Rotation_PrimaryShock","ShamanMajorGlyph","ShamanMinorGlyph","EarthTotem","AirTotem","FireTotem","WaterTotem","ShamanShield","ShamanImbue","ShamanSyncType","ShamanTalents","convection","concussion","callOfFlame","elementalWarding","elementalDevastation","reverberation","elementalFocus","elementalFury","improvedFireNova","eyeOfTheStorm","elementalReach","callOfThunder","unrelentingStorm","elementalPrecision","lightningMastery","elementalMastery","stormEarthAndFire","boomingEchoes","lightningOverload","astralShift","lavaFlows","shamanism","thunderstorm","enhancingTotems","earthsGrasp","ancestralKnowledge","guardianTotems","thunderingStrikes","improvedGhostWolf","improvedShields","elementalWeapons","shamanisticFocus","improvedWindfuryTotem","spiritWeapons","mentalDexterity","frozenPower","stormstrike","staticShock","lavaLash","improvedStormstrike","mentalQuickness","shamanisticRage","earthenPower","maelstromWeapon","feralSpirit","improvedHealingWave","totemicFocus","improvedReincarnation","healingGrace","tidalFocus","improvedWaterShield","healingFocus","tidalForce","ancestralHealing","restorativeTotems","tidalMastery","healingWay","naturesSwiftness","focusedMind","purification","naturesGuardian","manaTideTotem","cleanseSpirit","blessingOfTheEternals","improvedChainHeal","naturesBlessing","ancestralAwakening","earthShield","improvedEarthShield","tidalWaves","riptide","ShamanTotems","earth","air","fire","water","useManaTide","useFireElemental","recallFireElementalOnOom","recallTotems","ElementalShaman","ElementalShaman_Rotation","ElementalShaman_Options","inThunderstormRange","useFireNova","fnMinManaPer","useChainLightning","useClOnlyGap","clMinManaPer","overwriteFlameshock","alwaysCritLvb","useThunderstorm","totems","shield","EnhancementShaman","EnhancementShaman_Rotation","EnhancementShaman_Options","rotationType","lavaburstWeave","lightningboltWeave","maelstromweaponMinStack","weaveReactionTime","firenovaManaThreshold","shamanisticRageManaThreshold","weaveFlameShock","primaryShock","flameShockClipTicks","syncType","imbueMh","imbueOh","Rogue_Rotation_Frequency","Rogue_Rotation_CombatPriority","Rogue_Rotation_AssassinationPriority","Rogue_Options_PoisonImbue","RogueMajorGlyph","RogueMinorGlyph","RogueTalents","improvedEviscerate","remorselessAttacks","malice","ruthlessness","bloodSpatter","puncturingWounds","vigor","improvedExposeArmor","lethality","vilePoisons","improvedPoisons","fleetFooted","coldBlood","improvedKidneyShot","quickRecovery","sealFate","murder","deadlyBrew","overkill","deadenedNerves","focusedAttacks","findWeakness","mutilate","turnTheTables","cutToTheChase","hungerForBlood","improvedGouge","improvedSinisterStrike","improvedSliceAndDice","endurance","riposte","closeQuartersCombat","improvedKick","improvedSprint","lightningReflexes","aggression","bladeFlurry","hackAndSlash","weaponExpertise","bladeTwisting","adrenalineRush","nervesOfSteel","throwingSpecialization","combatPotency","unfairAdvantage","surpriseAttacks","preyOnTheWeak","killingSpree","relentlessStrikes","masterOfDeception","opportunity","sleightOfHand","dirtyTricks","camouflage","elusiveness","ghostlyStrike","serratedBlades","setup","initiative","improvedAmbush","heightenedSenses","preparation","dirtyDeeds","hemorrhage","masterOfSubtlety","deadliness","envelopingShadows","premeditation","cheatDeath","sinisterCalling","waylay","honorAmongThieves","shadowstep","filthyTricks","slaughterFromTheShadows","shadowDance","Rogue","Rogue_Rotation","Rogue_Options","exposeArmorFrequency","minimumComboPointsExposeArmor","tricksOfTheTradeFrequency","combatFinisherPriority","assassinationFinisherPriority","minimumComboPointsPrimaryFinisher","minimumComboPointsSecondaryFinisher","multiTargetSliceFrequency","minimumComboPointsMultiTargetSlice","envenomPoolAmount","useFeint","allowCpOvercap","allowCpUndercap","openWithGarrote","ruptureForBleed","mhImbue","ohImbue","startingOverkillDuration","applyPoisonsManually","tricksOfTheTradeTarget","ShadowPriest_Rotation_RotationType","ShadowPriest_Options_Armor","PriestMajorGlyph","PriestMinorGlyph","PriestTalents","unbreakableWill","twinDisciplines","silentResolve","improvedInnerFire","improvedPowerWordFortitude","martyrdom","meditation","innerFocus","improvedPowerWordShield","absolution","mentalAgility","improvedManaBurn","reflectiveShield","mentalStrength","soulWarding","focusedPower","enlightenment","focusedWill","powerInfusion","improvedFlashHeal","aspiration","divineAegis","painSuppression","grace","borrowedTime","penance","improvedRenew","holySpecialization","spellWarding","divineFury","desperatePrayer","blessedRecovery","inspiration","holyReach","improvedHealing","searingLight","healingPrayers","spiritOfRedemption","spiritualGuidance","surgeOfLight","spiritualHealing","holyConcentration","lightwell","blessedResilience","bodyAndSoul","empoweredHealing","serendipity","empoweredRenew","circleOfHealing","testOfFaith","divineProvidence","guardianSpirit","spiritTap","improvedSpiritTap","darkness","shadowAffinity","improvedShadowWordPain","shadowFocus","improvedPsychicScream","improvedMindBlast","mindFlay","veiledShadows","shadowReach","shadowWeaving","silence","vampiricEmbrace","improvedVampiricEmbrace","mindMelt","improvedDevouringPlague","shadowform","shadowPower","improvedShadowform","psychicHorror","painAndSuffering","twistedFaith","dispersion","ShadowPriest","ShadowPriest_Rotation","ShadowPriest_Options","precastVt","latency","useShadowfiend","useMindBlast","useShadowWordDeath","SmitePriest","SmitePriest_Rotation","SmitePriest_Options","useDevouringPlague","memeDream","allowedHolyFireDelayMs","useInnerFire","powerInfusionTarget","HealingPriest","HealingPriest_Rotation","HealingPriest_Options","RetributionPaladin_Rotation_SpellOption","RetributionPaladin_Rotation_RotationType","ProtectionPaladin_Rotation_SpellOption","PaladinMajorGlyph","PaladinMinorGlyph","Blessings","PaladinAura","PaladinSeal","PaladinJudgement","PaladinTalents","spiritualFocus","sealsOfThePure","healingLight","divineIntellect","unyieldingFaith","auraMastery","illumination","improvedLayOnHands","improvedConcentrationAura","improvedBlessingOfWisdom","blessedHands","pureOfHeart","divineFavor","sanctifiedLight","purifyingPower","holyPower","lightsGrace","holyShock","blessedLife","sacredCleansing","holyGuidance","divineIllumination","judgementsOfThePure","infusionOfLight","enlightenedJudgements","beaconOfLight","divinity","divineStrength","stoicism","guardiansFavor","divineSacrifice","improvedRighteousFury","divineGuardian","improvedHammerOfJustice","improvedDevotionAura","reckoning","sacredDuty","spiritualAttunement","holyShield","ardentDefender","redoubt","combatExpertise","touchedByTheLight","avengersShield","guardedByTheLight","shieldOfTheTemplar","hammerOfTheRighteous","benediction","improvedJudgements","improvedBlessingOfMight","conviction","sealOfCommand","pursuitOfJustice","eyeForAnEye","sanctityOfBattle","crusade","vengeance","divinePurpose","theArtOfWar","repentance","fanaticism","sanctifiedWrath","crusaderStrike","sheathOfLight","righteousVengeance","divineStorm","RetributionPaladin","RetributionPaladin_Rotation","RetributionPaladin_Options","exoSlack","consSlack","divinePleaPercentage","holyWrathThreshold","sovTargets","useDivinePlea","customCastSequence","judgement","seal","aura","damageTakenPerSecond","useAvengingWrath","ProtectionPaladin","ProtectionPaladin_Rotation","ProtectionPaladin_Options","hammerFirst","useCustomPrio","Mage_Rotation_Type","Mage_Rotation_PrimaryFireSpell","Mage_Rotation_AoeRotation","Mage_Options_ArmorType","MageMajorGlyph","MageMinorGlyph","MageTalents","arcaneSubtlety","arcaneFocus","arcaneStability","arcaneFortitude","magicAbsorption","arcaneConcentration","magicAttunement","spellImpact","studentOfTheMind","arcaneShielding","improvedCounterspell","arcaneMeditation","tormentTheWeak","improvedBlink","presenceOfMind","arcaneMind","prismaticCloak","arcaneInstability","arcanePotency","arcanePower","incantersAbsorption","arcaneFlows","mindMastery","slow","missileBarrage","netherwindPresence","spellPower","arcaneBarrage","improvedFireBlast","incineration","improvedFireball","ignite","burningDetermination","worldInFlames","flameThrowing","impact","pyroblast","burningSoul","moltenShields","masterOfElements","playingWithFire","criticalMass","blastWave","blazingSpeed","firePower","pyromaniac","combustion","moltenFury","fieryPayback","empoweredFire","firestarter","dragonsBreath","hotStreak","burnout","livingBomb","frostbite","improvedFrostbolt","iceFloes","iceShards","frostWarding","permafrost","piercingIce","icyVeins","improvedBlizzard","arcticReach","frostChanneling","shatter","coldSnap","improvedConeOfCold","frozenCore","coldAsIce","shatteredBarrier","iceBarrier","arcticWinds","empoweredFrostbolt","fingersOfFrost","brainFreeze","summonWaterElemental","chilledToTheBone","deepFreeze","Mage","Mage_Rotation","Mage_Options","minBlastBeforeMissiles","num4StackBlastsToMissilesGamble","num4StackBlastsToEarlyMissiles","extraBlastsDuringFirstAp","primaryFireSpell","maintainImprovedScorch","numExtraTargets","optimizeCdsForExecute","cqsLatency","lbBeforeHotstreak","waterElementalDisobeyChance","aoe","evocationTicks","focusMagicPercentUptime","Hunter_Rotation_RotationType","Hunter_Rotation_StingType","Hunter_Rotation_SpellOption","Hunter_Options_Ammo","Hunter_Options_PetType","HunterMajorGlyph","HunterMinorGlyph","HunterTalents","improvedAspectOfTheHawk","enduranceTraining","focusedFire","improvedAspectOfTheMonkey","thickHide","improvedRevivePet","pathfinding","aspectMastery","unleashedFury","improvedMendPet","ferocity","spiritBond","intimidation","bestialDiscipline","animalHandler","frenzy","bestialWrath","catlikeReflexes","invigoration","serpentsSwiftness","longevity","theBeastWithin","cobraStrikes","kindredSpirits","beastMastery","improvedConcussiveShot","focusedAim","lethalShots","carefulAim","improvedHuntersMark","mortalShots","goForTheThroat","improvedArcaneShot","aimedShot","rapidKilling","improvedStings","efficiency","concussiveBarrage","readiness","barrage","combatExperience","rangedWeaponSpecialization","piercingShots","improvedBarrage","masterMarksman","rapidRecuperation","wildQuiver","silencingShot","improvedSteadyShot","markedForDeath","chimeraShot","improvedTracking","hawkEye","savageStrikes","surefooted","entrapment","trapMastery","survivalInstincts","survivalist","scatterShot","survivalTactics","tNT","lockAndLoad","hunterVsWild","killerInstinct","counterattack","resourcefulness","exposeWeakness","wyvernSting","thrillOfTheHunt","masterTactician","noxiousStings","pointOfNoEscape","blackArrow","sniperTraining","explosiveShot","HunterPetTalents","cobraReflexes","dive","greatStamina","naturalArmor","boarsSpeed","mobility","owlsFocus","spikedCollar","cullingTheHerd","lionhearted","carrionFeeder","greatResistance","cornered","feedingFrenzy","wolverineBite","roarOfRecovery","bullheaded","graceOfTheMantis","wildHunt","roarOfSacrifice","improvedCower","bloodthirsty","heartOfThePheonix","spidersBite","rabid","lickYourWounds","callOfTheWild","sharkAttack","charge","bloodOfTheRhino","petBarding","guardDog","thunderstomp","taunt","intervene","silverback","Hunter","Hunter_Rotation","Hunter_Options","trapWeave","timeToTrapWeaveMs","viperStartManaPercent","viperStopManaPercent","ammo","petType","sniperTrainingUptime","useHuntersMark","petTalents","BalanceDruid_Rotation_Type","FeralDruid_Rotation_BearweaveType","FeralDruid_Rotation_BiteModeType","FeralTankDruid_Rotation_Swipe","DruidMajorGlyph","DruidMinorGlyph","DruidTalents","starlightWrath","genesis","moonglow","naturesMajesty","improvedMoonfire","brambles","naturesGrace","naturesSplendor","naturesReach","celestialFocus","lunarGuidance","improvedInsectSwarm","dreamstate","moonfury","balanceOfPower","moonkinForm","improvedMoonkinForm","improvedFaerieFire","owlkinFrenzy","wrathOfCenarius","eclipse","typhoon","forceOfNature","galeWinds","starfall","feralAggression","feralInstinct","savageFury","feralSwiftness","sharpenedClaws","shreddingAttacks","predatoryStrikes","primalFury","primalPrecision","brutalImpact","feralCharge","nurturingInstinct","naturalReaction","heartOfTheWild","survivalOfTheFittest","improvedLeaderOfThePack","primalTenacity","protectorOfThePack","predatoryInstincts","kingOfTheJungle","improvedMangle","rendAndTear","primalGore","berserk","improvedMarkOfTheWild","naturesFocus","furor","naturalist","subtlety","naturalShapeshifter","omenOfClarity","masterShapeshifter","tranquilSpirit","improvedRejuvenation","giftOfNature","improvedTranquility","empoweredTouch","naturesBounty","livingSpirit","swiftmend","naturalPerfection","empoweredRejuvenation","livingSeed","revitalize","treeOfLife","improvedTreeOfLife","improvedBarkskin","giftOfTheEarthmother","wildGrowth","BalanceDruid","BalanceDruid_Rotation","BalanceDruid_Options","useBattleRes","useIs","useMf","useWrath","useStarfire","useTyphoon","useHurricane","mfInsideEclipseThreshold","isInsideEclipseThreshold","useSmartCooldowns","maximizeMfUptime","maximizeIsUptime","maintainFaerieFire","innervateTarget","FeralDruid","FeralDruid_Rotation","FeralDruid_Options","bearWeaveType","minCombosForRip","useRake","useBite","mangleSpam","biteTime","minCombosForBite","berserkBiteThresh","powerbear","maxRoarOffset","biteModeType","hotUptime","latencyMs","prepopOoc","assumeBleedActive","FeralTankDruid","FeralTankDruid_Rotation","FeralTankDruid_Options","maulRageThreshold","maintainDemoralizingRoar","swipe","swipeApThreshold","ResourceType","Player","race","shattFaction","class","bonusStats","spec","talentsString","profession1","profession2","inFrontOfTarget","distanceFromTarget","equipment","consumes","buffs","balanceDruid","feralDruid","feralTankDruid","hunter","mage","retributionPaladin","protectionPaladin","healingPriest","shadowPriest","smitePriest","rogue","elementalShaman","enhancementShaman","warlock","warrior","protectionWarrior","deathknight","tankDeathknight","glyphs","healingModel","Party","players","Raid","parties","tanks","staggerStormstrikes","targetDummies","debuffs","SimOptions","iterations","randomSeed","debug","debugFirstIteration","isTest","ActionMetrics","TargetedActionMetrics","isMelee","unitIndex","casts","hits","crits","misses","dodges","parries","blocks","glances","damage","threat","healing","shielding","castTimeMs","AuraMetrics","uptimeSecondsAvg","uptimeSecondsStdev","procsAvg","ResourceMetrics","events","gain","actualGain","DistributionMetrics","avg","stdev","max","maxSeed","min","minSeed","hist","binaryReadMap4","UnitMetrics","secondsOomAvg","chanceOfDeath","actions","auras","resources","pets","dps","dtps","tto","PartyMetrics","RaidMetrics","EncounterMetrics","RaidSimRequest","raid","encounter","simOptions","RaidSimResult","logs","firstIterationDuration","avgIterationDuration","errorResult","raidMetrics","encounterMetrics","GearListRequest","GearListResult","PresetEncounter","enchants","encounters","PresetTarget","path","ComputeStatsRequest","PlayerStats","baseStats","gearStats","talentsStats","buffsStats","consumesStats","finalStats","sets","PartyStats","RaidStats","ComputeStatsResult","raidStats","StatWeightsRequest","statsToWeigh","epReferenceStat","player","raidBuffs","partyBuffs","StatWeightsResult","StatWeightValues","tps","weights","weightsStdev","epValues","epValuesStdev","progressId","ProgressMetrics","completedIterations","totalIterations","completedSims","totalSims","presimRunning","finalRaidResult","finalWeightResult","SimSettings","fixedRngSeed","showDamageMetrics","showThreatMetrics","showHealingMetrics","showExperimental","faction","IndividualSimSettings","epWeights","settings","SavedGearSet","gear","SavedSettings","rotationJson","playerBuffs","SavedTalents","BuffBot","raidIndex","innervateAssignment","powerInfusionAssignment","tricksOfTheTradeAssignment","unholyFrenzyAssignment","BlessingsAssignment","blessings","BlessingsAssignments","paladins","SavedEncounter","SavedRaid","buffBots","RaidSimSettings","SimRun","request","SimRunData","run","referenceRun","DetailedResultsUpdate","runData","CURRENT_PHASE","REPO_NAME","pathnameParts","window","location","pathname","repoPartIdx","findIndex","part","stringComparator","sum","reduce","total","cur","maxIndex","v","swap","j","arrayEquals","comparator","every","distinct","distinctArr","forEach","dVal","bucket","buckets","valString","stDevToConf90","stDev","N","sqrt","getEnumValues","enumType","isRightClick","event","button","hexToRgba","hex","alpha","c","downloadString","fileName","dataStr","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","formatDeltaTextElem","elem","before","after","delta","deltaStr","toFixed","textContent","classList","add","permutations","withoutThisElem","splice","perm","flat","permutationsWithDups","smaller","permutation","newPerm","combinationsWithDups","permutationA","permutationB","GEM_COLORS","GemColorUnknown","PRIMARY_COLORS","GemColorRed","GemColorYellow","GemColorBlue","SECONDARY_COLORS","GemColorGreen","GemColorPurple","GemColorOrange","socketToMatchingColors","gemColorMatchesSocket","gemColor","socketColor","has","gemMatchesSocket","gem","gemEligibleForSocket","GemColorMeta","isUnrestrictedGem","ProfessionUnknown","GemColorPrismatic","MetaGemCondition","description","minRed","minYellow","minBlue","compareColorGreater","compareColorLesser","metaGemConditions","isMet","numRed","numYellow","numBlue","getNumInCategory","isCompareColorCondition","isOneOfEach","isTwoAndOne","isThreeOfAColor","getMetaGemCondition","getMetaGemConditionDescription","metaGem","CHAOTIC_SKYFLARE_DIAMOND","fromMinColors","CHAOTIC_SKYFIRE_DIAMOND","fromCompareColors","gemSocketCssClasses","setGemSocketCssClass","cssClass","emptyGemSocketIcons","getEmptyGemSocketIconUrl","NUM_SPECS","naturalSpecOrder","SpecBalanceDruid","SpecFeralDruid","SpecFeralTankDruid","SpecHunter","SpecMage","SpecRetributionPaladin","SpecProtectionPaladin","SpecHealingPriest","SpecShadowPriest","SpecSmitePriest","SpecRogue","SpecElementalShaman","SpecEnhancementShaman","SpecWarlock","SpecWarrior","SpecProtectionWarrior","SpecDeathknight","SpecTankDeathknight","specNames","classColors","ClassUnknown","ClassDruid","ClassHunter","ClassMage","ClassPaladin","ClassPriest","ClassRogue","ClassShaman","ClassWarlock","ClassWarrior","ClassDeathknight","specIconsLarge","talentTreeIcons","titleIcons","raidSimIcon","getTalentTreePoints","tree","char","getTalentPoints","getTalentTree","getTalentTreeIcon","talentTreeIdx","specToClass","specSiteUrlTemplate","URL","protocol","host","getSpecSiteUrl","specString","str","replace","letter","startsWith","camelToSnakeCase","raidSimSiteUrl","specTypeFunctions","rotationCreate","BalanceDruidRotation","rotationEquals","rotationCopy","rotationToJson","rotationFromJson","obj","rotationFromPlayer","talentsCreate","talentsEquals","talentsCopy","talentsToJson","talentsFromJson","talentsFromPlayer","optionsCreate","BalanceDruidOptions","optionsEquals","optionsCopy","optionsToJson","optionsFromJson","optionsFromPlayer","ElementalShamanRotation","ElementalShamanOptions","EnhancementShamanRotation","EnhancementShamanOptions","FeralDruidRotation","FeralDruidOptions","FeralTankDruidRotation","FeralTankDruidOptions","HunterRotation","HunterOptions","MageRotation","MageOptions","RetributionPaladinRotation","RetributionPaladinOptions","ProtectionPaladinRotation","ProtectionPaladinOptions","RogueRotation","RogueOptions","HealingPriestRotation","HealingPriestOptions","ShadowPriestRotation","ShadowPriestOptions","SmitePriestRotation","SmitePriestOptions","WarlockRotation","WarlockOptions","WarriorRotation","WarriorOptions","ProtectionWarriorRotation","ProtectionWarriorOptions","DeathknightRotation","DeathknightOptions","TankDeathknightRotation","TankDeathknightOptions","raceToFaction","RaceUnknown","Unknown","RaceBloodElf","Horde","RaceDraenei","Alliance","RaceDwarf","RaceGnome","RaceHuman","RaceNightElf","RaceOrc","RaceTauren","RaceTroll","RaceUndead","druidRaces","hunterRaces","mageRaces","paladinRaces","priestRaces","rogueRaces","shamanRaces","warlockRaces","warriorRaces","deathKnightRaces","specToEligibleRaces","dualWieldSpecs","tankSpecs","isTankSpec","healingSpecs","isHealingSpec","specToLocalStorageKey","withSpecProto","specOptions","playerToSpec","specValues","classToMaxArmorType","ArmorTypeUnknown","ArmorTypeLeather","ArmorTypeMail","ArmorTypeCloth","ArmorTypePlate","classToEligibleRangedWeaponTypes","RangedWeaponTypeIdol","RangedWeaponTypeBow","RangedWeaponTypeCrossbow","RangedWeaponTypeGun","RangedWeaponTypeThrown","RangedWeaponTypeWand","RangedWeaponTypeLibram","RangedWeaponTypeTotem","RangedWeaponTypeSigil","classToEligibleWeaponTypes","WeaponTypeDagger","WeaponTypeFist","WeaponTypeMace","canUseTwoHand","WeaponTypeOffHand","WeaponTypeStaff","WeaponTypePolearm","WeaponTypeAxe","WeaponTypeSword","WeaponTypeShield","isSharpWeaponType","isBluntWeaponType","metaGemEffectEPs","playerStats","Gems.CHAOTIC_SKYFIRE_DIAMOND","Gems.CHAOTIC_SKYFLARE_DIAMOND","getStat","StatSpellPower","StatSpellCrit","itemTypeToSlotsMap","ItemTypeUnknown","ItemTypeHead","ItemSlotHead","ItemTypeNeck","ItemSlotNeck","ItemTypeShoulder","ItemSlotShoulder","ItemTypeBack","ItemSlotBack","ItemTypeChest","ItemSlotChest","ItemTypeWrist","ItemSlotWrist","ItemTypeHands","ItemSlotHands","ItemTypeWaist","ItemSlotWaist","ItemTypeLegs","ItemSlotLegs","ItemTypeFeet","ItemSlotFeet","ItemTypeFinger","ItemSlotFinger1","ItemSlotFinger2","ItemTypeTrinket","ItemSlotTrinket1","ItemSlotTrinket2","ItemTypeRanged","ItemSlotRanged","getEligibleItemSlots","ItemTypeWeapon","HandTypeMainHand","ItemSlotMainHand","HandTypeOffHand","ItemSlotOffHand","getEligibleEnchantSlots","enchantAppliesToItem","sharedSlots","EnchantTypeTwoHand","HandTypeTwoHand","EnchantTypeShield","NO_TARGET","newRaidTarget","emptyRaidTarget","makeBlessingsAssignments","numPaladins","assignments","fill","BlessingUnknown","makeBlankBlessingsAssignments","makeDefaultBlessings","BlessingOfKings","BlessingOfWisdom","BlessingOfMight","BlessingOfSanctuary","BlessingOfSalvation","orderedResourceTypes","ResourceTypeHealth","ResourceTypeMana","ResourceTypeEnergy","ResourceTypeRage","ResourceTypeComboPoints","ResourceTypeFocus","ResourceTypeRunicPower","ResourceTypeBloodRune","ResourceTypeFrostRune","ResourceTypeUnholyRune","ResourceTypeDeathRune","_ActionId","baseName","iconUrl","OtherActionNone","OtherActionWait","OtherActionManaRegen","resourceTypeToIcon","OtherActionEnergyRegen","OtherActionFocusRegen","OtherActionManaGain","OtherActionRageGain","OtherActionAttack","OtherActionShoot","OtherActionPet","OtherActionRefund","OtherActionDamageTaken","OtherActionHealingModel","OtherActionBloodRuneGain","OtherActionFrostRuneGain","OtherActionUnholyRuneGain","OtherActionDeathRuneGain","anyId","other","equalsIgnoringTag","setBackground","style","backgroundImage","setWowheadHref","href","makeItemUrl","makeSpellUrl","setBackgroundAndHref","async","setHref","filled","playerIndex","tooltipData","getTooltipData","idString","toProtoString","iconOverrideId","idOverrides","makeIconUrl","overrideTooltipData","toStringIgnoringTag","toProto","protoId","ActionIdProto","withoutTag","petName","petNameToActionId","petNameToIcon","fromItemId","getWowheadItemId","fromSpellId","fromOtherId","fromEmpty","match","idType","console","warn","iconLabel","url","dbCache","fetch","then","response","responseJson","db","ID","dbUrl","getDb","Name","icon","Icon","tooltipPostfix","cache","Promise","resolve","tooltip","text","nameMatch","iconMatch","tooltipMatch","getDbTooltipDataHelper","actionId","getItemTooltipData","getSpellTooltipData","ActionId","Shadowfiend","Bloodworm","Bat","Bear","Boar","Cat","Chimaera","Crab","Crocolisk","Devilsaur","Dragonhawk","Felguard","Felhunter","Gargoyle","Ghoul","Gorilla","Hyena","Imp","Moth","Owl","Raptor","Ravager","Rhino","Scorpid","Serpent","Silithid","Spider","Succubus","Tallstrider","Turtle","Wasp","Wolf","Worm","ResourceTypeNone","STATS_LEN","Stats","newStat","statIdx","stat","withStat","newStats","addStat","subtract","computeEP","idx","asArray","statsMap","statsArr","entry","statStr","getWeaponDPS","EquippedItem","_item","_enchant","_gems","numPossibleSockets","numSockets","withItem","newEnchant","newGems","firstMatchingIndex","socketIdx","firstEligibleIndex","couldHaveExtraSocket","withEnchant","withGemHelper","withGem","curItem","removeGemsWithId","gemId","asActionId","asSpec","meetsSocketBonus","socketBonusStats","hasExtraSocket","isBlacksmithing","hasExtraGem","allSocketColors","curSocketColors","curGems","g","getFailedProfessionRequirements","professions","failed","Gear","slot","thisItem","equalsOrBothNull","getEquippedItem","withEquippedItem","newSlot","newItem","canDualWield2H","newInternalGear","asMap","mainHand","offHand","canDW2h","getTrinkets","hasTrinket","ei","getAllGems","getNonMetaGems","statsFromGems","getGemsOfColor","getJCGems","Jewelcrafting","getMetaGem","gemColorCounts","red","yellow","blue","hasActiveMetaGem","isMetaGemActive","hasInactiveMetaGem","withoutMetaGem","headItem","withoutBlacksmithSockets","curGear","wristItem","handsItem","hasBluntMHWeapon","weapon","hasSharpMHWeapon","hasBluntOHWeapon","hasSharpOHWeapon","raceNames","nameToRace","normalized","replaceAll","classNames","nameToClass","lower","charClass","professionNames","Alchemy","Blacksmithing","Enchanting","Engineering","Herbalism","Inscription","Leatherworking","Mining","Skinning","Tailoring","nameToProfession","prof","statOrder","StatHealth","StatArmor","StatStamina","StatStrength","StatAgility","StatIntellect","StatSpirit","StatSpellHit","StatSpellHaste","StatSpellPenetration","StatMP5","StatAttackPower","StatRangedAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","StatMana","StatEnergy","StatRage","StatDefense","StatBlock","StatBlockValue","StatDodge","StatParry","StatResilience","StatArcaneResistance","StatFireResistance","StatFrostResistance","StatNatureResistance","StatShadowResistance","statNames","getClassStatName","playerClass","statName","slotNames","resourceNames","shattFactionNames","ShattrathFactionAldor","ShattrathFactionScryer","_Entity","ownerName","index","isTarget","isPet","matchAll","parseRegex","Entity","SimLog","params","logIndex","timestamp","activeAuras","toStringPrefix","timestampStr","lines","line","lineIndex","threatMatch","parseFloat","remainder","entities","parseAll","DamageDealtLog","ResourceChangedLog","AuraEventLog","AuraStacksChangeLog","MajorCooldownUsedLog","CastBeganLog","CastCompletedLog","StatChangeLog","isDamageDealt","isResourceChanged","isAuraEvent","isAuraStacksChange","isMajorCooldownUsed","isCastBegan","isCastCompleted","isStatChange","grouped","curGroup","log","amount","miss","crit","crush","glance","dodge","parry","block","tick","partialResist1_4","partialResist2_4","partialResist3_4","hit","isDamage","isHealing","isShielding","resultString","threatPostfix","fromLogString","cause","Boolean","_DpsLog","damageLogs","damageDealtLogs","groupedDamageLogs","groupDuplicateTimestamps","curDamageLogs","curDamageTotal","ddLogGroup","ddLog","newStartIdx","curLog","inWindow","DPS_WINDOW","DpsLog","ThreatLogGroup","threatBefore","threatAfter","groupedLogs","curThreat","logGroup","newThreat","threatLog","isGained","isFaded","isRefreshed","oldStacks","newStacks","AuraUptimeLog","fadedAt","stacksChange","gainedAt","entity","encounterDuration","unmatchedGainedLogs","uptimeLogs","matchingGainedIdx","gainedLog","gained","stacks","stacksChangeLogs","unmatchedLog","auraLogs","curAuras","auraLogsIndex","curAura","resourceType","valueBefore","valueAfter","isSpend","signedDiff","verb","stringToResourceType","ResourceChangedLogGroup","allResourceChangedLogs","results","resourceChangedLogs","cooldownId","manaCost","castTime","castId","CastLog","castBeganLog","castCompletedLog","travelTime","castBeganLogs","castCompletedLogs","toBucketKey","castBeganLogsByAbility","castCompletedLogsByAbility","damageDealtLogsByAbility","castLogs","bucketKey","abilityCastsBegan","abilityCastsCompleted","abilityDamageDealt","ddIdx","cbIdx","cbLog","ccLog","nextCcLog","ddLogs","isGain","Component","parentElem","rootCssClass","rootElem","TypedEvent","label","listeners","firedEvents","frozenEvents","on","listener","dispose","off","once","onceListener","eventID","emit","fe","freezeCount","frozenTypedEvents","fireEventInternal","func","typedEvents","typedEvent","frozenEvent","nextEventID","newEvent","emitter","Input","parent","modObject","config","changeEmitter","inputConfig","extraCssClasses","labelDiv","labelTooltip","tippy","content","allowHTML","changedEvent","setInputValue","getValue","update","enableWhen","getInputElem","removeAttribute","showWhen","init","defaultValue","inputChanged","setValue","getInputValue","newValue","TalentsPicker","pointsPerRow","maxPoints","numRows","trees","treeConfig","talentConfig","rowIdx","TalentTreePicker","talent","setPoints","getTalentsString","setTalentsString","updateTrees","isFull","numPoints","setMaxPoints","newMaxPoints","picker","innerHTML","title","getElementsByClassName","main","backgroundUrl","gridTemplateRows","iconSize","height","width","TalentPicker","prereqLocation","getTalent","prereqOfLocation","addEventListener","getRow","getCol","colIdx","getPoints","gridRow","gridColumn","dataset","wowhead","pointsDisplay","preventDefault","longTouchTimer","setTimeout","clearTimeout","newPoints","pts","points","canSetPoints","oldPoints","additionalPoints","removedPoints","pointTotalsByRow","talentsInRow","cumulativeTotalsByRow","_","checkValidity","getSpellIdForPoints","rank","spellIds","newTalentsConfig","prevTalent","curSpellId","pointIdx","druidTalentsConfig","druidGlyphsConfig","majorGlyphs","GlyphOfBarkskin","GlyphOfBerserk","GlyphOfClaw","GlyphOfEntanglingRoots","GlyphOfFocus","GlyphOfFrenziedRegeneration","GlyphOfGrowling","GlyphOfHealingTouch","GlyphOfHurricane","GlyphOfInnervate","GlyphOfInsectSwarm","GlyphOfLifebloom","GlyphOfMangle","GlyphOfMaul","GlyphOfMonsoon","GlyphOfMoonfire","GlyphOfNourish","GlyphOfRake","GlyphOfRapidRejuvenation","GlyphOfRebirth","GlyphOfRegrowth","GlyphOfRejuvenation","GlyphOfRip","GlyphOfSavageRoar","GlyphOfShred","GlyphOfStarfall","GlyphOfStarfire","GlyphOfSurvivalInstincts","GlyphOfSwiftmend","GlyphOfWildGrowth","GlyphOfWrath","minorGlyphs","GlyphOfAquaticForm","GlyphOfChallengingRoar","GlyphOfDash","GlyphOfTheWild","GlyphOfThorns","GlyphOfTyphoon","GlyphOfUnburdenedRebirth","hunterTalentsConfig","hunterGlyphsConfig","GlyphOfAimedShot","GlyphOfArcaneShot","GlyphOfAspectOfTheViper","GlyphOfBestialWrath","GlyphOfChimeraShot","GlyphOfDeterrence","GlyphOfDisengage","GlyphOfExplosiveShot","GlyphOfExplosiveTrap","GlyphOfFreezingTrap","GlyphOfFrostTrap","GlyphOfHuntersMark","GlyphOfImmolationTrap","GlyphOfKillShot","GlyphOfMending","GlyphOfMultiShot","GlyphOfRapidFire","GlyphOfRaptorStrike","GlyphOfScatterShot","GlyphOfSerpentSting","GlyphOfSnakeTrap","GlyphOfSteadyShot","GlyphOfTheBeast","GlyphOfTheHawk","GlyphOfTrueshotAura","GlyphOfVolley","GlyphOfWyvernSting","GlyphOfFeignDeath","GlyphOfMendPet","GlyphOfPossessedStrength","GlyphOfRevivePet","GlyphOfScareBeast","GlyphOfThePack","mageTalentsConfig","mageGlyphsConfig","GlyphOfArcaneBarrage","GlyphOfArcaneBlast","GlyphOfArcaneExplosion","GlyphOfArcaneMissiles","GlyphOfArcanePower","GlyphOfBlink","GlyphOfDeepFreeze","GlyphOfEternalWater","GlyphOfEvocation","GlyphOfFireBlast","GlyphOfFireball","GlyphOfFrostNova","GlyphOfFrostbolt","GlyphOfFrostfire","GlyphOfIceArmor","GlyphOfIceBarrier","GlyphOfIceBlock","GlyphOfIceLance","GlyphOfIcyVeins","GlyphOfInvisibility","GlyphOfLivingBomb","GlyphOfMageArmor","GlyphOfManaGem","GlyphOfMirrorImage","GlyphOfMoltenArmor","GlyphOfPolymorph","GlyphOfRemoveCurse","GlyphOfScorch","GlyphOfWaterElemental","GlyphOfArcaneIntellect","GlyphOfBlastWave","GlyphOfFireWard","GlyphOfFrostArmor","GlyphOfFrostWard","GlyphOfSlowFall","GlyphOfThePenguin","paladinTalentsConfig","paladinGlyphsConfig","GlyphOfAvengerSShield","GlyphOfAvengingWrath","GlyphOfBeaconOfLight","GlyphOfCleansing","GlyphOfConsecration","GlyphOfCrusaderStrike","GlyphOfDivinePlea","GlyphOfDivineStorm","GlyphOfDivinity","GlyphOfExorcism","GlyphOfFlashOfLight","GlyphOfHammerOfJustice","GlyphOfHammerOfTheRighteous","GlyphOfHammerOfWrath","GlyphOfHolyLight","GlyphOfHolyShock","GlyphOfHolyWrath","GlyphOfJudgement","GlyphOfRighteousDefense","GlyphOfSalvation","GlyphOfSealOfCommand","GlyphOfSealOfLight","GlyphOfSealOfRighteousness","GlyphOfSealOfVengeance","GlyphOfSealOfWisdom","GlyphOfShieldOfRighteousness","GlyphOfSpiritualAttunement","GlyphOfTurnEvil","GlyphOfBlessingOfKings","GlyphOfBlessingOfMight","GlyphOfBlessingOfWisdom","GlyphOfLayOnHands","GlyphOfSenseUndead","GlyphOfTheWise","priestTalentsConfig","priestGlyphsConfig","GlyphOfCircleOfHealing","GlyphOfDispelMagic","GlyphOfDispersion","GlyphOfFade","GlyphOfFearWard","GlyphOfFlashHeal","GlyphOfGuardianSpirit","GlyphOfHolyNova","GlyphOfHymnOfHope","GlyphOfInnerFire","GlyphOfLightwell","GlyphOfMassDispel","GlyphOfMindControl","GlyphOfMindFlay","GlyphOfMindSear","GlyphOfPainSuppression","GlyphOfPenance","GlyphOfPowerWordShield","GlyphOfPrayerOfHealing","GlyphOfPsychicScream","GlyphOfRenew","GlyphOfScourgeImprisonment","GlyphOfShadow","GlyphOfShadowWordDeath","GlyphOfShadowWordPain","GlyphOfSmite","GlyphOfSpiritOfRedemption","GlyphOfFading","GlyphOfFortitude","GlyphOfLevitate","GlyphOfShackleUndead","GlyphOfShadowProtection","GlyphOfShadowfiend","rogueTalentsConfig","rogueGlyphsConfig","GlyphOfAdrenalineRush","GlyphOfAmbush","GlyphOfBackstab","GlyphOfBladeFlurry","GlyphOfCloakOfShadows","GlyphOfCripplingPoison","GlyphOfDeadlyThrow","GlyphOfEvasion","GlyphOfEviscerate","GlyphOfExposeArmor","GlyphOfFanOfKnives","GlyphOfFeint","GlyphOfGarrote","GlyphOfGhostlyStrike","GlyphOfGouge","GlyphOfHemorrhage","GlyphOfHungerForBlood","GlyphOfKillingSpree","GlyphOfMutilate","GlyphOfPreparation","GlyphOfRupture","GlyphOfSap","GlyphOfShadowDance","GlyphOfSinisterStrike","GlyphOfSliceAndDice","GlyphOfSprint","GlyphOfTricksOfTheTrade","GlyphOfVigor","GlyphOfBlurredSpeed","GlyphOfDistract","GlyphOfPickLock","GlyphOfPickPocket","GlyphOfSafeFall","GlyphOfVanish","shamanTalentsConfig","shamanGlyphsConfig","GlyphOfChainHeal","GlyphOfChainLightning","GlyphOfEarthShield","GlyphOfEarthlivingWeapon","GlyphOfElementalMastery","GlyphOfFeralSpirit","GlyphOfFireElementalTotem","GlyphOfFireNova","GlyphOfFlameShock","GlyphOfFlametongueWeapon","GlyphOfFrostShock","GlyphOfHealingStreamTotem","GlyphOfHealingWave","GlyphOfHex","GlyphOfLava","GlyphOfLavaLash","GlyphOfLesserHealingWave","GlyphOfLightningBolt","GlyphOfLightningShield","GlyphOfManaTide","GlyphOfRiptide","GlyphOfShocking","GlyphOfStoneclawTotem","GlyphOfStormstrike","GlyphOfThunder","GlyphOfTotemOfWrath","GlyphOfWaterMastery","GlyphOfWindfuryWeapon","GlyphOfAstralRecall","GlyphOfGhostWolf","GlyphOfRenewedLife","GlyphOfThunderstorm","GlyphOfWaterBreathing","GlyphOfWaterShield","GlyphOfWaterWalking","warlockTalentsConfig","warlockGlyphsConfig","GlyphOfChaosBolt","GlyphOfConflagrate","GlyphOfCorruption","GlyphOfCurseOfAgony","GlyphOfDeathCoil","GlyphOfDemonicCircle","GlyphOfFear","GlyphOfFelguard","GlyphOfFelhunter","GlyphOfHaunt","GlyphOfHealthFunnel","GlyphOfHealthstone","GlyphOfHowlOfTerror","GlyphOfImmolate","GlyphOfImp","GlyphOfIncinerate","GlyphOfLifeTap","GlyphOfMetamorphosis","GlyphOfQuickDecay","GlyphOfSearingPain","GlyphOfShadowBolt","GlyphOfShadowburn","GlyphOfShadowflame","GlyphOfSiphonLife","GlyphOfSoulLink","GlyphOfSoulstone","GlyphOfSuccubus","GlyphOfUnstableAffliction","GlyphOfVoidwalker","GlyphOfCurseOfExhausion","GlyphOfDrainSoul","GlyphOfSubjugateDemon","GlyphOfKilrogg","GlyphOfSouls","GlyphOfUnendingBreath","warriorTalentsConfig","warriorGlyphsConfig","GlyphOfBarbaricInsults","GlyphOfBladestorm","GlyphOfBlocking","GlyphOfBloodthirst","GlyphOfCleaving","GlyphOfDevastate","GlyphOfEnragedRegeneration","GlyphOfExecution","GlyphOfHamstring","GlyphOfHeroicStrike","GlyphOfIntervene","GlyphOfLastStand","GlyphOfMortalStrike","GlyphOfOverpower","GlyphOfRapidCharge","GlyphOfRending","GlyphOfResonatingPower","GlyphOfRevenge","GlyphOfShieldWall","GlyphOfShockwave","GlyphOfSpellReflection","GlyphOfSunderArmor","GlyphOfSweepingStrikes","GlyphOfTaunt","GlyphOfVictoryRush","GlyphOfVigilance","GlyphOfWhirlwind","GlyphOfBattle","GlyphOfBloodrage","GlyphOfCharge","GlyphOfCommand","GlyphOfEnduringVictory","GlyphOfMockingBlow","GlyphOfThunderClap","deathknightTalentsConfig","deathknightGlyphsConfig","GlyphOfAntiMagicShell","GlyphOfBloodStrike","GlyphOfBoneShield","GlyphOfChainsOfIce","GlyphOfDancingRuneWeapon","GlyphOfDarkCommand","GlyphOfDarkDeath","GlyphOfDeathAndDecay","GlyphOfDeathGrip","GlyphOfDeathStrike","GlyphOfDisease","GlyphOfFrostStrike","GlyphOfHeartStrike","GlyphOfHowlingBlast","GlyphOfHungeringCold","GlyphOfIceboundFortitude","GlyphOfIcyTouch","GlyphOfObliterate","GlyphOfPlagueStrike","GlyphOfRuneStrike","GlyphOfRuneTap","GlyphOfScourgeStrike","GlyphOfStrangulate","GlyphOfTheGhoul","GlyphOfUnbreakableArmor","GlyphOfUnholyBlight","GlyphOfVampiricBlood","GlyphOfBloodTap","GlyphOfCorpseExplosion","GlyphOfDeathSEmbrace","GlyphOfHornOfWinter","GlyphOfPestilence","GlyphOfRaiseDead","itemQualityCssClasses","ItemQualityJunk","ItemQualityCommon","ItemQualityUncommon","ItemQualityRare","ItemQualityEpic","ItemQualityLegendary","setItemQualityCssClass","CloseButton","onClick","Popup","computedStyles","getComputedStyle","setProperty","getPropertyValue","closest","$","bPopup","onClose","addCloseButton","close","emptyGlyphData","GlyphsPicker","glyphsConfig","majorGlyphPickers","minorGlyphPickers","idStr","majorGlyphsData","getGlyphData","glyph","minorGlyphsData","glyphField","GlyphPicker","glyphConfig","glyphOptions","isMajor","glyphsChangeEmitter","getGlyphs","player2","setGlyphs","selectedGlyph","iconElem","GlyphSelectorModal","glyphData","glyphPicker","listElem","listItemElems","glyphIdx","listItemElem","children","nameElem","onclick","updateSelected","selectedGlyphId","listItemIdx","listItemData","applyFilters","validItemElems","searchInput","searchQuery","include","numShown","ev","ele","contains","CHARACTER_LEVEL","MAX_TALENT_POINTS","BOSS_LEVEL","EXPERTISE_PER_QUARTER_PERCENT_REDUCTION","MELEE_CRIT_RATING_PER_CRIT_CHANCE","MELEE_HIT_RATING_PER_HIT_CHANCE","SPELL_CRIT_RATING_PER_CRIT_CHANCE","SPELL_HIT_RATING_PER_HIT_CHANCE","HASTE_RATING_PER_HASTE_PERCENT","SPECIAL_MELEE_HASTE_RATING_PER_HASTE_PERCENT","DEFENSE_RATING_PER_DEFENSE","BLOCK_RATING_PER_BLOCK_CHANCE","DODGE_RATING_PER_DODGE_CHANCE","PARRY_RATING_PER_PARRY_CHANCE","newTalentsPicker","classTalentsConfig","getClass","talentsChangeEmitter","newGlyphsPicker","classGlyphsConfig","talentSpellIdsToTalentString","talentIds","spellIdIndex","talentStringToProto","proto","talentString","talentsConfig","treeString","treeIdx","protoToTalentString","sim","itemEPCache","gemEPCache","enchantEPCache","currentStats","nameChangeEmitter","buffsChangeEmitter","consumesChangeEmitter","bonusStatsChangeEmitter","gearChangeEmitter","professionChangeEmitter","raceChangeEmitter","rotationChangeEmitter","specOptionsChangeEmitter","cooldownsChangeEmitter","inFrontOfTargetChangeEmitter","distanceFromTargetChangeEmitter","healingModelChangeEmitter","epWeightsChangeEmitter","currentStatsEmitter","party","onAny","getSpecIcon","getClassColor","getParty","getRaid","getPartyIndex","getPlayers","getRaidIndex","getIndex","MAX_PARTY_SIZE","setParty","newParty","getOtherPartyMembers","getItems","eligibleWeaponType","wt","HandTypeOneHand","canEquipItem","getEnchants","canEquipEnchant","getGems","getEpWeights","setEpWeights","newEpWeights","epStats","onProgress","statWeights","getCurrentStats","setCurrentStats","getName","setName","newName","getLabel","getRace","setRace","newRace","getProfession1","setProfession1","newProfession","getProfession2","setProfession2","getProfessions","setProfessions","newProfessions","freezeAllAndDo","hasProfession","getShattFaction","setShattFaction","newFaction","getFaction","getBuffs","setBuffs","newBuffs","getConsumes","setConsumes","newConsumes","getCooldowns","setCooldowns","newCooldowns","getTalents","equipItem","setGear","getGear","newGear","getBonusStats","setBonusStats","newBonusStats","getRotation","setRotation","newRotation","newTalentsString","newGlyphs","getMajorGlyphs","getMinorGlyphs","getAllGlyphs","getSpecOptions","setSpecOptions","newSpecOptions","getInFrontOfTarget","setInFrontOfTarget","newInFrontOfTarget","getDistanceFromTarget","setDistanceFromTarget","newDistanceFromTarget","getHealingModel","setHealingModel","newHealingModel","computeStatsEP","computeGemEP","epFromStats","epFromEffect","getMetaGemEffectEP","bonusEP","ep","computeEnchantEP","computeItemEP","itemStats","WeaponTypeUnknown","weaponDps","RangedWeaponTypeUnknown","bestGemEPNotMatchingSockets","getPhase","bestGemEPMatchingSockets","setWowheadData","equippedItem","makeRaidTarget","forExport","PlayerProto","fromProto","lookupEquipmentSpec","newPlayer","applySharedDefaults","compChangeEmitter","playerChangeListener","size","isEmpty","clear","setPlayer","getParties","getPlayer","oldPlayer","newPlayerOldParty","PartyProto","playerProto","currentPlayer","SimResultData","SimResult","getPlayerWithIndex","getFirstPlayer","getTargets","getTargetWithIndex","getUnitWithIndex","getDamageMetrics","DistributionMetricsProto","getActionMetrics","joinById","getPlayerAndPetActions","action","forTarget","getSpellMetrics","hitAttempts","isMeleeAction","getMeleeMetrics","getResourceMetrics","resource","getBuffMetrics","getDebuffMetrics","uptimePercent","makeNew","resultData","raidPromise","encounterPromise","metrics","numParties","partyIndex","numPlayers","makeNewPlayer","petActionId","isPlayer","classColor","dpsLogs","fromLogs","threatLogs","auraUptimeLogs","majorCooldownLogs","groupedResourceLogs","populateActiveAuras","majorCooldownAuraUptimeLogs","mcdLog","auraLog","getTargetIndex","maxThreat","totalDamage","pet","getActionsForDisplay","getMeleeActions","getSpellActions","getHealingActions","playerLogs","actionsPromise","actionMetrics","aurasPromise","auraMetrics","resourcesPromise","resourceMetrics","petsPromise","petMetrics","petIdPromise","fromPetName","playerMetrics","unit","targetLogs","targetMetrics","numTargets","makeNewTarget","durationSeconds","averageProcs","ppm","removeTag","actionIdOverride","firstAura","AuraMetricsProto","useTag","groupById","aurasToJoin","merge","gainPerSecond","avgGain","wastedGain","firstResource","ResourceMetricsProto","resourcesToJoin","tam","combinedMetrics","castsPerMinute","avgCastTimeMs","hpm","totalHealing","manaMetrics","r","healingThroughput","avgCast","avgCastHealing","avgCastThreat","landedHits","avgHit","avgHitThreat","critPercent","missPercent","dodgePercent","parryPercent","blockPercent","glancePercent","targetData","ActionMetricsProto","firstAction","maxTargets","mergedTargets","actionsToJoin","landedHitsRaw","timeSpentCastingMs","lhr","TargetedActionMetricsProto","addRaidSimAction","simUI","addAction","runSim","progress","resultsManager","setSimProgress","RaidSimResultsManager","simResultEmitter","simResult","setSimResult","currentChangeEmitter","referenceChangeEmitter","currentData","referenceData","resultsViewer","setContent","RaidProto","EncounterProto","raidProto","encounterProto","makeToplineResultsContent","setResultTippy","tippyContent","resultDivElem","contentElem","placement","isIndividualSim","simReferenceSetButton","updateReference","simReferenceSwapButton","swapEventID","tmpData","simReferenceDeleteButton","simReferenceElem","simReferenceDpsDiffElem","currentDpsMetrics","simReferenceHpsDiffElem","currentHpsMetrics","simReferenceTtoDiffElem","simReferenceTpsDiffElem","simReferenceDtpsDiffElem","simReferenceCodDiffElem","curPlayerMetrics","refPlayerMetrics","getRunData","getCurrentData","getReferenceData","dpsMetrics","tpsMetrics","dtpsMetrics","targetActions","mergedActions","hpsMetrics"],"mappings":"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,iBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,EACb2B,eAAkB,CACjBtB,OAAU,EACV4B,OAAU,IAGZ,CACCrhF,UAAa,eACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,EACb2B,eAAkB,CACjBtB,OAAU,EACV4B,OAAU,IAGZ,CACCrhF,UAAa,iBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,eACb8pD,SAAY,CACX21B,OAAU,GACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,KAIhB,CACCpjF,KAAQ,eACRykF,cAAiB,sEACjB/jE,QAAW,CACV,CACC1c,UAAa,yBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,aACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,cACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,aACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,sBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,cACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,iBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,qBACb8pD,SAAY,CACX21B,OAAU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B,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,cACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,EACb2B,eAAkB,CACjBtB,OAAU,EACV4B,OAAU,IAGZ,CACCrhF,UAAa,cACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,OACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,GAEd,CACCp/E,UAAa,iBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,qBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,aACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,gBACb8pD,SAAY,CACX21B,OAAU,GACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,KAIhB,CACCpjF,KAAQ,OACRykF,cAAiB,qEACjB/jE,QAAW,CACV,CACC1c,UAAa,oBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,eACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,mBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,SACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,uBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,gBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,gBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,SACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,YACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,GAEd,CACCp/E,UAAa,cACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,iBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,gBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,mBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,kBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,eACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,YACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,EACb2B,eAAkB,CACjBtB,OAAU,EACV4B,OAAU,IAGZ,CACCrhF,UAAa,eACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,YACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,aACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,aACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,EACb2B,eAAkB,CACjBtB,OAAU,EACV4B,OAAU,IAGZ,CACCrhF,UAAa,aACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,eACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,gBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,cACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,EACb2B,eAAkB,CACjBtB,OAAU,EACV4B,OAAU,IAGZ,CACCrhF,UAAa,gBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,EACb2B,eAAkB,CACjBtB,OAAU,EACV4B,OAAU,IAGZ,CACCrhF,UAAa,YACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,UACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,aACb8pD,SAAY,CACX21B,OAAU,GACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,KAIhB,CACCpjF,KAAQ,QACRykF,cAAiB,qEACjB/jE,QAAW,CACV,CACC1c,UAAa,YACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,oBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,WACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,YACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,eACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,YACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,aACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,cACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,WACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,GAEd,CACCp/E,UAAa,mBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,cACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,kBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,UACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MA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4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,cACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,GAEd,CACCp/E,UAAa,cACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,eACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,aACb8pD,SAAY,CACX21B,OAAU,GACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,KAIhB,CACCpjF,KAAQ,OACRykF,cAAiB,sEACjB/jE,QAAW,CACV,CACC1c,UAAa,oBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,eACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,UACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,4BACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,iBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,KACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,iBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,eACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,GAEd,CACCp/E,UAAa,aACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,qBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,0BACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,kBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,SACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,YACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,YACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,GAEd,CACCp/E,UAAa,oBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,wBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,SACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,gBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,cACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,EACb2B,eAAkB,CACjBtB,OAAU,EACV4B,OAAU,IAGZ,CACCrhF,UAAa,oBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,iBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,0BACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,aACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,GAEd,CACCp/E,UAAa,UACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,EACb2B,eAAkB,CACjBtB,OAAU,EACV4B,OAAU,IAGZ,CACCrhF,UAAa,aACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,EACb2B,eAAkB,CACjBtB,OAAU,EACV4B,OAAU,IAGZ,CACCrhF,UAAa,eACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,aACb8pD,SAAY,CACX21B,OAAU,GACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,KAIhB,CACCpjF,KAAQ,aACRykF,cAAiB,sEACjB/jE,QAAW,CACV,CACC1c,UAAa,oBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,uBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,sBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,SACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,eACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,YACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,GAEd,CACCp/E,UAAa,kBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,gBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,YACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,0BACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,iBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,WACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,sBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,iBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,GAEd,CACCp/E,UAAa,WACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,gCACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,0BACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,U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Cp/E,UAAa,aACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,eACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,cACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,eACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,gCACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,UACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,GAEd,CACCp/E,UAAa,iBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,mBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,kBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,EACb2B,eAAkB,CACjBtB,OAAU,EACV4B,OAAU,IAGZ,CACCrhF,UAAa,kBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,WACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,gBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,uBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,cACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,GAEd,CACCp/E,UAAa,kBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,EACb2B,eAAkB,CACjBtB,OAAU,EACV4B,OAAU,IAGZ,CACCrhF,UAAa,oBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,aACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,WACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,GAEd,CACCp/E,UAAa,wBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,sBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,aACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,gBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,GAEd,CACCp/E,UAAa,sBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,cACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,GAEd,CACCp/E,UAAa,kBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,cACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,oBACb8pD,SAAY,CACX21B,OAAU,GACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,KAKhB,CACCpjF,KAAQ,QACRykF,cAAiB,sEACjB/jE,QAAW,CACV,CACC1c,UAAa,mBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,oBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,YACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,WACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,WACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,oBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,YACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,EACb2B,eAAkB,CACjBtB,OAAU,EACV4B,OAAU,IAGZ,CACCrhF,UAAa,YACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,GAEd,CACCp/E,UAAa,eACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,iBACb8pD,SAAY,CACX21B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D,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,eACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,WACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,WACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,kBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,GAEd,CACCp/E,UAAa,eACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,kBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,iBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,eACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,OAED1D,UAAa,GAEd,CACCp/E,UAAa,WACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,MACA,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,QACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,cACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,OAED1D,UAAa,GAEd,CACCp/E,UAAa,mBACb8pD,SAAY,CACX21B,OAAU,EACV4B,OAAU,GAEXyB,SAAY,CACX,MACA,MACA,OAED1D,UAAa,GAEd,CACCp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"}