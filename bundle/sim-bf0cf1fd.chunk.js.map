{"version":3,"file":"sim-bf0cf1fd.chunk.js","sources":["../../../ui/rogue/presets.ts","../../../ui/rogue/inputs.ts","../../../ui/rogue/sim.ts"],"sourcesContent":["import { BattleElixir, Flask } from '../core/proto/common.js';\nimport { Conjured } from '../core/proto/common.js';\nimport { Consumes } from '../core/proto/common.js';\n\nimport { EquipmentSpec } from '../core/proto/common.js';\nimport { Food } from '../core/proto/common.js';\nimport { Glyphs } from '../core/proto/common.js';\nimport { Potions } from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tRogue_Rotation as RogueRotation,\n\tRogue_Options as RogueOptions,\n\tRogue_Options_PoisonImbue as Poison,\n\tRogueMajorGlyph,\n\tRogue_Rotation_Frequency,\n\tRogue_Rotation_AssassinationPriority,\n\tRogue_Rotation_CombatPriority,\n} from '../core/proto/rogue.js';\n\nimport * as Tooltips from '../core/constants/tooltips.js';\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const CombatTalents = {\n\tname: 'Combat',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '00532000523-0252051050035010223100501251',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: RogueMajorGlyph.GlyphOfKillingSpree,\n\t\t\tmajor2: RogueMajorGlyph.GlyphOfTricksOfTheTrade,\n\t\t\tmajor3: RogueMajorGlyph.GlyphOfRupture,\n\t\t})\n\t}),\n};\n\nexport const AssassinationTalents = {\n\tname: 'Assassination',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '005303005352100520103331051-005005003-502',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: RogueMajorGlyph.GlyphOfMutilate,\n\t\t\tmajor2: RogueMajorGlyph.GlyphOfTricksOfTheTrade,\n\t\t\tmajor3: RogueMajorGlyph.GlyphOfHungerForBlood,\n\t\t})\n\t}),\n};\n\nexport const DefaultRotation = RogueRotation.create({\n\texposeArmorFrequency: Rogue_Rotation_Frequency.Never,\n\tminimumComboPointsExposeArmor: 4,\n\ttricksOfTheTradeFrequency: Rogue_Rotation_Frequency.Maintain,\n\tassassinationFinisherPriority: Rogue_Rotation_AssassinationPriority.EnvenomRupture,\n\tcombatFinisherPriority: Rogue_Rotation_CombatPriority.RuptureEviscerate,\n\tminimumComboPointsPrimaryFinisher: 3,\n\tminimumComboPointsSecondaryFinisher: 2,\n});\n\nexport const DefaultOptions = RogueOptions.create({\n\tmhImbue: Poison.DeadlyPoison,\n\tohImbue: Poison.InstantPoison,\n  applyPoisonsManually: false,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.PotionOfSpeed,\n\tdefaultConjured: Conjured.ConjuredRogueThistleTea,\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodMegaMammothMeal,\n});\n\nexport const PRERAID_PRESET_ASSASSINATION = {\n\tname: 'Pre-Raid Assassination',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n    {\n      \"id\": 42550,\n      \"enchant\": 44879,\n      \"gems\": [\n        41398,\n        40058\n      ]\n    },\n    {\n      \"id\": 40678\n    },\n    {\n      \"id\": 43481,\n      \"enchant\": 44871\n    },\n    {\n      \"id\": 38614,\n      \"enchant\": 55002\n    },\n    {\n      \"id\": 39558,\n      \"enchant\": 44489,\n      \"gems\": [\n        40003,\n        42702\n      ]\n    },\n    {\n      \"id\": 34448,\n      \"enchant\": 44484,\n      \"gems\": [\n        40003,\n        0\n      ]\n    },\n    {\n      \"id\": 39560,\n      \"enchant\": 54999,\n      \"gems\": [\n        40058,\n        0\n      ]\n    },\n    {\n      \"id\": 40694,\n      \"gems\": [\n        40003,\n        40003\n      ]\n    },\n    {\n      \"id\": 37644,\n      \"enchant\": 38374\n    },\n    {\n      \"id\": 34575,\n      \"enchant\": 55016,\n      \"gems\": [\n        40003\n      ]\n    },\n    {\n      \"id\": 40586\n    },\n    {\n      \"id\": 37642\n    },\n    {\n      \"id\": 40684\n    },\n    {\n      \"id\": 44253\n    },\n    {\n      \"id\": 37856,\n      \"enchant\": 44492\n    },\n    {\n      \"id\": 37667,\n      \"enchant\": 44492\n    },\n    {\n      \"id\": 43612\n    }\n  ]}`),\n};\n\nexport const PRERAID_PRESET_COMBAT = {\n  name: 'Pre-Raid Combat',\n  tooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n  gear: EquipmentSpec.fromJsonString(`{\"items\": [\n    {\n      \"id\": 42550,\n      \"enchant\": 44879,\n      \"gems\": [\n        41398,\n        40014\n      ]\n    },\n    {\n      \"id\": 40678\n    },\n    {\n      \"id\": 37139,\n      \"enchant\": 44871,\n      \"gems\": [\n        39999\n      ]\n    },\n    {\n      \"id\": 34241,\n      \"enchant\": 55002,\n      \"gems\": [\n        40014\n      ]\n    },\n    {\n      \"id\": 39558,\n      \"enchant\": 44489,\n      \"gems\": [\n        39999,\n        40014\n      ]\n    },\n    {\n      \"id\": 34448,\n      \"enchant\": 44484,\n      \"gems\": [\n        39999,\n        0\n      ]\n    },\n    {\n      \"id\": 39560,\n      \"enchant\": 54999,\n      \"gems\": [\n        40014,\n        0\n      ]\n    },\n    {\n      \"id\": 40694,\n      \"gems\": [\n        42702,\n        39999\n      ]\n    },\n    {\n      \"id\": 37644,\n      \"enchant\": 38374\n    },\n    {\n      \"id\": 34575,\n      \"enchant\": 55016,\n      \"gems\": [\n        39999\n      ]\n    },\n    {\n      \"id\": 40586\n    },\n    {\n      \"id\": 37642\n    },\n    {\n      \"id\": 40684\n    },\n    {\n      \"id\": 44253\n    },\n    {\n      \"id\": 37693,\n      \"enchant\": 44492\n    },\n    {\n      \"id\": 37856,\n      \"enchant\": 44492\n    },\n    {\n      \"id\": 44504,\n      \"gems\": [\n        40053\n      ]\n    }\n  ]}`),\n}\n\nexport const P1_PRESET_ASSASSINATION = {\n\tname: 'P1 Assassination',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\n    {\n      \"id\": 40499,\n      \"enchant\": 44879,\n      \"gems\": [\n        41398,\n        42702\n      ]\n    },\n    {\n      \"id\": 44664,\n      \"gems\": [\n        40003\n      ]\n    },\n    {\n      \"id\": 40502,\n      \"enchant\": 44871,\n      \"gems\": [\n        40003\n      ]\n    },\n    {\n      \"id\": 40403,\n      \"enchant\": 55002\n    },\n    {\n      \"id\": 40539,\n      \"enchant\": 44489,\n      \"gems\": [\n        40003\n      ]\n    },\n    {\n      \"id\": 39765,\n      \"enchant\": 44484,\n      \"gems\": [\n        40003,\n        0\n      ]\n    },\n    {\n      \"id\": 40496,\n      \"enchant\": 54999,\n      \"gems\": [\n        40053,\n        0\n      ]\n    },\n    {\n      \"id\": 40260,\n      \"gems\": [\n        39999\n      ]\n    },\n    {\n      \"id\": 40500,\n      \"enchant\": 38374,\n      \"gems\": [\n        40003,\n        40003\n      ]\n    },\n    {\n      \"id\": 39701,\n      \"enchant\": 55016\n    },\n    {\n      \"id\": 40074\n    },\n    {\n      \"id\": 40474\n    },\n    {\n      \"id\": 40684\n    },\n    {\n      \"id\": 44253\n    },\n    {\n      \"id\": 39714,\n      \"enchant\": 44492\n    },\n    {\n      \"id\": 40386,\n      \"enchant\": 44492\n    },\n    {\n      \"id\": 40385\n    }\n  ]}`),\n}\n\nexport const P1_PRESET_COMBAT = {\n\tname: 'P1 Combat',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n    {\n      \"id\": 40499,\n      \"enchant\": 44879,\n      \"gems\": [\n        41398,\n        42702\n      ]\n    },\n    {\n      \"id\": 44664,\n      \"gems\": [\n        39999\n      ]\n    },\n    {\n      \"id\": 40502,\n      \"enchant\": 44871,\n      \"gems\": [\n        39999\n      ]\n    },\n    {\n      \"id\": 40403,\n      \"enchant\": 55002\n    },\n    {\n      \"id\": 40539,\n      \"enchant\": 44489,\n      \"gems\": [\n        39999\n      ]\n    },\n    {\n      \"id\": 39765,\n      \"enchant\": 44484,\n      \"gems\": [\n        39999,\n        0\n      ]\n    },\n    {\n      \"id\": 40541,\n      \"enchant\": 54999,\n      \"gems\": [\n        0\n      ]\n    },\n    {\n      \"id\": 40205,\n      \"gems\": [\n        39999\n      ]\n    },\n    {\n      \"id\": 44011,\n      \"enchant\": 38374,\n      \"gems\": [\n        39999,\n        39999\n      ]\n    },\n    {\n      \"id\": 39701,\n      \"enchant\": 55016\n    },\n    {\n      \"id\": 40074\n    },\n    {\n      \"id\": 40474\n    },\n    {\n      \"id\": 40684\n    },\n    {\n      \"id\": 44253\n    },\n    {\n      \"id\": 40383,\n      \"enchant\": 44492\n    },\n    {\n      \"id\": 39714,\n      \"enchant\": 44492\n    },\n    {\n      \"id\": 40385\n    }\n  ]}`),\n}","import { Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\nimport {\n\tRogue_Rotation_AssassinationPriority as AssassinationPriority,\n\tRogue_Rotation_CombatPriority as CombatPriority,\n\tRogue_Rotation_Frequency as Frequency,\n\tRogue_Options_PoisonImbue as Poison,\n} from '../core/proto/rogue.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const MainHandImbue = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecRogue, Poison>({\n\tfieldName: 'mhImbue',\n\tnumColumns: 1,\n\tvalues: [\n\t\t{ color: 'grey', value: Poison.NoPoison },\n\t\t{ actionId: ActionId.fromItemId(43233), value: Poison.DeadlyPoison },\n\t\t{ actionId: ActionId.fromItemId(43231), value: Poison.InstantPoison },\n\t\t{ actionId: ActionId.fromItemId(43235), value: Poison.WoundPoison },\n\t],\n});\n\nexport const OffHandImbue = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecRogue, Poison>({\n\tfieldName: 'ohImbue',\n\tnumColumns: 1,\n\tvalues: [\n\t\t{ color: 'grey', value: Poison.NoPoison },\n\t\t{ actionId: ActionId.fromItemId(43233), value: Poison.DeadlyPoison },\n\t\t{ actionId: ActionId.fromItemId(43231), value: Poison.InstantPoison },\n\t\t{ actionId: ActionId.fromItemId(43235), value: Poison.WoundPoison },\n\t],\n});\n\nexport const StartingOverkillDuration = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecRogue>({\n\tfieldName: 'startingOverkillDuration',\n\tlabel: 'Starting Overkill duration',\n\tlabelTooltip: 'Initial Overkill buff duration at the start of each iteration.',\n});\n\nexport const ApplyPoisonsManually = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecRogue>({\n\tfieldName: 'applyPoisonsManually',\n\tlabel: 'Configure poisons manually',\n\tlabelTooltip: 'Prevent automatic poison configuration that is based on equipped weapons.',\n});\n\nexport const RogueRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecRogue, Frequency>({\n\t\t\tfieldName: 'exposeArmorFrequency',\n\t\t\tlabel: 'Expose Armor',\n\t\t\tlabelTooltip: 'Frequency of Expose Armor casts.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Never', value: Frequency.Never },\n\t\t\t\t{ name: 'Cast Once', value: Frequency.Once },\n\t\t\t\t{ name: 'Maintain', value: Frequency.Maintain },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'minimumComboPointsExposeArmor',\n\t\t\tlabel: 'Minimum CP (Expose Armor)',\n\t\t\tlabelTooltip: 'Minimum number of combo points for Expose Armor when only cast once.',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getRotation().exposeArmorFrequency == Frequency.Once,\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecRogue, Frequency>({\n\t\t\tfieldName: 'tricksOfTheTradeFrequency',\n\t\t\tlabel: 'Tricks of the Trade',\n\t\t\tlabelTooltip: 'Frequency of Tricks of the Trade usage.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Never', value: Frequency.Never },\n\t\t\t\t{ name: 'Maintain', value: Frequency.Maintain },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'envenomPoolAmount',\n\t\t\tlabel: 'Energy Pooled (Envenom)',\n\t\t\tlabelTooltip: 'Amount of energy to pool before casting Envenom (beyond the cost).',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().mutilate\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecRogue, Frequency>({\n\t\t\tfieldName: 'multiTargetSliceFrequency',\n\t\t\tlabel: 'Multi-Target S&D',\n\t\t\tlabelTooltip: 'Frequency of Slice and Dice cast in multi-target scnearios.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Never', value: Frequency.Never },\n\t\t\t\t{ name: 'Once', value: Frequency.Once },\n\t\t\t\t{ name: 'Maintain', value: Frequency.Maintain },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getRotation().multiTargetSliceFrequency != Frequency.FrequencyUnknown\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'minimumComboPointsMultiTargetSlice',\n\t\t\tlabel: 'Minimum CP (Slice)',\n\t\t\tlabelTooltip: 'Minimum number of combo points spent if Slice and Dice has frequency: Once',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getRotation().multiTargetSliceFrequency == Frequency.Once\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'openWithGarrote',\n\t\t\tlabel: 'Open with Garrote',\n\t\t\tlabelTooltip: 'Open the encounter by casting Garrote.',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().mutilate\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'useFeint',\n\t\t\tlabel: 'Use Feint',\n\t\t\tlabelTooltip: 'Cast Feint on cooldown. Mainly useful when using the associate glyph.'\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'allowCpUndercap',\n\t\t\tlabel: 'Undercap CP',\n\t\t\tlabelTooltip: 'Cast Envenom at 3 cp if the Envenom buff is missing.',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().mutilate\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'allowCpOvercap',\n\t\t\tlabel: 'Overcap CP',\n\t\t\tlabelTooltip: 'Cast Mutilate at 4 cp if the Envenom buff will last long enough.',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().mutilate\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'ruptureForBleed',\n\t\t\tlabel: 'Rupture for Bleed',\n\t\t\tlabelTooltip: 'Cast Rupture as needed to apply a bleed effect for Hunger for Blood',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().hungerForBlood\n\t\t}),\n\t],\n};\n","import { RaidBuffs, WeaponType } from '../core/proto/common.js';\nimport { PartyBuffs } from '../core/proto/common.js';\nimport { IndividualBuffs } from '../core/proto/common.js';\nimport { Debuffs } from '../core/proto/common.js';\nimport { ItemSlot } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Stat } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js'\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\n\nimport {\n\tRogue_Rotation_AssassinationPriority as AssassinationPriority,\n\tRogue_Rotation_CombatPriority as CombatPriority,\n\tRogue_Rotation_Frequency as Frequency,\n\tRogueMajorGlyph,\n\tRogue_Options_PoisonImbue,\n} from '../core/proto/rogue.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as Mechanics from '../core/constants/mechanics.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Tooltips from '../core/constants/tooltips.js';\n\nimport * as RogueInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nexport class RogueSimUI extends IndividualSimUI<Spec.SpecRogue> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecRogue>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'rogue-sim-ui',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t\t'Rotations are not fully optimized, especially for non-standard setups.',\n\t\t\t\t'Subtlety specs are not currently supported.'\n\t\t\t],\n\t\t\twarnings: [\n\t\t\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tupdateOn: simUI.sim.encounter.changeEmitter,\n\t\t\t\t\t\tgetContent: () => {\n\t\t\t\t\t\t\tvar hasNoArmor = false\n\t\t\t\t\t\t\tfor (const target of simUI.sim.encounter.getTargets()) {\n\t\t\t\t\t\t\t\tif (target.getStats().getStat(Stat.StatArmor) <= 0) {\n\t\t\t\t\t\t\t\t\thasNoArmor = true\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (hasNoArmor) {\n\t\t\t\t\t\t\t\treturn 'One or more targets have no armor! Check advanced encounter settings.';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\t\t\tgetContent: () => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tsimUI.player.getTalents().mutilate &&\n\t\t\t\t\t\t\t\t(simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponType != WeaponType.WeaponTypeDagger ||\n\t\t\t\t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponType != WeaponType.WeaponTypeDagger)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn '\\'Mutilate\\' talent selected, but daggers not equipped in both hands!';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\t\t\tgetContent: () => {\n\t\t\t\t\t\t\tif (simUI.player.getRotation().useFeint && !simUI.player.getMajorGlyphs().includes(RogueMajorGlyph.GlyphOfFeint)) {\n\t\t\t\t\t\t\t\treturn '\\'Use Feint\\' selected, but missing Glyph of Feint!';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\t\t\tgetContent: () => {\n\t\t\t\t\t\t\tconst mhWeaponSpeed = simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponSpeed;\n\t\t\t\t\t\t\tconst ohWeaponSpeed = simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponSpeed;\n\t\t\t\t\t\t\tconst mhImbue = simUI.player.getSpecOptions().mhImbue;\n\t\t\t\t\t\t\tconst ohImbue = simUI.player.getSpecOptions().ohImbue;\n\t\t\t\t\t\t\tif (typeof mhWeaponSpeed == 'undefined' || typeof ohWeaponSpeed == 'undefined' || !simUI.player.getSpecOptions().applyPoisonsManually) {\n\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((mhWeaponSpeed < ohWeaponSpeed) && (ohImbue == Rogue_Options_PoisonImbue.DeadlyPoison)) {\n\t\t\t\t\t\t\t\treturn 'Deadly poison applied to slower (off hand) weapon!';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((ohWeaponSpeed < mhWeaponSpeed) && (mhImbue == Rogue_Options_PoisonImbue.DeadlyPoison)) {\n\t\t\t\t\t\t\t\treturn 'Deadly poison applied to slower (main hand) weapon!';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatExpertise,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP.\n\t\t\tepReferenceStat: Stat.StatAttackPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatStamina,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatExpertise,\n\t\t\t],\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.PRERAID_PRESET_ASSASSINATION.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatAgility]: 1.89,\n\t\t\t\t\t[Stat.StatStrength]: 1.17,\n\t\t\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t\t\t[Stat.StatMeleeHit]: 1.65,\n\t\t\t\t\t[Stat.StatMeleeCrit]: 1.11,\n\t\t\t\t\t[Stat.StatMeleeHaste]: 1.27,\n\t\t\t\t\t[Stat.StatArmorPenetration]: 0.3,\n\t\t\t\t\t[Stat.StatExpertise]: 1.69,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.AssassinationTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: RaidBuffs.create({\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tbloodlust: true,\n\t\t\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\t\t\t\t\ticyTalons: true,\n\t\t\t\t\tleaderOfThePack: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tabominationsMight: true,\n\t\t\t\t\tswiftRetribution: true,\n\t\t\t\t\telementalOath: true,\n\t\t\t\t\tsanctifiedRetribution: true,\n\t\t\t\t}),\n\t\t\t\tpartyBuffs: PartyBuffs.create({\n\t\t\t\t}),\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\t\t\tblessingOfKings: true,\n\t\t\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tdebuffs: Debuffs.create({\n\t\t\t\t\theartOfTheCrusader: true,\n\t\t\t\t\tmangle: true,\n\t\t\t\t\tsunderArmor: true,\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tshadowMastery: true,\n\t\t\t\t\tearthAndMoon: true,\n\t\t\t\t\tbloodFrenzy: true,\n\t\t\t\t}),\n\t\t\t},\n\n\t\t\tplayerInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tRogueInputs.ApplyPoisonsManually\n\t\t\t\t]\n\t\t\t},\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t\tRogueInputs.MainHandImbue,\n\t\t\t\tRogueInputs.OffHandImbue,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationInputs: RogueInputs.RogueRotationConfig,\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.SpellCritBuff,\n\t\t\t\tIconInputs.SpellCritDebuff,\n\t\t\t\tIconInputs.SpellHitDebuff,\n\t\t\t\tIconInputs.SpellDamageDebuff\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tRogueInputs.StartingOverkillDuration,\n\t\t\t\t\tOtherInputs.StartingConjured,\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t\tOtherInputs.InFrontOfTarget,\n\t\t\t\t],\n\t\t\t},\n\t\t\tadditionalIconSections: {\n\t\t\t},\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: false,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.AssassinationTalents,\n\t\t\t\t\tPresets.CombatTalents,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.PRERAID_PRESET_ASSASSINATION,\n\t\t\t\t\tPresets.PRERAID_PRESET_COMBAT,\n\t\t\t\t\tPresets.P1_PRESET_ASSASSINATION,\n\t\t\t\t\tPresets.P1_PRESET_COMBAT,\n\t\t\t\t],\n\t\t\t},\n\t\t})\n\t\tthis.player.changeEmitter.on((c) => {\n\t\t\tconst rotation = this.player.getRotation()\n\t\t\tconst options = this.player.getSpecOptions()\n\t\t\tconst encounter = this.sim.encounter\n\t\t\tif (this.player.getTalents().mutilate) {\n\t\t\t\tif (rotation.assassinationFinisherPriority == AssassinationPriority.AssassinationPriorityUnknown) {\n\t\t\t\t\trotation.assassinationFinisherPriority = Presets.DefaultRotation.assassinationFinisherPriority;\n\t\t\t\t}\n\t\t\t\trotation.combatFinisherPriority = CombatPriority.CombatPriorityUnknown;\n\t\t\t} else {\n\t\t\t\trotation.assassinationFinisherPriority = AssassinationPriority.AssassinationPriorityUnknown;\n\t\t\t\tif (rotation.combatFinisherPriority == CombatPriority.CombatPriorityUnknown) {\n\t\t\t\t\trotation.combatFinisherPriority = Presets.DefaultRotation.combatFinisherPriority;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.player.setRotation(c, rotation)\n\t\t\tif (!options.applyPoisonsManually) {\n\t\t\t\tconst mhWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponSpeed;\n\t\t\t\tconst ohWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponSpeed;\n\t\t\t\tif (typeof mhWeaponSpeed == 'undefined' || typeof ohWeaponSpeed == 'undefined') {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (encounter.getNumTargets() > 3) {\n\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t} else {\n\t\t\t\t\tif (mhWeaponSpeed <= ohWeaponSpeed) { \n\t\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.DeadlyPoison \n\t\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\t} else {\n\t\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.DeadlyPoison\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.player.setSpecOptions(c, options)\n\t\t});\n\t\tthis.sim.encounter.changeEmitter.on((c) => {\n\t\t\tconst rotation = this.player.getRotation()\n\t\t\tconst options = this.player.getSpecOptions()\n\t\t\tconst encounter = this.sim.encounter\n\t\t\tif (this.sim.encounter.getNumTargets() > 3) {\n\t\t\t\tif (rotation.multiTargetSliceFrequency == Frequency.FrequencyUnknown) {\n\t\t\t\t\trotation.multiTargetSliceFrequency = Presets.DefaultRotation.multiTargetSliceFrequency;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trotation.multiTargetSliceFrequency = Frequency.FrequencyUnknown;\n\t\t\t}\n\t\t\tthis.player.setRotation(c, rotation)\n\t\t\tif (!options.applyPoisonsManually) {\n\t\t\t\tconst mhWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponSpeed;\n\t\t\t\tconst ohWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponSpeed;\n\t\t\t\tif (typeof mhWeaponSpeed == 'undefined' || typeof ohWeaponSpeed == 'undefined') {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (encounter.getNumTargets() > 3) {\n\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t} else {\n\t\t\t\t\tif (mhWeaponSpeed <= ohWeaponSpeed) { \n\t\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.DeadlyPoison \n\t\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\t} else {\n\t\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.DeadlyPoison\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.player.setSpecOptions(c, options)\n\t\t});\n\t}\n}\n"],"names":["CombatTalents","name","data","SavedTalents","create","talentsString","glyphs","Glyphs","major1","RogueMajorGlyph","GlyphOfKillingSpree","major2","GlyphOfTricksOfTheTrade","major3","GlyphOfRupture","AssassinationTalents","GlyphOfMutilate","GlyphOfHungerForBlood","DefaultRotation","RogueRotation","exposeArmorFrequency","Rogue_Rotation_Frequency","Never","minimumComboPointsExposeArmor","tricksOfTheTradeFrequency","Maintain","assassinationFinisherPriority","Rogue_Rotation_AssassinationPriority","EnvenomRupture","combatFinisherPriority","Rogue_Rotation_CombatPriority","RuptureEviscerate","minimumComboPointsPrimaryFinisher","minimumComboPointsSecondaryFinisher","DefaultOptions","RogueOptions","mhImbue","Poison","DeadlyPoison","ohImbue","InstantPoison","applyPoisonsManually","DefaultConsumes","Consumes","defaultPotion","Potions","PotionOfSpeed","defaultConjured","Conjured","ConjuredRogueThistleTea","flask","Flask","FlaskOfEndlessRage","food","Food","FoodMegaMammothMeal","PRERAID_PRESET_ASSASSINATION","tooltip","Tooltips.BASIC_BIS_DISCLAIMER","gear","EquipmentSpec","fromJsonString","PRERAID_PRESET_COMBAT","P1_PRESET_ASSASSINATION","P1_PRESET_COMBAT","MainHandImbue","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","numColumns","values","color","value","NoPoison","actionId","ActionId","fromItemId","WoundPoison","OffHandImbue","StartingOverkillDuration","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","ApplyPoisonsManually","InputHelpers.makeSpecOptionsBooleanInput","RogueRotationConfig","inputs","InputHelpers.makeRotationEnumInput","Frequency","Once","InputHelpers.makeRotationNumberInput","showWhen","player","getRotation","getTalents","mutilate","multiTargetSliceFrequency","FrequencyUnknown","InputHelpers.makeRotationBooleanInput","hungerForBlood","RogueSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","knownIssues","warnings","simUI","updateOn","sim","encounter","changeEmitter","getContent","hasNoArmor","target","getTargets","getStats","getStat","Stat","StatArmor","getGear","getEquippedItem","ItemSlot","ItemSlotMainHand","item","weaponType","WeaponType","WeaponTypeDagger","ItemSlotOffHand","useFeint","getMajorGlyphs","includes","GlyphOfFeint","mhWeaponSpeed","weaponSpeed","ohWeaponSpeed","getSpecOptions","Rogue_Options_PoisonImbue","epStats","StatAgility","StatStrength","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","epReferenceStat","displayStats","StatHealth","StatStamina","StatSpellHit","defaults","Presets.PRERAID_PRESET_ASSASSINATION","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","talents","Presets.AssassinationTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","bloodlust","strengthOfEarthTotem","icyTalons","leaderOfThePack","abominationsMight","swiftRetribution","elementalOath","sanctifiedRetribution","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","debuffs","Debuffs","heartOfTheCrusader","mangle","sunderArmor","faerieFire","shadowMastery","earthAndMoon","bloodFrenzy","playerInputs","RogueInputs.ApplyPoisonsManually","playerIconInputs","RogueInputs.MainHandImbue","RogueInputs.OffHandImbue","rotationInputs","RogueInputs.RogueRotationConfig","includeBuffDebuffInputs","IconInputs.SpellCritBuff","IconInputs.SpellCritDebuff","IconInputs.SpellHitDebuff","IconInputs.SpellDamageDebuff","excludeBuffDebuffInputs","otherInputs","RogueInputs.StartingOverkillDuration","OtherInputs.StartingConjured","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","additionalIconSections","encounterPicker","showExecuteProportion","presets","Presets.CombatTalents","Presets.PRERAID_PRESET_COMBAT","Presets.P1_PRESET_ASSASSINATION","Presets.P1_PRESET_COMBAT","this","on","c","options","AssassinationPriority","AssassinationPriorityUnknown","CombatPriority","CombatPriorityUnknown","setRotation","getNumTargets","setSpecOptions"],"mappings":"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"}